/**
 * Clase que contiene métodos estáticos de utilidades
 */
package es.caixagalicia.anpm.batch.prestamos.comun;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Date;
import org.apache.commons.lang.CharEncoding;
import org.springframework.core.io.AbstractResource;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mensajes.Mensaje;
import es.caixagalicia.ifrt.core.ServicioNegocio;

/**
 * @author NCG
 */
public final class Util {

    private static final LogHelper logger = LogHelper.getLog(Util.class);

    private static final String RETURN = "\n";

    private AbstractResource fichero;

    private Util() {
        super();
    }

    /**
     * Método que registra en un fichero una excepción producida durante el
     * procesado de un item
     *
     * @param mensaje
     */
    public void grabarIncidencia(String mensaje) {
        Date fechaHoy = new Date();
        String tms = DateHelper.getInstance().formatearFecha(DateHelper.FORMATO_DB2_TIMESTAMP, fechaHoy);
        String lineaDatos = String.format("%1$-16s", tms.substring(0, 19)) + "   " + mensaje + RETURN;
        /*String directorioPrincipal = null;
		String rutaCompleta = null;
		String nombreFichero = null;
		String rutaCompletaCorrecta = null;*/
        logger.debug("TRAZA_ANPM_300 dentro de Util.grabarIncidencia()");
        BufferedWriter bw = null;
        String nombreFichero = "";
        try {
            logger.debug("TRAZA_ANPM_300 dentro de Util.grabarIncidencia() y del try");
            /*directorioPrincipal = fichero.getFile().getParent();
			rutaCompleta = fichero.getFile().getPath();
			nombreFichero = fichero.getFile().getName();
			*/
            // rutaCompletaCorrecta = directorioPrincipal.concat("/ANPM001D/").concat(nombreFichero);
            logger.debug("TRAZA ANPM_300 fichero.getFile().getParent() == ".concat(fichero.getFile().getParent()));
            logger.debug("TRAZA ANPM_300 fichero.getFile().getPath() == ".concat(fichero.getFile().getPath()));
            // logger.debug("TRAZA ANPM_300 nombreFichero == ".concat(nombreFichero));
            // logger.debug("TRAZA ANPM_300 rutaCompletaCorrecta == ".concat(rutaCompletaCorrecta));
            File fileCorrecto = fichero.getFile();
            nombreFichero = fileCorrecto.getAbsolutePath();
            // if (! fichero.exists())
            if (!fileCorrecto.exists()) {
                // fichero.createNewFile();
                // en caso de que no exista, se trata de crear el directorio
                /*
				if (null != fichero.getFile().getParent())
				{
					new File(fichero.getFile().getParent()).mkdirs();
				}

				// ESTO FUNCIONA EN EL CELERRA NUEVO
				FileOutputStream fileSalida = new FileOutputStream(fichero.getFile());
				fileSalida.close();
				*/
                /*2014 Hay que modificar la ruta del fichero de incidencias, concretamente añadirle 
				 *  la subcarpeta ANPM001D */
                // bw = new BufferedWriter(new FileWriter(fichero.getFile()));
                logger.debug("TRAZA ANPM_300 rutaCompletaCorrecta == ".concat(fileCorrecto.toString()));
                FileOutputStream fileSalidaCorrecto = new FileOutputStream(fileCorrecto);
                fileSalidaCorrecto.close();
                bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileCorrecto), CharEncoding.ISO_8859_1));
                // $OP-LBL-NL-2$ $OP-LBL-NL-3$
                String cabecera = String.format("%1$-19s", new Mensaje(ServicioNegocio.getContexto(), TIMESTAMP_PROCESO_1201958241).toString()) + "   " + new Mensaje(ServicioNegocio.getContexto(), MENSAJE_ERROR_1702720121).toString() + RETURN;
                bw.write(cabecera);
                bw.write(lineaDatos);
            } else {
                /*2014 Hay que modificar la ruta del fichero de incidencias, concretamente añadirle 
				 *  la subcarpeta ANPM001D */
                // bw = new BufferedWriter(new FileWriter(fichero.getFile(), true));
                bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileCorrecto, true), CharEncoding.ISO_8859_1));
                bw.write(lineaDatos);
            }
        } catch (IOException e) {
            // try
            // {
            // logger.error("ERROR CREANDO FICHERO " + fichero.getFile().getAbsolutePath(), e);
            logger.error("ERROR CREANDO FICHERO " + nombreFichero, e);
        // }
        /*
			catch (IOException e1)
			{
				logger.error("ERROR CREANDO FICHERO ", e);
			}
			*/
        } finally {
            if (null != bw) {
                try {
                    bw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * @return fichero
     */
    public AbstractResource getFichero() {
        return fichero;
    }

    /**
     * @param fichero
     */
    public void setFichero(AbstractResource fIchero) {
        fichero = fIchero;
    }

    private static final String TIMESTAMP_PROCESO_1201958241 = "TIMESTAMP_PROCESO_1201958241";

    private static final String MENSAJE_ERROR_1702720121 = "MENSAJE_ERROR_1702720121";
}
