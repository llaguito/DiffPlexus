
/**
 * ANPM_307
 * Genera una nueva version de un expdiente con numero de solicitud 0 y un nuevo numero de versión
 * 
 * 
 * 
 */
package es.caixagalicia.anpm.prestamos.sindicados.servicios.fachada;

import java.math.BigDecimal;

import es.caixagalicia.anpm.prestamos.sindicados.SindicadosC;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.aplicacion.GestionSindicados;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.aplicacion.GestionTramos;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.fachada.contexto.ContextoSindicados;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;

import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;

public class GenerarVersionSrv extends ServicioNegocio{
		
	private static final String CTE_NUC_EXPEDIENTE = "NUC_EXPEDIENTE";
		

	
	/**
	 * Log de la clase.
	 */
	private static final LogHelper LOGGER = LogHelper.getLog(GenerarVersionSrv.class);
	
	
	/**
	 * Constructor sin parametros
	 */
	public GenerarVersionSrv(){
		super();
	}
	
	public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada){
		
	
		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO SNANPM307: Generar nueva version.");						
		}
		
				
		contexto.setDiarioElectronico(new DiarioElectronico(
				Constantes.CTE_OPERACION_AC,
				Integer.valueOf(0),
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Constantes.CTE_STRING_EMPTY,
                Constantes.CTE_STRING_EMPTY,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Integer.valueOf(0)));
		
		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("Obtenemos los parametros de entrada");
		}
		
		
		final BigDecimal nucExpedienteMatriz = datosEntrada.getDecimal(CTE_NUC_EXPEDIENTE);	
		BigDecimal error = BigDecimal.ZERO;
		String  descripcionError = "";

		GestionSindicados gs = new GestionSindicados();
		GestionDatosSolicitud gds = new GestionDatosSolicitud();
		
		// Borrar version incompleta si la hay
		gs.borrarVersionIncompleta(nucExpedienteMatriz);
		
		// Ultima version de la solicitd
		DatosSolicitudC	datosSolicitudUltimaVersion = gds.getUltimaVersion(nucExpedienteMatriz);
		BigDecimal numeroUltimaVersion = datosSolicitudUltimaVersion.getDatosSolicitudKey().getVersionSolicitud();
		
		// Nueva version con solicitud 0 y nuevo numero de versión	
		DatosSolicitudC datosSolicitudVersionNueva = gs.nuevaVersionAN25(datosSolicitudUltimaVersion);		
		BigDecimal numeroNuevaVersion = datosSolicitudVersionNueva.getDatosSolicitudKey().getVersionSolicitud();
		
		// Ultima version de matriz
		SindicadosC matrizUltimaVersion = gs.getSindicadoPorVersion(nucExpedienteMatriz, numeroUltimaVersion);
		// Nueva version con solicitud 0 y nuevo numero de versión
		if (matrizUltimaVersion == null)
		{
			error = BigDecimal.ONE;
			descripcionError = "Error en  AN38 ";
		}
		else
		{
			SindicadosC sindicadoNuevaVersion = gs.generarVersionAN38(matrizUltimaVersion, numeroNuevaVersion);
		
			GestionTramos.generarVersionTramos(nucExpedienteMatriz, numeroUltimaVersion, numeroNuevaVersion);

		}
		IContexto[] salida = new IContexto[1];
		IContexto contextoSalida = null;
				
		contextoSalida = ContextoSindicados.rellenarDatosContextoAltaMod(null, error, descripcionError);
		salida[0] = contextoSalida;		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN SNANPM307: Generar nueva version.");						
		}
		
		return salida;
	}
		
}
