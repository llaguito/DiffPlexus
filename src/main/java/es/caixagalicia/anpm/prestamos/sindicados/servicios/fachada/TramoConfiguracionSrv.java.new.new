/**
 * ANPM_304 (ANYG)
 *
 * Solicitud del expediente de tramo. Ya existe el microexpediente de tramo y se completan los datos de la solicitud
 */
package es.caixagalicia.anpm.prestamos.sindicados.servicios.fachada;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.List;
import org.apache.commons.lang.StringUtils;
import es.caixagalicia.anpm.prestamos.sindicados.ConstantesSindicados;
import es.caixagalicia.anpm.prestamos.sindicados.SindicadosC;
import es.caixagalicia.anpm.prestamos.sindicados.persistencia.tramos.TramoC;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.aplicacion.GestionSindicados;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.aplicacion.GestionTramos;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.fachada.contexto.ContextoSindicados;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

public class TramoConfiguracionSrv extends ServicioNegocio {

    private static final String CTE_NUC_EXPEDIENTE = "NUC_MICROEXPEDIENTE";

    private static final String CTE_OFICINA = "OFICINA";

    private static final String CTE_NUMERO = "NUMERO";

    private static final String CTE_DIGITO = "DIGITO";

    private static final String CTE_TRAMO = "TRAMO";

    private static final String CTE_TIRA_IMPORTE_MAX_PARTICPACION = "IMPORTE_MAX_PARTICIPACION";

    private static final String CTE_TIRA_IMPORTE_TOTAL = "IMPORTE_TOTAL";

    private static final String CTE_TIRA_IMPORTE_FORMALIZAR = "IMPORTE_FORMALIZAR";

    private static final String CTE_TIRA_MONEDA = "MONEDA";

    private static final String CTE_TIRA_FECVTO_FINAL = "FECHA_VCTO_FINAL";

    private static final String CTE_TIRA_DESCRIPCION = "DESCRIPCION";

    private static final String CTE_TIRA_FECVALOR = "FECHA_VALOR_FORMALIZACION";

    private static final String CTE_TIRA_FECLIMITE_DISPOSICION = "FECHA_LIMITE_DISPOSICION";

    private static final String CTE_TIRA_FECFIN_CARENCIA = "FECHA_FIN_CARENCIA";

    private static final String CTE_TIRA_TIPO_RIESGO = "TIPO_RIESGO";

    private static final String CTE_TIRA_IND_FECPAGO = "INDICADOR_FECHA_PAGO";

    private static final String CTE_TIRA_DIA = "DIA_PAGO";

    private static final String CTE_TIRA_MES = "MES_PAGO";

    private static final String CTE_TIRA_IND_FECLIQ = "INDICADOR_FECHA_LIQ";

    private static final String CTE_TIRA_IND_TRAT_FEST = "INDICADOR_TRAT_FESTIVOS";

    /**
     * Log de la clase.
     */
    private static final LogHelper LOGGER = LogHelper.getLog(TramoConfiguracionSrv.class);

    /**
     * Constructor sin parametros
     */
    public TramoConfiguracionSrv() {
        super();
    }

    public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO SNANPM268: Alta préstamos sindicados.");
        }
        BigDecimal error = BigDecimal.ZERO;
        String descripcionError = "";
        IContexto contextoSalida = null;
        IContexto[] salida = new IContexto[1];
        contexto.setDiarioElectronico(new DiarioElectronico(Constantes.CTE_OPERACION_AC, Integer.valueOf(0), BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, Constantes.CTE_STRING_EMPTY, Constantes.CTE_STRING_EMPTY, BigDecimal.ZERO, BigDecimal.ZERO, Integer.valueOf(0)));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Obtenemos los parametros de entrada");
        }
        final BigDecimal nucExpedienteTramo = datosEntrada.getDecimal(CTE_NUC_EXPEDIENTE);
        // En este punto el tramo siempre existe, ya que se ha dado de alta en la solicitud de matriz.
        // Al entrar en solicitud de tramo se genera una nueva version, asi que tenemos ya la ulitma version de tramo con solicitud 0
        TramoC tramoUltimaVersion = GestionTramos.getUltimaVersionTramo(nucExpedienteTramo);
        GestionDatosSolicitud gds = new GestionDatosSolicitud();
        DatosSolicitudC solicitudAN25UltimaVersion = gds.getUltimaVersionIncompleta(tramoUltimaVersion.getTramoKey().getBidNucExpedienteMatriz());
        BigDecimal version = solicitudAN25UltimaVersion.getDatosSolicitudKey().getVersionSolicitud();
        GestionSindicados gs = new GestionSindicados();
        SindicadosC sindicadoUltimaVersion = gs.getSindicadoPorVersion(tramoUltimaVersion.getTramoKey().getBidNucExpedienteMatriz(), version);
        final BigDecimal oficina = datosEntrada.getDecimal(CTE_OFICINA);
        // final BigDecimal numero = datosEntrada.getDecimal(CTE_NUMERO);
        final BigDecimal digito = datosEntrada.getDecimal(CTE_DIGITO);
        // final BigDecimal tramo = datosEntrada.getDecimal(CTE_TRAMO);
        final Date fechaMinima = new Date(DateUtils.dateLowest().getTime());
        BigDecimal tipoRiesgo = datosEntrada.getDecimal(CTE_TIRA_TIPO_RIESGO);
        if (null == tipoRiesgo) {
            tipoRiesgo = BigDecimal.ZERO;
        }
        final BigDecimal importeMaxParticipacion = datosEntrada.getDecimal(CTE_TIRA_IMPORTE_MAX_PARTICPACION);
        final BigDecimal importeTotal = datosEntrada.getDecimal(CTE_TIRA_IMPORTE_TOTAL);
        final BigDecimal importeFormalizar = datosEntrada.getDecimal(CTE_TIRA_IMPORTE_FORMALIZAR);
        // Validar importes tramo
        if (null != importeFormalizar && null != importeTotal && importeFormalizar.compareTo(importeTotal) > 0) {
            ServicioNegocio.rollback(ConstantesSindicados.ERROR_IMP_FORM, null, null, null);
        }
        // Validar importes tramo con matriz YA SE VALIDAN EN SOLICITUD, CUADNO SE DAN DE ALTA. EN CONFIGUARCION NO SE PUEDNE MODFICAR IMPORTES.
        // SI PASAN A SER MODIFICABLES SI QUE HABRIA UQE VALIDAR IGUAL QUE SE HACE EN TRAMOALTASRV.
        /*		BigDecimal impTotalTramos = BigDecimal.ZERO;
		BigDecimal impPartTramos = BigDecimal.ZERO;
		
		final List<TramoC> tramos = GestionTramos.getUltimaVersionTramos(sindicadoUltimaVersion.getSindicadosKey().getBidNucExpediente());
		
		if (null != tramos)
		{
			BigDecimal impTramo = BigDecimal.ZERO;
			BigDecimal impPart = BigDecimal.ZERO;
			for (TramoC tramoC : tramos)
			{
				if (null != tramoC.getBidImporteTotalTramo())
				{
					impTramo = tramoC.getBidImporteTotalTramo();
					// Contravalorar a moneda matriz, cuando matriz y tramo en distinta moneda
					if (!StringUtils.equals(tramoC.getStrMoneda(), solicitudAN25UltimaVersion.getMonedaImporteTotal()))
					{
						impTramo = UtilidadesTramitacion.calcularContravalor(
								tramoC.getStrMoneda(),
								tramoC.getBidImporteTotalTramo(),
								solicitudAN25UltimaVersion.getMonedaImporteTotal());					
					}
					
					impTotalTramos = impTotalTramos.add(impTramo);
									
					if (null != tramoC.getBidImporteMaxParticipacion())
					{
						impPart = tramoC.getBidImporteMaxParticipacion();
						// Contravalorar a moneda matriz, cuando matriz y tramo en distinta moneda
						if (StringUtils.isNotBlank(sindicadoUltimaVersion.getStrMonedaParticipacionEntidad())
								&& !StringUtils.equals(tramoC.getStrMoneda(), sindicadoUltimaVersion.getStrMonedaParticipacionEntidad()))
						{
							impPart = UtilidadesTramitacion.calcularContravalor(
									tramoC.getStrMoneda(),
									tramoC.getBidImporteMaxParticipacion(),
									solicitudAN25UltimaVersion.getMonedaImporteTotal());					
						}
						
						impPartTramos = impPartTramos.add(impPart);
					}					
				}
			}		
		}				
		
		if (impTotalTramos.compareTo(BigDecimal.ZERO) > 0)
		{
			final BigDecimal impTotalSind = solicitudAN25UltimaVersion.getImporteTotal();
			
			if (null != impTotalSind && impTotalTramos.compareTo(impTotalSind) > 0)
			{
				ServicioNegocio.rollback(ConstantesSindicados.ERROR_IMP_TOT, null,null, null);
			}		
		}

		if (impPartTramos.compareTo(BigDecimal.ZERO) > 0)
		{			
			final BigDecimal impPartSind = solicitudAN25UltimaVersion.getImporteSolicitado();
			if (null != impPartSind && impPartTramos.compareTo(impPartSind) > 0)
			{
				ServicioNegocio.rollback(ConstantesSindicados.ERROR_IMP_PART, null,null, null);
			}				
		}		
*/
        /* Fin validar importes*/
        final String moneda = datosEntrada.getString(CTE_TIRA_MONEDA);
        // final String fecValorFormalizacion = datosEntrada.getString(CTE_TIRA_FECVALOR);
        final java.util.Date datFechaHoy = DateHelper.getInstance().askTime();
        final String fecVtoFinal = datosEntrada.getString(CTE_TIRA_FECVTO_FINAL);
        Date datVtoFinal = fechaMinima;
        if (null != fecVtoFinal && !fecVtoFinal.trim().equals("")) {
            datVtoFinal = DateHelper.stringASqlDate(fecVtoFinal, DateHelper.FORMATO_DD_MM_YYYY_GUION);
            if (datVtoFinal.compareTo(datFechaHoy) <= 0) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_FECHA_ACTUAL, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), VENCIMIENTO_FINAL_1564798309).toString() }, null);
            } else if (null != sindicadoUltimaVersion.getFechaUltimoVcto() && datVtoFinal.compareTo(sindicadoUltimaVersion.getFechaUltimoVcto()) > 0) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_FECHA_VCTO_MATRIZ, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), VENCIMIENTO_FINAL_1564798309).toString() }, null);
            }
        }
        final String fecLimiteDisposicion = datosEntrada.getString(CTE_TIRA_FECLIMITE_DISPOSICION);
        Date datLimiteDisposicion = fechaMinima;
        if (null != fecLimiteDisposicion && !fecLimiteDisposicion.trim().equals("")) {
            datLimiteDisposicion = DateHelper.stringASqlDate(fecLimiteDisposicion, DateHelper.FORMATO_DD_MM_YYYY_GUION);
            if (datLimiteDisposicion.compareTo(datFechaHoy) <= 0) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_FECHA_ACTUAL, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), L_MITE_DISPOSICI_N_202086098).toString() }, null);
            } else if ((datVtoFinal.compareTo(fechaMinima) != 0) && (datLimiteDisposicion.compareTo(datVtoFinal) > 0)) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_FECHA_VCTO_TRAMO, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), L_MITE_DISPOSICI_N_202086098).toString() }, null);
            }
        }
        Date datFinCarencia = fechaMinima;
        final String fecFinCarencia = datosEntrada.getString(CTE_TIRA_FECFIN_CARENCIA);
        if (null != fecFinCarencia && !fecFinCarencia.trim().equals("")) {
            datFinCarencia = DateHelper.stringASqlDate(fecFinCarencia, DateHelper.FORMATO_DD_MM_YYYY_GUION);
            if (datFinCarencia.compareTo(datFechaHoy) <= 0) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_FECHA_ACTUAL, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), CARENCIA_6550498).toString() }, null);
            } else if ((datVtoFinal.compareTo(fechaMinima) != 0) && (datFinCarencia.compareTo(datVtoFinal) > 0)) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_FECHA_VCTO_TRAMO, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), CARENCIA_6550498).toString() }, null);
            }
        }
        BigDecimal indFecPago = datosEntrada.getDecimal(CTE_TIRA_IND_FECPAGO);
        if (null == indFecPago) {
            indFecPago = BigDecimal.ZERO;
        }
        BigDecimal diaPago = datosEntrada.getDecimal(CTE_TIRA_DIA);
        if (null == diaPago) {
            diaPago = BigDecimal.ZERO;
        }
        BigDecimal mesPago = datosEntrada.getDecimal(CTE_TIRA_MES);
        if (null == mesPago) {
            mesPago = BigDecimal.ZERO;
        }
        BigDecimal indUsoFestivos = datosEntrada.getDecimal(CTE_TIRA_IND_TRAT_FEST);
        if (null == indUsoFestivos) {
            indUsoFestivos = BigDecimal.ZERO;
        }
        BigDecimal indFecLiquidacion = datosEntrada.getDecimal(CTE_TIRA_IND_FECLIQ);
        if (null == indFecLiquidacion) {
            indFecLiquidacion = BigDecimal.ZERO;
        }
        final String descripcion = datosEntrada.getString(CTE_TIRA_DESCRIPCION);
        String campoNoValido = validacionDatosEntrada(oficina, digito, importeTotal, importeMaxParticipacion, importeFormalizar, fecVtoFinal);
        if ("".equals(campoNoValido)) {
            GestionTramos.altaVersionTramoConExpediente(moneda, importeMaxParticipacion, importeTotal, importeFormalizar, datVtoFinal, descripcion, tipoRiesgo, datLimiteDisposicion, datFinCarencia, indFecPago, diaPago, indUsoFestivos, indFecLiquidacion, tramoUltimaVersion);
        } else {
            error = BigDecimal.ONE;
            descripcionError = campoNoValido;
            contextoSalida = ContextoSindicados.rellenarDatosContextoAltaMod(null, error, descripcionError);
        }
        salida[0] = contextoSalida;
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN SNANPM268: Alta préstamos sindicados.");
        }
        return salida;
    }

    private String validacionDatosEntrada(BigDecimal oficinaSolicitud, BigDecimal bidDigitoSolicitud, BigDecimal importeTotal, BigDecimal importeMaxAbanca, BigDecimal importeFormalizar, String fechaUltVcto) {
        String campoNoValido = "";
        if (UtilidadesTramitacion.isBlankOrNull(oficinaSolicitud) || oficinaSolicitud.intValue() >= 10000) {
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), OFICINA_1546109685).toString();
        }
        if (UtilidadesTramitacion.isBlankOrNull(bidDigitoSolicitud) || bidDigitoSolicitud.intValue() >= 10) {
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), DIGITO_1331909406).toString();
        }
        if (UtilidadesTramitacion.isEmptyOrNullString(fechaUltVcto)) {
        // campoNoValido = "Fecha ultimo vcto";
        }
        return campoNoValido;
    }

    private static final String DIGITO_1331909406 = "DIGITO_1331909406";

    private static final String OFICINA_1546109685 = "OFICINA_1546109685";

    private static final String VENCIMIENTO_FINAL_1564798309 = "VENCIMIENTO_FINAL_1564798309";

    private static final String CARENCIA_6550498 = "CARENCIA_6550498";

    private static final String L_MITE_DISPOSICI_N_202086098 = "L_MITE_DISPOSICI_N_202086098";
}
