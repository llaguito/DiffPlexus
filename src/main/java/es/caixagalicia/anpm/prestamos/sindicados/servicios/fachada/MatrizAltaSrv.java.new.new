/**
 * Alta de una versión de matriz
 * Codigo de operacion: ANPM_268
 * Transaccion:         ANY8
 * Contexto de salida:  ANPMN104
 */
package es.caixagalicia.anpm.prestamos.sindicados.servicios.fachada;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.List;
import org.apache.commons.lang.StringUtils;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.sindicados.ConstantesSindicados;
import es.caixagalicia.anpm.prestamos.sindicados.SindicadosC;
import es.caixagalicia.anpm.prestamos.sindicados.persistencia.tramos.TramoC;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.aplicacion.GestionSindicados;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.aplicacion.GestionTramos;
import es.caixagalicia.anpm.prestamos.sindicados.servicios.fachada.contexto.ContextoSindicados;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.ResultadoDatosSolicitudVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

public class MatrizAltaSrv extends ServicioNegocio {

    private static final String CTE_COD_PRODUCTO = "CODIGO_PRODUCTO";

    private static final String CTE_COD_SUBPRODUCTO = "CODIGO_SUBPRODUCTO";

    private static final String CTE_COLECTIVO = "COLECTIVO";

    private static final String CTE_VERSION_GENERAL = "VERSION_GENERAL";

    private static final String CTE_OFICINA_SOLICITUD = "OFICINA_SOLICITUD";

    private static final String CTE_NUMERO_SOLICITUD = "NUMERO_SOLICITUD";

    private static final String CTE_VERSION_SOLICITUD = "VERSION_SOLICITUD";

    private static final String CTE_NUC_EXPEDIENTE = "NUC_EXPEDIENTE";

    private static final String CTE_DIGITO_SOLICITUD = "DIGITO_SOLICITUD";

    private static final String CTE_USUARIO = "USUARIO";

    private static final String CTE_INDICADOR_MODIFICACION = "INDICADOR_MODIFICACION";

    private static final String CTE_MODIFICACION_BO = "OPERACION_BO";

    private static final String CTE_CLASE_FINANCIACION = "CLASE_FINANCIACION";

    private static final String CTE_DESCRIPCION_CLASE_FINANCIACION = "DESCRIPCION_CLASE_FINANCIACION";

    private static final String CTE_TIPO_FINANCIACION = "TIPO_FINANCIACION";

    private static final String CTE_DESCRIPCION_TIPO_FINANCIACION = "DESCRIPCION_TIPO_FINANCIACION";

    private static final String CTE_SUBTIPO_FINANCIACION = "SUBTIPO_FINANCIACION";

    private static final String CTE_DESCRIPCION_SUBTIPO_FINANCIACION = "DESCRIPCION_SUBTIPO_FINANCIACION";

    private static final String CTE_CNAE = "CNAE";

    private static final String CTE_TIPO_GARANTIA = "GARANTIA";

    private static final String CTE_GARANTIA_MAYORITARIA = "GARANTIA_MAYORITARIA";

    private static final String CTE_SECTOR = "SECTOR";

    private static final String CTE_CLASE_RIESGO = "CLASE_RIESGO";

    private static final String CTE_IMPORTE_TOTAL = "IMPORTE_TOTAL";

    private static final String CTE_MONEDA_IMPORTE_TOTAL = "MONEDA_IMPORTE_TOTAL";

    private static final String CTE_IMPORTE_PARTICIPACION = "IMPORTE_PARTICIPACION";

    private static final String CTE_MONEDA_PARTICIPACION_ENTIDAD = "MONEDA_PARTICIPACION_ENTIDAD";

    private static final String CTE_FECHA_ULT_VCTO = "FECHA_ULT_VCTO";

    private static final String CTE_TIPO_SINDICADO = "TIPO_SINDICADO";

    private static final String CTE_TIPO_AGENTE = "TIPO_AGENTE";

    private static final String CTE_AGENTE = "AGENTE";

    private static final String CTE_ENTIDAD = "ENTIDAD";

    private static final String CTE_DESTINO_PRINCIPAL = "DESTINO_PRINCIPAL";

    private static final String CTE_OBSERVACIONES = "OBSERVACIONES";

    private static final String CTE_OBSERVACIONES_2 = "OBSERVACIONES_2";

    private static final String CTE_OBSERVACIONES_3 = "OBSERVACIONES_3";

    private static final String CTE_OBSERVACIONES_4 = "OBSERVACIONES_4";

    private static final String CTE_OBSERVACIONES_5 = "OBSERVACIONES_5";

    private static final String CTE_OBSERVACIONES_6 = "OBSERVACIONES_6";

    private static final String CTE_OBSERVACIONES_7 = "OBSERVACIONES_7";

    private static final String CTE_OBSERVACIONES_8 = "OBSERVACIONES_8";

    private static final String CTE_TIPO_EXPEDIENTE = "TIPO_EXPEDIENTE";

    private static final String CTE_ESPECIALIDAD = "ESPECIALIDAD";

    private static final String CTE_IMPORTE_MAXIMO = "IMPORTE_MAX_ABANCA";

    // private static final String CTE_COMPROBACION_BO = "S";
    // Pendiente de concesión
    private static final BigDecimal CTE_ESTADO_SOLICITUD = new BigDecimal(2);

    private static final int ERROR_IMP_TOT = 13957;

    /**
     * Log de la clase.
     */
    private static final LogHelper LOGGER = LogHelper.getLog(MatrizAltaSrv.class);

    /**
     * Constructor sin parametros
     */
    public MatrizAltaSrv() {
        super();
    }

    public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO SNANPM268: Alta préstamos sindicados.");
        }
        BigDecimal error = BigDecimal.ZERO;
        String descripcionError = "";
        contexto.setDiarioElectronico(new DiarioElectronico(Constantes.CTE_OPERACION_AC, Integer.valueOf(0), BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, Constantes.CTE_STRING_EMPTY, Constantes.CTE_STRING_EMPTY, BigDecimal.ZERO, BigDecimal.ZERO, Integer.valueOf(0)));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Obtenemos los parametros de entrada");
        }
        final Date fechaMinima = new Date(DateUtils.dateLowest().getTime());
        BigDecimal codigoProducto = datosEntrada.getDecimal(CTE_COD_PRODUCTO);
        BigDecimal codigoSubproducto = datosEntrada.getDecimal(CTE_COD_SUBPRODUCTO);
        BigDecimal colectivo = datosEntrada.getDecimal(CTE_COLECTIVO);
        BigDecimal versionGeneral = datosEntrada.getDecimal(CTE_VERSION_GENERAL);
        BigDecimal oficinaSolicitud = datosEntrada.getDecimal(CTE_OFICINA_SOLICITUD);
        BigDecimal numeroSolicitud = datosEntrada.getDecimal(CTE_NUMERO_SOLICITUD);
        BigDecimal versionSolicitud = datosEntrada.getDecimal(CTE_VERSION_SOLICITUD);
        BigDecimal nucExpediente = datosEntrada.getDecimal(CTE_NUC_EXPEDIENTE);
        BigDecimal digito = datosEntrada.getDecimal(CTE_DIGITO_SOLICITUD);
        String strUsuario = datosEntrada.getString(CTE_USUARIO).trim();
        BigDecimal indicadorModificacion = datosEntrada.getDecimal(CTE_INDICADOR_MODIFICACION);
        // BigDecimal esBO = datosEntrada.getDecimal(CTE_MODIFICACION_BO);
        BigDecimal bidClaseFinanciacion = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_CLASE_FINANCIACION))) {
            bidClaseFinanciacion = datosEntrada.getDecimal(CTE_CLASE_FINANCIACION);
        }
        String strClaseFinanciacion = "";
        if (!UtilidadesTramitacion.isBlankOrNull(datosEntrada.getString(CTE_DESCRIPCION_CLASE_FINANCIACION))) {
            strClaseFinanciacion = datosEntrada.getString(CTE_DESCRIPCION_CLASE_FINANCIACION).replace("-", "").trim();
        }
        BigDecimal bidTipoFinanciacion = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_TIPO_FINANCIACION))) {
            bidTipoFinanciacion = datosEntrada.getDecimal(CTE_TIPO_FINANCIACION);
        }
        String strTipoFinanciacion = "";
        if (!UtilidadesTramitacion.isBlankOrNull(datosEntrada.getString(CTE_DESCRIPCION_TIPO_FINANCIACION))) {
            strTipoFinanciacion = datosEntrada.getString(CTE_DESCRIPCION_TIPO_FINANCIACION).replace("-", "").trim();
        }
        BigDecimal bidSubtipoFinanciacion = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_SUBTIPO_FINANCIACION))) {
            bidSubtipoFinanciacion = datosEntrada.getDecimal(CTE_SUBTIPO_FINANCIACION);
        }
        String strSubtipoFinanciacion = "";
        if (!UtilidadesTramitacion.isBlankOrNull(datosEntrada.getString(CTE_DESCRIPCION_SUBTIPO_FINANCIACION))) {
            strSubtipoFinanciacion = datosEntrada.getString(CTE_DESCRIPCION_SUBTIPO_FINANCIACION).replace("-", "").trim();
        }
        String strCnae = "";
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getString(CTE_CNAE))) {
            strCnae = datosEntrada.getString(CTE_CNAE).trim();
        }
        BigDecimal bidTipoGarantia = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_TIPO_GARANTIA))) {
            bidTipoGarantia = datosEntrada.getDecimal(CTE_TIPO_GARANTIA);
        }
        BigDecimal garantiaMayoritaria = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_GARANTIA_MAYORITARIA))) {
            garantiaMayoritaria = datosEntrada.getDecimal(CTE_GARANTIA_MAYORITARIA);
        }
        BigDecimal bidSector = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_SECTOR))) {
            bidSector = datosEntrada.getDecimal(CTE_SECTOR);
        }
        BigDecimal bidClaseRiesgo = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_CLASE_RIESGO))) {
            bidClaseRiesgo = datosEntrada.getDecimal(CTE_CLASE_RIESGO);
        }
        BigDecimal bidImporte = datosEntrada.getDecimal(CTE_IMPORTE_TOTAL);
        BigDecimal bidImporteParticipacion = datosEntrada.getDecimal(CTE_IMPORTE_PARTICIPACION);
        String strMonedaImporteTotal = "";
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getString(CTE_MONEDA_IMPORTE_TOTAL))) {
            strMonedaImporteTotal = datosEntrada.getString(CTE_MONEDA_IMPORTE_TOTAL).trim();
        }
        String strMonedaParticipacion = "";
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getString(CTE_MONEDA_PARTICIPACION_ENTIDAD))) {
            strMonedaParticipacion = datosEntrada.getString(CTE_MONEDA_PARTICIPACION_ENTIDAD).trim();
        }
        if (null != bidImporte && null != bidImporteParticipacion) {
            BigDecimal bidImpPartAux = bidImporteParticipacion;
            // Si tienen monedas distintas, contravalorar
            if (StringUtils.isNotBlank(strMonedaImporteTotal) && StringUtils.isNotBlank(strMonedaParticipacion) && !StringUtils.equals(strMonedaImporteTotal, strMonedaParticipacion)) {
                bidImpPartAux = UtilidadesTramitacion.calcularContravalor(strMonedaParticipacion, bidImporteParticipacion, strMonedaImporteTotal);
            }
            if (bidImpPartAux.compareTo(bidImporte) >= 0) {
                ServicioNegocio.rollback(ERROR_IMP_TOT, null, null, null);
            }
        }
        BigDecimal bidImporteMaximo = datosEntrada.getDecimal(CTE_IMPORTE_MAXIMO);
        // Datos de AN25 y AN38
        GestionDatosSolicitud gds = new GestionDatosSolicitud();
        GestionSindicados gs = new GestionSindicados();
        /*
		 * Ahora se van a crear los 2 objectos para dar de alta o modificar un prestamo sindicado:
		 * DatosSolicitudC			Contexto: ANPM158		Tabla: AN25TB01
		 * SindicadosC				Contexto: ANPM258		Tabla: AN38TB01		
		 */
        DatosSolicitudC solicitudAN25UltimaVersionIncompleta = null;
        SindicadosC matrizAN38UltimaVersionIncompleta = null;
        // Si es una modificacion se recuperan de bbdd
        if (indicadorModificacion.intValue() >= 1) {
            solicitudAN25UltimaVersionIncompleta = gds.getUltimaVersion(nucExpediente);
            matrizAN38UltimaVersionIncompleta = gs.obtenerSindicados(oficinaSolicitud, nucExpediente);
        }
        // Puede darse el caso de que existan tramos creados en base a unos importes de matriz, y ahora se modifiquen dichos importes
        if (indicadorModificacion.intValue() == 1) {
            final List<TramoC> tramos = GestionTramos.getUltimaVersionTramos(matrizAN38UltimaVersionIncompleta.getSindicadosKey().getBidNucExpediente());
            BigDecimal impTotalTramos = BigDecimal.ZERO;
            BigDecimal impPartTramos = BigDecimal.ZERO;
            if (null != tramos) {
                BigDecimal impTramo = BigDecimal.ZERO;
                BigDecimal impPart = BigDecimal.ZERO;
                for (TramoC tramoC : tramos) {
                    // Estados validos: 0-Pendiente de cumplimentar, 2-Pendiente de concesión, 3-Concedido
                    if (GestionTramos.esTramoVigente(tramoC.getEstadoTramo())) {
                        if (null != tramoC.getBidImporteTotalTramo()) {
                            impTramo = tramoC.getBidImporteTotalTramo();
                            // Contravalorar a moneda matriz, cuando matriz y tramo en distinta moneda
                            if (!StringUtils.equals(tramoC.getStrMoneda(), strMonedaImporteTotal)) {
                                impTramo = UtilidadesTramitacion.calcularContravalor(tramoC.getStrMoneda(), tramoC.getBidImporteTotalTramo(), strMonedaImporteTotal);
                            }
                            impTotalTramos = impTotalTramos.add(impTramo);
                        }
                        if (null != tramoC.getBidImporteFormalizar()) {
                            impPart = tramoC.getBidImporteFormalizar();
                            // Contravalorar a moneda matriz, cuando matriz y tramo en distinta moneda
                            if (!StringUtils.equals(tramoC.getStrMoneda(), strMonedaParticipacion)) {
                                impPart = UtilidadesTramitacion.calcularContravalor(tramoC.getStrMoneda(), tramoC.getBidImporteFormalizar(), strMonedaParticipacion);
                            }
                            impPartTramos = impPartTramos.add(impPart);
                        }
                    }
                }
            }
            if (impTotalTramos.compareTo(BigDecimal.ZERO) > 0) {
                if (null != bidImporte && impTotalTramos.compareTo(bidImporte) > 0) {
                    ServicioNegocio.rollback(ConstantesSindicados.ERROR_IMP_TOT, null, null, null);
                }
            }
            if (null != bidImporteParticipacion && bidImporteParticipacion.compareTo(BigDecimal.ZERO) > 0 && impPartTramos.compareTo(BigDecimal.ZERO) > 0 && impPartTramos.compareTo(bidImporteParticipacion) > 0) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_IMP_PART, null, null, null);
            }
        }
        BigDecimal bidTipoSindicado = datosEntrada.getDecimal(CTE_TIPO_SINDICADO);
        BigDecimal bidTipoAgente = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_TIPO_AGENTE))) {
            bidTipoAgente = datosEntrada.getDecimal(CTE_TIPO_AGENTE);
        }
        /* Gestion agente */
        BigDecimal bidAgente = BigDecimal.ZERO;
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getDecimal(CTE_AGENTE))) {
            bidAgente = datosEntrada.getDecimal(CTE_AGENTE);
        }
        // Participe sin agencia
        if (bidTipoSindicado.intValue() == ConstantesSindicados.TIPO_CONTRATO_PARTICIPE) {
            if (null == bidAgente) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_ENTRADA_AGENTE, null, null, null);
            }
            if (bidTipoAgente.intValue() == 1) {
                // el código sea de 4 digitos (<10000)
                if (bidAgente.intValue() < 10000) {
                    bidAgente = bidAgente.add(BigDecimal.valueOf(100000));
                }
                if (ConstantesSindicados.CTE_AGENTE_NOVAGALICIABANCO.compareTo(bidAgente) == 0 || ConstantesSindicados.CTE_AGENTE_BILATERAL.compareTo(bidAgente) == 0) {
                    ServicioNegocio.rollback(ConstantesSindicados.ERROR_ENTRADA_TIPO_SINDICADO, null, null, null);
                }
            }
        } else // Participe con agencia
        if (bidTipoSindicado.intValue() == ConstantesSindicados.TIPO_CONTRATO_AGENCIA) {
            bidAgente = ConstantesSindicados.CTE_AGENTE_NOVAGALICIABANCO;
        } else // Biltateral
        if (bidTipoSindicado.intValue() == ConstantesSindicados.TIPO_CONTRATO_BILATERAL) {
            bidAgente = ConstantesSindicados.CTE_AGENTE_BILATERAL;
        } else {
            bidAgente = BigDecimal.ZERO;
        }
        if (null == bidAgente) {
            bidAgente = BigDecimal.ZERO;
        }
        /* Fin gestion agente */
        Date datFechaUltVcto = fechaMinima;
        String fechaUltVcto = datosEntrada.getString(CTE_FECHA_ULT_VCTO);
        if (!UtilidadesComun.isBlankOrNull(fechaUltVcto)) {
            datFechaUltVcto = DateHelper.stringASqlDate(fechaUltVcto, DateHelper.FORMATO_DD_MM_YYYY_GUION);
            /* Validar fecha */
            final java.util.Date datFechaHoy = DateHelper.getInstance().askTime();
            if (datFechaUltVcto.compareTo(datFechaHoy) <= 0) {
                ServicioNegocio.rollback(ConstantesSindicados.ERROR_FECHA_ACTUAL, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), VENCIMIENTO_FINAL_1564798309).toString() }, null);
            }
        }
        String destinoPrincipal = "";
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getString(CTE_DESTINO_PRINCIPAL))) {
            destinoPrincipal = datosEntrada.getString(CTE_DESTINO_PRINCIPAL);
        }
        String strEspecialidad = "";
        if (!UtilidadesComun.isBlankOrNull(datosEntrada.getString(CTE_ESPECIALIDAD))) {
            strEspecialidad = datosEntrada.getString(CTE_ESPECIALIDAD).trim();
        }
        BigDecimal tipoExpediente = datosEntrada.getDecimal(CTE_TIPO_EXPEDIENTE);
        String strEntidad = datosEntrada.getString(CTE_ENTIDAD).trim();
        String strObservaciones = datosEntrada.getString(CTE_OBSERVACIONES);
        String strObservaciones_2 = datosEntrada.getString(CTE_OBSERVACIONES_2);
        String strObservaciones_3 = datosEntrada.getString(CTE_OBSERVACIONES_3);
        String strObservaciones_4 = datosEntrada.getString(CTE_OBSERVACIONES_4);
        String strObservaciones_5 = datosEntrada.getString(CTE_OBSERVACIONES_5);
        String strObservaciones_6 = datosEntrada.getString(CTE_OBSERVACIONES_6);
        String strObservaciones_7 = datosEntrada.getString(CTE_OBSERVACIONES_7);
        String strObservaciones_8 = datosEntrada.getString(CTE_OBSERVACIONES_8);
        if (!UtilidadesTramitacion.isEmptyOrNullString(strObservaciones_2)) {
            strObservaciones += strObservaciones_2;
            if (!UtilidadesTramitacion.isEmptyOrNullString(strObservaciones_3)) {
                strObservaciones += strObservaciones_3;
                if (!UtilidadesTramitacion.isEmptyOrNullString(strObservaciones_4)) {
                    strObservaciones += strObservaciones_4;
                    if (!UtilidadesTramitacion.isEmptyOrNullString(strObservaciones_5)) {
                        strObservaciones += strObservaciones_5;
                        if (!UtilidadesTramitacion.isEmptyOrNullString(strObservaciones_6)) {
                            strObservaciones += strObservaciones_6;
                            if (!UtilidadesTramitacion.isEmptyOrNullString(strObservaciones_7)) {
                                strObservaciones += strObservaciones_7;
                                if (!UtilidadesTramitacion.isEmptyOrNullString(strObservaciones_8)) {
                                    strObservaciones += strObservaciones_8;
                                }
                            }
                        }
                    }
                }
            }
        }
        strObservaciones = StringUtils.trim(strObservaciones);
        String campoNoValido = validacionDatosEntrada(oficinaSolicitud, versionSolicitud, digito, bidClaseFinanciacion, strClaseFinanciacion, bidTipoFinanciacion, strTipoFinanciacion, bidSubtipoFinanciacion, strSubtipoFinanciacion, strObservaciones, strUsuario, strCnae, bidSector, bidClaseRiesgo, bidTipoGarantia, garantiaMayoritaria, fechaUltVcto);
        IContexto[] salida = new IContexto[1];
        SindicadosC matrizAN38NuevaVersion = null;
        IContexto contextoSalida = null;
        ResultadoDatosSolicitudVO resultadoGuardarSolicitud = null;
        if ("".equals(campoNoValido)) {
            // Si es bilateral el importe de participacion es el importe total
            if (bidTipoSindicado.intValue() == 2) {
                bidImporteParticipacion = bidImporte;
            }
            BigDecimal estadoSolicitud = Constantes.ESTADO_SOL_SIN_RESOLVER;
            if (null != solicitudAN25UltimaVersionIncompleta) {
                estadoSolicitud = solicitudAN25UltimaVersionIncompleta.getEstadoSolicitud();
            }
            // Creamos la nueva solicitud con los datos recibidos y el estado que ya tenia
            DatosSolicitudC solicitudAN25Nueva = gs.crearDatosSolicitudSindicados(oficinaSolicitud, numeroSolicitud, nucExpediente, versionSolicitud, codigoProducto, codigoSubproducto, versionGeneral, colectivo, strCnae, bidSector, bidClaseRiesgo, bidTipoGarantia, bidImporte, bidImporteParticipacion, strMonedaImporteTotal, strUsuario, strEspecialidad, tipoExpediente, strEntidad, estadoSolicitud, solicitudAN25UltimaVersionIncompleta);
            if (null == solicitudAN25Nueva) {
                error = BigDecimal.ONE;
                descripcionError = new Mensaje(ServicioNegocio.getContexto(), ERROR_DATOSSOLICITUD_1006263905).toString();
            }
            DatosSolicitudC solicitudAN25ultimaVersionCompleta = gds.getUltimaVersionCompleta(nucExpediente);
            // Si se mofifica alguno de los campos qeu implican reapertura de resolución cambiamos el estado a Pendiente de resolver
            if (null != solicitudAN25ultimaVersionCompleta && estadoSolicitud.equals(Constantes.ESTADO_SOL_CONCEDIDA) && pasaAPendienteDeConceder(solicitudAN25ultimaVersionCompleta, solicitudAN25Nueva, matrizAN38UltimaVersionIncompleta)) {
                estadoSolicitud = Constantes.ESTADO_SOL_SIN_RESOLVER;
                solicitudAN25Nueva.setEstadoSolicitud(estadoSolicitud);
            }
            SindicadosC matrizAN38Nueva = gs.crearDatosSindicado(oficinaSolicitud, numeroSolicitud, nucExpediente, versionSolicitud, bidClaseFinanciacion, strClaseFinanciacion, bidTipoFinanciacion, strTipoFinanciacion, bidSubtipoFinanciacion, strSubtipoFinanciacion, bidTipoSindicado, bidAgente, bidImporteMaximo, strObservaciones, strUsuario, strMonedaParticipacion, bidTipoAgente, garantiaMayoritaria, datFechaUltVcto, destinoPrincipal, matrizAN38UltimaVersionIncompleta);
            if (null == solicitudAN25Nueva) {
                error = BigDecimal.ONE;
                descripcionError = new Mensaje(ServicioNegocio.getContexto(), ERROR_AN38_1577442922).toString();
            }
            Boolean hayModificaciones = Boolean.FALSE;
            if (null != solicitudAN25UltimaVersionIncompleta && null != matrizAN38UltimaVersionIncompleta && null != solicitudAN25Nueva && null != matrizAN38Nueva) {
                hayModificaciones = comprobarModificacion(solicitudAN25UltimaVersionIncompleta, solicitudAN25Nueva, matrizAN38UltimaVersionIncompleta, matrizAN38Nueva);
            } else if (null != solicitudAN25Nueva && null != matrizAN38Nueva) {
                hayModificaciones = Boolean.TRUE;
            }
            // Si la versión actual es distinta a la anterior o no hay versión anterior se inserta la versión 0 generada
            if (hayModificaciones) {
                // Generamos una versión 0 en  AN25TB01 y AN38 (Matriz)
                resultadoGuardarSolicitud = gds.guardarSolicitud(solicitudAN25Nueva);
                matrizAN38NuevaVersion = gs.guardarMatriz(matrizAN38Nueva);
                if (matrizAN38NuevaVersion == null) {
                    error = BigDecimal.ONE;
                    descripcionError = new Mensaje(ServicioNegocio.getContexto(), ERROR_GUARDAR_DATOS_MATRIZ_180670762).toString();
                }
            }
        } else {
            error = BigDecimal.ONE;
            descripcionError = campoNoValido;
        }
        contextoSalida = ContextoSindicados.rellenarDatosContextoAltaMod(resultadoGuardarSolicitud, error, descripcionError);
        salida[0] = contextoSalida;
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN SNANPM268: Alta préstamos sindicados.");
        }
        return salida;
    }

    private boolean pasaAPendienteDeConceder(DatosSolicitudC solicitudAN25Completa, DatosSolicitudC solicitudAN25Nueva, SindicadosC solicitudAN38) {
        Boolean hayCambios = Boolean.FALSE;
        // El concedido lo guardaremos en AN38
        if (solicitudAN25Nueva.getImporteSolicitado().compareTo(solicitudAN25Completa.getImporteSolicitado()) != 0 && solicitudAN25Nueva.getImporteSolicitado().compareTo(solicitudAN38.getBidParticipacionEntidad()) > 0) {
            hayCambios = Boolean.TRUE;
        }
        if (solicitudAN25Nueva.getMonedaImporteSolicitado().compareTo(solicitudAN25Completa.getMonedaImporteSolicitado()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        return hayCambios;
    }

    private boolean comprobarModificacion(DatosSolicitudC datosSolicitudUltimaVersion, DatosSolicitudC datosSolicitudNueva, SindicadosC sindicadosUltimaVersion, SindicadosC sindicadosNueva) {
        boolean hayCambios = Boolean.FALSE;
        if (datosSolicitudUltimaVersion.getDatosSolicitudKey().getNucExpediente().compareTo(datosSolicitudNueva.getDatosSolicitudKey().getNucExpediente()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getDatosSolicitudKey().getNumSolicitud().compareTo(datosSolicitudNueva.getDatosSolicitudKey().getNumSolicitud()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getDatosSolicitudKey().getOficinaSolicitud().compareTo(datosSolicitudNueva.getDatosSolicitudKey().getOficinaSolicitud()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getOficinaContable().compareTo(datosSolicitudNueva.getOficinaContable()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getProducto().compareTo(datosSolicitudNueva.getProducto()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getSubproducto().compareTo(datosSolicitudNueva.getSubproducto()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getVersionGeneral().compareTo(datosSolicitudNueva.getVersionGeneral()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getLineaColectivo().compareTo(datosSolicitudNueva.getLineaColectivo()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getCnae().trim().compareTo(datosSolicitudNueva.getCnae().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getSector().compareTo(datosSolicitudNueva.getSector()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getClaseRiesgo().compareTo(datosSolicitudNueva.getClaseRiesgo()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getGarantiaOficina().compareTo(datosSolicitudNueva.getGarantiaOficina()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getGarantiaContable().compareTo(datosSolicitudNueva.getGarantiaContable()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getImporteTotal().compareTo(datosSolicitudNueva.getImporteTotal()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getMonedaImporteTotal().trim().compareTo(datosSolicitudNueva.getMonedaImporteTotal().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getPlazoTotal().compareTo(datosSolicitudNueva.getPlazoTotal()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getEspecialidad().trim().compareTo(datosSolicitudNueva.getEspecialidad().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getTipoExpediente().compareTo(datosSolicitudNueva.getTipoExpediente()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getEntidad().trim().compareTo(datosSolicitudNueva.getEntidad().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getEstadoSolicitud().compareTo(datosSolicitudNueva.getEstadoSolicitud()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (datosSolicitudUltimaVersion.getUnidadPlazo().trim().compareTo(datosSolicitudNueva.getUnidadPlazo().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getBidClaseFinanciacion().compareTo(sindicadosNueva.getBidClaseFinanciacion()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getStrClaseFinanciacion().trim().compareTo(sindicadosNueva.getStrClaseFinanciacion().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getBidTipoFinanciacion().compareTo(sindicadosNueva.getBidTipoFinanciacion()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getStrTipoFinanciacion().trim().compareTo(sindicadosNueva.getStrTipoFinanciacion().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getBidSubFinanciacion().compareTo(sindicadosNueva.getBidSubFinanciacion()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getStrSubtipoFinanciacion().trim().compareTo(sindicadosNueva.getStrSubtipoFinanciacion().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getBidTipoSindicado().compareTo(sindicadosNueva.getBidTipoSindicado()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getBidAgente().compareTo(sindicadosNueva.getBidAgente()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getBidParticipacionEntidad().compareTo(sindicadosNueva.getBidParticipacionEntidad()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getStrObservaciones().trim().compareTo(sindicadosNueva.getStrObservaciones().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getStrUsuario().trim().compareTo(sindicadosNueva.getStrUsuario().trim()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        if (sindicadosUltimaVersion.getStrMonedaParticipacionEntidad().trim().compareTo(sindicadosNueva.getStrMonedaParticipacionEntidad()) != 0) {
            hayCambios = Boolean.TRUE;
        }
        return hayCambios;
    }

    private String validacionDatosEntrada(BigDecimal oficinaSolicitud, BigDecimal versionSolicitud, BigDecimal bidDigitoSolicitud, BigDecimal bidClaseFinanciacion, String strClaseFinanciacion, BigDecimal bidTipoFinanciacion, String strTipoFinanciacion, BigDecimal bidSubTipoFinanciacion, String strSubtipoFinanciacion, String observaciones, String strUsuario, String strCnae, BigDecimal bidSector, BigDecimal bidClaseRiesgo, BigDecimal bidTipoGarantia, BigDecimal garantiaMayoritaria, String fechaUltVcto) {
        boolean result = true;
        String campoNoValido = "";
        if (UtilidadesTramitacion.isBlankOrNull(oficinaSolicitud) || oficinaSolicitud.intValue() >= 10000) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), OFICINA_1546109685).toString();
        }
        if (UtilidadesTramitacion.isBlankOrNull(versionSolicitud) || versionSolicitud.intValue() >= 10000000) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), VERSION_351608024).toString();
        }
        if (UtilidadesTramitacion.isBlankOrNull(bidDigitoSolicitud) || bidDigitoSolicitud.intValue() >= 10) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), DIGITO_1331909406).toString();
        }
        if (bidClaseFinanciacion.intValue() >= 100) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), CLASE_FINANCIACI_N_413548934).toString();
        }
        if (strClaseFinanciacion.length() >= 50) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_CLASE_FINANCIACI_N_1408799795).toString();
        }
        if (!UtilidadesTramitacion.isEmptyOrNullString(observaciones) && observaciones.length() >= 2000) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), OBSERVACIONES_1123231563).toString();
        }
        if (UtilidadesTramitacion.isEmptyOrNullString(strUsuario) || strUsuario.length() >= 8) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), USUARIO_132844754).toString();
        }
        if (bidSector.intValue() >= 100) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), SECTOR_906274970).toString();
        }
        if (bidClaseRiesgo.intValue() >= 10) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), CLASE_RIESGO_1440609347).toString();
        }
        if (bidTipoGarantia.intValue() >= 100) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), GARANTIA_1628921497).toString();
        }
        if (garantiaMayoritaria.intValue() >= 10000) {
            result = false;
            campoNoValido = new Mensaje(ServicioNegocio.getContexto(), GARANTIA_MAYORITARIA_861799299).toString();
        }
        return campoNoValido;
    }

    private static final String VERSION_351608024 = "VERSION_351608024";

    private static final String SECTOR_906274970 = "SECTOR_906274970";

    private static final String OBSERVACIONES_1123231563 = "OBSERVACIONES_1123231563";

    private static final String DIGITO_1331909406 = "DIGITO_1331909406";

    private static final String OFICINA_1546109685 = "OFICINA_1546109685";

    private static final String GARANTIA_1628921497 = "GARANTIA_1628921497";

    private static final String USUARIO_132844754 = "USUARIO_132844754";

    private static final String DESCRIPCION_CLASE_FINANCIACI_N_1408799795 = "DESCRIPCION_CLASE_FINANCIACI_N_1408799795";

    private static final String GARANTIA_MAYORITARIA_861799299 = "GARANTIA_MAYORITARIA_861799299";

    private static final String CLASE_RIESGO_1440609347 = "CLASE_RIESGO_1440609347";

    private static final String CLASE_FINANCIACI_N_413548934 = "CLASE_FINANCIACI_N_413548934";

    private static final String VENCIMIENTO_FINAL_1564798309 = "VENCIMIENTO_FINAL_1564798309";

    private static final String ERROR_GUARDAR_DATOS_MATRIZ_180670762 = "ERROR_GUARDAR_DATOS_MATRIZ_180670762";

    private static final String ERROR_DATOSSOLICITUD_1006263905 = "ERROR_DATOSSOLICITUD_1006263905";

    private static final String ERROR_AN38_1577442922 = "ERROR_AN38_1577442922";
}
