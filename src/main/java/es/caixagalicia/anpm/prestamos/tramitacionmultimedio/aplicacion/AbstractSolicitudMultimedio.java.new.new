package es.caixagalicia.anpm.prestamos.tramitacionmultimedio.aplicacion;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.producto.ProductoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.producto.ProductoEng;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.producto.SubProductoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.producto.SubProductoEng;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionEng;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionesC;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.comisiones.ComisionC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.comisiones.ComisionEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.destinos.DestinosC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.destinos.DestinosEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionCapitalC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionCapitalEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.tratamientoadelantos.TratamientoAdelantosC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.tratamientoadelantos.TratamientoAdelantosEng;
import es.caixagalicia.anpm.prestamos.tramitacionmultimedio.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacionmultimedio.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacionmultimedio.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacionmultimedio.utilidades.MultimedioInteresVO;
import es.caixagalicia.anpm.prestamos.tramitacionmultimedio.utilidades.UtilidadesTramitacionMultimedio;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;

/**
 * Clase abstracta que contiene los métodos necesarios para la tramitación multimedio de una solicitud
 * @author V360020
 */
public abstract class AbstractSolicitudMultimedio {

    private static final String CTE_JNDI_DATASOURCE = "conf/CXGDB2XA";

    private static final BigDecimal CTE_ESTADO_VERSION_VIGENTE_NO_EN_CURSO = new BigDecimal(2);

    // $NON-NL-1$
    private static final String CTE_MONEDA = "EUR";

    private static final BigDecimal CTE_NIVEL_OFICINA = BigDecimal.TEN;

    private static final String CTE_USUARIO_GENERICO = "U0000";

    private static final String CTE_CADENA_VACIA = "";

    // protected DatosSolicitudC datosSolicitudC = new DatosSolicitudC();
    protected DatosSolicitudC datosSolicitudC = null;

    protected static IContexto[] arrayContextos = null;

    protected static BigDecimal campoIndice = null;

    /**
     * Constructor
     * @param bigOficinaSolicitud
     * @param bigNucExpediente
     * @param bigProducto
     * @param bigSuproducto
     * @param bigColectivo
     * @param bigVersion
     * @param bigOficinaContable
     */
    public AbstractSolicitudMultimedio(DatosSolicitudC datosSolicitudC, BigDecimal bigNumSolicitud, BigDecimal bigOficinaSolicitud, BigDecimal bigNucExpediente) {
        // Inicializamos el objeto dándole valores a la clave e inicializando las listas
        /*20150505 Modificamos la forma de instanciar datosSolicitudC para poder obtener datos de catálogo antes de 
		 * instanciar el alta de solicitud concreta, por ejemplo la especialidad.*/
        this.datosSolicitudC = datosSolicitudC;
        // CLAVE DE LA SOLICITUD
        datosSolicitudC.getDatosSolicitudKey().setOficinaSolicitud(bigOficinaSolicitud);
        datosSolicitudC.getDatosSolicitudKey().setNumSolicitud(bigNumSolicitud);
        datosSolicitudC.getDatosSolicitudKey().setNucExpediente(bigNucExpediente);
        datosSolicitudC.getDatosSolicitudKey().setVersionSolicitud(BigDecimal.ONE);
    // Inicializamos las propiedades que son listas
    /*20150512 Ahora no se inicializan las listas porque ya vienen inicializadas y aplantilladas.*/
    // datosSolicitudC.setDestinos(new ArrayList<DestinosC>(0));
    // datosSolicitudC.setCondicionesCapital(new ArrayList<CondicionCapitalC>(0));
    // datosSolicitudC.setComisiones(new ArrayList<ComisionC>(0));
    // datosSolicitudC.setCondicionesInteres(new ArrayList<CondicionesInteresC>(0));
    // datosSolicitudC.setTratamientoAdelantos(new ArrayList<TratamientoAdelantosC>(0));
    // datosSolicitudC.setCuentas(new ArrayList<DatosCuentasC>(0));
    }

    /**
     ***************************************************************************
     */
    /**
     * METODOS ABSTRACTOS
     */
    /**
     ***************************************************************************
     */
    /**
     *  Proceso de modificación de solicitud reaplantillando con los valores de entrada
     *
     * @param ctxInAnpm500
     * @param ctxInAnpm501
     * @param ctxInAnpm502
     * @param ctxInAnpm503
     * @param ctxInAnpm504
     * @param strEntidad
     * @param bigCanal
     */
    public abstract void procesoReaplantillamientoSolicitud(IContexto ctxInAnpm500, IContexto ctxInAnpm501, IContexto ctxInAnpm502, IContexto ctxInAnpm503, IContexto ctxInAnpm504, String strEntidad, BigDecimal bigCanal, BigDecimal indModoAltaAutomatica);

    /**
     ***************************************************************************
     */
    /**
     * METODOS COMUNES YA IMPLEMENTADOS
     */*****************************************************************************
     */
    /**
     * Proceso que aplantilla los datos de la solicitud con los datos de catálogo
     * recibidos en los contextos que devuelve el servicio que se invoca
     * @param producto
     * @param subproducto
     * @param colectivo
     * @param version
     */
    public static void rellenarConDatosCatalogo(DatosSolicitudC datosSolicitudC, BigDecimal producto, BigDecimal subproducto, BigDecimal colectivo, String strFechaSolicitud, BigDecimal bigVersion, BigDecimal idTarifa, BigDecimal plazo, BigDecimal importe, String diaSalto) {
        final Integer CTE_CC_OBTENER_DATOS_VG = new Integer(507);
        final Integer CTE_CO_OBTENER_DATOS_VG = new Integer(48);
        final String CTE_CLAUS_REST_EXP = "EXP";
        BigDecimal versionGeneral = null;
        IContextoEjecucion contextoEjecucion = null;
        IDatosEntradaTx datosEntradaSN = null;
        // IContexto[] AbstractSolicitudMultimedio.arrayContextos = new IContexto[] {};
        contextoEjecucion = ServicioNegocio.getContexto();
        datosEntradaSN = ServicioNegocio.getPrograma(contextoEjecucion, CTE_CC_OBTENER_DATOS_VG, CTE_CO_OBTENER_DATOS_VG);
        datosEntradaSN.addCampo(0, producto);
        datosEntradaSN.addCampo(1, subproducto);
        datosEntradaSN.addCampo(2, colectivo);
        if (null != bigVersion) {
            versionGeneral = bigVersion;
        // datosEntradaSN.addCampo(3, bigVersion);
        } else {
            VersionEng versionEng = new VersionEng();
            VersionesC versionesC = null;
            // Si NO me llega la fecha de la solicitud le asigno la fecha actual
            if (null == strFechaSolicitud) {
                strFechaSolicitud = DateUtils.toSQLTimestamp(DateUtils.dateNow()).toString();
                // e inicializo la solicitud con la fecha actual como fecha de solicitud
                datosSolicitudC.setFechaSolicitud(DateUtils.toSQLDate(new java.util.Date()));
            }
            // Creamos la fecha a partir del string y luego los tipos Date y Time para realizar la consulta
            // 20151001 Se corrige esto, la fecha nos llega en formato DB2
            java.util.Date fechaCompleta = DateUtils.parseDate(strFechaSolicitud, DateHelper.FORMATO_YYYY_MM_DD_GUION);
            Date fecha = DateUtils.toSQLDate(fechaCompleta);
            Time hora = DateUtils.getSoloHorario(fechaCompleta);
            // Comprobamos que en la fecha de la solicitud el producto y subproducto están vigentes y activos
            boolean activoYVigenteProdSubpr = false;
            ProductoEng productoEng = new ProductoEng();
            List<ProductoC> lstProductoC = productoEng.obtenerVersionEnFechaVigYActiva(producto.intValue(), subproducto.intValue(), true, fecha, hora);
            if (null != lstProductoC && lstProductoC.size() > 0) {
                SubProductoEng subProductoEng = new SubProductoEng(CTE_JNDI_DATASOURCE);
                SubProductoC subProductoC = subProductoEng.obtenerVersionEnFechaVigYActiva(producto.intValue(), subproducto.intValue(), true, fecha, hora);
                if (null != subProductoC) {
                    activoYVigenteProdSubpr = true;
                }
            }
            if (activoYVigenteProdSubpr) {
                versionesC = versionEng.obtenerVersionVigenteEnFecha(producto.intValue(), subproducto.intValue(), colectivo.intValue(), fecha, hora);
                if (null != versionesC) {
                    versionGeneral = new BigDecimal(versionesC.getVersionKey().getIdVersionGeneral());
                // datosEntradaSN.addCampo(3, new BigDecimal(versionesC.getVersionKey().getIdVersionGeneral()));
                }
            }
        }
        /*Si la versión general no existe quiere decir que no se ha encontrado una versión general válida del subproducto.*/
        if (null != versionGeneral) {
            datosEntradaSN.addCampo(3, versionGeneral);
        // datosSolicitudC.setVersionGeneral(versionGeneral);
        } else {
            ServicioNegocio.rollback(CodigosError.CTE_ERROR_SUBPRODUCTO_NO_VIGENTE, null, new String[] { producto.toString(), subproducto.toString() }, null);
        }
        /*20150908 Si los campos de tarifa nos vienen informados los enviamos para obtener los precios de tarifa, los contextos de 
		 * interés de catálogo vendrán sobreescritos con los precios.*/
        if (null != idTarifa) {
            datosEntradaSN.addCampo("ID_TARIFA", idTarifa);
            datosEntradaSN.addCampo("PLAZO", plazo.toString());
            datosEntradaSN.addCampo("ORIGEN", Constantes.CTE_ORIGEN_CONSULTA_TARIFA_SOLICITUD);
            datosEntradaSN.addCampo("IMPORTE", importe);
        }
        AbstractSolicitudMultimedio.arrayContextos = ServicioNegocio.invocarServicio(contextoEjecucion, datosEntradaSN);
        // Se recorren todos los contextos que devuelve catálogo teniendo en cuenta que para los campos con indicadores:
        // --> Si el indicador es 1 o 4: Valor por defecto
        // --> Si el indicador es 3: En rangos valor hasta. En los casos que no son listas no se contemplará porque
        // en la verificación del producto no se permitirá el indicador 3.
        // --> Si el indicador es 2: En verificación del producto no se permitirá el indicador 2.
        List<MultimedioInteresVO> lstMultimedioInteresVO = new ArrayList<MultimedioInteresVO>();
        CondicionesInteresEng condicionesInteresDao = new CondicionesInteresEng();
        if ((null != AbstractSolicitudMultimedio.arrayContextos) && (0 < AbstractSolicitudMultimedio.arrayContextos.length)) {
            // for (int i=0; i < AbstractSolicitudMultimedio.arrayContextos.length; i++)
            for (IContexto contexto : AbstractSolicitudMultimedio.arrayContextos) {
                // ---------------------------------> RECORREMOS EL CONTEXTO PRODUCTO  <--------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN001")) {
                    // *** FECHA DE PAGO ****
                    // Sólo se contempla el caso de indicador a 1
                    String indFechaPago = contexto.getString("ANPMN001050");
                    if (indFechaPago.equals("1")) {
                        datosSolicitudC.setFechaDePago(contexto.getBigDecimal("ANPMN001040"));
                    }
                    // *** DÍA DE PAGO ***
                    String indDiaDeterminadoPago = contexto.getString("ANPMN001070");
                    if (indDiaDeterminadoPago.equals("1") || indDiaDeterminadoPago.equals("4")) {
                        datosSolicitudC.setDiaDeterminadoPago(contexto.getBigDecimal("ANPMN001060"));
                    }
                    // *** MES DE PAGO ***
                    String indMesPago = contexto.getString("ANPMN001090");
                    if (indMesPago.equals("1") || indMesPago.equals("4")) {
                        datosSolicitudC.setMesDeterminadoPago(contexto.getBigDecimal("ANPMN001080"));
                    }
                    // *** FECHA DE LIQUIDACION ***
                    // Sólo se contempla el caso de indicador a 1
                    String indFechaLiquidacion = contexto.getString("ANPMN001110");
                    if (indFechaLiquidacion.equals("1")) {
                        datosSolicitudC.setFechaLiquidacion(contexto.getBigDecimal("ANPMN001100"));
                    }
                    // *** ESPECIALIDAD ***
                    datosSolicitudC.setEspecialidad(contexto.getString("ANPMN001120"));
                    // *** MODALIDAD DE INTERÉS ***
                    // Sólo se contempla el caso de indicador a 1
                    String indMdiInteres = contexto.getString("ANPMN001140");
                    if (indMdiInteres.equals("1")) {
                        datosSolicitudC.setMid(contexto.getBigDecimal("ANPMN001130"));
                    }
                    // *** LÍNEA DE REVOLVING ***
                    datosSolicitudC.setRevolvingLineaPrestamo(contexto.getBigDecimal("ANPMN001160"));
                    // *** ENTIDAD ***
                    datosSolicitudC.setEntidad(contexto.getString("ANPMN001170"));
                    // *** PAIS RIESGO y PAIS OPERACION ***
                    datosSolicitudC.setPaisRiesgo(contexto.getBigDecimal("ANPMN001180"));
                    datosSolicitudC.setPaisOperacion(contexto.getBigDecimal("ANPMN001180"));
                    // *** ORDEN IMPUTACION DE PAGOS ***
                    String indOrdenImputacionPagos = contexto.getString("ANPMN001200");
                    if (indOrdenImputacionPagos.equals("1") || indOrdenImputacionPagos.equals("4")) {
                        datosSolicitudC.setOrdenImputacionPagos(contexto.getBigDecimal("ANPMN001190"));
                    }
                    // *** DEVENGA INTERESES DISPOSICION
                    // Sólo se contempla el caso de indicador a 1
                    String indDevengoInteresesDisposicion = contexto.getString("ANPMN001310");
                    if (indDevengoInteresesDisposicion.equals("1")) {
                        datosSolicitudC.setDevengoInteresesDisposicion(contexto.getBigDecimal("ANPMN001300"));
                    }
                    // *** DEVENGA INTERESES PAGO ***
                    // Sólo se contempla el caso de indicador a 1
                    String indDevengoInteresesPagos = contexto.getString("ANPMN001330");
                    if (indDevengoInteresesPagos.equals("1")) {
                        datosSolicitudC.setDevengoInteresesPagos(contexto.getBigDecimal("ANPMN001320"));
                    }
                    // Sino cogemos el dia de salto de catalogo
                    if (!Utilidades.isBlankOrNull(diaSalto)) {
                        BigDecimal bidDiaSalto = new BigDecimal(diaSalto);
                        if ((bidDiaSalto.compareTo(BigDecimal.ZERO) > 0) && (bidDiaSalto.compareTo(new BigDecimal(32)) < 0)) {
                            datosSolicitudC.setDiaDeSalto(bidDiaSalto);
                        } else {
                            datosSolicitudC.setDiaDeSalto(contexto.getBigDecimal("ANPMN001360"));
                        }
                    } else {
                        datosSolicitudC.setDiaDeSalto(contexto.getBigDecimal("ANPMN001360"));
                    }
                    datosSolicitudC.setIndicadorCalculoFinMes(contexto.getBigDecimal("ANPMN001350"));
                    datosSolicitudC.setFrmaPgoCrrtje(contexto.getBigDecimal("ANPMN001370"));
                }
                // ------------------------------->  RECORREMOS EL CONTEXTO SUBPRODUCTO   <----------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN002")) {
                    // *** PERMITE CANCELAR ****
                    datosSolicitudC.setPermiteCancelar(contexto.getBigDecimal("ANPMN002100"));
                    // *** PERMITE ADELANTAR ****
                    datosSolicitudC.setPermiteAdelantar(contexto.getBigDecimal("ANPMN002110"));
                    // *** MINUTA CENTRALIZADA ***
                    datosSolicitudC.setMinutaCentralizada(contexto.getString("ANPMN002120"));
                    // *** RECARGABLE ***
                    datosSolicitudC.setRecargable(contexto.getBigDecimal("ANPMN002150"));
                    // *** DEPÓSITO ***
                    // Si llega un 3 es que "puede tener o no depósito", pero aplantillamos un 0 para que aparezca "sin depósito".
                    datosSolicitudC.setDeposito(contexto.getString("ANPMN002160"));
                    if (null != contexto.getString("ANPMN002160") && contexto.getString("ANPMN002160").equals("3"))
                        datosSolicitudC.setDeposito("0");
                    else // Si llega un 4 es que "tiene depósito obligatorio", aplantillamos un 1 para que aparezca "con depósito".
                    if (null != contexto.getString("ANPMN002160") && contexto.getString("ANPMN002160").equals("4"))
                        datosSolicitudC.setDeposito("1");
                    else
                        datosSolicitudC.setDeposito(contexto.getString("ANPMN002160"));
                    // *** FUNCIONAMIENTO DEPÓSITO ***
                    datosSolicitudC.setFuncionamientoDeposito(new BigDecimal(contexto.getString("ANPMN002170")));
                    // *** PORCENTAJE DEPÓSITO ***
                    datosSolicitudC.setPorcentajeDeposito(contexto.getBigDecimal("ANPMN002180"));
                    // *** CONDICIONES DE DESEMBOLSO ***
                    BigDecimal indCondicionesDesemb = contexto.getBigDecimal("ANPMN002200");
                    if (indCondicionesDesemb.equals(BigDecimal.ONE) || indCondicionesDesemb.equals(new BigDecimal(4))) {
                        datosSolicitudC.setCondicionDesembolso(contexto.getBigDecimal("ANPMN002190"));
                    }
                    // *** TIPO DIFERIMIENTO ***
                    datosSolicitudC.setTipoDiferimiento(contexto.getBigDecimal("ANPMN002210"));
                    // *** PORCENTAJE INTERÉS ***
                    datosSolicitudC.setDiferInteresPagado(contexto.getBigDecimal("ANPMN002230"));
                    // *** CUADRO AMORTIZACIÓN IRREGULAR ***
                    datosSolicitudC.setDiferCuotaPactada(contexto.getBigDecimal("ANPMN002240"));
                    // *** DOMICIALIZACIÓN EXTERNA ***
                    datosSolicitudC.setDomiciliacionExterna(contexto.getBigDecimal("ANPMN002250"));
                    // *** CUADRO SOBRE ***
                    datosSolicitudC.setCuadroSaldoDispuesto(contexto.getBigDecimal("ANPMN002260"));
                    // *** CONSIDERA FESTIVOS ***
                    datosSolicitudC.setConsideraFestivos(contexto.getBigDecimal("ANPMN002270"));
                    // *** DÍAS APLICAR ***
                    datosSolicitudC.setDiaAplicar(contexto.getBigDecimal("ANPMN002280"));
                    // *** SUBROGACIÓN OTRA ENTIDAD ***
                    datosSolicitudC.setSubrogacionOtraEntidad(contexto.getBigDecimal("ANPMN002290"));
                    // *** COBRO INTERESES DEMORA ***
                    datosSolicitudC.setPosibilidadCobroInteresesDemora(contexto.getBigDecimal("ANPMN002300"));
                    // *** COBRO INTERESES ADELANTOS ***
                    datosSolicitudC.setPosibilidadCobroInteresesAdelanto(contexto.getBigDecimal("ANPMN002310"));
                    // *** ENVIAR BACKOFFICE ***
                    datosSolicitudC.setEnvioBackofficePrestamos(contexto.getBigDecimal("ANPMN002450"));
                    // *** VERSIÓN GENERAL ***
                    datosSolicitudC.setVersionGeneral(contexto.getBigDecimal("ANPMN002470"));
                    // 20150512 Aplantillamos tambien la titularidad
                    datosSolicitudC.setTitularidad(contexto.getString("ANPMN002580"));
                    // 20151003 Aplantillamos tambien la comprobación LTV y el tecleo de cuentas.
                    datosSolicitudC.setTecleoCuentas(contexto.getString("ANPMN002600"));
                    datosSolicitudC.setComprobacionLTV(contexto.getString("ANPMN002610"));
                    // 20151004 Aplantillamos tambien la disponibilidad de cuentas.
                    datosSolicitudC.setDisponibilidad(contexto.getString("ANPMN002590"));
                    /*20150908 Si aplica tarifa aplantillamos:
					 *  - Indicador control edad.
					 *  - Indicador flexibilidad.
					 *  - Período cambio interés.
					 *  - Unidad período cambio. */
                    if (Constantes.CTE_UNO_STR.equals(contexto.getString("ANPMN002670"))) {
                        // *** INDICADOR CONTROL EDAD
                        datosSolicitudC.setIndControlEdad(contexto.getString("ANPMN002630"));
                        // *** INDICADOR FLEXIBILIDAD
                        datosSolicitudC.setIndFlexibilidad(contexto.getString("ANPMN002640"));
                        // *** PERÍODO CAMBIO INTERÉS
                        datosSolicitudC.setPeriodoCambio(contexto.getBigDecimal("ANPMN002650"));
                        // *** UNIDAD PERIODO CAMBIO
                        datosSolicitudC.setUnidadPeriodoCambio(contexto.getString("ANPMN002660"));
                    }
                    datosSolicitudC.setCaducidadPrecios(contexto.getBigDecimal("ANPMN002680"));
                    // 2017-11-03 - Leer de catalogo el indicador de forma de calculo de demoras
                    // y el indicador de cobro recibo otra entidad.
                    datosSolicitudC.setIndFormaCalculoDemoras(contexto.getBigDecimal("ANPMN002710"));
                    datosSolicitudC.setIndCobroReciboOtraEntidad(contexto.getBigDecimal("ANPMN002720"));
                }
                // ------------------------------------> RECORREMOS EL CONTEXTO NIVELES: Sólo si es nivel 0 ó 10  <--------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN022")) {
                    // Comprobamos que son los datos del nivel 0 o 10
                    if (contexto.getBigDecimal("ANPMN022050").equals(BigDecimal.ZERO) || contexto.getBigDecimal("ANPMN022050").equals(BigDecimal.TEN)) {
                        datosSolicitudC.setRed(contexto.getString("ANPMN022060"));
                    }
                }
                // ------------------------------------> RECORREMOS EL CONTEXTO DATOS ECONÓMICOS: Sólo si es nivel 0 ó 10  <--------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN013")) {
                    // Comprobamos que son los datos del nivel 0 o 10
                    if (contexto.getBigDecimal("ANPMN013050").equals(BigDecimal.ZERO) || contexto.getBigDecimal("ANPMN013050").equals(BigDecimal.TEN)) {
                        // *** CNAE ***
                        String indCnae = contexto.getString("ANPMN013070");
                        if (indCnae.equals("1") || indCnae.equals("4")) {
                            datosSolicitudC.setCnae(contexto.getString("ANPMN013060"));
                        }
                        // -------> DATOS DESTINO Y SUBDESTINO <----------
                        // *** DESTINO PRINCIPAL ***
                        DestinosEng daoDestino = new DestinosEng(CTE_JNDI_DATASOURCE);
                        DestinosC destinoC = daoDestino.createNewObject();
                        // *** parte de la clave ***
                        // *** CÓDIGO DE DESTINO *** (parte de la clave, sólo viene un destino de catálogo)
                        destinoC.getDestinosKey().setIntCodigoDestino(new Integer(1));
                        String indDestino = contexto.getString("ANPMN013100");
                        if (indDestino.equals("1") || indDestino.equals("4")) {
                            destinoC.setDestino(contexto.getString("ANPMN013090"));
                        }
                        // *** SUBDESTINO ***
                        String indSubdestino = contexto.getString("ANPMN013120");
                        if (indSubdestino.equals("1") || indSubdestino.equals("4")) {
                            // datosSolicitudC.getDestinos().get(0).setSubdestino(contexto.getString("ANPMN013110"));
                            destinoC.setSubdestino(contexto.getString("ANPMN013110"));
                        }
                        // Seteamos a 100% el porcentaje
                        destinoC.setPorcentaje(new BigDecimal(100));
                        // Seteamos a S para indicar que es principal
                        destinoC.setEsPrincipal("S");
                        // Seteamos el usuario genérico
                        destinoC.setUsuario(CTE_USUARIO_GENERICO);
                        // Establecemos la relación con la solicitud
                        // Se añade el destino al objeto persistente de la solicitud
                        datosSolicitudC.addDestino(destinoC);
                        destinoC.setSolicitud(datosSolicitudC);
                        // -------> DATOS DESTINO Y SUBDESTINO <----------
                        // *** GARANTÍA ***
                        String indGarantía = contexto.getString("ANPMN013150");
                        if (indGarantía.equals("1") || indGarantía.equals("4")) {
                            datosSolicitudC.setGarantiaOficina(contexto.getBigDecimal("ANPMN013140"));
                            // 20151001 Por defecto aplantillamos tambien la garantia contable con este campo de catálogo.
                            datosSolicitudC.setGarantiaContable(contexto.getBigDecimal("ANPMN013140"));
                        }
                        // 20150514 Validamos el rango del importe
                        /*
						importeSolicitadoMinimoCat = contexto.getBigDecimal("ANPMN013170");
						importeSolicitadoMaximoCat = contexto.getBigDecimal("ANPMN013180");
						
						//!((minimo <= importeSolic)&&(importeSolic<=maximo))
						if (! ((0 >= importeSolicitadoMinimoCat.compareTo(datosSolicitudC.getImporteSolicitado())) &&
							   (0 >= importeSolicitadoMaximoCat.compareTo(datosSolicitudC.getImporteSolicitado()))))
						{
							ServicioNegocio.rollback();
						}
*/
                        // *** PRINCIPAL ***
                        String indPrincipal = contexto.getString("ANPMN013190");
                        if (indPrincipal.equals("1") || indPrincipal.equals("4")) {
                            datosSolicitudC.setImporteSolicitado(contexto.getBigDecimal("ANPMN013160"));
                            // *** IMPORTE TOTAL = IMPORTE SOLICITADO + IMPORTE DE LOS PRODUCTOS A FINANCIAR
                            datosSolicitudC.setImporteTotal(contexto.getBigDecimal("ANPMN013160").add(datosSolicitudC.getImporteProductosFinanciar()));
                        } else if (indPrincipal.equals("3")) {
                            datosSolicitudC.setImporteSolicitado(contexto.getBigDecimal("ANPMN013180"));
                            // *** IMPORTE TOTAL = IMPORTE SOLICITADO + IMPORTE DE LOS PRODUCTOS A FINANCIAR
                            datosSolicitudC.setImporteTotal(contexto.getBigDecimal("ANPMN013180").add(datosSolicitudC.getImporteProductosFinanciar()));
                        }
                        // *** PLAZO ***
                        String indPlazo = contexto.getString("ANPMN013230");
                        if (indPlazo.equals("1") || indPlazo.equals("4")) {
                            datosSolicitudC.setPlazoTotal(contexto.getBigDecimal("ANPMN013200"));
                        } else if (indPlazo.equals("3")) {
                            datosSolicitudC.setPlazoTotal(contexto.getBigDecimal("ANPMN013220"));
                        }
                        // *** FECHA MÁXIMA ***
                        String indFechaMaxima = contexto.getString("ANPMN013250");
                        if (indFechaMaxima.equals("1") || indFechaMaxima.equals("4")) {
                            datosSolicitudC.setFechaFinalMaxima(DateHelper.stringASqlDate(contexto.getString("ANPMN013240"), DateHelper.FORMATO_YYYY_MM_DD_GUION));
                        }
                        // *** PLAZO CARENCIA ***
                        String indPlazoCarencia = contexto.getString("ANPMN013290");
                        if (indPlazoCarencia.equals("1") || indPlazoCarencia.equals("4")) {
                            datosSolicitudC.setPlazoCarencia(contexto.getBigDecimal("ANPMN013260"));
                        } else if (indPlazoCarencia.equals("3")) {
                            datosSolicitudC.setPlazoCarencia(contexto.getBigDecimal("ANPMN013280"));
                        }
                        // *** FECHA MÁXIMA CARENCIA ***
                        String indFechaMaximaCarencia = contexto.getString("ANPMN013310");
                        if (indFechaMaximaCarencia.equals("1") || indFechaMaximaCarencia.equals("4")) {
                            datosSolicitudC.setFechaMaxCarencia(DateHelper.stringASqlDate(contexto.getString("ANPMN013300"), DateHelper.FORMATO_YYYY_MM_DD_GUION));
                        }
                        // *** PLAZO DIFERIMIENTO ***
                        String indPlazoDiferimiento = contexto.getString("ANPMN013350");
                        if (indPlazoDiferimiento.equals("1") || indPlazoDiferimiento.equals("4")) {
                            datosSolicitudC.setPlazoDiferimiento(contexto.getBigDecimal("ANPMN013320"));
                        }
                        // *** FECHA MAXIMA DIFERIMIENTO ***
                        String indFechaMaxDiferimiento = contexto.getString("ANPMN013370");
                        if (indFechaMaxDiferimiento.equals("1") || indFechaMaxDiferimiento.equals("4")) {
                            datosSolicitudC.setFechaMaxDiferimiento(DateHelper.stringASqlDate(contexto.getString("ANPMN013360"), DateHelper.FORMATO_YYYY_MM_DD_GUION));
                        }
                        // ***  PLAZO DESEMBOLSO ***
                        String indPlazoDesembolso = contexto.getString("ANPMN013410");
                        if (indPlazoDesembolso.equals("1") || indPlazoDesembolso.equals("4")) {
                            datosSolicitudC.setPlazoDesembolso(contexto.getBigDecimal("ANPMN013380"));
                        }
                        // *** FECHA MÁXIMA DESEMBOLSO ***
                        String indFechaMaxDesembolso = contexto.getString("ANPMN013430");
                        if (indFechaMaxDesembolso.equals("1") || indFechaMaxDesembolso.equals("4")) {
                            datosSolicitudC.setFechaMaxDesembolso(DateHelper.stringASqlDate(contexto.getString("ANPMN013420"), DateHelper.FORMATO_YYYY_MM_DD_GUION));
                        }
                        // *** MONEDA ***
                        String indMoneda = contexto.getString("ANPMN013460");
                        if (indMoneda.equals("1") || indMoneda.equals("4")) {
                            datosSolicitudC.setMonedaImporteSolicitado(contexto.getString("ANPMN013450"));
                            // Aplantillamos con la misma moneda la MONEDA_IMPTE_PROD._FINAN. y MONEDA_IMPORTE_TOTAL
                            datosSolicitudC.setMonedaProductosFinanciar(contexto.getString("ANPMN013450"));
                            datosSolicitudC.setMonedaImporteTotal(contexto.getString("ANPMN013450"));
                        }
                        // *** SECTOR ***
                        String indSector = contexto.getString("ANPMN013490");
                        if (indSector.equals("1") || indSector.equals("4")) {
                            datosSolicitudC.setSector(contexto.getBigDecimal("ANPMN013480"));
                        }
                        // *** CANAL ***
                        String indCanal = contexto.getString("ANPMN013520");
                        if (indCanal.equals("1") || indCanal.equals("4")) {
                            datosSolicitudC.setCanal(contexto.getBigDecimal("ANPMN013510"));
                        }
                        // *** PAIS ***
                        String indPais = contexto.getString("ANPMN013550");
                        if (indPais.equals("1") || indPais.equals("4")) {
                            datosSolicitudC.setPaisRiesgo(contexto.getBigDecimal("ANPMN013540"));
                            datosSolicitudC.setPaisOperacion(contexto.getBigDecimal("ANPMN013540"));
                            datosSolicitudC.setPaisGarantia(contexto.getBigDecimal("ANPMN013540"));
                        }
                        // *** DIAS GRACIA ***
                        String indDiasGracia = contexto.getString("ANPMN013570");
                        if (indDiasGracia.equals("1") || indDiasGracia.equals("4")) {
                            datosSolicitudC.setDiasGracia(contexto.getBigDecimal("ANPMN013560"));
                        }
                        // *** UNIDAD PLAZO ***
                        datosSolicitudC.setUnidadPlazo(contexto.getString("ANPMN013580"));
                        // *** TIPO CARENCIA CAPITAL DURANTE AMORTIZACIÓN ***
                        datosSolicitudC.setTipoCarenciaCapitalDuranteAmortiz(contexto.getBigDecimal("ANPMN013590"));
                        // *** CARENCIA INTERÉS DURANTE AMORTIZACIÓN ***
                        datosSolicitudC.setTipoCarenciaInteresDuranteAmortiz(contexto.getBigDecimal("ANPMN013600"));
                        // *** PERIODO MÁXIMA CARENCIA ***
                        datosSolicitudC.setTipoPeriodoMaximoCarencia(contexto.getBigDecimal("ANPMN013610"));
                        // *** CONDICIONES PROMOTOR ADQUIERENTE
                        datosSolicitudC.setPromotorAdquiriente(contexto.getBigDecimal("ANPMN013620"));
                    }
                // Fin del if nivel 0 ó 10
                }
                // --------------------------------->  RECORREMOS EL CONTEXTO CLÁUSULAS RESTRINGIDAS  <-------------------------------------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN012")) {
                    // Buscamos la claúsula restringida EXP de prioridad 1
                    if (contexto.getString("ANPMN012030").equals(CTE_CLAUS_REST_EXP) && contexto.getBigDecimal("ANPMN012060").equals(BigDecimal.ONE)) {
                        // datosSolicitudC.setbidTipoExpediente
                        datosSolicitudC.setTipoExpediente(new BigDecimal(contexto.getString("ANPMN012050")));
                    }
                }
                // --------------------------------->  RECORREMOS EL CONTEXTO CONDICIONES DE CAPITAL: Sólo si es nivel 0 ó 10  <---------------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN009")) {
                    CondicionCapitalEng daoCondCapital = null;
                    CondicionCapitalC condicionCapitalC = null;
                    // Comprobamos que son los datos del nivel 0 o 10
                    if (contexto.getBigDecimal("ANPMN009360").equals(BigDecimal.ZERO) || contexto.getBigDecimal("ANPMN009360").equals(BigDecimal.TEN)) {
                        daoCondCapital = new CondicionCapitalEng();
                        condicionCapitalC = daoCondCapital.createNewObject();
                        condicionCapitalC.inicializar();
                        // *** ORDEN *** ( parte de la clave )
                        condicionCapitalC.getCondicionesCapitalKey().setIntOrdenDelTramo(contexto.getBigDecimal("ANPMN009040").intValue());
                        // *** PAGO ÚNICO VENCIMIENTO FINAL ***
                        condicionCapitalC.setStrPagoUnicoVencimientoFinal(contexto.getString("ANPMN009060"));
                        // *** NÚMERO PERIODOS PERIODICIDAD ***
                        String indNumPeriodosPeriodicidad = contexto.getString("ANPMN009080");
                        if (indNumPeriodosPeriodicidad.equals("1") || indNumPeriodosPeriodicidad.equals("4")) {
                            condicionCapitalC.setIntPeriodicidadNumPeriodo(contexto.getBigDecimal("ANPMN009070").intValue());
                        }
                        // *** UNIDAD PERIODOS PERIODICIDAD ***
                        String indUnidadPeriodosPeriodicidad = contexto.getString("ANPMN009100");
                        if (indUnidadPeriodosPeriodicidad.equals("1") || indUnidadPeriodosPeriodicidad.equals("4")) {
                            condicionCapitalC.setStrPeriodicidadUnidadPeriodo(contexto.getString("ANPMN009090"));
                        }
                        // *** TIPO PERÍODO PERIODICIDAD ***
                        String indTipoPeriodicidad = contexto.getString("ANPMN009120");
                        if (indTipoPeriodicidad.equals("1") || indTipoPeriodicidad.equals("4")) {
                            condicionCapitalC.setIntPeriodicidadTipoPeriodo(contexto.getBigDecimal("ANPMN009110").intValue());
                        }
                        // *** PLAZO CAPITAL ***
                        String indPlazoCapital = contexto.getString("ANPMN009160");
                        if (indPlazoCapital.equals("1") || indPlazoCapital.equals("4")) {
                            condicionCapitalC.setIntPlazo(contexto.getBigDecimal("ANPMN009130").intValue());
                        } else {
                            condicionCapitalC.setIntPlazo(contexto.getBigDecimal("ANPMN009150").intValue());
                        }
                        // *** PAGO APLAZADO ***
                        String indTipoPagloAplazado = contexto.getString("ANPMN009220");
                        if (indTipoPagloAplazado.equals("1") || indTipoPagloAplazado.equals("4")) {
                            condicionCapitalC.setIntImportePagoAplazado(contexto.getBigDecimal("ANPMN009180"));
                        } else {
                            condicionCapitalC.setIntImportePagoAplazado(contexto.getBigDecimal("ANPMN009200"));
                        }
                        // *** TIPO PAGO APLAZADO ***
                        condicionCapitalC.setIntTipoPagoAplazado(contexto.getBigDecimal("ANPMN009210").intValue());
                        // *** PERIODO MÍNIMO LIQUIDACIÓN ***
                        condicionCapitalC.setIntIndPeriodoMinimoLiquidacion(contexto.getBigDecimal("ANPMN009230").intValue());
                        // *** NUM PERIODO MÍNIMO LIQUIDACIÓN ***
                        condicionCapitalC.setIntNumPeriodoMinimoLiquidacion(contexto.getBigDecimal("ANPMN009240").intValue());
                        // *** UNIDAD PERIODO MÍNIMO LIQUIDACION ***
                        condicionCapitalC.setStrUnidadPeriodoMinimoLiquidacion(contexto.getString("ANPMN009250"));
                        // *** CONDICIONES PARA PROMOTOR/ADQUIERIENTE ***
                        condicionCapitalC.setIntCondicionesDeAdquirenteOPromotor(contexto.getBigDecimal("ANPMN009260").intValue());
                        // *** PLAZO MÁXIMO CUOTA BLINDADA ***
                        condicionCapitalC.setIntPlazoMaximoCuotaBlindada(contexto.getBigDecimal("ANPMN009270").intValue());
                        // Seteamos el usuario genérico
                        condicionCapitalC.setStrUsuario(CTE_USUARIO_GENERICO);
                        // Establecemos la relación con la solicitud
                        datosSolicitudC.addCondicionCapital(condicionCapitalC);
                        condicionCapitalC.getCondicionesCapitalKey().setSolicitud(datosSolicitudC);
                    }
                // Fin del if nivel 0 ó 10 del CONTEXTO DE CONDICIONES DE CAPITAL
                }
                // ¡¡¡¡¡OJO IMPORTANTE!!!!: Actualmente las modalidades de amortización son por producto y subproducto, asi que recorro las condiciones de capital creadas
                if (contexto.getNombre().equalsIgnoreCase("ANPMN010")) {
                    // Nos quedamos con el de prioridad es 1, seteamos los campos de la modalidad de amortización
                    if (contexto.getBigDecimal("ANPMN010050").equals(BigDecimal.ONE)) {
                        Iterator<CondicionCapitalC> iterator = datosSolicitudC.getCondicionesCapital().iterator();
                        while (iterator.hasNext()) {
                            CondicionCapitalC estaCondicionCapitalC = iterator.next();
                            // *** MODALIDA DE AMORTIZACIÓN ***
                            estaCondicionCapitalC.setIntModalidadDeAmortizacion(contexto.getBigDecimal("ANPMN010040").intValue());
                            // *** RAZON DE PROGRESION ***
                            String indRazonProgresion = contexto.getString("ANPMN010090");
                            if (indRazonProgresion.equals("1") || indRazonProgresion.equals("4")) {
                                estaCondicionCapitalC.setIntRazonProgresion(contexto.getBigDecimal("ANPMN010060"));
                            } else if (indRazonProgresion.equals("3")) {
                                estaCondicionCapitalC.setIntRazonProgresion(contexto.getBigDecimal("ANPMN010080"));
                            }
                        }
                        // 2016-07-05 - Leer valor de tipoCalculo de catalogo (campo ANPMN010170 del contexto
                        // ANPMN010 y asignarlo al campo correspondiente de la solicitud).
                        String tipoCalculo = contexto.getString("ANPMN010170");
                        if (null == tipoCalculo) {
                            tipoCalculo = Constantes.CTE_STRING_EMPTY;
                        }
                        datosSolicitudC.setTipoCalculo(tipoCalculo);
                    }
                }
                // ------------------------------------> RECORREMOS EL CONTEXTO COMISIONES: Sólo si es nivel 0 ó 10  <-------------------------------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN005")) {
                    // Comprobamos que son los datos del nivel 0 o 10
                    if (contexto.getBigDecimal("ANPMN005050").equals(BigDecimal.ZERO) || contexto.getBigDecimal("ANPMN005050").equals(BigDecimal.TEN)) {
                        ComisionEng daoComision = new ComisionEng();
                        ComisionC comisionC = daoComision.createNewObject();
                        comisionC.inicializar();
                        // *** TIPO DE COMISIÓN *** ( Parte de la clave )
                        comisionC.getComisionesKey().setStrTipoComision(contexto.getString("ANPMN005060"));
                        // *** ORDEN *** ( Parte de la clave )
                        comisionC.getComisionesKey().setIntOrden(contexto.getBigDecimal("ANPMN005070").intValue());
                        // *** PORCENTAJE COMISION ***
                        String indPorcComision = contexto.getString("ANPMN005110");
                        if (indPorcComision.equals("1") || indPorcComision.equals("4")) {
                            comisionC.setBidPorcentajeComision(contexto.getBigDecimal("ANPMN005080"));
                        } else if (indPorcComision.equals("3")) {
                            comisionC.setBidPorcentajeComision(contexto.getBigDecimal("ANPMN005100"));
                        }
                        // *** PORCENTAJE ADELANTO ***
                        String indPorcAdelanto = contexto.getString("ANPMN005150");
                        if (indPorcAdelanto.equals("1") || indPorcAdelanto.equals("4")) {
                            comisionC.setBidPorcentajeAdelanto(contexto.getBigDecimal("ANPMN005120"));
                        } else if (indPorcAdelanto.equals("3")) {
                            comisionC.setBidPorcentajeAdelanto(contexto.getBigDecimal("ANPMN005140"));
                        }
                        // *** IMPORTE MÍNIMO ***
                        String indImporteMínimo = contexto.getString("ANPMN005190");
                        if (indImporteMínimo.equals("1") || indImporteMínimo.equals("4")) {
                            comisionC.setBidImporteMinimo(contexto.getBigDecimal("ANPMN005160"));
                        } else if (indImporteMínimo.equals("3")) {
                            comisionC.setBidImporteMinimo(contexto.getBigDecimal("ANPMN005180"));
                        }
                        // *** PLAZO ***
                        String indPlazo = contexto.getString("ANPMN005230");
                        if (indPlazo.equals("1") || indPlazo.equals("4")) {
                            comisionC.setBidPlazo(contexto.getBigDecimal("ANPMN005200"));
                        } else if (indPlazo.equals("3")) {
                            comisionC.setBidPlazo(contexto.getBigDecimal("ANPMN005220"));
                        }
                        /*
						 * No se contemplan los siguientes campos: 
						 * POSPONER PAGO, TIPO DE PAGO, UNIDAD PLAZO PAGO
						 * NUMERO PERIODOS PERIODICIDAD, UNIDAD PERIODOS PERIODICIDAD
						 * TIPO PERIODOS PERIODICIDAD
						 * 		 
						 */
                        // *** PLAZO PAGO ***
                        comisionC.setBidPlazoPago(contexto.getBigDecimal("ANPMN005280"));
                        // *** PROMOTOR ADQUIRIENTE ***
                        comisionC.setBidCondicionesDeAdquirenteOPromotor(contexto.getBigDecimal("ANPMN005370"));
                        // *** INDICADOR DE CAPITALIZACIÓN ***
                        if (// 20160214: si es distinto de null e igual a 1
                        null != campoIndice && 0 == BigDecimal.ONE.compareTo(campoIndice)) {
                            comisionC.setBidIndCapitalizacionComDisponibilidad(campoIndice);
                        }
                        // El contexto devuelve en este campo (ANPMN005440) el valor de borrado lógico
                        // Seteamos el nivel oficina en los siguientes campos de nivel:
                        comisionC.setBidNivelPorcentajeComision(CTE_NIVEL_OFICINA);
                        comisionC.setBidNivelImporteMinimo(CTE_NIVEL_OFICINA);
                        comisionC.setBidNivelPlazo(CTE_NIVEL_OFICINA);
                        comisionC.setBidNivelPorcentajeAdelanto(CTE_NIVEL_OFICINA);
                        // Seteamos a cero los siguientes campos:
                        comisionC.setStrUnidadPlazoPago("0");
                        comisionC.setStrPeriodicidadUnidadPeriodoPago("0");
                        // Seteamos el usuario genérico
                        comisionC.setStrUsuario(CTE_USUARIO_GENERICO);
                        // Establecemos la relación con la solicitud
                        datosSolicitudC.addComision(comisionC);
                        comisionC.setSolicitud(datosSolicitudC);
                    }
                // Fin nivel 0 ó 10
                }
                // --------------------------------------> RECORREMOS EL CONTEXTO TRATAMIENTO DE ADELANTO: Sólo si es nivel 0 ó 10  <-------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN006")) {
                    // Comprobamos que son los datos del nivel 0 o 10
                    if (contexto.getBigDecimal("ANPMN006040").equals(BigDecimal.ZERO) || contexto.getBigDecimal("ANPMN006040").equals(BigDecimal.TEN)) {
                        TratamientoAdelantosEng tratAdelantoDao = new TratamientoAdelantosEng();
                        TratamientoAdelantosC tratAdelantosC = tratAdelantoDao.createNewObject();
                        tratAdelantosC.inicializar();
                        // *** MONEDA ADELANTO **//
                        // Establezco la moneda del adelanto a la moneda del importe total de la operacion
                        tratAdelantosC.setMonedaImpMinAdelanto(datosSolicitudC.getMonedaImporteTotal());
                        // *** TIPO ADELANTO ***
                        // No se permite el indicador 3 por lo tanto siempre tendrá valor para la clave
                        String indTipoAdelanto = contexto.getString("ANPMN006070");
                        if (indTipoAdelanto.equals("1") || indTipoAdelanto.equals("4")) {
                            tratAdelantosC.setTipoAdelanto(contexto.getBigDecimal("ANPMN006060"));
                        }
                        // *** PRIORIDAD ***
                        tratAdelantosC.setPrioridad(contexto.getBigDecimal("ANPMN006050"));
                        // *** TIPO IMPUTACION *** (parte de la clave)
                        String indTipoImputacion = contexto.getString("ANPMN006090");
                        if (indTipoImputacion.equals("1") || indTipoImputacion.equals("4")) {
                            tratAdelantosC.getId().setImputacionAdelanto(contexto.getBigDecimal("ANPMN006080"));
                        }
                        // *** FECHAS ***
                        String indFechas = contexto.getString("ANPMN006110");
                        if (indFechas.equals("1") || indFechas.equals("4")) {
                            tratAdelantosC.setFechasAdelanto(contexto.getBigDecimal("ANPMN006100"));
                        }
                        // *** IMPORTE MÍNIMO ***
                        String indImporteMinimo = contexto.getString("ANPMN006150");
                        if (indImporteMinimo.equals("1") || indImporteMinimo.equals("4")) {
                            tratAdelantosC.setImporteMinAdelanto(contexto.getBigDecimal("ANPMN006120"));
                        } else if (indImporteMinimo.equals("3")) {
                            tratAdelantosC.setImporteMinAdelanto(contexto.getBigDecimal("ANPMN006140"));
                        }
                        // *** MÚLTIPLO ***
                        String indMultiplo = contexto.getString("ANPMN006170");
                        if (indMultiplo.equals("1") || indMultiplo.equals("4")) {
                            tratAdelantosC.setMultiploImporteSupMin(contexto.getBigDecimal("ANPMN006160"));
                        }
                        // *** CONTROL CUOTAS COMPLETAS ***
                        String indCtrlCuotasCompletas = contexto.getString("ANPMN006190");
                        if (indCtrlCuotasCompletas.equals("1") || indCtrlCuotasCompletas.equals("4")) {
                            tratAdelantosC.setControlCuotasCompletas(contexto.getBigDecimal("ANPMN006180"));
                        }
                        // *** RECALCULAR ***
                        tratAdelantosC.setRecalcularCuota(contexto.getBigDecimal("ANPMN006200"));
                        // *** PERIODO INICIAL SIN ADELANTOS ***
                        tratAdelantosC.setPeriodoIniSinAdelantos(contexto.getBigDecimal("ANPMN006210"));
                        // *** PERIODO MINIMO ENTRE ADELANTOS ***
                        tratAdelantosC.setPeriodoMinEntreAdelant(contexto.getBigDecimal("ANPMN006220"));
                        // *** OBLIGATORIEDAD ***
                        tratAdelantosC.setObligatoriooptativo(contexto.getBigDecimal("ANPMN006230"));
                        // Seteamos el usuario genérico
                        tratAdelantosC.setUsuario(CTE_USUARIO_GENERICO);
                        // Establecemos la relación con la solicitud
                        datosSolicitudC.addTratamientoAdelantos(tratAdelantosC);
                        tratAdelantosC.getId().setSolicitud(datosSolicitudC);
                    }
                // Fin if nivel 0 ó 10
                }
                if (contexto.getNombre().equalsIgnoreCase("ANPMN014")) {
                    // Comprobamos que son los datos del nivel 0 o 10
                    if (contexto.getBigDecimal("ANPMN014050").equals(BigDecimal.ZERO) || contexto.getBigDecimal("ANPMN014050").equals(BigDecimal.TEN)) {
                        // Tramo variable
                        if (contexto.getString("ANPMN014070").equals("02") || contexto.getString("ANPMN014070").equals("03") || contexto.getString("ANPMN014070").equals("04") || contexto.getString("ANPMN014070").equals("05")) {
                            MultimedioInteresVO multimedioInteresVO = new MultimedioInteresVO();
                            multimedioInteresVO.inicializar();
                            // *** ORDEN (parte de la clave )
                            multimedioInteresVO.setIntOrdenDelTramo(contexto.getBigDecimal("ANPMN014060").intValue());
                            // *** TIPO DE INTERÉS ***
                            multimedioInteresVO.setStrTipoDeInteres(contexto.getString("ANPMN014070"));
                            // *** GESTIÓN CAMPAÑAS PRÉSTAMOS ***
                            multimedioInteresVO.setIntGestionCampanas(contexto.getBigDecimal("ANPMN014080").intValue());
                            // *** VALORACION ***
                            String indValoracion = contexto.getString("ANPMN014100");
                            if (indValoracion.equals("1") || indValoracion.equals("4")) {
                                multimedioInteresVO.setStrValoracionIVI(contexto.getString("ANPMN014090"));
                            }
                            // *** PLAZO ***
                            String indPlazo = contexto.getString("ANPMN014140");
                            if (indPlazo.equals("1") || indPlazo.equals("4")) {
                                multimedioInteresVO.setIntPlazo(contexto.getBigDecimal("ANPMN014110").intValue());
                            } else if (indPlazo.equals("3")) {
                                multimedioInteresVO.setIntPlazo(contexto.getBigDecimal("ANPMN014130").intValue());
                            }
                            // *** INTERÉS ***
                            String indInteres = contexto.getString("ANPMN014180");
                            if (indInteres.equals("1") || indInteres.equals("4")) {
                                multimedioInteresVO.setIntInteres(contexto.getBigDecimal("ANPMN014150"));
                            } else if (indInteres.equals("3")) {
                                multimedioInteresVO.setIntInteres(contexto.getBigDecimal("ANPMN014170"));
                            }
                            // Sólo para colectivos
                            if (null != colectivo && !colectivo.equals(BigDecimal.ZERO)) {
                                multimedioInteresVO.setIntMaximoInteresInicial(contexto.getBigDecimal("ANPMN014190"));
                            }
                            // *** TOMA DE REFERENCIA ***
                            String indTomaReferencia = contexto.getString("ANPMN014210");
                            if (indTomaReferencia.equals("1") || indTomaReferencia.equals("4")) {
                                multimedioInteresVO.setIntTomaDeReferencia(contexto.getBigDecimal("ANPMN014200").intValue());
                            }
                            // *** TIPO REFERENCIA, sólo para colectivos ***
                            if (null != colectivo && !colectivo.equals(BigDecimal.ZERO)) {
                                String indTipoRef = contexto.getString("ANPMN014270");
                                if (indTipoRef.equals("1") || indTipoRef.equals("4")) {
                                    multimedioInteresVO.setIntDifMinEntreTiposReferencia(contexto.getBigDecimal("ANPMN014220"));
                                }
                            }
                            // *** TIPO DE INTERES DE DEMORA ***
                            multimedioInteresVO.setIntTipoInteresDemora(contexto.getBigDecimal("ANPMN014360").intValue());
                            // *** PORCENTAJE SOBRE CAPITAL ***
                            String indPorcSobreCapital = contexto.getString("ANPMN014380");
                            if (indPorcSobreCapital.equals("1") || indPorcSobreCapital.equals("4")) {
                                multimedioInteresVO.setIntPorDemoraSobreCapital(contexto.getBigDecimal("ANPMN014370"));
                            } else if (indPorcSobreCapital.equals("3")) {
                                multimedioInteresVO.setIntPorDemoraSobreCapital(contexto.getBigDecimal("ANPMN014400"));
                            }
                            // *** PORCENTAJE SOBRE INTERESES ***
                            String indSobreInteres = contexto.getString("ANPMN014420");
                            if (indSobreInteres.equals("1") || indSobreInteres.equals("4")) {
                                multimedioInteresVO.setIntPorDemoraSobreInteres(contexto.getBigDecimal("ANPMN014410"));
                            } else if (indSobreInteres.equals("3")) {
                                multimedioInteresVO.setIntPorDemoraSobreInteres(contexto.getBigDecimal("ANPMN014440"));
                            }
                            // *** NÚMERO PERIODO REVISION ***
                            String indNumPeriodoRevision = contexto.getString("ANPMN014480");
                            if (indNumPeriodoRevision.equals("1") || indNumPeriodoRevision.equals("4")) {
                                multimedioInteresVO.setIntNumPeriodosRevision(contexto.getBigDecimal("ANPMN014450").intValue());
                            } else if (indNumPeriodoRevision.equals("3")) {
                                multimedioInteresVO.setIntNumPeriodosRevision(contexto.getBigDecimal("ANPMN014470").intValue());
                            }
                            // *** UNIDAD PERIODO REVISIÓN ***
                            String indUnidadPeriodoRevision = contexto.getString("ANPMN014500");
                            if (indUnidadPeriodoRevision.equals("1") || indUnidadPeriodoRevision.equals("4") || indUnidadPeriodoRevision.equals("0")) {
                                multimedioInteresVO.setStrUnidadPeriodosRevision(contexto.getString("ANPMN014490"));
                            }
                            // *** TIPO PERIODO REVISIÓN ***
                            String indTipoPeriodoRevision = contexto.getString("ANPMN014520");
                            if (indTipoPeriodoRevision.equals("1") || indTipoPeriodoRevision.equals("4")) {
                                multimedioInteresVO.setIntTipoPeriodosRevision(contexto.getBigDecimal("ANPMN014510").intValue());
                            }
                            // *** INDICADOR PERIODO MÍNIMO REVISIÓN ***
                            multimedioInteresVO.setIntPeriodoMinimoRevision(contexto.getBigDecimal("ANPMN014530").intValue());
                            // *** PAGO ÚNICO VENCIMIENTO FINAL ***
                            multimedioInteresVO.setStrPagoUnicoVencimientoFinal(contexto.getBigDecimal("ANPMN014540").toString());
                            // *** NUMERO PERIODOS PERIODICIDAD ***
                            String indNumPeriodosPeriodicidad = contexto.getString("ANPMN014560");
                            if (indNumPeriodosPeriodicidad.equals("1") || indNumPeriodosPeriodicidad.equals("4")) {
                                multimedioInteresVO.setIntPeriodicidadNumPeriodo(contexto.getBigDecimal("ANPMN014550").intValue());
                            }
                            // *** UNIDAD PERIODO PERIODICIDAD ***
                            String indUnidadPeriodoPeriodicidad = contexto.getString("ANPMN014580");
                            if (indUnidadPeriodoPeriodicidad.equals("1") || indUnidadPeriodoPeriodicidad.equals("4")) {
                                multimedioInteresVO.setStrPeriodicidadUnidadPeriodo(contexto.getString("ANPMN014570"));
                            }
                            // *** TIPO PERIODO PERIODICIDAD ***
                            String indTipoPeriodoPeriodicidad = contexto.getString("ANPMN014600");
                            if (indTipoPeriodoPeriodicidad.equals("1") || indTipoPeriodoPeriodicidad.equals("4")) {
                                multimedioInteresVO.setIntPeriodicidadTipoPeriodo(contexto.getBigDecimal("ANPMN014590").intValue());
                            }
                            // *** INDICADOR PERIODO MÍNIMO LIQUIDACIÓN ***
                            multimedioInteresVO.setIntIndPeriodoMinimoLiquidacion(contexto.getBigDecimal("ANPMN014610").intValue());
                            // *** NÚMERO PERIODO MÍNIMO LIQUIDACIÓN ***
                            multimedioInteresVO.setIntNumPeriodoMinLiquidacion(contexto.getBigDecimal("ANPMN014620").intValue());
                            // *** UNIDAD PERIODO MÍNIMO LIQUIDACIÓN ***
                            multimedioInteresVO.setStrUnidadPeriodoMinLiquidacion(contexto.getString("ANPMN014630"));
                            // *** INDICADOR PERIODO MÍNIMO REVISIÓN ***
                            multimedioInteresVO.setIntPeriodoMinimoRevision(contexto.getBigDecimal("ANPMN014530").intValue());
                            // *** FORZAR FIN TRAMO FECHA PAGO ***
                            multimedioInteresVO.setIntForzarFinTramoFechaPago(contexto.getBigDecimal("ANPMN014640").intValue());
                            // *** COINCIDENCIA PLAZO REVISION CON FECHA DE PAGO ***
                            multimedioInteresVO.setIntCoincidenciaPlazoRevisionConFechaPago(contexto.getBigDecimal("ANPMN014660").intValue());
                            // *** CONDICIONES PROMOTOR/ADQUIERIENTE ***
                            multimedioInteresVO.setIntCondicionesDeAdquirenteOPromotor(contexto.getBigDecimal("ANPMN014680").intValue());
                            // ** APLANTILLAMOS TIPO FLEXIBILIDAD
                            multimedioInteresVO.setTipoFlexibilidad(contexto.getBigDecimal("ANPMN014860"));
                            // ** 20150922 Aplantillamos Id relación precio tarifa.
                            if (null != contexto.getBigDecimal("ANPMN014870")) {
                                multimedioInteresVO.setIdRelacionPrecioTarifa(contexto.getBigDecimal("ANPMN014870"));
                            }
                            lstMultimedioInteresVO.add(multimedioInteresVO);
                        } else {
                            // Tramo fijo
                            CondicionesInteresC condicionesInteresC = condicionesInteresDao.createNewObject();
                            condicionesInteresC.inicializar();
                            // *** ORDEN (parte de la clave ) ***
                            condicionesInteresC.getCondicionesInteresKey().setIntOrdenDelTramo(contexto.getBigDecimal("ANPMN014060").intValue());
                            // *** TIPO DE INTERÉS ***
                            condicionesInteresC.setStrTipoDeInteres(contexto.getString("ANPMN014070"));
                            // *** GESTIÓN CAMPAÑAS PRÉSTAMOS ***
                            condicionesInteresC.setIntGestionCampanas(contexto.getBigDecimal("ANPMN014080").intValue());
                            // *** VALORACION ***
                            String indValoracion = contexto.getString("ANPMN014100");
                            if (indValoracion.equals("1") || indValoracion.equals("4")) {
                                condicionesInteresC.setStrValoracionIVI(contexto.getString("ANPMN014090"));
                            }
                            // *** PLAZO ***
                            String indPlazo = contexto.getString("ANPMN014140");
                            if (indPlazo.equals("1") || indPlazo.equals("4")) {
                                condicionesInteresC.setIntPlazo(contexto.getBigDecimal("ANPMN014110").intValue());
                            } else if (indPlazo.equals("3")) {
                                condicionesInteresC.setIntPlazo(contexto.getBigDecimal("ANPMN014130").intValue());
                            }
                            // *** INTERÉS ***
                            String indInteres = contexto.getString("ANPMN014180");
                            if (indInteres.equals("1") || indInteres.equals("4")) {
                                condicionesInteresC.setIntInteres(contexto.getBigDecimal("ANPMN014150"));
                            } else if (indInteres.equals("3")) {
                                condicionesInteresC.setIntInteres(contexto.getBigDecimal("ANPMN014170"));
                            }
                            // Sólo para colectivos
                            if (null != colectivo && !colectivo.equals(BigDecimal.ZERO)) {
                                condicionesInteresC.setIntMaximoInteresInicial(contexto.getBigDecimal("ANPMN014190"));
                            }
                            // *** TOMA DE REFERENCIA ***
                            String indTomaReferencia = contexto.getString("ANPMN014210");
                            if (indTomaReferencia.equals("1") || indTomaReferencia.equals("4")) {
                                condicionesInteresC.setIntTomaDeReferencia(contexto.getBigDecimal("ANPMN014200").intValue());
                            }
                            // *** TIPO REFERENCIA, sólo para colectivos ***
                            if (null != colectivo && !colectivo.equals(BigDecimal.ZERO)) {
                                String indTipoRef = contexto.getString("ANPMN014270");
                                if (indTipoRef.equals("1") || indTipoRef.equals("4")) {
                                    condicionesInteresC.setIntDifMinEntreTiposReferencia(contexto.getBigDecimal("ANPMN014220"));
                                }
                            }
                            // *** TIPO DE INTERES DE DEMORA ***
                            condicionesInteresC.setIntTipoInteresDemora(contexto.getBigDecimal("ANPMN014360").intValue());
                            // *** PORCENTAJE SOBRE CAPITAL ***
                            String indPorcSobreCapital = contexto.getString("ANPMN014380");
                            if (indPorcSobreCapital.equals("1") || indPorcSobreCapital.equals("4")) {
                                condicionesInteresC.setIntPorDemoraSobreCapital(contexto.getBigDecimal("ANPMN014370"));
                            } else if (indPorcSobreCapital.equals("3")) {
                                condicionesInteresC.setIntPorDemoraSobreCapital(contexto.getBigDecimal("ANPMN014400"));
                            }
                            // *** PORCENTAJE SOBRE INTERESES ***
                            String indSobreInteres = contexto.getString("ANPMN014420");
                            if (indSobreInteres.equals("1") || indSobreInteres.equals("4")) {
                                condicionesInteresC.setIntPorDemoraSobreInteres(contexto.getBigDecimal("ANPMN014410"));
                            } else if (indSobreInteres.equals("3")) {
                                condicionesInteresC.setIntPorDemoraSobreInteres(contexto.getBigDecimal("ANPMN014440"));
                            }
                            // *** NÚMERO PERIODO REVISION ***
                            String indNumPeriodoRevision = contexto.getString("ANPMN014480");
                            if (indNumPeriodoRevision.equals("1") || indNumPeriodoRevision.equals("4")) {
                                condicionesInteresC.setIntNumPeriodosRevision(contexto.getBigDecimal("ANPMN014450").intValue());
                            } else if (indNumPeriodoRevision.equals("3")) {
                                condicionesInteresC.setIntNumPeriodosRevision(contexto.getBigDecimal("ANPMN014470").intValue());
                            }
                            // *** UNIDAD PERIODO REVISIÓN ***
                            String indUnidadPeriodoRevision = contexto.getString("ANPMN014500");
                            if (indUnidadPeriodoRevision.equals("1") || indUnidadPeriodoRevision.equals("4") || indUnidadPeriodoRevision.equals("0")) {
                                condicionesInteresC.setStrUnidadPeriodosRevision(contexto.getString("ANPMN014490"));
                            }
                            // *** TIPO PERIODO REVISIÓN ***
                            String indTipoPeriodoRevision = contexto.getString("ANPMN014520");
                            if (indTipoPeriodoRevision.equals("1") || indTipoPeriodoRevision.equals("4")) {
                                condicionesInteresC.setIntTipoPeriodosRevision(contexto.getBigDecimal("ANPMN014510").intValue());
                            }
                            // *** PAGO ÚNICO VENCIMIENTO FINAL ***
                            condicionesInteresC.setStrPagoUnicoVencimientoFinal(contexto.getBigDecimal("ANPMN014540").toString());
                            // *** NUMERO PERIODOS PERIODICIDAD ***
                            String indNumPeriodosPeriodicidad = contexto.getString("ANPMN014560");
                            if (indNumPeriodosPeriodicidad.equals("1") || indNumPeriodosPeriodicidad.equals("4")) {
                                condicionesInteresC.setIntPeriodicidadNumPeriodo(contexto.getBigDecimal("ANPMN014550").intValue());
                            }
                            // *** UNIDAD PERIODO PERIODICIDAD ***
                            String indUnidadPeriodoPeriodicidad = contexto.getString("ANPMN014580");
                            if (indUnidadPeriodoPeriodicidad.equals("1") || indUnidadPeriodoPeriodicidad.equals("4")) {
                                condicionesInteresC.setStrPeriodicidadUnidadPeriodo(contexto.getString("ANPMN014570"));
                            }
                            // *** TIPO PERIODO PERIODICIDAD ***
                            String indTipoPeriodoPeriodicidad = contexto.getString("ANPMN014600");
                            if (indTipoPeriodoPeriodicidad.equals("1") || indTipoPeriodoPeriodicidad.equals("4")) {
                                condicionesInteresC.setIntPeriodicidadTipoPeriodo(contexto.getBigDecimal("ANPMN014590").intValue());
                            }
                            // *** INDICADOR PERIODO MÍNIMO LIQUIDACIÓN ***
                            condicionesInteresC.setIntIndPeriodoMinimoLiquidacion(contexto.getBigDecimal("ANPMN014610").intValue());
                            // *** NÚMERO PERIODO MÍNIMO LIQUIDACIÓN ***
                            condicionesInteresC.setIntNumPeriodoMinLiquidacion(contexto.getBigDecimal("ANPMN014620").intValue());
                            // *** UNIDAD PERIODO MÍNIMO LIQUIDACIÓN ***
                            condicionesInteresC.setStrUnidadPeriodoMinLiquidacion(contexto.getString("ANPMN014630"));
                            // *** INDICADOR PERIODO MÍNIMO REVISIÓN ***
                            condicionesInteresC.setIntPeriodoMinimoRevision(contexto.getBigDecimal("ANPMN014530").intValue());
                            // *** FORZAR FIN TRAMO FECHA PAGO ***
                            condicionesInteresC.setIntForzarFinTramoFechaPago(contexto.getBigDecimal("ANPMN014640").intValue());
                            // *** COINCIDENCIA PLAZO REVISION CON FECHA DE PAGO ***
                            condicionesInteresC.setIntCoincidenciaPlazoRevisionConFechaPago(contexto.getBigDecimal("ANPMN014660").intValue());
                            // *** CONDICIONES PROMOTOR/ADQUIERIENTE ***
                            condicionesInteresC.setIntCondicionesDeAdquirenteOPromotor(contexto.getBigDecimal("ANPMN014680").intValue());
                            // ** 20150922 Aplantillamos en el tramo fijo id relación precio tarifa
                            if (null != contexto.getBigDecimal("ANPMN014870")) {
                                condicionesInteresC.setBidIdRelacion(contexto.getBigDecimal("ANPMN014870"));
                            }
                            // Seteamos a nivel oficina los siguientes campos:
                            condicionesInteresC.setIntNivelPlazo(CTE_NIVEL_OFICINA.intValue());
                            condicionesInteresC.setIntNivelDif(CTE_NIVEL_OFICINA.intValue());
                            condicionesInteresC.setIntNivelPorDemoraSobreCapital(CTE_NIVEL_OFICINA.intValue());
                            condicionesInteresC.setIntNivelPorDemoraSobreInteres(CTE_NIVEL_OFICINA.intValue());
                            condicionesInteresC.setIntNivelNumPeriodosRevision(CTE_NIVEL_OFICINA.intValue());
                            condicionesInteresC.setIntNivelSuelo(CTE_NIVEL_OFICINA.intValue());
                            condicionesInteresC.setIntNivelTecho(CTE_NIVEL_OFICINA.intValue());
                            // Seteamos el usuario genérico
                            condicionesInteresC.setStrUsuario(CTE_USUARIO_GENERICO);
                            // Damos valor cero a los siguientes campos:
                            condicionesInteresC.setStrUnidadDelPeriodo("0");
                            condicionesInteresC.setStrMonedaTipoReferencia("0");
                            // Establecemos la relación con la solicitud
                            datosSolicitudC.addCondicionInteres(condicionesInteresC);
                            condicionesInteresC.getCondicionesInteresKey().setSolicitud(datosSolicitudC);
                        }
                    }
                // Fin if nivel 0 ó 10
                }
                // ---------------------------------> RECORREMOS EL CONTEXTO CONTEXTO DE DIFERENCIALES, TECHOS Y SUELOS: Sólo si es nivel 0 ó 10 <-------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN015")) {
                    // Comprobamos que son los datos del nivel 0 o 10
                    if (contexto.getBigDecimal("ANPMN015050").equals(BigDecimal.ZERO) || contexto.getBigDecimal("ANPMN015050").equals(BigDecimal.TEN)) {
                        CondicionesInteresC condicionesInteresC = null;
                        Iterator<MultimedioInteresVO> iterator = lstMultimedioInteresVO.iterator();
                        while (iterator.hasNext()) {
                            MultimedioInteresVO esteMultimedioInteresVO = iterator.next();
                            if (esteMultimedioInteresVO.getIntOrdenDelTramo().equals(contexto.getBigDecimal("ANPMN015060").intValue())) {
                                // Creamos los objetos de intereses que tiene tramos variables
                                condicionesInteresC = condicionesInteresDao.createNewObject();
                                condicionesInteresC.inicializar();
                                // Asignamos primero los datos de interés del contexto 14, almacenados en el objeto multimedioInteresVO:
                                // *** ORDEN (parte de la clave )
                                condicionesInteresC.getCondicionesInteresKey().setIntOrdenDelTramo(esteMultimedioInteresVO.getIntOrdenDelTramo().intValue());
                                // *** TIPO DE INTERÉS ***
                                condicionesInteresC.setStrTipoDeInteres(esteMultimedioInteresVO.getStrTipoDeInteres());
                                // *** GESTIÓN CAMPAÑAS PRÉSTAMOS ***
                                condicionesInteresC.setIntGestionCampanas(esteMultimedioInteresVO.getIntGestionCampanas());
                                // *** VALORACION ***
                                condicionesInteresC.setStrValoracionIVI(esteMultimedioInteresVO.getStrValoracionIVI());
                                // *** PLAZO ***
                                condicionesInteresC.setIntPlazo(esteMultimedioInteresVO.getIntPlazo());
                                // *** INTERÉS ***
                                condicionesInteresC.setIntInteres(esteMultimedioInteresVO.getIntInteres());
                                // Sólo para colectivos
                                if (null != colectivo && !colectivo.equals(BigDecimal.ZERO)) {
                                    condicionesInteresC.setIntMaximoInteresInicial(esteMultimedioInteresVO.getIntMaximoInteresInicial());
                                }
                                // *** TOMA DE REFERENCIA ***
                                condicionesInteresC.setIntTomaDeReferencia(esteMultimedioInteresVO.getIntTomaDeReferencia());
                                // *** TIPO REFERENCIA, sólo para colectivos ***
                                if (null != colectivo && !colectivo.equals(BigDecimal.ZERO)) {
                                    condicionesInteresC.setIntDifMinEntreTiposReferencia(esteMultimedioInteresVO.getIntDifMinEntreTiposReferencia());
                                }
                                // *** TIPO DE INTERES DE DEMORA ***
                                condicionesInteresC.setIntTipoInteresDemora(esteMultimedioInteresVO.getIntTipoInteresDemora());
                                // *** PORCENTAJE SOBRE CAPITAL ***
                                condicionesInteresC.setIntPorDemoraSobreCapital(esteMultimedioInteresVO.getIntPorDemoraSobreCapital());
                                // *** PORCENTAJE SOBRE INTERESES ***
                                condicionesInteresC.setIntPorDemoraSobreInteres(esteMultimedioInteresVO.getIntPorDemoraSobreInteres());
                                // *** NÚMERO PERIODO REVISION ***
                                condicionesInteresC.setIntNumPeriodosRevision(esteMultimedioInteresVO.getIntNumPeriodosRevision());
                                // *** UNIDAD PERIODO REVISIÓN ***
                                condicionesInteresC.setStrUnidadPeriodosRevision(esteMultimedioInteresVO.getStrUnidadPeriodosRevision());
                                // *** TIPO PERIODO REVISIÓN ***
                                condicionesInteresC.setIntTipoPeriodosRevision(esteMultimedioInteresVO.getIntTipoPeriodosRevision());
                                // *** INDICADOR PERIODO MÍNIMO REVISIÓN ***
                                condicionesInteresC.setIntPeriodoMinimoRevision(esteMultimedioInteresVO.getIntPeriodoMinimoRevision());
                                // *** PAGO ÚNICO VENCIMIENTO FINAL ***
                                condicionesInteresC.setStrPagoUnicoVencimientoFinal(esteMultimedioInteresVO.getStrPagoUnicoVencimientoFinal());
                                // *** NUMERO PERIODOS PERIODICIDAD ***
                                condicionesInteresC.setIntPeriodicidadNumPeriodo(esteMultimedioInteresVO.getIntPeriodicidadNumPeriodo());
                                // *** UNIDAD PERIODO PERIODICIDAD ***
                                condicionesInteresC.setStrPeriodicidadUnidadPeriodo(esteMultimedioInteresVO.getStrPeriodicidadUnidadPeriodo());
                                // *** TIPO PERIODO PERIODICIDAD ***
                                condicionesInteresC.setIntPeriodicidadTipoPeriodo(esteMultimedioInteresVO.getIntPeriodicidadTipoPeriodo());
                                // *** INDICADOR PERIODO MÍNIMO LIQUIDACIÓN ***
                                condicionesInteresC.setIntIndPeriodoMinimoLiquidacion(esteMultimedioInteresVO.getIntIndPeriodoMinimoLiquidacion());
                                // *** NÚMERO PERIODO MÍNIMO LIQUIDACIÓN ***
                                condicionesInteresC.setIntNumPeriodoMinLiquidacion(esteMultimedioInteresVO.getIntNumPeriodoMinLiquidacion());
                                // *** UNIDAD PERIODO MÍNIMO LIQUIDACIÓN ***
                                condicionesInteresC.setStrUnidadPeriodoMinLiquidacion(esteMultimedioInteresVO.getStrUnidadPeriodoMinLiquidacion());
                                // *** FORZAR FIN TRAMO FECHA PAGO ***
                                condicionesInteresC.setIntForzarFinTramoFechaPago(esteMultimedioInteresVO.getIntForzarFinTramoFechaPago());
                                // *** COINCIDENCIA PLAZO REVISION CON FECHA DE PAGO ***
                                condicionesInteresC.setIntCoincidenciaPlazoRevisionConFechaPago(esteMultimedioInteresVO.getIntCoincidenciaPlazoRevisionConFechaPago());
                                // *** CONDICIONES PROMOTOR/ADQUIERIENTE ***
                                condicionesInteresC.setIntCondicionesDeAdquirenteOPromotor(esteMultimedioInteresVO.getIntCondicionesDeAdquirenteOPromotor());
                                // ** Aplantillamos el tramo interés con el id relación de precio tarifa.
                                if (null != esteMultimedioInteresVO.getIdRelacionPrecioTarifa()) {
                                    condicionesInteresC.setBidIdRelacion(esteMultimedioInteresVO.getIdRelacionPrecioTarifa());
                                }
                                // Seteamos a nivel oficina los siguientes campos:
                                condicionesInteresC.setIntNivelPlazo(CTE_NIVEL_OFICINA.intValue());
                                condicionesInteresC.setIntNivelDif(CTE_NIVEL_OFICINA.intValue());
                                condicionesInteresC.setIntNivelPorDemoraSobreCapital(CTE_NIVEL_OFICINA.intValue());
                                condicionesInteresC.setIntNivelPorDemoraSobreInteres(CTE_NIVEL_OFICINA.intValue());
                                condicionesInteresC.setIntNivelNumPeriodosRevision(CTE_NIVEL_OFICINA.intValue());
                                condicionesInteresC.setIntNivelSuelo(CTE_NIVEL_OFICINA.intValue());
                                condicionesInteresC.setIntNivelTecho(CTE_NIVEL_OFICINA.intValue());
                                // Seteamos el usuario genérico
                                condicionesInteresC.setStrUsuario(CTE_USUARIO_GENERICO);
                                // Damos valor cero a los siguientes campos:
                                condicionesInteresC.setStrUnidadDelPeriodo("0");
                                condicionesInteresC.setStrMonedaTipoReferencia("0");
                                // Seteamos los valores del contexto 15 - DIFERENCIALES
                                // *** TIPO DE CONDICION *** (parte de la clave )
                                condicionesInteresC.getCondicionesInteresKey().setIntTipoCondicion(contexto.getBigDecimal("ANPMN015070").intValue());
                                // *** DIFERENCIAL ESTANDAR ***
                                String indDiferencialEstandar = contexto.getString("ANPMN015120");
                                if (indDiferencialEstandar.equals("1") || indDiferencialEstandar.equals("4")) {
                                    condicionesInteresC.setIntDif(contexto.getBigDecimal("ANPMN015090"));
                                } else if (indDiferencialEstandar.equals("3")) {
                                    condicionesInteresC.setIntDif(contexto.getBigDecimal("ANPMN015110"));
                                }
                                // *** DIFERENCIAL MIN MAX ESTANDAR ***
                                String indDiferencialMinMaxEstandar = contexto.getString("ANPMN015160");
                                if (indDiferencialMinMaxEstandar.equals("1") || indDiferencialMinMaxEstandar.equals("4")) {
                                    condicionesInteresC.setIntDifMinimoMaximo(contexto.getBigDecimal("ANPMN015130"));
                                } else if (indDiferencialMinMaxEstandar.equals("3")) {
                                    condicionesInteresC.setIntDifMinimoMaximo(contexto.getBigDecimal("ANPMN015150"));
                                }
                                // *** DIFERENCIAL BONIFICADO ESTÁNDAR ***
                                String indDiferencialBonificadoEstandar = contexto.getString("ANPMN015200");
                                if (indDiferencialBonificadoEstandar.equals("1") || indDiferencialBonificadoEstandar.equals("4")) {
                                    condicionesInteresC.setIntDifBonificado(contexto.getBigDecimal("ANPMN015170"));
                                } else if (indDiferencialBonificadoEstandar.equals("3")) {
                                    condicionesInteresC.setIntDifBonificado(contexto.getBigDecimal("ANPMN015190"));
                                }
                                // *** TIPO DE REFERENCIA ***
                                condicionesInteresC.setIntTipoReferencia(contexto.getBigDecimal("ANPMN015210").intValue());
                                // *** INDICADOR SOBRE QUE APLICA EL SUELO ***
                                condicionesInteresC.setIntSobreQueAplicaElSuelo(contexto.getBigDecimal("ANPMN015220").intValue());
                                // *** SUELO ***
                                String indSuelo = contexto.getString("ANPMN015260");
                                if (indSuelo.equals("1") || indSuelo.equals("4")) {
                                    condicionesInteresC.setIntSuelo(contexto.getBigDecimal("ANPMN015230"));
                                } else if (indSuelo.equals("3")) {
                                    condicionesInteresC.setIntSuelo(contexto.getBigDecimal("ANPMN015250"));
                                }
                                // *** TECHO ***
                                String indTecho = contexto.getString("ANPMN015300");
                                if (indTecho.equals("1") || indTecho.equals("4")) {
                                    condicionesInteresC.setIntTecho(contexto.getBigDecimal("ANPMN015270"));
                                } else if (indTecho.equals("3")) {
                                    condicionesInteresC.setIntTecho(contexto.getBigDecimal("ANPMN015290"));
                                }
                                // *** APLICA SUELO AL INTERÉS INICIAL ***
                                condicionesInteresC.setIntAplicaSueloInteresInicial(contexto.getBigDecimal("ANPMN015310").intValue());
                                // *** SUELO INTERÉS INICIAL ***
                                String indSueloInicial = contexto.getString("ANPMN015350");
                                if (indSueloInicial.equals("1") || indSueloInicial.equals("4")) {
                                    condicionesInteresC.setIntSueloInteresInicial(contexto.getBigDecimal("ANPMN015320"));
                                } else if (indSueloInicial.equals("3")) {
                                    condicionesInteresC.setIntSueloInteresInicial(contexto.getBigDecimal("ANPMN015340"));
                                }
                                // *** PORCENTAJE MÍNIMO DE VARIACION ***
                                String indPorcentajeMinimoVariacion = contexto.getString("ANPMN015370");
                                if (indPorcentajeMinimoVariacion.equals("1") || indPorcentajeMinimoVariacion.equals("4")) {
                                    condicionesInteresC.setIntMinimoVariacion(contexto.getBigDecimal("ANPMN015360"));
                                }
                                // *** SOBRE QUE APLICA EL MÍNIMO DE VARIACIÓN ***
                                condicionesInteresC.setIntIndMinimoVariacion(contexto.getBigDecimal("ANPMN015380").intValue());
                                // Establecemos la relación con la solicitud
                                datosSolicitudC.addCondicionInteres(condicionesInteresC);
                                condicionesInteresC.getCondicionesInteresKey().setSolicitud(datosSolicitudC);
                            }
                        }
                    // FIN DEL WHILE
                    }
                // fin del if nivel 0 ó 10
                }
                // ----------------------------------> RECORREMOS EL CONTEXTO TIPO DE REFERENCIA  <--------------------------------------------------------------
                if (contexto.getNombre().equalsIgnoreCase("ANPMN018")) {
                    Iterator<CondicionesInteresC> iterator = datosSolicitudC.getCondicionesInteres().iterator();
                    // Iteramos las condiciones de interés de la solicitud para meterles los datos del tipo de referencia
                    while (iterator.hasNext()) {
                        CondicionesInteresC esteCondicionesInteresC = iterator.next();
                        BigDecimal tipoReferencia = new BigDecimal(esteCondicionesInteresC.getIntTipoReferencia());
                        // Para este tipo de referencia seteamos los valores del tipo de referencia de prioridad 1
                        if (contexto.getBigDecimal("ANPMN018030").equals(tipoReferencia) && contexto.getBigDecimal("ANPMN018050").equals(BigDecimal.ONE)) {
                            // *** PRIORIDAD *** (parte de la clave)
                            esteCondicionesInteresC.getCondicionesInteresKey().setIntPrioridad(contexto.getBigDecimal("ANPMN018050").intValue());
                            esteCondicionesInteresC.setIntTipoReferencia(contexto.getBigDecimal("ANPMN018030").intValue());
                            esteCondicionesInteresC.setStrPeriodicidadPublicacion(contexto.getString("ANPMN018070"));
                            esteCondicionesInteresC.setIntFechaAConsiderar(contexto.getBigDecimal("ANPMN018080").intValue());
                            esteCondicionesInteresC.setIntPeriodosARestar(contexto.getBigDecimal("ANPMN018090").intValue());
                            if (!UtilidadesTramitacionMultimedio.isBlankOrNull(contexto.getString("ANPMN018100"))) {
                                esteCondicionesInteresC.setStrUnidadDelPeriodo(contexto.getString("ANPMN018100"));
                            }
                            esteCondicionesInteresC.setStrEsEspecial(contexto.getString("ANPMN018110"));
                            if (!UtilidadesTramitacionMultimedio.isBlankOrNull(contexto.getString("ANPMN018120"))) {
                                esteCondicionesInteresC.setStrMonedaTipoReferencia(contexto.getString("ANPMN018120"));
                            }
                            esteCondicionesInteresC.setIntCoincidenciaPlazoRevisionConPlazoTipoReferencia(contexto.getBigDecimal("ANPMN018130").intValue());
                            esteCondicionesInteresC.setStrTipoReferenciaPeriodoAnterior(contexto.getString("ANPMN018140"));
                        }
                    }
                }
            // FIN CONTEXTO TIPOS DE REFERENCIA
            }
        // Fin del if si hay contextos
        }
    // Fin de for que recorre los contextos
    }

    /**
     * Método para recuperar el objeto DatosSolicitudC
     * @return DatosSolicitudC
     */
    public DatosSolicitudC getDatosSolicitudC() {
        return datosSolicitudC;
    }

    public void setDatosSolicitudC(DatosSolicitudC datosSolicitudC) {
        this.datosSolicitudC = datosSolicitudC;
    }

    public void completarDatosSolicitud(BigDecimal bigDigitoSolicitud, BigDecimal bigCodigoProducto, BigDecimal bigCodigoSubproducto, BigDecimal bigColectivo, BigDecimal bigOficinaContable, BigDecimal idTarifa, BigDecimal indGrupoInmobiliario, BigDecimal tipoPrescriptor) {
        datosSolicitudC.setDigitoSolicitud(bigDigitoSolicitud);
        datosSolicitudC.setProducto(bigCodigoProducto);
        datosSolicitudC.setSubproducto(bigCodigoSubproducto);
        datosSolicitudC.setLineaColectivo(bigColectivo);
        datosSolicitudC.setOficinaContable(bigOficinaContable);
        datosSolicitudC.setTipoOperacion("00");
        datosSolicitudC.setEstadoSolicitud(CTE_ESTADO_VERSION_VIGENTE_NO_EN_CURSO);
        datosSolicitudC.setMonedaTasacion(ServicioNegocio.getContexto().getCodigoContable());
        datosSolicitudC.setMonedaImpuestosInversion(ServicioNegocio.getContexto().getCodigoContable());
        datosSolicitudC.setMonedaInversion(ServicioNegocio.getContexto().getCodigoContable());
        datosSolicitudC.setMonedaGastosInversion(ServicioNegocio.getContexto().getCodigoContable());
        datosSolicitudC.setNivelImporteSolicitado(CTE_NIVEL_OFICINA);
        datosSolicitudC.setNivelPlazoCarencia(CTE_NIVEL_OFICINA);
        datosSolicitudC.setNivelPlazoDiferimiento(CTE_NIVEL_OFICINA);
        datosSolicitudC.setNivelPlazoDesembolso(CTE_NIVEL_OFICINA);
        datosSolicitudC.setNivelPlazoTotal(CTE_NIVEL_OFICINA);
        datosSolicitudC.setIntervencionPoliza("N");
        datosSolicitudC.setUsuario(CTE_USUARIO_GENERICO);
        datosSolicitudC.setInmuebleEspana(BigDecimal.ONE);
        if (null != tipoPrescriptor) {
            datosSolicitudC.setTipoPrescriptor(tipoPrescriptor);
        }
        datosSolicitudC.setTimestamp(DateUtils.toSQLTimestamp(DateUtils.dateNow()));
        datosSolicitudC.setClaseRiesgo(BigDecimal.ONE);
        /*20150908 Añadimos el id tarifa*/
        datosSolicitudC.setIdTarifa(idTarifa);
        /*20150908 Añadimos el indicador grupo inmobiliario*/
        datosSolicitudC.setIndGrupoInmobiliario(indGrupoInmobiliario);
        // 2016-07-01 - Indicador de capital negativo y numero dias irregulares
        datosSolicitudC.setIndCapitalNegativo(CTE_CADENA_VACIA);
        datosSolicitudC.setNumDiasIrregulares(BigDecimal.ZERO);
    }

    public static void setCampoIndice(BigDecimal campoIndice) {
        AbstractSolicitudMultimedio.campoIndice = campoIndice;
    }

    /**
     * Método que comprueba la combinación de parámetros que permite
     * diferenciar una solicitud que es banca móvil o banca web y por
     * tanto es un préstamo precondedido
     *
     * @param tipoPrescriptor
     * @param canal
     * @param indModoAltaAuto
     * @return
     */
    public static boolean esPreconcedido(BigDecimal tipoPrescriptor, BigDecimal canal, BigDecimal indModoAltaAuto) {
        boolean esBancaMovil = false;
        if (null != tipoPrescriptor && null != canal && null != indModoAltaAuto && 7 == tipoPrescriptor.intValue() && 4 == canal.intValue() && 4 == indModoAltaAuto.intValue()) {
            esBancaMovil = true;
        }
        boolean esBancaWeb = false;
        if (null != tipoPrescriptor && null != canal && null != indModoAltaAuto && 6 == tipoPrescriptor.intValue() && 6 == canal.intValue() && 4 == indModoAltaAuto.intValue()) {
            esBancaWeb = true;
        }
        return esBancaMovil || esBancaWeb;
    }
}
