/**
 * Servicio ANPM_078.
 * Recibe como parámetros de entrada un Nuc e invoca a iLog (paso = 0) para comprobar si 
 * el proceso de preformalización puede ir por e-notario o no.
 */
package es.caixagalicia.anpm.prestamos.rules.servicios.fachada;

import java.math.BigDecimal;

import org.apache.commons.lang.StringUtils;

import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.comun.constantes.CodigosError;
import es.caixagalicia.anpm.prestamos.comun.constantes.ConstantesComun;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.rules.servicios.aplicacion.GestionILog;
import es.caixagalicia.anpm.prestamos.rules.servicios.fachada.contextos.ContextoTratamientoEnotario;
import es.caixagalicia.anpm.prestamos.rules.ws.anpmrj0000.ANPMRJ0000Request;
import es.caixagalicia.anpm.prestamos.rules.ws.anpmrj0000.ANPMRJ0000Response;
import es.caixagalicia.anpm.prestamos.rules.ws.anpmrj0000.TipoPaso_WS;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;

/**
 * @author V360173
 *
 * AP: ANPM
 * CC:  507
 * CO:  078
 * 
 * Servicio de negocio que nos indica si un préstamo se puede preformalizar o no a través de E-Notario invocando
 * para ello la regla de negocio ANPMRJ0000 de ILog.
 * 
 */
public class ComprobacionesEnotarioSrv extends ServicioNegocio
{	
	final private static String CTE_ILOG= "ILOG";
	final private static String CTE_ANPM= "ANPM";
		
	/*Campos de entrada*/
	public static final String CTE_NUC_SOLICITUD = "NUC";
	public static final String CTE_OPCION 		 = "OPCION";
	public static final String CTE_TAREA_SGR 	 = "1-NO EXISTE LA TAREA PARA EL EXPEDIENTE";
	public static final String CTE_VALOR_DOS     = "2";
	public static final String CTE_VALOR_IND	 = "S";
	
	private static final String CTE_ILOG_RES_ID_CTX  = "ANPMN200";
	private static final String CTE_PUEDE_IR_POR_ENOTARIO = "ANPMN200010";

	@Override
	public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada){
		/* Establecemos el Diario Electrónico */
		contexto.setDiarioElectronico(new DiarioElectronico(
			Constantes.CTE_OPERACION_AC,
			Integer.valueOf(0),
            BigDecimal.ZERO,
            BigDecimal.ZERO,
            BigDecimal.ZERO,
            BigDecimal.ZERO,
            Constantes.CTE_STRING_EMPTY,
            Constantes.CTE_STRING_EMPTY,
            BigDecimal.ZERO,
            BigDecimal.ZERO,
            Integer.valueOf(0)));
	
		IContexto ctx = null;
		IContexto[] ctxSalida = null;
				
		/* Recuperar los datos de entrada de la solicitud a tratar */
		boolean esPignorativo 		= false;
		boolean tieneTarea_SGR 	    = true;
	
		/* Clase gestora de datos de solicitud */
		GestionDatosSolicitud gds = new GestionDatosSolicitud();
		
		BigDecimal nucSolicitud = datosEntrada.getDecimal(CTE_NUC_SOLICITUD);
		String opcion = datosEntrada.getString(CTE_OPCION); //esta cadena tendrá o ANPM o ILOG
		/* Obtener última versión de la solicitud */
		DatosSolicitudC datosSolicitud = gds.getUltimaVersion(nucSolicitud);
		
		
		if (UtilidadesComun.esPreconcedido(datosSolicitud.getTipoExpediente())) {
			 
			IContexto salida = ContextoFactory.getInstance().getContexto(CTE_ILOG_RES_ID_CTX);
			salida.put(CTE_PUEDE_IR_POR_ENOTARIO, BigDecimal.ZERO);
				
			ctxSalida = new IContexto[Constantes.CTE_UNO];
			ctxSalida[Constantes.CTE_CERO] = salida;
		}
		else{
			
			//Se invoca el servicio de EEXP_624 para comprobar si alguno de los hijos del expediente actual es pignorativo		
			IDatosEntradaTx datosEntradaEEXP624 = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),
					ConstantesComun.CTE_CUENTA_CONTABLE_EEXP, ConstantesComun.CTE_CODIGO_OPERACION_EEXP624);

			/*2016711 Invocamos el servicio */
			datosEntradaEEXP624.addCampo("OPERACION", "E");    // OBLIGATORIO 
			datosEntradaEEXP624.addCampo("NUC", nucSolicitud); // OBLIGATORIO

			IContexto[] salidaEEXP624 = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaEEXP624);

			if (null != salidaEEXP624) {
				for (IContexto buscado : salidaEEXP624){
					if (0 == buscado.getBigDecimal("EEXPN244020").compareTo(ConstantesComun.CTE_EXPEDIENTE_PIGNOR)) {// si un expediente hijo es pignorativo			
						esPignorativo = true;
						break;
					}
				}
			}

			//Se invoca el servicio de EEXP_274 para comprobar si tiene tarea SGR	
			IDatosEntradaTx datosEntradaEEXP274 = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),
					ConstantesComun.CTE_CUENTA_CONTABLE_EEXP, ConstantesComun.CTE_CODIGO_OPERACION_EEXP274);

			datosEntradaEEXP274.addCampo("NUC", nucSolicitud); 							 // OBLIGATORIO
			datosEntradaEEXP274.addCampo("CODIGO_PROCESO", ConstantesComun.CTE_CODIGO_TAREA); // OBLIGATORIO

			IContexto[] salidaEEXP274 = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaEEXP274);

			for (IContexto tareaSGR : salidaEEXP274 ){
				if (((CTE_VALOR_DOS.equals(tareaSGR.getString("EEXPN003070"))) && 
					 (CTE_TAREA_SGR.equals(tareaSGR.getString("EEXPN003080"))))||
					 (CTE_VALOR_IND.equals(tareaSGR.getString("EEXPN003090")))) {
					tieneTarea_SGR = false;
				}
			}
		
			/** se comprueba por el CIF de la solicitud si es comunidad de propietarios
			 * si es true, se encamina por oficina : 9-09-2019
			 */
			 
			boolean esComunidadPropietarios = UtilidadesComun.esProductoComunidadPropietarios(datosSolicitud.getProducto().toString(), 
					datosSolicitud.getSubproducto().toString());
			
			boolean esRefaccionario = UtilidadesTramitacion.esRefaccionario(
																		datosSolicitud.getRefaccionario(), 
																		datosSolicitud.getProducto(), 
																		datosSolicitud.getLineaColectivo(), 
																		datosSolicitud.getIdColectivo());
			
			boolean tieneDeposito = UtilidadesComun.tieneDeposito(datosSolicitud);
				
			ANPMRJ0000Response response = null;
			
			if(!esComunidadPropietarios && !esPignorativo && !tieneTarea_SGR && !esRefaccionario&& !tieneDeposito){
				ANPMRJ0000Request request = GestionILog.rellenarDatosEntradaIlog(datosSolicitud, TipoPaso_WS.PASO_PREFORMALIZACION);

				if (StringUtils.isNotBlank(opcion) && StringUtils.isNotEmpty(opcion)){
					if (CTE_ILOG.equals(opcion)) { // se decide si se va por la via ILOG o ANPM				
						response = GestionILog.invocarReglaIlog(request); // se invoca al método de ILOG
					}
					else if(CTE_ANPM.equals(opcion)){
						response = GestionILog.invocarReglaAnpm(request);  // se invoca al método de ANPM	
					}
					else {
					// Si la opción viene informada pero no es ni ILOG ni ANPM lanzamos el rollback
						ServicioNegocio.rollback(CodigosError.CTE_ERROR_PARAMETRO_NO_EXISTE, null, null,null ); 
					}
				}
				else  {
					// 20151112 Si no se informa la opción (ILOG O ANPM) por defecto va a ir por ANPM
					response = GestionILog.invocarReglaAnpm(request);  // se invoca al método de ANPM
				}

				if (response.getTareasExpediente().getTareasExpediente().getTareaENotario()) { // Comprobación de la decisión de si es apto o no para e-notario

					datosSolicitud.setAptaEnotario(BigDecimal.ONE); // si es apto seteamos el campo AN2501620 = 1
				}
				else {
					datosSolicitud.setAptaEnotario(BigDecimal.ZERO); // si no es apto seteamos el campo AN2501620 = 0
				}

				ctx = ContextoTratamientoEnotario.rellenarDatosContexto(response);

				ctxSalida = new IContexto[Constantes.CTE_UNO];
				ctxSalida[Constantes.CTE_CERO] = ctx;
			}
			else {// sino, va por oficina		
				IContexto salida = ContextoFactory.getInstance().getContexto(CTE_ILOG_RES_ID_CTX);
				salida.put(CTE_PUEDE_IR_POR_ENOTARIO, BigDecimal.ZERO);
				
				ctxSalida = new IContexto[Constantes.CTE_UNO];
				ctxSalida[Constantes.CTE_CERO] = salida;
			}
		}
		
	  return ctxSalida;
	}
}
