/**
 */
package es.caixagalicia.anpm.prestamos.autorizaciones.servicios.fachada;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang.StringUtils;
import es.caixagalicia.anpm.prestamos.autorizaciones.persistencia.DatosAutorizacionC;
import es.caixagalicia.anpm.prestamos.autorizaciones.persistencia.DatosAutorizacionKey;
import es.caixagalicia.anpm.prestamos.autorizaciones.servicios.aplicacion.GestionDatosAutorizacion;
import es.caixagalicia.anpm.prestamos.autorizaciones.utilidades.AutorizacionVO;
import es.caixagalicia.anpm.prestamos.autorizaciones.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.clausulas.ParametrosC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionClausulasRestringuidas;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesAutorizacion;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudKey;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionNivelesAutorizacion;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

/**
 * Clase abstracta que encapsula el comportamiento común de los servicios del
 * módulo de autorizaciones.
 * Incorpora las operaciones a invocar sobre la aplicación AGEN - Autorizaciones
 * genéricas.
 *
 * @author F001329
 */
public abstract class DatosAutorizacionAbstractSrv extends ServicioNegocio {

    /**
     * Cuenta contable de la aplicacion AGEN.
     */
    private static final Integer CUENTA_CONTABLE_APLICACION_AGEN = Integer.valueOf(869);

    /**
     * Cuenta contable de la aplicacion ANPM.
     */
    private static final Integer CUENTA_CONTABLE_APLICACION_ANPM = Integer.valueOf(507);

    /*Servicio de consulta de centros, CGAL_438*/
    private static final Integer CTE_SN_CONS_CENTRO_CC = new Integer(100);

    private static final Integer CTE_SN_CONS_CENTRO_CO = new Integer(438);

    private static final String CTE_SN_CONS_CENTRO_COD_ERR = "CG154C010";

    private static final String CTE_SN_CONS_CENTRO_DESCR_OFICINA = "CG154C050";

    /**
     * Servicio de consulta de solicitud en la aplicación ANPM.
     */
    private static final Integer CODIGO_OPERACION_CONS_SOLICITUD_SRV = Integer.valueOf(150);

    private static final String CAMPO_CONS_SOLICITUD_OFICINA_SOLICITUD = "OFICINA_SOLICITUD";

    private static final String CAMPO_CONS_SOLICITUD_NUMERO_SOLICITUD = "NUMERO_SOLICITUD";

    private static final String CAMPO_CONS_SOLICITUD_VERSION_SOLICITUD = "VERSION_SOLICITUD";

    private static final String CAMPO_CONS_SOLICITUD_DETALLE = "DETALLE_HIJOS";

    private static final int CTE_ERROR_AUTORIZ_AGEN_ALTA = 12351;

    /**
     * Servicio de alta de autorización en la aplicación AGEN.
     */
    private static final Integer CODIGO_OPERACION_ALTA_AUTORIZACION_SRV = Integer.valueOf(100);

    private static final int CAMPO_ALTA_INDICADOR_OPERACION = 0;

    private static final int CAMPO_ALTA_ID_AUTORIZACION = 1;

    private static final int CAMPO_ALTA_ID_APLICACION = 2;

    private static final int CAMPO_ALTA_ID_PROYECTO = 3;

    private static final int CAMPO_ALTA_ID_PROCESO = 4;

    private static final int CAMPO_ALTA_ID_TAREA = 5;

    private static final int CAMPO_ALTA_ID_WORKFLOW = 6;

    private static final int CAMPO_ALTA_USUARIO = 13;

    private static final int CAMPO_ALTA_ID_APLICACION_CLIENTE = 16;

    private static final int CAMPO_ALTA_NUM_LINEAS = 20;

    private static final int CAMPO_ALTA_NUM_LINEA_1 = 21;

    private static final int CAMPO_ALTA_TIPO_LINEA_1 = 22;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_1 = 23;

    private static final int CAMPO_ALTA_NUM_LINEA_2 = 24;

    private static final int CAMPO_ALTA_TIPO_LINEA_2 = 25;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_2 = 26;

    private static final int CAMPO_ALTA_NUM_LINEA_3 = 27;

    private static final int CAMPO_ALTA_TIPO_LINEA_3 = 28;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_3 = 29;

    private static final int CAMPO_ALTA_NUM_LINEA_4 = 30;

    private static final int CAMPO_ALTA_TIPO_LINEA_4 = 31;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_4 = 32;

    private static final int CAMPO_ALTA_NUM_LINEA_5 = 33;

    private static final int CAMPO_ALTA_TIPO_LINEA_5 = 34;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_5 = 35;

    private static final int CAMPO_ALTA_NUM_LINEA_6 = 36;

    private static final int CAMPO_ALTA_TIPO_LINEA_6 = 37;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_6 = 38;

    private static final int CAMPO_ALTA_NUM_LINEA_7 = 39;

    private static final int CAMPO_ALTA_TIPO_LINEA_7 = 40;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_7 = 41;

    private static final int CAMPO_ALTA_NUM_LINEA_8 = 42;

    private static final int CAMPO_ALTA_TIPO_LINEA_8 = 43;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_8 = 44;

    private static final int CAMPO_ALTA_NUM_LINEA_9 = 45;

    private static final int CAMPO_ALTA_TIPO_LINEA_9 = 46;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_9 = 47;

    private static final int CAMPO_ALTA_NUM_LINEA_10 = 48;

    private static final int CAMPO_ALTA_TIPO_LINEA_10 = 49;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_10 = 50;

    private static final int CAMPO_ALTA_NUM_LINEA_11 = 51;

    private static final int CAMPO_ALTA_TIPO_LINEA_11 = 52;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_11 = 53;

    private static final int CAMPO_ALTA_NUM_LINEA_12 = 54;

    private static final int CAMPO_ALTA_TIPO_LINEA_12 = 55;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_12 = 56;

    private static final int CAMPO_ALTA_NUM_LINEA_13 = 57;

    private static final int CAMPO_ALTA_TIPO_LINEA_13 = 58;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_13 = 59;

    private static final int CAMPO_ALTA_NUM_LINEA_14 = 60;

    private static final int CAMPO_ALTA_TIPO_LINEA_14 = 61;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_14 = 62;

    private static final int CAMPO_ALTA_NUM_LINEA_15 = 63;

    private static final int CAMPO_ALTA_TIPO_LINEA_15 = 64;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_15 = 65;

    private static final int CAMPO_ALTA_NUM_LINEA_16 = 66;

    private static final int CAMPO_ALTA_TIPO_LINEA_16 = 67;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_16 = 68;

    private static final int CAMPO_ALTA_NUM_LINEA_17 = 69;

    private static final int CAMPO_ALTA_TIPO_LINEA_17 = 70;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_17 = 71;

    private static final int CAMPO_ALTA_NUM_LINEA_18 = 72;

    private static final int CAMPO_ALTA_TIPO_LINEA_18 = 73;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_18 = 74;

    private static final int CAMPO_ALTA_NUM_LINEA_19 = 75;

    private static final int CAMPO_ALTA_TIPO_LINEA_19 = 76;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_19 = 77;

    private static final int CAMPO_ALTA_NUM_LINEA_20 = 78;

    private static final int CAMPO_ALTA_TIPO_LINEA_20 = 79;

    private static final int CAMPO_ALTA_DESCRIPCION_LINEA_20 = 80;

    // Campos del contexto de salida de consulta de una solicitud
    private static final String CONTEXTO_CONS_SOLICITUD = "ANPMN050";

    private static final String CTX_CONS_SOLICITUD_NUC_EXPEDIENTE = "ANPMN050040";

    // Campos del contexto de salida del alta de una autorización
    private static final String CONTEXTO_ALTA_AUTORIZACION = "AG031CON";

    private static final String CTX_SALIDA_ID_EXT_AUTORIZACION = "AG031C010";

    private static final String CTX_SALIDA_ID_EXT_FASE = "AG031C020";

    private static final String CTX_SALIDA_ESTADO_RESULTANTE = "AG031C030";

    private static final String CTX_SALIDA_ID_EXT_FASE_SIGUIENTE = "AG031C040";

    // 20141127 se añade la comprobación del campo "código de error"
    private static final String CONTEXTO_ALTA_AUTORIZ_COD_ERROR = "AG031C070";

    private static final String CONTEXTO_ALTA_AUTORIZ_TEXTO_ERROR = "AG031C080";

    // Campos constantes del detalle de una autorización
    private static final String TIPO_LINEA = "AG";

    private static final String LLAVE = "{";

    private static final String PUNTOS_SUSPENSIVOS = "...";

    // $NON-NL-1$
    private static final String DESCRIPCION_CABECERA = "DATOS_EXPEDIENTE_523026356";

    // $NON-NL-1$
    private static final String DESCRIPCION_CABECERA_DATOS_ADICIONALES = "DATOS_95356859";

    private static final String DESCRIPCION_SEPARADOR = "--------------------";

    // $NON-NL-1$
    private static final String DESCRIPCION_EXPEDIENTE = "_N_MERO_EXPEDIENTE_1693229657";

    // $NON-NL-1$
    private static final String DESCRIPCION_TIPO = "_TIPO_1985506861";

    // $NON-NL-1$
    private static final String DESCRIPCION_OFICINA = "_OFICINA_1353066274";

    // $NON-NL-1$
    private static final String DESCRIPCION_PRIMER_PART = "_PRIMER_PARTICIPANTE_292625774";

    // $NON-NL-1$
    private static final String DESCRIPCION_DATOS = "DATOS_SOLICITUD_AUTORIZAR_334107164";

    // $NON-NL-1$
    private static final String DESCRIPCION_IMP_SOL = "_IMPORTE_SOLICITADO_497210192";

    // $NON-NL-1$
    private static final String DESCRIPCION_PLAZO_TOT = "_PLAZO_TOTAL_1588605327";

    // $NON-NL-1$
    private static final String DESCRIPCION_PLAZO_CAR = "_PLAZO_CARENCIA_271757603";

    // $NON-NL-1$
    private static final String DESCRIPCION_PLAZO_DIFER = "_PLAZO_DIFERIMIENTO_1021405158";

    // $NON-NL-1$
    private static final String DESCRIPCION_PLAZO_DES = "_PLAZO_DESEMBOLSO_1839646848";

    // $NON-NL-1$
    private static final String DESCRIPCION_TIPO_EXP = "_TIPO_EXPEDIENTE_1666328314";

    // $NON-NL-1$
    private static final String DESCRIPCION_DES_PRINC = "_DESTINO_PRINCIPAL_325304759";

    // $NON-NL-1$
    private static final String DESCRIPCION_SECTOR = "_SECTOR_2120436575";

    // $NON-NL-1$
    private static final String DESCRIPCION_GAR_OFIC = "_GARANT_A_OFICINA_22944391";

    // $NON-NL-1$
    private static final String DESCRIPCION_MOD_AMOR = "_MODALIDAD_AMORTIZACI_N_1257610522";

    // $NON-NL-1$
    private static final String DESCRIPCION_CANAL = "_CANAL_1915325710";

    // $NON-NL-1$
    private static final String DESCRIPCION_TIP_REF = "_TIPO_REFERENCIA_452131793";

    // $NON-NL-1$
    private static final String DESCRIPCION_PLAZO = "_PLAZO_1533351181";

    // $NON-NL-1$
    private static final String DESCRIPCION_DIF = "_DIFERENCIAL_1313260709";

    // $NON-NL-1$
    private static final String DESCRIPCION_DIF_MIN = "_DIFERENCIA_M_NIMO_M_XIMO_481017462";

    // $NON-NL-1$
    private static final String DESCRIPCION_DIF_BON = "_DIFERENCIAL_BONIFICADO_1656505307";

    // $NON-NL-1$
    private static final String DESCRIPCION_INT = "_INTER_S_2132616813";

    // $NON-NL-1$
    private static final String DESCRIPCION_INICIAL = "INICIAL_1947835637";

    private static final String DESCRIPCION_DOS_PUNTOS = ":";

    /*20141128 Se añaden literales cuando la autorización es para datos de interés*/
    private static final String CTE_PORCENTAJE = "% ";

    // $NON-NL-1$
    private static final String CTE_AUT_NIV = "_AUTORIZAR_NIVEL_1615121012";

    // $NON-NL-1$
    private static final String DESCRIPCION_DEM_CAP = "_DEMORA_CAPITAL_591066387";

    // $NON-NL-1$
    private static final String DESCRIPCION_DEM_INT = "_DEMORA_INTER_S_39400847";

    // $NON-NL-1$
    private static final String DESCRIPCION_NUM_PER = "_N_MERO_PERIODOS_REVISI_N_1168079244";

    // $NON-NL-1$
    private static final String DESCRIPCION_SUELO = "_SUELO_1439046329";

    // $NON-NL-1$
    private static final String DESCRIPCION_TECHO = "_TECHO_1425256940";

    // $NON-NL-1$
    private static final String DESCRIPCION_SUELO_INT = "_SUELO_INTER_S_INICIAL_316705132";

    // $NON-NL-1$
    private static final String DESCRIPCION_POR_COM = "_PORCENTAJE_COMISI_N_507790507";

    // $NON-NL-1$
    private static final String DESCRIPCION_IMP_MIN = "_IMPORTE_M_NIMO_1328136086";

    // $NON-NL-1$
    private static final String DESCRIPCION_PLAZO_COM = "_PLAZO_1533351181";

    // $NON-NL-1$
    private static final String DESCRIPCION_POR_ADE = "_PORCENTAJE_ADELANTO_1619697220";

    // $NON-NL-1$
    private static final String DESCRIPCION_INTERES = "_INTER_S_2132616813";

    // $NON-NL-1$
    private static final String DESCRIPCION_SUSTITUTIVO = "_SUSTITUTIVO_1755870590";

    // $NON-NL-1$
    private static final String DESCRIPCION_PRIORIDAD = "PRIORIDAD_977865970";

    // $NON-NL-1$
    private static final String DESCRIPCION_TRAMO_INT = "_TRAMO_1413305944";

    // $NON-NL-1$
    private static final String DESCRIPCION_TRAMO_INT_INFORMACION = "_INFORMACI_N_TRAMO_594552168";

    // $NON-NL-1$
    private static final String DESCRIPCION_TIPO_COM = "_COMISI_N_1446440302";

    // $NON-NL-1$
    private static final String DESCRIPCION_TRAMO_COM = "_TRAMO_1413305944";

    /*20150615 Detalle autorización scoring $NON-NL-1$*/
    private static final String CTE_DETALLE_AUTORIZ_DICTAMEN_SCORING = "_AUTORIZACI_N_DICTAMEN_SCORING_1410773159";

    // Constantes numéricas
    private static final int CTE_NUEVE = 9;

    private static final int CTE_DIEZ = 10;

    private static final int CTE_ONCE = 11;

    private static final int CTE_DOCE = 12;

    private static final int CTE_TRECE = 13;

    private static final int CTE_CATORCE = 14;

    private static final int CTE_QUINCE = 15;

    private static final int CTE_DIECISEIS = 16;

    private static final int CTE_DIECISIETE = 17;

    private static final int CTE_DIECIOCHO = 18;

    private static final int CTE_DIECINUEVE = 19;

    private static final int CTE_VEINTE = 20;

    // Campos del contexto de niveles de autorizacion de datos generales
    private static final String CTX_NIV_AUT_ORDEN_INT = "ANPMN061010";

    private static final String CTX_NIV_AUT_TIPO_INT = "ANPMN061020";

    private static final String CTX_NIV_AUT_PRIORIDAD = "ANPMN061030";

    private static final String CTX_NIV_AUT_IMPO_SOL = "ANPMN060100";

    private static final String CTX_NIV_AUT_IMPO_SOL_NIV = "ANPMN060120";

    private static final String CTX_NIV_AUT_PLAZO_TOT = "ANPMN060130";

    private static final String CTX_NIV_AUT_PLAZO_TOT_NIV = "ANPMN060150";

    private static final String CTX_NIV_AUT_PLAZO_CAR = "ANPMN060160";

    private static final String CTX_NIV_AUT_PLAZO_CAR_NIV = "ANPMN060170";

    private static final String CTX_NIV_AUT_PLAZO_DIFER = "ANPMN060190";

    private static final String CTX_NIV_AUT_PLAZO_DIFER_NIV = "ANPMN060200";

    private static final String CTX_NIV_AUT_PLAZO_DES = "ANPMN060210";

    private static final String CTX_NIV_AUT_PLAZO_DES_NIV = "ANPMN060220";

    private static final String CTX_NIV_AUT_TIPO_EXP = "ANPMN060270";

    private static final String CTX_NIV_AUT_TIPO_EXP_NIV = "ANPMN060280";

    private static final String CTX_NIV_AUT_DES_PRINC = "ANPMN060290";

    private static final String CTX_NIV_AUT_DES_PRINC_NIV = "ANPMN060300";

    private static final String CTX_NIV_AUT_SECTOR_POL = "ANPMN060310";

    private static final String CTX_NIV_AUT_SECTOR_NIV = "ANPMN060320";

    private static final String CTX_NIV_AUT_GAR_OFICINA = "ANPMN060340";

    private static final String CTX_NIV_AUT_GAR_OFICINA_NIV = "ANPMN060350";

    private static final String CTX_NIV_AUT_MOD_AMOR = "ANPMN060360";

    private static final String CTX_NIV_AUT_MOD_AMOR_NIV = "ANPMN060370";

    private static final String CTX_NIV_AUT_CANAL = "ANPMN060380";

    private static final String CTX_NIV_AUT_CANAL_NIV = "ANPMN060390";

    // Campos del contexto de niveles de autorizacion de intereses
    private static final String CTX_NIV_AUT_TIP_REF = "ANPMN061050";

    private static final String CTX_NIV_AUT_TIP_REF_NIV = "ANPMN061060";

    private static final String CTX_NIV_AUT_NUM_PERIODO = "ANPMN061070";

    private static final String CTX_NIV_AUT_PLAZO = "ANPMN061100";

    private static final String CTX_NIV_AUT_PLAZO_NIV = "ANPMN061110";

    private static final String CTX_NIV_AUT_DIF = "ANPMN061120";

    private static final String CTX_NIV_AUT_DIF_NIV = "ANPMN061130";

    private static final String CTX_NIV_AUT_DIF_MINMAX = "ANPMN061140";

    private static final String CTX_NIV_AUT_DIF_MINMAX_NIV = "ANPMN061150";

    private static final String CTX_NIV_AUT_DIF_BON = "ANPMN061160";

    private static final String CTX_NIV_AUT_DIF_BON_NIV = "ANPMN061170";

    private static final String CTX_NIV_AUT_INTERES = "ANPMN061180";

    private static final String CTX_NIV_AUT_INTERES_NIV = "ANPMN061190";

    private static final String CTX_NIV_AUT_DEM_CAP = "ANPMN061200";

    private static final String CTX_NIV_AUT_DEM_CAP_NIV = "ANPMN061210";

    private static final String CTX_NIV_AUT_DEM_INT = "ANPMN061220";

    private static final String CTX_NIV_AUT_DEM_INT_NIV = "ANPMN061230";

    private static final String CTX_NIV_AUT_PRE_REV = "ANPMN061240";

    private static final String CTX_NIV_AUT_PRE_REV_NIV = "ANPMN061250";

    private static final String CTX_NIV_AUT_SUELO = "ANPMN061280";

    private static final String CTX_NIV_AUT_SUELO_NIV = "ANPMN061290";

    private static final String CTX_NIV_AUT_TECHO = "ANPMN061300";

    private static final String CTX_NIV_AUT_TECHO_NIV = "ANPMN061310";

    private static final String CTX_NIV_AUT_SUELO_INT = "ANPMN061320";

    private static final String CTX_NIV_AUT_SUELO_INT_NIV = "ANPMN061330";

    // Campos del contexto de niveles de autorizacion de comisiones
    private static final String CTX_NIV_AUT_ORDEN_COM = "ANPMN062010";

    private static final String CTX_NIV_AUT_TIPO_COM = "ANPMN062020";

    private static final String CTX_NIV_AUT_POR_COM = "ANPMN062030";

    private static final String CTX_NIV_AUT_POR_COM_NIV = "ANPMN062040";

    private static final String CTX_NIV_AUT_IMP_MIN = "ANPMN062050";

    private static final String CTX_NIV_AUT_IMP_MIN_NIV = "ANPMN062060";

    private static final String CTX_NIV_AUT_PLAZO_COM = "ANPMN062070";

    private static final String CTX_NIV_AUT_PLAZO_COM_NIV = "ANPMN062080";

    private static final String CTX_NIV_AUT_POR_ADE = "ANPMN062090";

    private static final String CTX_NIV_AUT_POR_ADE_NIV = "ANPMN062100";

    // Valor del campo INDICADOR_OPERACION para el ALTA de nueva autorización.
    private static final String OPERACION_ALTA_AUTORIZACION = "N";

    // Valor del campo INDICADOR_OPERACION para el ALTA DE DETALLE de una autorización.
    private static final String OPERACION_DETALLE_AUTORIZACION = "D";

    // Valor del campo ID_AUTORIZACION.
    private static final String ALTA_ID_AUTORIZACION = "1066";

    // Valor del campo ID_APLICACION.
    private static final String ALTA_ID_APLICACION = "ANPM";

    // Valor del campo ID_PROYECTO.
    private static final String ALTA_ID_PROYECTO = "303";

    // Valor del campo ID_PROCESO.
    private static final String ALTA_ID_PROCESO = "383";

    // Valor del campo ID_TAREA.
    private static final String ALTA_ID_TAREA = "556";

    // Valor del campo ID_WORKFLOW con nivel máximo zona.
    private static final String ALTA_ID_WORKFLOW_ZONA = "1299";

    // Valor del campo ID_WORKFLOW con nivel máximo territorial.
    private static final String ALTA_ID_WORKFLOW_TERRITORIAL = "1271";

    // Valor del campo ID_WORKFLOW con nivel máximo territorial.
    private static final String ALTA_ID_WORKFLOW_DIVISION = "1270";

    /**
     * Cuenta contable de la aplicacion MEFC.
     */
    private static final Integer CUENTA_CONTABLE_APLICACION_MEFC = Integer.valueOf(565);

    /**
     * Servicio de consulta de datos del primer titular del expediente en la aplicación MEFC.
     */
    private static final Integer CODIGO_OPERACION_CONSULTA_TITULAR_SRV = Integer.valueOf(0);

    private static final String CAMPO_CONSULTA_TITULAR_NUC_EXPEDIENTE = "NUC";

    // private static final String CAMPO_CONSULTA_TITULAR_RELACION = "RELACION";
    // private static final String CAMPO_CONSULTA_TITULAR_SECUENCIA = "SECUENCIA";
    private static final String CAMPO_CONSULTA_TITULAR_COD_OPERACION = "CODOPER";

    private static final String CONTEXTO_CONSULTA_TITULAR = "MEFCN000";

    private static final String CTX_SALIDA_NIF_TITULAR = "MEFCN000160";

    private static final String CTX_SALIDA_NOMBRE_TITULAR = "MEFCN000510";

    private static final String CTE_SEPARADOR_DATOS_TITULAR = " - ";

    /**
     * Constante con el valor del campo CODIGO_OPERACION para el servicio de consulta
     * de datos del titular del expediente.
     */
    private static final String VALOR_CONSULTA_TITULAR_COD_OPERACION = "C";

    /**
     * Servicio de consulta de autorización en la aplicación AGEN.
     */
    // Datos del servicio ANPM_171
    private static final Integer CC_NIVEL_AUTORIZ_SRV = Integer.valueOf(507);

    private static final Integer CO_NIVEL_AUTORIZ_SRV = Integer.valueOf(171);

    private static final String CTE_TIRA_OFICINA_SOL = "OFICINA_SOLICITUD";

    private static final String CTE_TIRA_NUMERO_SOL = "NUMERO_SOLICITUD";

    private static final String CTE_TIRA_VERSION_SOL = "VERSION_SOLICITUD";

    private static final String CTE_TIRA_NUM_EXP = "NUMERO_EXPEDIENTE";

    private static final String CTE_TIRA_DETALLE_AUTORIZ = "DETALLE_AUTORIZACION";

    private static final String CTX_NIVEL_AUTORIZ_TIPO_REFERENCIA = "ANPMN061050";

    private static final String CTX_NIVEL_AUTORIZ_GENERAL = "ANPMN060";

    private static final String CTX_NIVEL_AUTORIZ_INTERES = "ANPMN061";

    private static final String CTX_NIVEL_AUTORIZ_COMISIONES = "ANPMN062";

    /**
     * Servicio de adjuntado de documentos a la autorización en la aplicación AGEN.
     */
    private static final Integer CODIGO_OPERACION_ADJUNTAR_DOCUMENTOS_SRV = Integer.valueOf(108);

    private static final String CAMPO_ADJUNTAR_DOC_ID_AUTORIZACION = "ID_AUTORIZACION";

    private static final String CAMPO_ADJUNTAR_DOC_ID_AGRUPACION = "AGRUPACION";

    /**
     * Servicio de consulta de listas de valores
     */
    private static final BigDecimal CTE_ID_LISTA_VAL_TIPO_COMISION = BigDecimal.valueOf(523);

    private static final Integer CUENTA_CONTABLE_APLICACION_IFSN = Integer.valueOf(107);

    private static final Integer CODIGO_OPERACION_CONSULTA_VALORES_SRV = Integer.valueOf(52);

    private static final String CAMPO_CONSULTA_VALORES_ID_LISTA = "IDLISTA";

    // Campos del contexto de salida de consulta de una lista de valores
    private static final String CONTEXTO_CONS_VALORES = "IFSNN069";

    private static final String CTX_CONS_VALORES_ID_VALOR = "IFSNN069020";

    private static final String CTX_CONS_VALORES_VALOR = "IFSNN069080";

    // numero de línea, variable de objeto para que el acceso sea posible desde todos los métodos de objeto.
    int numeroLinea = 0;

    /**
     * Logger de la clase.
     */
    private static final LogHelper LOGGER = LogHelper.getLog(DatosAutorizacionAbstractSrv.class);

    /**
     * Nueva autorización en la aplicación ANPM.
     * Tiene la posibilidad de albergar autorizaciones en fase de preformalizacion.
     * @param datosSolicitud
     * @param usuario
     * @return
     */
    protected DatosAutorizacionC altaAutorizacion(final DatosSolicitudC datosSolicitud, final String usuario, boolean esAltaAutorizScoring, BigDecimal nivelMaximoScoring, boolean esAltaAutorizacionEnotario) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaAutorizacion(): INICIO");
        }
        /**
         * Si es un alta de autorizacoin Enotario updateo el campo de autorizacion.
         */
        if (esAltaAutorizacionEnotario) {
            datosSolicitud.setIndicadorAutorizacion(BigDecimal.ONE);
            datosSolicitud.persist();
        }
        DatosSolicitudKey key = datosSolicitud.getDatosSolicitudKey();
        BigDecimal oficinaSolicitud = key.getOficinaSolicitud();
        BigDecimal numeroSolicitud = key.getNumSolicitud();
        BigDecimal versionSolicitud = key.getVersionSolicitud();
        String red = datosSolicitud.getRed();
        BigDecimal tipoAutorizacion = null;
        GestionNivelesAutorizacion gna = new GestionNivelesAutorizacion();
        BigDecimal maximoNivelAutorizacion = gna.maximoNivelAutorizacion(datosSolicitud);
        if (esAltaAutorizScoring) {
            tipoAutorizacion = Constantes.CTE_TIPO_AUTORIZ_SCORING;
            maximoNivelAutorizacion = UtilidadesComun.mayor(maximoNivelAutorizacion, nivelMaximoScoring);
        } else if (esAltaAutorizacionEnotario) {
            tipoAutorizacion = Constantes.CTE_TIPO_AUTORIZ_PREFORM;
        } else {
            tipoAutorizacion = BigDecimal.ZERO;
        }
        final GestionDatosAutorizacion gda = new GestionDatosAutorizacion();
        // Alta de una nueva autorización.
        DatosAutorizacionC datosAutorizacion = gda.altaAutorizacion(oficinaSolicitud, numeroSolicitud, versionSolicitud, red, maximoNivelAutorizacion, usuario, tipoAutorizacion);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaAutorizacion(): FIN");
        }
        return datosAutorizacion;
    }

    /**
     * Nueva autorización en la aplicación ANPM.
     *
     * @param datosSolicitud
     * @param usuario
     * @return
     */
    protected DatosAutorizacionC altaAutorizacion(final DatosSolicitudC datosSolicitud, final String usuario, boolean esAltaAutorizScoring, BigDecimal nivelMaximoScoring) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaAutorizacion(): INICIO");
        }
        DatosSolicitudKey key = datosSolicitud.getDatosSolicitudKey();
        BigDecimal oficinaSolicitud = key.getOficinaSolicitud();
        BigDecimal numeroSolicitud = key.getNumSolicitud();
        BigDecimal versionSolicitud = key.getVersionSolicitud();
        String red = datosSolicitud.getRed();
        BigDecimal tipoAutorizacion = null;
        GestionNivelesAutorizacion gna = new GestionNivelesAutorizacion();
        BigDecimal maximoNivelAutorizacion = gna.maximoNivelAutorizacion(datosSolicitud);
        if (esAltaAutorizScoring) {
            tipoAutorizacion = Constantes.CTE_TIPO_AUTORIZ_SCORING;
            maximoNivelAutorizacion = UtilidadesComun.mayor(maximoNivelAutorizacion, nivelMaximoScoring);
        } else {
            tipoAutorizacion = BigDecimal.ZERO;
        }
        final GestionDatosAutorizacion gda = new GestionDatosAutorizacion();
        // Alta de una nueva autorización.
        DatosAutorizacionC datosAutorizacion = gda.altaAutorizacion(oficinaSolicitud, numeroSolicitud, versionSolicitud, red, maximoNivelAutorizacion, usuario, tipoAutorizacion);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaAutorizacion(): FIN");
        }
        return datosAutorizacion;
    }

    /**
     * Nueva autorización en la aplicación AGEN.
     *
     * @param contexto Contexto de ejecución del servicio de negocio
     * @param nivelMaximo Nivel máximo de autorización requerido
     * @return Datos de autorización generados por la aplicación AGEN.
     */
    protected AutorizacionVO altaAutorizacionAGEN(final IContextoEjecucion contexto, final BigDecimal nivelMaximo, DatosAutorizacionKey keyAutorizacion) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaAutorizacionAGEN(): INICIO");
        }
        final AutorizacionVO autorizacion = new AutorizacionVO();
        /*
		 * Corregido el 24-Febrero-2012
		 * Necesitamos enviarle el NUC de expediente a la aplicación AGEN a través
		 * de la invocación al servicio AGEN_100.
		 * Dado que no tenemos el NUC de expediente (no es un campo de la tabla de
		 * autorizaciones AN31TB01, se implementa una invocación al servicio de consulta
		 * de datos de la solicitud ANPM_150 a través de la oficina y número de
		 * solicitud.
		 */
        // Servicio de alta de autorización en la aplicación AGEN.
        final IDatosEntradaTx datosEntradaConsSolicitudSrv = DatosAutorizacionAbstractSrv.getPrograma(contexto, CUENTA_CONTABLE_APLICACION_ANPM, CODIGO_OPERACION_CONS_SOLICITUD_SRV);
        datosEntradaConsSolicitudSrv.addCampo(CAMPO_CONS_SOLICITUD_OFICINA_SOLICITUD, keyAutorizacion.getOficinaSolicitud());
        datosEntradaConsSolicitudSrv.addCampo(CAMPO_CONS_SOLICITUD_NUMERO_SOLICITUD, keyAutorizacion.getNumeroSolicitud());
        datosEntradaConsSolicitudSrv.addCampo(CAMPO_CONS_SOLICITUD_VERSION_SOLICITUD, keyAutorizacion.getVersionSolicitud());
        datosEntradaConsSolicitudSrv.addCampo(CAMPO_CONS_SOLICITUD_DETALLE, Constantes.NO);
        final IContexto[] salidaConsSolicitudSrv = DatosAutorizacionAbstractSrv.invocarServicio(contexto, datosEntradaConsSolicitudSrv);
        BigDecimal bidNucExpediente = null;
        if (salidaConsSolicitudSrv != null) {
            final int lengthCons = salidaConsSolicitudSrv.length;
            if ((Constantes.CTE_CERO < lengthCons) && (CONTEXTO_CONS_SOLICITUD.equalsIgnoreCase(salidaConsSolicitudSrv[0].getNombre()))) {
                bidNucExpediente = salidaConsSolicitudSrv[0].getBigDecimal(CTX_CONS_SOLICITUD_NUC_EXPEDIENTE);
            }
        }
        // Servicio de alta de autorización en la aplicación AGEN.
        final IDatosEntradaTx datosEntradaAltaAutorizacionSrv = DatosAutorizacionAbstractSrv.getPrograma(contexto, CUENTA_CONTABLE_APLICACION_AGEN, CODIGO_OPERACION_ALTA_AUTORIZACION_SRV);
        /*20150206 CAMBIO URGENTE PARA AÑADIR NIVEL 50 DIRECCION GENERAL*/
        if ((Constantes.CTE_NIVEL_DIVISION.intValue() == nivelMaximo.intValue()) || (Constantes.CTE_NIVEL_ZONA.intValue() == nivelMaximo.intValue()) || (Constantes.CTE_NIVEL_TERRITORIAL.intValue() == nivelMaximo.intValue())) {
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_INDICADOR_OPERACION, OPERACION_ALTA_AUTORIZACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_AUTORIZACION, ALTA_ID_AUTORIZACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_APLICACION, ALTA_ID_APLICACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROYECTO, ALTA_ID_PROYECTO);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROCESO, ALTA_ID_PROCESO);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_TAREA, ALTA_ID_TAREA);
            if (Constantes.CTE_NIVEL_DIVISION.intValue() == nivelMaximo.intValue()) {
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, ALTA_ID_WORKFLOW_DIVISION);
            } else if (Constantes.CTE_NIVEL_ZONA.intValue() == nivelMaximo.intValue()) {
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, ALTA_ID_WORKFLOW_ZONA);
            } else {
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, ALTA_ID_WORKFLOW_TERRITORIAL);
            }
        } else if (50 == nivelMaximo.intValue()) {
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_INDICADOR_OPERACION, // "N"
            OPERACION_ALTA_AUTORIZACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_AUTORIZACION, // "1066"
            ALTA_ID_AUTORIZACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_APLICACION, // ANPM
            ALTA_ID_APLICACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROYECTO, "322");
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROCESO, // "383"
            ALTA_ID_PROCESO);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_TAREA, // "556"
            ALTA_ID_TAREA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, "1419");
        }
        datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_USUARIO, contexto.getUsuario());
        /*
		 * Corregido el 24-Febrero-2012
		 * Se añade el campo id_aplicacion_cliente para pasarle el NUC del expediente
		 * a la aplicación de autorizaciones generales AGEN.
		 */
        datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_APLICACION_CLIENTE, bidNucExpediente.toString());
        final IContexto[] salidaAltaAutorizacionSrv = DatosAutorizacionAbstractSrv.invocarServicio(contexto, datosEntradaAltaAutorizacionSrv);
        /*20141209 Si el campo resultado es distinto de cero lanzamos rollback*/
        if ((null == salidaAltaAutorizacionSrv) || (0 != BigDecimal.ZERO.compareTo(salidaAltaAutorizacionSrv[0].getBigDecimal(CONTEXTO_ALTA_AUTORIZ_COD_ERROR)))) {
            ServicioNegocio.rollback(CTE_ERROR_AUTORIZ_AGEN_ALTA, null, new String[] { salidaAltaAutorizacionSrv[0].getBigDecimal(CONTEXTO_ALTA_AUTORIZ_COD_ERROR).toString(), salidaAltaAutorizacionSrv[0].getString(CONTEXTO_ALTA_AUTORIZ_TEXTO_ERROR) }, null);
        }
        if (salidaAltaAutorizacionSrv != null) {
            final int length = salidaAltaAutorizacionSrv.length;
            if ((Constantes.CTE_CERO < length) && (CONTEXTO_ALTA_AUTORIZACION.equalsIgnoreCase(salidaAltaAutorizacionSrv[0].getNombre()))) {
                // ID externo de la autorización generada en AGEN.
                autorizacion.setIdExtAutorizacion(salidaAltaAutorizacionSrv[0].getBigDecimal(CTX_SALIDA_ID_EXT_AUTORIZACION));
                // ID externo de la fase de autorización generada en AGEN.
                autorizacion.setIdExtFaseGenerada(salidaAltaAutorizacionSrv[0].getBigDecimal(CTX_SALIDA_ID_EXT_FASE));
                // Estado resultante de autorización generada en AGEN.
                autorizacion.setEstadoResultante(salidaAltaAutorizacionSrv[0].getString(CTX_SALIDA_ESTADO_RESULTANTE));
                // ID externo de la fase siguiente de autorización generada en AGEN.
                autorizacion.setIdExtFaseSiguiente(salidaAltaAutorizacionSrv[0].getBigDecimal(CTX_SALIDA_ID_EXT_FASE_SIGUIENTE));
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaAutorizacionAGEN(): FIN");
        }
        return autorizacion;
    }

    /**
     * Da de alta el detalle de una autorización en la aplicación AGEN.
     *
     * @param contexto Contexto de ejecución del servicio de negocio
     * @param idExternoAutorizacion Identificador externo de la autorización generada
     * @param nivelMaximo Nivel máximo de autorización requerido
     * @param oficinaSol Oficina de la solicitud
     * @param versionSol Versión de la solicitud
     * @param numeroSol Número de la solicitud
     * @return Salida de la llamada al servicio de creacion del detalle
     */
    protected IContexto[] altaDetalleAutorizacionAGEN(final IContextoEjecucion contexto, final BigDecimal nivelMaximo, final BigDecimal idExternoAutorizacion, final BigDecimal oficinaSol, final BigDecimal versionSol, final BigDecimal numeroSol, boolean esAltaAutorizScoring, BigDecimal indDictamenScoring, BigDecimal nivelMaximoAutoriz) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaDetalleAutorizacionAGEN(): INICIO");
        }
        // Se calcula el número de expediente
        // Se recupera el número de expediente de la solicitud
        DatosSolicitudC solicitudExiste = null;
        GestionDatosSolicitud gs = new GestionDatosSolicitud();
        solicitudExiste = gs.obtenerDatosSolicitud(oficinaSol, numeroSol, versionSol, null);
        // Se invoca al servicio de detalle de niveles de una autoriazción
        final IContexto[] salidaServicioNivelesAut = this.llamadaNivelesAutorizacion(contexto, oficinaSol, versionSol, numeroSol, solicitudExiste.getDatosSolicitudKey().getNucExpediente());
        // Se informan los campo básicos del servicio AGEN
        final IDatosEntradaTx datosEntradaAltaAutorizacionSrv = DatosAutorizacionAbstractSrv.getPrograma(contexto, CUENTA_CONTABLE_APLICACION_AGEN, CODIGO_OPERACION_ALTA_AUTORIZACION_SRV);
        /*20150206 CAMBIO URGENTE PARA AÑADIR NIVEL 50 DIRECCION GENERAL*/
        if ((Constantes.CTE_NIVEL_DIVISION.intValue() == nivelMaximo.intValue()) || (Constantes.CTE_NIVEL_ZONA.intValue() == nivelMaximo.intValue()) || Constantes.CTE_NIVEL_TERRITORIAL.intValue() == nivelMaximo.intValue()) {
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_INDICADOR_OPERACION, OPERACION_DETALLE_AUTORIZACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_AUTORIZACION, idExternoAutorizacion);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_APLICACION, ALTA_ID_APLICACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROYECTO, ALTA_ID_PROYECTO);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROCESO, ALTA_ID_PROCESO);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_TAREA, ALTA_ID_TAREA);
            if (Constantes.CTE_NIVEL_TERRITORIAL.intValue() == nivelMaximo.intValue()) {
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, ALTA_ID_WORKFLOW_TERRITORIAL);
            } else if (Constantes.CTE_NIVEL_ZONA.intValue() == nivelMaximo.intValue()) {
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, ALTA_ID_WORKFLOW_ZONA);
            } else {
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, ALTA_ID_WORKFLOW_DIVISION);
            }
        } else if (50 == nivelMaximo.intValue()) {
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_INDICADOR_OPERACION, // "D"
            OPERACION_DETALLE_AUTORIZACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_AUTORIZACION, idExternoAutorizacion);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_APLICACION, // ANPM
            ALTA_ID_APLICACION);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROYECTO, "322");
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_PROCESO, // "383"
            ALTA_ID_PROCESO);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_TAREA, // "556"
            ALTA_ID_TAREA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_WORKFLOW, "1419");
        }
        datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_USUARIO, contexto.getUsuario());
        /*
		 * Corregido el 27-Febrero-2012
		 * Se añade el campo id_aplicacion_cliente para pasarle el NUC del expediente
		 * a la aplicación de autorizaciones generales AGEN.
		 */
        datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_ID_APLICACION_CLIENTE, solicitudExiste.getDatosSolicitudKey().getNucExpediente().toString());
        // Se informan los campos del detalle del servicio AGEN
        if (salidaServicioNivelesAut != null) {
            // cabecera
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_1, BigDecimal.ONE);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_1, TIPO_LINEA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_1, new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_CABECERA).toString() + LLAVE);
            // separador
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_2, BigDecimal.valueOf(Constantes.CTE_DOS));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_2, TIPO_LINEA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_2, DESCRIPCION_SEPARADOR + LLAVE);
            // expediente
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_3, BigDecimal.valueOf(Constantes.CTE_TRES));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_3, TIPO_LINEA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_3, new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_EXPEDIENTE).toString() + solicitudExiste.getDatosSolicitudKey().getNucExpediente() + LLAVE);
            // tipo
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_4, BigDecimal.valueOf(Constantes.CTE_CUATRO));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_4, TIPO_LINEA);
            final BigDecimal codExpediente = solicitudExiste.getTipoExpediente();
            final ParametrosC tipoExp = GestionClausulasRestringuidas.obtenerClausulaGeneral(Constantes.COD_CLAUSULA_TIPO_EXPEDIENTE, Utilidades.rellenarCerosDelante(codExpediente.toString(), 4));
            final String tipoExpediente = (tipoExp == null || tipoExp.getCG320030() == null) ? "" : tipoExp.getCG320030();
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_4, new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TIPO).toString() + tipoExpediente + LLAVE);
            // oficina
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_5, BigDecimal.valueOf(Constantes.CTE_CINCO));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_5, TIPO_LINEA);
            // TODO: Falta obtener la descripción de la oficina
            // 20141209 se añade la descripción de la oficina
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_5, new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_OFICINA).toString() + oficinaSol + "- " + obtenerDescrCentro(oficinaSol.toString()) + LLAVE);
            // primer participante
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_6, BigDecimal.valueOf(Constantes.CTE_SEIS));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_6, TIPO_LINEA);
            final String datosTitular = this.consultaTitular(contexto, solicitudExiste.getDatosSolicitudKey().getNucExpediente());
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_6, new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_PRIMER_PART).toString() + datosTitular + LLAVE);
            // separador
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_7, BigDecimal.valueOf(Constantes.CTE_SIETE));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_7, TIPO_LINEA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_7, LLAVE);
            // datos a autorizar
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_8, BigDecimal.valueOf(Constantes.CTE_OCHO));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_8, TIPO_LINEA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_8, new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_DATOS).toString() + LLAVE);
            // separador
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_9, BigDecimal.valueOf(CTE_NUEVE));
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_9, TIPO_LINEA);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_9, DESCRIPCION_SEPARADOR + DESCRIPCION_SEPARADOR + LLAVE);
            /*###################################*/
            /*20150610 AQUI TENGO QUE TOCAR PARA CUANDO SE CUMPLA QUE tipoAutorizacion == Constantes.CTE_TIPO_AUTORIZ_SCORING*/
            /*EN ESE CASO EL DETALLE CONSISTE EN INFORMAR AL USUARIO AUTORIZADOR DE QUE EL TIPO DE AUTORIZACION ES DE SCORING, autorizar nivel TAL.*/
            rellenarDetalleAutorizacionPrecios(datosEntradaAltaAutorizacionSrv, salidaServicioNivelesAut);
            if (esAltaAutorizScoring) {
                /*En este caso, a mayores añadimos en el detalle de autorización la autorización por scoring.*/
                rellenarDetalleAutorizacionScoring(datosEntradaAltaAutorizacionSrv, indDictamenScoring, nivelMaximoAutoriz);
            }
            rellenarDetalleAutorizacionInformacionAdicional(datosEntradaAltaAutorizacionSrv, salidaServicioNivelesAut, solicitudExiste);
            // Número de líneas
            numeroLinea = Math.min(numeroLinea--, CTE_VEINTE);
            datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEAS, BigDecimal.valueOf(numeroLinea));
        }
        // Llamada al servicio de creación del detalle de autorización
        final IContexto[] salidaAltaAutorizacionSrv = DatosAutorizacionAbstractSrv.invocarServicio(contexto, datosEntradaAltaAutorizacionSrv);
        /*20141209 Si el campo resultado es distinto de cero lanzamos rollback*/
        if ((null == salidaAltaAutorizacionSrv) || (0 != BigDecimal.ZERO.compareTo(salidaAltaAutorizacionSrv[0].getBigDecimal(CONTEXTO_ALTA_AUTORIZ_COD_ERROR)))) {
            ServicioNegocio.rollback(CTE_ERROR_AUTORIZ_AGEN_ALTA, null, new String[] { salidaAltaAutorizacionSrv[0].getBigDecimal(CONTEXTO_ALTA_AUTORIZ_COD_ERROR).toString(), salidaAltaAutorizacionSrv[0].getString(CONTEXTO_ALTA_AUTORIZ_TEXTO_ERROR) }, null);
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("altaDetalleAutorizacionAGEN(): FIN");
        }
        return salidaAltaAutorizacionSrv;
    }

    /**
     * Método que informa uno de los campos de entrada del servicio de detalle
     *  de una autorización.
     * @param datosEntradaAltaAutorizacionSrv Datos de entrada del servicio
     * @param numeroLinea Número de linea
     * @param descripcion Descripcion de la linea
     * @param valor  Valor de la linea
     */
    private void introducirCampoContexto(IDatosEntradaTx datosEntradaAltaAutorizacionSrv, int numeroLinea, final String descripcion, final BigDecimal valor, String descrNivel) {
        this.introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, descripcion, valor.toPlainString(), descrNivel);
    }

    /**
     * Método que informa uno de los campos de entrada del servicio de detalle
     *  de una autorización.
     * @param datosEntradaAltaAutorizacionSrv Datos de entrada del servicio
     * @param numeroLinea Número de linea
     * @param descripcion Descripcion de la linea
     * @param valor  Valor de la linea
     */
    private void introducirCampoContextoInformacionAdicional(IDatosEntradaTx datosEntradaAltaAutorizacionSrv, int numeroLinea, final String descripcion, final String valor) {
        switch(numeroLinea) {
            case CTE_DIEZ:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_10, BigDecimal.valueOf(CTE_DIEZ));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_10, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_10, descripcion + valor + LLAVE);
                break;
            case CTE_ONCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_11, BigDecimal.valueOf(CTE_ONCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_11, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_11, descripcion + valor + LLAVE);
                break;
            case CTE_DOCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_12, BigDecimal.valueOf(CTE_DOCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_12, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_12, descripcion + valor + LLAVE);
                break;
            case CTE_TRECE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_13, BigDecimal.valueOf(CTE_TRECE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_13, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_13, descripcion + valor + LLAVE);
                break;
            case CTE_CATORCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_14, BigDecimal.valueOf(CTE_CATORCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_14, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_14, descripcion + valor + LLAVE);
                break;
            case CTE_QUINCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_15, BigDecimal.valueOf(CTE_QUINCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_15, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_15, descripcion + valor + LLAVE);
                break;
            case CTE_DIECISEIS:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_16, BigDecimal.valueOf(CTE_DIECISEIS));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_16, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_16, descripcion + valor + LLAVE);
                break;
            case CTE_DIECISIETE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_17, BigDecimal.valueOf(CTE_DIECISIETE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_17, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_17, descripcion + valor + LLAVE);
                break;
            case CTE_DIECIOCHO:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_18, BigDecimal.valueOf(CTE_DIECIOCHO));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_18, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_18, descripcion + valor + LLAVE);
                break;
            case CTE_DIECINUEVE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_19, BigDecimal.valueOf(CTE_DIECINUEVE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_19, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_19, descripcion + valor + LLAVE);
                break;
            case CTE_VEINTE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_20, BigDecimal.valueOf(CTE_VEINTE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_20, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_20, PUNTOS_SUSPENSIVOS);
                break;
            default:
                break;
        }
    }

    /**
     * Método que informa uno de los campos de entrada del servicio de detalle
     *  de una autorización.
     * @param datosEntradaAltaAutorizacionSrv Datos de entrada del servicio
     * @param numeroLinea Número de linea
     * @param descripcion Descripcion de la linea
     * @param valor  Valor de la linea
     */
    private void introducirCampoContexto(IDatosEntradaTx datosEntradaAltaAutorizacionSrv, int numeroLinea, final String descripcion, final String valor, String descrNivel) {
        switch(numeroLinea) {
            case CTE_DIEZ:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_10, BigDecimal.valueOf(CTE_DIEZ));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_10, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_10, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_ONCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_11, BigDecimal.valueOf(CTE_ONCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_11, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_11, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_DOCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_12, BigDecimal.valueOf(CTE_DOCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_12, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_12, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_TRECE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_13, BigDecimal.valueOf(CTE_TRECE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_13, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_13, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_CATORCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_14, BigDecimal.valueOf(CTE_CATORCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_14, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_14, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_QUINCE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_15, BigDecimal.valueOf(CTE_QUINCE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_15, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_15, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_DIECISEIS:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_16, BigDecimal.valueOf(CTE_DIECISEIS));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_16, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_16, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_DIECISIETE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_17, BigDecimal.valueOf(CTE_DIECISIETE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_17, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_17, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_DIECIOCHO:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_18, BigDecimal.valueOf(CTE_DIECIOCHO));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_18, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_18, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_DIECINUEVE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_19, BigDecimal.valueOf(CTE_DIECINUEVE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_19, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_19, descripcion + valor + new Mensaje(ServicioNegocio.getContexto(), CTE_AUT_NIV).toString() + descrNivel + LLAVE);
                break;
            case CTE_VEINTE:
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_NUM_LINEA_20, BigDecimal.valueOf(CTE_VEINTE));
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_TIPO_LINEA_20, TIPO_LINEA);
                datosEntradaAltaAutorizacionSrv.addCampo(CAMPO_ALTA_DESCRIPCION_LINEA_20, PUNTOS_SUSPENSIVOS);
                break;
            default:
                break;
        }
    }

    /**
     * Invoca al servicio de detalle de niveles de una autorización
     * @param contexto Contexto de ejecución del servicio de negocio
     * @param oficinaSol Oficina de la solicitud
     * @param versionSol Versión de la solicitud
     * @param numeroSol Número de la solicitud
     * @param numExpediente Número de expediente
     * @return La salida del servicio de detalle de niveles de una autorización
     */
    private IContexto[] llamadaNivelesAutorizacion(IContextoEjecucion contexto, final BigDecimal oficinaSol, final BigDecimal versionSol, final BigDecimal numeroSol, final BigDecimal numExpediente) {
        IContexto[] salidaNivelesAut = null;
        // Se realiza la llamada al servicio ANPM_171
        IDatosEntradaTx entradaNivelesAut = getPrograma(contexto, CC_NIVEL_AUTORIZ_SRV, CO_NIVEL_AUTORIZ_SRV);
        entradaNivelesAut.addCampo(CTE_TIRA_OFICINA_SOL, oficinaSol);
        entradaNivelesAut.addCampo(CTE_TIRA_NUMERO_SOL, numeroSol);
        entradaNivelesAut.addCampo(CTE_TIRA_VERSION_SOL, versionSol);
        entradaNivelesAut.addCampo(CTE_TIRA_NUM_EXP, numExpediente);
        entradaNivelesAut.addCampo(CTE_TIRA_DETALLE_AUTORIZ, Constantes.SI);
        salidaNivelesAut = invocarServicio(contexto, entradaNivelesAut);
        return salidaNivelesAut;
    }

    /**
     *  Mantenimiento de la autorización anterior en coherencia con la
     *  aplicación AGEN.
     *  Para ello:
     *  1. Registra una nueva autorización sobre la tabla AN31TB01, utilizando
     *  los datos de la autorización anterior.
     *  2. Anula la autorización anterior.
     *
     * @param datosAutorizacionAnterior
     * @param versionSolicitud
     * @return DatosAutorizacionC
     */
    protected DatosAutorizacionC mantenerAutorizacionAnterior(final DatosAutorizacionC datosAutorizacionAnterior, final BigDecimal versionSolicitud, final String usuario) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("mantenerAutorizacionAnterior(): INICIO");
        }
        final GestionDatosAutorizacion gda = new GestionDatosAutorizacion();
        DatosAutorizacionC datosAutorizacion = gda.altaAutorizacion(datosAutorizacionAnterior, versionSolicitud);
        UtilidadesAutorizacion.anularAutorizacion(datosAutorizacionAnterior, usuario);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("mantenerAutorizacionAnterior(): FIN");
        }
        return datosAutorizacion;
    }

    /**
     * Devuelve el DNI y nombre del primer titular de un expediente de solicitud
     * de préstamo.
     *
     * @param contexto contexto de ejecución del servicio de negocio.
     * @param nucExpediente NUC expediente de tramitación de préstamo.
     * @return String DNI - Nombre del primer titular del expediente.
     */
    protected String consultaTitular(final IContextoEjecucion contexto, final BigDecimal nucExpediente) {
        StringBuffer datosTitular = new StringBuffer();
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("consultaTitular(): INICIO");
        }
        // Servicio de consulta de datos del primer titular del expediente.
        final IDatosEntradaTx datosEntradaConsultaTitularSrv = DatosAutorizacionAbstractSrv.getPrograma(contexto, CUENTA_CONTABLE_APLICACION_MEFC, CODIGO_OPERACION_CONSULTA_TITULAR_SRV);
        datosEntradaConsultaTitularSrv.addCampo(CAMPO_CONSULTA_TITULAR_NUC_EXPEDIENTE, nucExpediente);
        datosEntradaConsultaTitularSrv.addCampo(CAMPO_CONSULTA_TITULAR_COD_OPERACION, VALOR_CONSULTA_TITULAR_COD_OPERACION);
        final IContexto[] salidaConsultaTitularSrv = DatosAutorizacionAbstractSrv.invocarServicio(contexto, datosEntradaConsultaTitularSrv);
        if (salidaConsultaTitularSrv != null) {
            final int length = salidaConsultaTitularSrv.length;
            if ((Constantes.CTE_CERO < length) && (CONTEXTO_CONSULTA_TITULAR.equalsIgnoreCase(salidaConsultaTitularSrv[0].getNombre()))) {
                datosTitular.append(salidaConsultaTitularSrv[0].getString(CTX_SALIDA_NIF_TITULAR));
                datosTitular.append(CTE_SEPARADOR_DATOS_TITULAR);
                datosTitular.append(salidaConsultaTitularSrv[0].getString(CTX_SALIDA_NOMBRE_TITULAR));
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("consultaEstadoAutorizacionAGEN(): FIN");
        }
        return datosTitular.toString();
    }

    /**
     * Adjunta una agrupación de documentaciones a una autorización AGEN.
     *
     * @param contexto Contexto de ejecución del servicio de negocio
     * @param idAutorización, id externo de la autorización generada.
     * @param idAgrupacion, id de la agrupación de documentos adjuntos generada.
     */
    protected void adjuntarDocumentosAutorizacionAGEN(final IContextoEjecucion contexto, final BigDecimal idAutorizacion, final BigDecimal idAgrupacion) {
        if (!(Utilidades.isBlankOrNull(idAutorizacion) && !(Utilidades.isBlankOrNull(idAgrupacion)))) {
            // Llamamos al servicio que adjunta documentos a la autorización
            // Servicio de consulta de datos del primer titular del expediente.
            final IDatosEntradaTx datosEntradaAdjuntarDocSrv = DatosAutorizacionAbstractSrv.getPrograma(contexto, CUENTA_CONTABLE_APLICACION_AGEN, CODIGO_OPERACION_ADJUNTAR_DOCUMENTOS_SRV);
            datosEntradaAdjuntarDocSrv.addCampo(CAMPO_ADJUNTAR_DOC_ID_AUTORIZACION, idAutorizacion);
            datosEntradaAdjuntarDocSrv.addCampo(CAMPO_ADJUNTAR_DOC_ID_AGRUPACION, idAgrupacion);
            // El servicio AGEN_108 no devuelve ningún dato de salida
            // Si se produce algún error se realizará un rollback de la transacción completa
            DatosAutorizacionAbstractSrv.invocarServicio(contexto, datosEntradaAdjuntarDocSrv);
        }
    }

    /**
     * Devuelve todos los valores de una lista de valores en formato Map<Clave: String, Valor: String>
     *
     * @param contexto contexto de ejecución del servicio de negocio.
     * @param idLista Identificador de la lista de valores.
     * @return Map<BigDecimal, String> Map con los pares clave-valor de la lista de valores.
     */
    protected Map<String, String> consultaListaValores(final IContextoEjecucion contexto, final BigDecimal idLista) {
        Map<String, String> valores = new HashMap<String, String>(Constantes.CTE_CERO);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("consultaListaValores(): INICIO");
        }
        // Servicio de consulta de listas de valores
        final IDatosEntradaTx datosEntradaConsultaValoresSrv = DatosAutorizacionAbstractSrv.getPrograma(contexto, CUENTA_CONTABLE_APLICACION_IFSN, CODIGO_OPERACION_CONSULTA_VALORES_SRV);
        datosEntradaConsultaValoresSrv.addCampo(CAMPO_CONSULTA_VALORES_ID_LISTA, idLista);
        final IContexto[] salidaConsultaValoresSrv = DatosAutorizacionAbstractSrv.invocarServicio(contexto, datosEntradaConsultaValoresSrv);
        if (salidaConsultaValoresSrv != null) {
            final int length = salidaConsultaValoresSrv.length;
            for (int i = 0; i < length; i++) {
                if (CONTEXTO_CONS_VALORES.equalsIgnoreCase(salidaConsultaValoresSrv[i].getNombre())) {
                    valores.put(salidaConsultaValoresSrv[i].getString(CTX_CONS_VALORES_ID_VALOR), salidaConsultaValoresSrv[i].getString(CTX_CONS_VALORES_VALOR));
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("consultaListaValores(): FIN");
        }
        return valores;
    }

    /**
     * @param IContextoEjecucion
     * @param IDatosEntradaTx
     * @return IContexto[]
     */
    @Override
    public abstract IContexto[] ejecutar(IContextoEjecucion contextoEjecucion, IDatosEntradaTx datosEntrada);

    /**
     * Método que llama al CGAL_438 para obtener la descripción de la oficina.
     *
     * @param oficina
     * @return descrOficina
     */
    private static String obtenerDescrCentro(String oficina) {
        String descrOficina = StringUtils.EMPTY;
        IContextoEjecucion contextoEjecucion = ServicioNegocio.getContexto();
        IDatosEntradaTx datosEntrada = null;
        IContexto[] resultado = null;
        datosEntrada = ServicioNegocio.getPrograma(contextoEjecucion, CTE_SN_CONS_CENTRO_CC, CTE_SN_CONS_CENTRO_CO);
        datosEntrada.addCampo(0, oficina);
        resultado = ServicioNegocio.invocarServicio(contextoEjecucion, datosEntrada);
        if ((null != resultado) && (0 == BigDecimal.ZERO.compareTo(resultado[0].getBigDecimal(CTE_SN_CONS_CENTRO_COD_ERR)))) {
            if (!StringUtils.isBlank(resultado[0].getString(CTE_SN_CONS_CENTRO_DESCR_OFICINA))) {
                descrOficina = resultado[0].getString(CTE_SN_CONS_CENTRO_DESCR_OFICINA).trim();
            }
        }
        return descrOficina;
    }

    private void rellenarDetalleAutorizacionPrecios(IDatosEntradaTx datosEntradaAltaAutorizacionSrv, IContexto[] salidaServicioNivelesAut) {
        /*20141128 se añade variable para los valores de los datos que requieren autorización */
        String valorDetalleAutorizacion = null;
        String descrNivel = null;
        // Listado de tipos de comisión para obtener las descripciones.
        Map<String, String> salidaConsValores = null;
        // Se informa el detalle de una autorización con aquellos datos que son
        // susceptibles de autorizar, recuperados de la llamada del servicio
        // comprobacion de niveles de autorización de tramitación
        numeroLinea = 10;
        for (IContexto contextoAux : salidaServicioNivelesAut) {
            // Tratamiento de los datos generales
            if (contextoAux.getNombre().equalsIgnoreCase(CTX_NIVEL_AUTORIZ_GENERAL)) {
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_IMPO_SOL_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_IMPO_SOL_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_IMP_SOL).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_IMPO_SOL_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_IMPO_SOL), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_TOT_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_TOT_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_PLAZO_TOT).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_TOT_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_TOT), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_CAR_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_CAR_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_PLAZO_CAR).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_CAR_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_CAR), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DIFER_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DIFER_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_PLAZO_DIFER).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DIFER_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DIFER), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DES_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DES_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_PLAZO_DES).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DES_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_DES), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_EXP_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_EXP_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TIPO_EXP).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_EXP_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_EXP), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DES_PRINC_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_DES_PRINC_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_DES_PRINC).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_DES_PRINC_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getString(CTX_NIV_AUT_DES_PRINC), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_SECTOR_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_SECTOR_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SECTOR).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_SECTOR_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_SECTOR_POL), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_GAR_OFICINA_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_GAR_OFICINA_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_GAR_OFIC).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_GAR_OFICINA_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_GAR_OFICINA), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_MOD_AMOR_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_MOD_AMOR_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_MOD_AMOR).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_MOD_AMOR_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_MOD_AMOR), descrNivel);
                    numeroLinea++;
                }
                if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_CANAL_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_CANAL_NIV).intValue() > BigDecimal.TEN.intValue()) {
                    valorDetalleAutorizacion = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_CANAL).toString();
                    descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_CANAL_NIV));
                    introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_CANAL), descrNivel);
                    numeroLinea++;
                }
            } else {
                // Tratamiento de los datos de intereses
                if (contextoAux.getNombre().equalsIgnoreCase(CTX_NIVEL_AUTORIZ_INTERES)) {
                    String descripcionCompleta = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TRAMO_INT).toString() + contextoAux.getBigDecimal(CTX_NIV_AUT_ORDEN_INT).toString();
                    if (contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_INT).intValue() == BigDecimal.ZERO.intValue()) {
                    /*20141212 Rosa: "En el tramo 1, quitamos la primera palabra "interés" y si es un tramo fijo ponemos solamente "interés inicial"
									En tramo 2 quitamos la palabra interés.
									Quitamos el código de la comisión
									"*/
                    // descripcionCompleta +=  DESCRIPCION_INTERES;
                    } else {
                        descripcionCompleta += new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SUSTITUTIVO).toString();
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_TIP_REF_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_TIP_REF_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta.concat(new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TIP_REF).toString());
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_TIP_REF_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_TIP_REF), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta.concat(new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_PLAZO).toString());
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_DIF).toString();
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_DIF).toPlainString().concat(CTE_PORCENTAJE), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_MINMAX_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_MINMAX_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta.concat(new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_DIF_MIN).toString());
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_MINMAX_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_MINMAX), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_BON_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_BON_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta.concat(new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_DIF_BON).toString());
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_BON_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_BON), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_INTERES_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_INTERES_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        /*20141128 Si dato a autorizar es el interés fijo de un tramo interés, se añade un literal al final de la línea. */
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_INT).toString();
                        if (0 == BigDecimal.ONE.compareTo(contextoAux.getBigDecimal(CTX_NIV_AUT_ORDEN_INT))) {
                            valorDetalleAutorizacion = valorDetalleAutorizacion + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_INICIAL).toString();
                        }
                        valorDetalleAutorizacion = valorDetalleAutorizacion + DESCRIPCION_DOS_PUNTOS;
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_INTERES_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_INTERES).toPlainString().concat(CTE_PORCENTAJE), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_CAP_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_CAP_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_DEM_CAP).toString();
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_CAP_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_CAP), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_INT_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_INT_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_DEM_INT).toString();
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_INT_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_DEM_INT), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_PRE_REV_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_PRE_REV_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_NUM_PER).toString();
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_PRE_REV_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_PRE_REV), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SUELO).toString();
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TECHO).toString();
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO), descrNivel);
                        numeroLinea++;
                    }
                    if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_INT_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_INT_NIV).intValue() > BigDecimal.TEN.intValue()) {
                        valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SUELO_INT).toString();
                        descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_INT_NIV));
                        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_INT), descrNivel);
                        numeroLinea++;
                    }
                } else {
                    // Tratamiento de los datos de comisiones
                    if (contextoAux.getNombre().equalsIgnoreCase(CTX_NIVEL_AUTORIZ_COMISIONES)) {
                        // Invocamos al servicio IFSN_052 para consultar la descripción del tipo de comisión
                        if (salidaConsValores == null) {
                            salidaConsValores = consultaListaValores(ServicioNegocio.getContexto(), CTE_ID_LISTA_VAL_TIPO_COMISION);
                        }
                        String descripcionCompleta = StringUtils.EMPTY;
                        String descComision = StringUtils.EMPTY;
                        try {
                            descComision = salidaConsValores.get(contextoAux.getString(CTX_NIV_AUT_TIPO_COM));
                            descComision = (descComision == null ? StringUtils.EMPTY : /*20141212 " - " +*/
                            descComision);
                        } catch (ClassCastException cEx) {
                            descComision = StringUtils.EMPTY;
                        } catch (NullPointerException nEx) {
                            descComision = StringUtils.EMPTY;
                        }
                        descripcionCompleta = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TIPO_COM).toString() + /*contextoAux.getString(CTX_NIV_AUT_TIPO_COM).toString() +*/
                        descComision + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TRAMO_COM).toString() + contextoAux.getBigDecimal(CTX_NIV_AUT_ORDEN_COM).toString();
                        if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_POR_COM_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_POR_COM_NIV).intValue() > BigDecimal.TEN.intValue()) {
                            valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_POR_COM).toString();
                            descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_POR_COM_NIV));
                            introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_POR_COM), descrNivel);
                            numeroLinea++;
                        }
                        if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_IMP_MIN_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_IMP_MIN_NIV).intValue() > BigDecimal.TEN.intValue()) {
                            valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_IMP_MIN).toString();
                            descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_IMP_MIN_NIV));
                            introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_IMP_MIN), descrNivel);
                            numeroLinea++;
                        }
                        if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_COM_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_COM_NIV).intValue() > BigDecimal.TEN.intValue()) {
                            valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_PLAZO_COM).toString();
                            descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_COM_NIV));
                            introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_PLAZO_COM), descrNivel);
                            numeroLinea++;
                        }
                        if (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_POR_ADE_NIV)) && contextoAux.getBigDecimal(CTX_NIV_AUT_POR_ADE_NIV).intValue() > BigDecimal.TEN.intValue()) {
                            valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_POR_ADE).toString();
                            descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_POR_ADE_NIV));
                            introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, contextoAux.getBigDecimal(CTX_NIV_AUT_POR_ADE), descrNivel);
                            numeroLinea++;
                        }
                    }
                }
            }
        }
    }

    /**
     * Rellenar los campos diferencial bonificado y diferencial sin bonificacion
     * @param datosEntradaAltaAutorizacionSrv
     * @param salidaServicioNivelesAut
     */
    private void rellenarDetalleAutorizacionInformacionAdicional(IDatosEntradaTx datosEntradaAltaAutorizacionSrv, IContexto[] salidaServicioNivelesAut, DatosSolicitudC solicitud) {
        String valorDetalleAutorizacion = new String();
        @SuppressWarnings("unused") BigDecimal bonificacionMaxima = BigDecimal.ZERO;
        BigDecimal diferencialBonificado = BigDecimal.ZERO;
        BigDecimal periodicidadInteres = BigDecimal.ZERO;
        BigDecimal diferencialSinBonif = BigDecimal.ZERO;
        BigDecimal techo = BigDecimal.ZERO;
        BigDecimal interesSinBonif = BigDecimal.ZERO;
        if (null != salidaServicioNivelesAut && salidaServicioNivelesAut.length > 0) {
            if (null != solicitud) {
                for (IContexto contextoAux : salidaServicioNivelesAut) {
                    if (contextoAux.getNombre().equalsIgnoreCase(CTX_NIVEL_AUTORIZ_INTERES)) {
                        String descripcionCompleta = new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_TRAMO_INT_INFORMACION).toString() + contextoAux.getBigDecimal(CTX_NIV_AUT_ORDEN_INT).toString();
                        /**
                         * Por peticion de negocio vamos a añadir el diferencial bonificado y el diferencial sin bonificacion
                         * Diferencial sin bonificacion
                         */
                        if ((!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF)) && 0 != contextoAux.getBigDecimal(CTX_NIV_AUT_DIF).compareTo(BigDecimal.ZERO)) || (!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO)) && 0 != contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO).compareTo(BigDecimal.ZERO))) {
                            if (Utilidades.esTipoReferenciaNoReferenciado(contextoAux.getBigDecimal(CTX_NIVEL_AUTORIZ_TIPO_REFERENCIA).toString())) {
                                if (contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_INT).intValue() == BigDecimal.ZERO.intValue()) {
                                    // + DESCRIPCION_DIFERENCIAL_SIN_BONIFICACION;
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), _M_XIMO_INTER_S_BONIFICACI_N_165872380).toString();
                                } else {
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SUSTITUTIVO).toString() + new Mensaje(ServicioNegocio.getContexto(), _M_XIMO_INTER_S_BONIFICACI_N_165872380).toString();
                                }
                            } else {
                                if (contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_INT).intValue() == BigDecimal.ZERO.intValue()) {
                                    // + DESCRIPCION_DIFERENCIAL_SIN_BONIFICACION;
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), _DIFERENCIAL_BONIFICACI_N_253182385).toString();
                                } else {
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SUSTITUTIVO).toString() + new Mensaje(ServicioNegocio.getContexto(), _DIFERENCIAL_BONIFICACI_N_253182385).toString();
                                }
                            }
                            // descrNivel = UtilidadesComun.obtenerDescrNivel(contextoAux.getBigDecimal(CTX_NIV_AUT_SUELO_INT_NIV));
                            if (Utilidades.esTipoReferenciaNoReferenciado(contextoAux.getBigDecimal(CTX_NIVEL_AUTORIZ_TIPO_REFERENCIA).toString())) {
                                interesSinBonif = contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO);
                            } else {
                                interesSinBonif = contextoAux.getBigDecimal(CTX_NIV_AUT_DIF);
                            }
                            introducirCampoContextoInformacionAdicional(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, interesSinBonif.toPlainString());
                            numeroLinea++;
                            techo = contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO);
                            diferencialSinBonif = contextoAux.getBigDecimal(CTX_NIV_AUT_DIF);
                            periodicidadInteres = contextoAux.getBigDecimal(CTX_NIV_AUT_NUM_PERIODO);
                            // diferencialBonificado = UtilidadesComun.obtenerDiferencialBonificado(solicitud, contextoAux.getBigDecimal(CTX_NIV_AUT_DIF));
                            bonificacionMaxima = UtilidadesTramitacion.obtenerBonificacionMaxima(solicitud.getProducto(), solicitud.getSubproducto(), solicitud.getIdTarifa(), solicitud.getDatosSolicitudKey().getNucExpediente(), periodicidadInteres, solicitud.getVersionGeneral());
                        }
                        /**
                         * Diferencial bonificado
                         */
                        if ((!Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_DIF_BON)) && 0 != bonificacionMaxima.compareTo(BigDecimal.ZERO) && 0 != diferencialSinBonif.compareTo(BigDecimal.ZERO)) || !Utilidades.isBlankOrNull(contextoAux.getBigDecimal(CTX_NIV_AUT_TECHO)) && 0 != bonificacionMaxima.compareTo(BigDecimal.ZERO) && 0 != techo.compareTo(BigDecimal.ZERO)) {
                            if (Utilidades.esTipoReferenciaNoReferenciado(contextoAux.getBigDecimal(CTX_NIVEL_AUTORIZ_TIPO_REFERENCIA).toString())) {
                                if (contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_INT).intValue() == BigDecimal.ZERO.intValue()) {
                                    // + DESCRIPCION_DIFERENCIAL_SIN_BONIFICACION;
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), _M_XIMO_INTER_S_BONIFICADO_824800954).toString();
                                } else {
                                    // + DESCRIPCION_DIFERENCIAL_BONIFICACION_MAX;
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SUSTITUTIVO).toString() + new Mensaje(ServicioNegocio.getContexto(), _M_XIMO_INTER_S_BONIFICADO_824800954).toString();
                                }
                                if (null != techo && null != bonificacionMaxima && 0 < techo.compareTo(bonificacionMaxima)) {
                                    diferencialBonificado = techo.subtract(bonificacionMaxima);
                                }
                            } else {
                                if (contextoAux.getBigDecimal(CTX_NIV_AUT_TIPO_INT).intValue() == BigDecimal.ZERO.intValue()) {
                                    // + DESCRIPCION_DIFERENCIAL_SIN_BONIFICACION;
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), _DIFERENCIAL_BONIFICADO_1656505307).toString();
                                } else {
                                    // + DESCRIPCION_DIFERENCIAL_BONIFICACION_MAX;
                                    valorDetalleAutorizacion = descripcionCompleta + new Mensaje(ServicioNegocio.getContexto(), DESCRIPCION_SUSTITUTIVO).toString() + new Mensaje(ServicioNegocio.getContexto(), _DIFERENCIAL_BONIFICADO_1656505307).toString();
                                }
                                if (null != diferencialSinBonif && null != bonificacionMaxima && 0 < diferencialSinBonif.compareTo(bonificacionMaxima)) {
                                    diferencialBonificado = diferencialSinBonif.subtract(bonificacionMaxima);
                                }
                            }
                            introducirCampoContextoInformacionAdicional(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion, diferencialBonificado.toPlainString());
                            numeroLinea++;
                        }
                    }
                }
            }
        }
    }

    private void rellenarDetalleAutorizacionScoring(IDatosEntradaTx datosEntradaAltaAutorizacionSrv, BigDecimal indDictamenScoring, BigDecimal nivelMaximoAutoriz) {
        // Se informa el detalle de una autorización con aquellos datos que son
        // susceptibles de autorizar, recuperados de la llamada del servicio
        // comprobacion de niveles de autorización de tramitación
        String descrNivel = null;
        StringBuilder valorDetalleAutorizacion = new StringBuilder();
        valorDetalleAutorizacion.append(new Mensaje(ServicioNegocio.getContexto(), CTE_DETALLE_AUTORIZ_DICTAMEN_SCORING).toString());
        valorDetalleAutorizacion.append(GestionDatosAutorizacion.obtenerDictamenScoring(indDictamenScoring));
        valorDetalleAutorizacion.append(DESCRIPCION_DOS_PUNTOS);
        descrNivel = UtilidadesComun.obtenerDescrNivel(nivelMaximoAutoriz);
        introducirCampoContexto(datosEntradaAltaAutorizacionSrv, numeroLinea, valorDetalleAutorizacion.toString(), // aqui va el valor del campo que hace que genere autoriz, esto tiene sentido cuando es por precio, cuando es por scoring no.
        StringUtils.EMPTY, descrNivel);
    // numeroLinea++;
    }

    private static final String _DIFERENCIAL_BONIFICADO_1656505307 = "_DIFERENCIAL_BONIFICADO_1656505307";

    private static final String _M_XIMO_INTER_S_BONIFICADO_824800954 = "_M_XIMO_INTER_S_BONIFICADO_824800954";

    private static final String _DIFERENCIAL_BONIFICACI_N_253182385 = "_DIFERENCIAL_BONIFICACI_N_253182385";

    private static final String _M_XIMO_INTER_S_BONIFICACI_N_165872380 = "_M_XIMO_INTER_S_BONIFICACI_N_165872380";
}
