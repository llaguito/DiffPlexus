/**
 * Aplicacion de Activo
 * Novacaixagalicia © 2009-2010
 * 
 * 
 */
package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.List;

import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresC;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.ResultadoCondicionesInteresVO;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;

/**
 * Declaración del contexto de salida para ANPMN052
 * @author Mirian Álvarez
 *
 */
public final class ContextosCondicionesInteresPrestamo
{
	private static final String CTE_ID_CTX = "ANPMN052";
	private static final String CTE_PROP_OFICINA_SOLICITUD = "ANPMN052010";
	private static final String CTE_PROP_NUM_SOLICITUD = "ANPMN052020";
	private static final String CTE_PROP_VERSION_SOLICITUD = "ANPMN052030";
	private static final String CTE_PROP_ORDEN = "ANPMN052040";
	private static final String CTE_PROP_TIPO_CONDICION = "ANPMN052050";
	private static final String CTE_PROP_PRIORIDAD = "ANPMN052060";
	private static final String CTE_PROP_NUC_EXPEDIENTE = "ANPMN052070";
	private static final String CTE_PROP_TIPO_INT = "ANPMN052080";
	private static final String CTE_PROP_GESTION_CAMPANAS = "ANPMN052090";
	private static final String CTE_PROP_VALORACION = "ANPMN052100";
	private static final String CTE_PROP_PLAZO = "ANPMN052110";
	private static final String CTE_PROP_NIVEL_PLAZO = "ANPMN052120";
	private static final String CTE_PROP_INT = "ANPMN052130";
	private static final String CTE_PROP_NIVEL_INT = "ANPMN052140";
	private static final String CTE_PROP_TOMA_REFERENCIA = "ANPMN052150";
	private static final String CTE_PROP_TIPO_REFERENCIA = "ANPMN052160";
	private static final String CTE_PROP_NIVEL_TIPO_REFERENCIA = "ANPMN052170";
	private static final String CTE_PROP_PERIODICIDAD_PUBLICACION = "ANPMN052180";
	private static final String CTE_PROP_FECHA_CONSIDERAR = "ANPMN052190";
	private static final String CTE_PROP_PERIODOS_RESTAR = "ANPMN052200";
	private static final String CTE_PROP_UNIDAD_PERIODOS_RESTAR = "ANPMN052210";
	private static final String CTE_PROP_ESPECIAL = "ANPMN052220";
	private static final String CTE_PROP_MONEDA_TIPO_REFERENCIA = "ANPMN052230";
	private static final String CTE_PROP_TIP_REF_PERIODO_ANTERIOR = "ANPMN052240";
	private static final String CTE_PROP_DIFERENCIAL_MIN_TIPOS_REF = "ANPMN052250";
	private static final String CTE_PROP_MAXIMO_INT_INICIAL = "ANPMN052260";
	private static final String CTE_PROP_DIFERENCIAL = "ANPMN052270";
	private static final String CTE_PROP_NIVEL_DIFERENCIAL = "ANPMN052280";
	private static final String CTE_PROP_DIFERENCIAL_MIN_MAX = "ANPMN052290";
	private static final String CTE_PROP_NIVEL_DIFERENCIAL_MIN_MAX = "ANPMN052300";
	private static final String CTE_PROP_DIFERENCIAL_BONIFICADO = "ANPMN052310";
	private static final String CTE_PROP_NIVEL_DIF_BONIFICADO = "ANPMN052320";
	private static final String CTE_PROP_TIPO_INT_DEMORA = "ANPMN052330";
	private static final String CTE_PROP_DEMORA_CAPITAL = "ANPMN052340";
	private static final String CTE_PROP_NIVEL_DEMORA_CAPITAL = "ANPMN052350";
	private static final String CTE_PROP_DEMORA_INT = "ANPMN052360";
	private static final String CTE_PROP_NIVEL_DEMORA_INT = "ANPMN052370";
	private static final String CTE_PROP_NUM_PERIODOS_REVISION = "ANPMN052380";
	private static final String CTE_PROP_NIVEL_NUM_PERIODOS_REVISION = "ANPMN052390";
	private static final String CTE_PROP_UNIDAD_PERIODOS_REVISION = "ANPMN052400";
	private static final String CTE_PROP_TIPO_PERIODOS_REVISION = "ANPMN052410";
	private static final String CTE_PROP_PERIODO_MINIMO_REVISION = "ANPMN052420";
	private static final String CTE_PROP_PERIODICIDAD_NUM_PERIODO = "ANPMN052430";
	private static final String CTE_PROP_PERIODICIDAD_UNIDAD_PERIODO = "ANPMN052440";
	private static final String CTE_PROP_PERIODICIDAD_TIPO_PERIODO = "ANPMN052450";
	private static final String CTE_PROP_PAGO_UNICO_VENCIMIENTO_FINAL = "ANPMN052460";
	private static final String CTE_PROP_INDICADOR_PERIODO_MIN_LIQUIDACION = "ANPMN052470";
	private static final String CTE_PROP_NUM_PERIODO_MIN_LIQUIDACION = "ANPMN052480";
	private static final String CTE_PROP_UNIDAD_PERIODO_MIN_LIQUIDACION = "ANPMN052490";
	private static final String CTE_PROP_FORZAR_FIN_TRAMO_FECHA_PAGO = "ANPMN052500";
	private static final String CTE_PROP_COINCID_FECHA_REV_CON_FECHA_PA = "ANPMN052510";
	private static final String CTE_PROP_APLICA_SUELO_INT_INICIAL = "ANPMN052520";
	private static final String CTE_PROP_SUELO_INT_INICIAL = "ANPMN052530";
	private static final String CTE_PROP_NIVEL_SUELO_INT_INICIAL = "ANPMN052540";
	private static final String CTE_PROP_SUELO = "ANPMN052550";
	private static final String CTE_PROP_NIVEL_SUELO = "ANPMN052560";
	private static final String CTE_PROP_TECHO = "ANPMN052570";
	private static final String CTE_PROP_NIVEL_TECHO = "ANPMN052580";
	private static final String CTE_PROP_SUELO_APLICA_SOBRE = "ANPMN052590";
	private static final String CTE_PROP_MINIMO_VARIACION = "ANPMN052600";
	private static final String CTE_PROP_INDICADOR_MINIMO_VARIACION = "ANPMN052610";
	private static final String CTE_PROP_TIPO_REDONDEO = "ANPMN052620";
	private static final String CTE_PROP_BASE_REDONDEO = "ANPMN052630";
	private static final String CTE_PROP_PORCENTAJE_REDONDEO = "ANPMN052640";
	private static final String CTE_PROP_COND_PROMOTOR_ADQUIRENTE = "ANPMN052650";
	//private static final String CTE_PROP_COINZ_PLAZO_REVISION = "ANPMN052660";
	private static final String CTE_PROP_ORDEN_DE_APLICACION = "ANPMN052670";
	private static final String CTE_PROP_USUARIO = "ANPMN052680";
	private static final String CTE_INDICADOR_FLEXIBILIDAD = "ANPMN052690";
	private static final String CTE_PROP_ID_RELACION		= "ANPMN052700";
	private static final String CTE_PROP_COD_ERROR = "ANPMN052710";
	private static final String CTE_PROP_DESC_ERROR = "ANPMN052720";
	
	private static final String CTE_ERROR_ID_CTX = "ANPMN004";
	private static final String CTE_ERROR_PROP_COD_ERROR = "ANPMN004010";
	private static final int CTE_COD_ERROR_CERO = 0; 
	
	private static final String DESC_ERROR_SUELO_MENOR_DIFERENCIAL = "El valor del suelo tiene que ser mayor o igual que el diferencial.";
	private static final String DESC_ERROR_SUELO_NO_CERO = "El suelo no puede tener valor cero para este tipo de cliente.";
	
	/**
	 * Constructor por defecto.
	 */
	private ContextosCondicionesInteresPrestamo()
	{
	}	
		
	/**
	 * @param pCondicionesInteres Datos de las condiciones de interés
	 * @param pCodError Código de error si se produce alguno
	 * @return salida Contexto de salida
	 */
	public static IContexto[] rellenarDatosContexto(final CondicionesInteresC pCondicionesInteres, Integer pCodError)
	{
		IContexto[] salida = null;
		
		if (pCondicionesInteres != null && pCodError.intValue() == Constantes.CTE_CERO.intValue())
		{
			salida = new IContexto[1];
			
			IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ID_CTX);
			
			datos.put(CTE_PROP_OFICINA_SOLICITUD,  new BigDecimal(
					pCondicionesInteres.getCondicionesInteresKey().getIntOficinaSolicitud()));
			datos.put(CTE_PROP_NUM_SOLICITUD,  new BigDecimal(pCondicionesInteres.getCondicionesInteresKey().getIntNumeroSolicitud()));
			datos.put(CTE_PROP_VERSION_SOLICITUD,  new BigDecimal(
					pCondicionesInteres.getCondicionesInteresKey().getIntVersionSolicitud()));
			datos.put(CTE_PROP_ORDEN,  new BigDecimal(pCondicionesInteres.getCondicionesInteresKey().getIntOrdenDelTramo()));
			datos.put(CTE_PROP_TIPO_CONDICION,  new BigDecimal(pCondicionesInteres.getCondicionesInteresKey().getIntTipoCondicion()));
			datos.put(CTE_PROP_PRIORIDAD,  new BigDecimal(pCondicionesInteres.getCondicionesInteresKey().getIntPrioridad()));
			datos.put(CTE_PROP_NUC_EXPEDIENTE,  new BigDecimal(pCondicionesInteres.getCondicionesInteresKey().getIntNucExpediente()));
			datos.put(CTE_PROP_TIPO_INT,  pCondicionesInteres.getStrTipoDeInteres());
			datos.put(CTE_PROP_GESTION_CAMPANAS,  new BigDecimal(pCondicionesInteres.getIntGestionCampanas()));
			datos.put(CTE_PROP_VALORACION,  pCondicionesInteres.getStrValoracionIVI());
			datos.put(CTE_PROP_PLAZO,  new BigDecimal(pCondicionesInteres.getIntPlazo()));
			datos.put(CTE_PROP_NIVEL_PLAZO,  new BigDecimal(pCondicionesInteres.getIntNivelPlazo()));
			datos.put(CTE_PROP_INT,  pCondicionesInteres.getIntInteres());
			datos.put(CTE_PROP_NIVEL_INT,  new BigDecimal(pCondicionesInteres.getIntNivelInteres()));
			datos.put(CTE_PROP_TOMA_REFERENCIA,  new BigDecimal(pCondicionesInteres.getIntTomaDeReferencia()));
			datos.put(CTE_PROP_TIPO_REFERENCIA,  new BigDecimal(pCondicionesInteres.getIntTipoReferencia()));
			datos.put(CTE_PROP_NIVEL_TIPO_REFERENCIA,  new BigDecimal(pCondicionesInteres.getIntNivelTipoReferencia()));
			datos.put(CTE_PROP_PERIODICIDAD_PUBLICACION, pCondicionesInteres.getStrPeriodicidadPublicacion());
			datos.put(CTE_PROP_FECHA_CONSIDERAR,  new BigDecimal(pCondicionesInteres.getIntFechaAConsiderar()));
			datos.put(CTE_PROP_PERIODOS_RESTAR, new BigDecimal(pCondicionesInteres.getIntPeriodosARestar()));
			datos.put(CTE_PROP_UNIDAD_PERIODOS_RESTAR, pCondicionesInteres.getStrUnidadDelPeriodo());
			datos.put(CTE_PROP_ESPECIAL, pCondicionesInteres.getStrEsEspecial());
			datos.put(CTE_PROP_MONEDA_TIPO_REFERENCIA, pCondicionesInteres.getStrMonedaTipoReferencia());
			datos.put(CTE_PROP_TIP_REF_PERIODO_ANTERIOR, pCondicionesInteres.getStrTipoReferenciaPeriodoAnterior());
			datos.put(CTE_PROP_DIFERENCIAL_MIN_TIPOS_REF, pCondicionesInteres.getIntDifMinEntreTiposReferencia());
			datos.put(CTE_PROP_MAXIMO_INT_INICIAL, pCondicionesInteres.getIntMaximoInteresInicial());
			datos.put(CTE_PROP_DIFERENCIAL, pCondicionesInteres.getIntDif());
			datos.put(CTE_PROP_NIVEL_DIFERENCIAL, new BigDecimal(pCondicionesInteres.getIntNivelDif()));
			datos.put(CTE_PROP_DIFERENCIAL_MIN_MAX, pCondicionesInteres.getIntDifMinimoMaximo());
			datos.put(CTE_PROP_NIVEL_DIFERENCIAL_MIN_MAX, new BigDecimal(pCondicionesInteres.getIntNivelDifMinimoMaximo()));
			datos.put(CTE_PROP_DIFERENCIAL_BONIFICADO, pCondicionesInteres.getIntDifBonificado());
			datos.put(CTE_PROP_NIVEL_DIF_BONIFICADO, new BigDecimal(pCondicionesInteres.getIntNivelDifBonificado()));
			datos.put(CTE_PROP_TIPO_INT_DEMORA, new BigDecimal(pCondicionesInteres.getIntTipoInteresDemora()));
			datos.put(CTE_PROP_DEMORA_CAPITAL, pCondicionesInteres.getIntPorDemoraSobreCapital());
			datos.put(CTE_PROP_NIVEL_DEMORA_CAPITAL, new BigDecimal(pCondicionesInteres.getIntNivelPorDemoraSobreCapital()));
			datos.put(CTE_PROP_DEMORA_INT, pCondicionesInteres.getIntPorDemoraSobreInteres());
			datos.put(CTE_PROP_NIVEL_DEMORA_INT, new BigDecimal(pCondicionesInteres.getIntNivelPorDemoraSobreInteres()));
			datos.put(CTE_PROP_NUM_PERIODOS_REVISION, new BigDecimal(pCondicionesInteres.getIntNumPeriodosRevision()));
			datos.put(CTE_PROP_NIVEL_NUM_PERIODOS_REVISION, new BigDecimal(pCondicionesInteres.getIntNivelNumPeriodosRevision()));
			datos.put(CTE_PROP_UNIDAD_PERIODOS_REVISION, pCondicionesInteres.getStrUnidadPeriodosRevision());
			datos.put(CTE_PROP_TIPO_PERIODOS_REVISION, new BigDecimal(pCondicionesInteres.getIntTipoPeriodosRevision()));
			datos.put(CTE_PROP_PERIODO_MINIMO_REVISION, new BigDecimal(pCondicionesInteres.getIntPeriodoMinimoRevision()));
			datos.put(CTE_PROP_PERIODICIDAD_NUM_PERIODO, new BigDecimal(pCondicionesInteres.getIntPeriodicidadNumPeriodo()));
			datos.put(CTE_PROP_PERIODICIDAD_UNIDAD_PERIODO, pCondicionesInteres.getStrPeriodicidadUnidadPeriodo());
			datos.put(CTE_PROP_PERIODICIDAD_TIPO_PERIODO, new BigDecimal(pCondicionesInteres.getIntPeriodicidadTipoPeriodo()));
			datos.put(CTE_PROP_PAGO_UNICO_VENCIMIENTO_FINAL, pCondicionesInteres.getStrPagoUnicoVencimientoFinal());
			datos.put(CTE_PROP_INDICADOR_PERIODO_MIN_LIQUIDACION, new BigDecimal(
					pCondicionesInteres.getIntIndPeriodoMinimoLiquidacion()));
			datos.put(CTE_PROP_NUM_PERIODO_MIN_LIQUIDACION, new BigDecimal(pCondicionesInteres.getIntNumPeriodoMinLiquidacion()));
			datos.put(CTE_PROP_UNIDAD_PERIODO_MIN_LIQUIDACION, pCondicionesInteres.getStrUnidadPeriodoMinLiquidacion());
			datos.put(CTE_PROP_FORZAR_FIN_TRAMO_FECHA_PAGO, new BigDecimal(pCondicionesInteres.getIntForzarFinTramoFechaPago()));
			datos.put(CTE_PROP_COINCID_FECHA_REV_CON_FECHA_PA, new BigDecimal(
					pCondicionesInteres.getIntCoincidenciaPlazoRevisionConFechaPago()));
			datos.put(CTE_PROP_APLICA_SUELO_INT_INICIAL, new BigDecimal(pCondicionesInteres.getIntAplicaSueloInteresInicial()));
			datos.put(CTE_PROP_SUELO_INT_INICIAL, pCondicionesInteres.getIntSueloInteresInicial());
			datos.put(CTE_PROP_NIVEL_SUELO_INT_INICIAL, new BigDecimal(pCondicionesInteres.getIntNivelSueloInteresInicial()));
			datos.put(CTE_PROP_SUELO, pCondicionesInteres.getIntSuelo());
			datos.put(CTE_PROP_NIVEL_SUELO, new BigDecimal(pCondicionesInteres.getIntNivelSuelo()));
			datos.put(CTE_PROP_TECHO, pCondicionesInteres.getIntTecho());
			datos.put(CTE_PROP_NIVEL_TECHO, new BigDecimal(pCondicionesInteres.getIntNivelTecho()));
			datos.put(CTE_PROP_SUELO_APLICA_SOBRE, new BigDecimal(pCondicionesInteres.getIntSobreQueAplicaElSuelo()));
			datos.put(CTE_PROP_MINIMO_VARIACION, pCondicionesInteres.getIntMinimoVariacion());
			datos.put(CTE_PROP_INDICADOR_MINIMO_VARIACION, new BigDecimal(pCondicionesInteres.getIntIndMinimoVariacion()));
			datos.put(CTE_PROP_TIPO_REDONDEO, new BigDecimal(pCondicionesInteres.getIntTipoRedondeo()));
			datos.put(CTE_PROP_BASE_REDONDEO, new BigDecimal(pCondicionesInteres.getIntBaseRedondeo()));
			datos.put(CTE_PROP_PORCENTAJE_REDONDEO, pCondicionesInteres.getIntPorRedondeo());
			datos.put(CTE_PROP_COND_PROMOTOR_ADQUIRENTE, new BigDecimal(pCondicionesInteres.getIntCondicionesDeAdquirenteOPromotor()));
			datos.put(CTE_PROP_ORDEN_DE_APLICACION,  new BigDecimal(pCondicionesInteres.getIntOrdenAplicacion()));
			datos.put(CTE_PROP_USUARIO, pCondicionesInteres.getStrUsuario());
			datos.put(CTE_PROP_ID_RELACION, pCondicionesInteres.getBidIdRelacion());
			salida[0] = datos;
		}
		else 
		{
			salida = new IContexto[1];
			
			IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ERROR_ID_CTX);
			
			datos.put(CTE_ERROR_PROP_COD_ERROR,  new BigDecimal(pCodError.intValue()));
			
			salida[0] = datos;
		}
        return salida;
			
	}
	
	/**
	 * @param pCondicionesInteres Datos de las condiciones de interés
	 * @return salida Contexto de salida
	 */
	public static IContexto[] rellenarDatosContexto(final List<ResultadoCondicionesInteresVO> pCondicionesInteres, Integer codigoErrorDiferencial)
	{
		IContexto[] salida = null;
		
		if (null != pCondicionesInteres && 0 < pCondicionesInteres.size())
		{
			int i = 0;
			final int iSize = pCondicionesInteres.size();
			salida = new IContexto[iSize];
			
			for (ResultadoCondicionesInteresVO interesVO : pCondicionesInteres)
			{
				if (0 == interesVO.getCodError())
				{
					CondicionesInteresC ci = interesVO.getDatos();
					IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ID_CTX);
					datos.put(CTE_PROP_OFICINA_SOLICITUD, new BigDecimal(
							ci.getCondicionesInteresKey().getIntOficinaSolicitud()));
					datos.put(CTE_PROP_NUM_SOLICITUD, new BigDecimal(ci.getCondicionesInteresKey().getIntNumeroSolicitud()));
					datos.put(CTE_PROP_VERSION_SOLICITUD, new BigDecimal(
							ci.getCondicionesInteresKey().getIntVersionSolicitud()));
					datos.put(CTE_PROP_ORDEN,  new BigDecimal(ci.getCondicionesInteresKey().getIntOrdenDelTramo()));
					datos.put(CTE_PROP_TIPO_CONDICION,  new BigDecimal(ci.getCondicionesInteresKey().getIntTipoCondicion()));
					datos.put(CTE_PROP_PRIORIDAD,  new BigDecimal(ci.getCondicionesInteresKey().getIntPrioridad()));
					datos.put(CTE_PROP_NUC_EXPEDIENTE,  new BigDecimal(ci.getCondicionesInteresKey().getIntNucExpediente()));
					datos.put(CTE_PROP_TIPO_INT,  ci.getStrTipoDeInteres());
					datos.put(CTE_PROP_GESTION_CAMPANAS,  new BigDecimal(ci.getIntGestionCampanas()));
					datos.put(CTE_PROP_VALORACION,  ci.getStrValoracionIVI());
					datos.put(CTE_PROP_PLAZO,  new BigDecimal(ci.getIntPlazo()));
					datos.put(CTE_PROP_NIVEL_PLAZO,  new BigDecimal(ci.getIntNivelPlazo()));
					datos.put(CTE_PROP_INT,  ci.getIntInteres());
					datos.put(CTE_PROP_NIVEL_INT,  new BigDecimal(ci.getIntNivelInteres()));
					datos.put(CTE_PROP_TOMA_REFERENCIA,  new BigDecimal(ci.getIntTomaDeReferencia()));
					datos.put(CTE_PROP_TIPO_REFERENCIA,  new BigDecimal(ci.getIntTipoReferencia()));
					datos.put(CTE_PROP_NIVEL_TIPO_REFERENCIA,  new BigDecimal(ci.getIntNivelTipoReferencia()));
					datos.put(CTE_PROP_PERIODICIDAD_PUBLICACION, ci.getStrPeriodicidadPublicacion());
					datos.put(CTE_PROP_FECHA_CONSIDERAR,  new BigDecimal(ci.getIntFechaAConsiderar()));
					datos.put(CTE_PROP_PERIODOS_RESTAR, new BigDecimal(ci.getIntPeriodosARestar()));
					datos.put(CTE_PROP_UNIDAD_PERIODOS_RESTAR, ci.getStrUnidadDelPeriodo());
					datos.put(CTE_PROP_ESPECIAL, ci.getStrEsEspecial());
					datos.put(CTE_PROP_MONEDA_TIPO_REFERENCIA, ci.getStrMonedaTipoReferencia());
					datos.put(CTE_PROP_TIP_REF_PERIODO_ANTERIOR, ci.getStrTipoReferenciaPeriodoAnterior());
					datos.put(CTE_PROP_DIFERENCIAL_MIN_TIPOS_REF, ci.getIntDifMinEntreTiposReferencia());
					datos.put(CTE_PROP_MAXIMO_INT_INICIAL, ci.getIntMaximoInteresInicial());
					datos.put(CTE_PROP_DIFERENCIAL, ci.getIntDif());
					datos.put(CTE_PROP_NIVEL_DIFERENCIAL, new BigDecimal(ci.getIntNivelDif()));
					datos.put(CTE_PROP_DIFERENCIAL_MIN_MAX, ci.getIntDifMinimoMaximo());
					datos.put(CTE_PROP_NIVEL_DIFERENCIAL_MIN_MAX, new BigDecimal(ci.getIntNivelDifMinimoMaximo()));
					datos.put(CTE_PROP_DIFERENCIAL_BONIFICADO, ci.getIntDifBonificado());
					datos.put(CTE_PROP_NIVEL_DIF_BONIFICADO, new BigDecimal(ci.getIntNivelDifBonificado()));
					datos.put(CTE_PROP_TIPO_INT_DEMORA, new BigDecimal(ci.getIntTipoInteresDemora()));
					datos.put(CTE_PROP_DEMORA_CAPITAL, ci.getIntPorDemoraSobreCapital());
					datos.put(CTE_PROP_NIVEL_DEMORA_CAPITAL, new BigDecimal(ci.getIntNivelPorDemoraSobreCapital()));
					datos.put(CTE_PROP_DEMORA_INT, ci.getIntPorDemoraSobreInteres());
					datos.put(CTE_PROP_NIVEL_DEMORA_INT, new BigDecimal(ci.getIntNivelPorDemoraSobreInteres()));
					datos.put(CTE_PROP_NUM_PERIODOS_REVISION, new BigDecimal(ci.getIntNumPeriodosRevision()));
					datos.put(CTE_PROP_NIVEL_NUM_PERIODOS_REVISION, new BigDecimal(ci.getIntNivelNumPeriodosRevision()));
					datos.put(CTE_PROP_UNIDAD_PERIODOS_REVISION, ci.getStrUnidadPeriodosRevision());
					datos.put(CTE_PROP_TIPO_PERIODOS_REVISION, new BigDecimal(ci.getIntTipoPeriodosRevision()));
					datos.put(CTE_PROP_PERIODO_MINIMO_REVISION, new BigDecimal(ci.getIntPeriodoMinimoRevision()));
					datos.put(CTE_PROP_PERIODICIDAD_NUM_PERIODO, new BigDecimal(ci.getIntPeriodicidadNumPeriodo()));
					datos.put(CTE_PROP_PERIODICIDAD_UNIDAD_PERIODO, ci.getStrPeriodicidadUnidadPeriodo());
					datos.put(CTE_PROP_PERIODICIDAD_TIPO_PERIODO, new BigDecimal(ci.getIntPeriodicidadTipoPeriodo()));
					datos.put(CTE_PROP_PAGO_UNICO_VENCIMIENTO_FINAL, ci.getStrPagoUnicoVencimientoFinal());
					datos.put(CTE_PROP_INDICADOR_PERIODO_MIN_LIQUIDACION, new BigDecimal(ci.getIntIndPeriodoMinimoLiquidacion()));
					datos.put(CTE_PROP_NUM_PERIODO_MIN_LIQUIDACION, new BigDecimal(ci.getIntNumPeriodoMinLiquidacion()));
					datos.put(CTE_PROP_UNIDAD_PERIODO_MIN_LIQUIDACION, ci.getStrUnidadPeriodoMinLiquidacion());
					datos.put(CTE_PROP_FORZAR_FIN_TRAMO_FECHA_PAGO, new BigDecimal(ci.getIntForzarFinTramoFechaPago()));
					datos.put(CTE_PROP_COINCID_FECHA_REV_CON_FECHA_PA, new BigDecimal(
							ci.getIntCoincidenciaPlazoRevisionConFechaPago()));
					datos.put(CTE_PROP_APLICA_SUELO_INT_INICIAL, new BigDecimal(ci.getIntAplicaSueloInteresInicial()));
					datos.put(CTE_PROP_SUELO_INT_INICIAL, ci.getIntSueloInteresInicial());
					datos.put(CTE_PROP_NIVEL_SUELO_INT_INICIAL, new BigDecimal(ci.getIntNivelSueloInteresInicial()));
					datos.put(CTE_PROP_SUELO, ci.getIntSuelo());
					datos.put(CTE_PROP_NIVEL_SUELO, new BigDecimal(ci.getIntNivelSuelo()));
					datos.put(CTE_PROP_TECHO, ci.getIntTecho());
					datos.put(CTE_PROP_SUELO_APLICA_SOBRE, new BigDecimal(ci.getIntSobreQueAplicaElSuelo()));
					datos.put(CTE_PROP_MINIMO_VARIACION, ci.getIntMinimoVariacion());
					datos.put(CTE_PROP_INDICADOR_MINIMO_VARIACION, new BigDecimal(ci.getIntIndMinimoVariacion()));
					datos.put(CTE_PROP_TIPO_REDONDEO, new BigDecimal(ci.getIntTipoRedondeo()));
					datos.put(CTE_PROP_BASE_REDONDEO, new BigDecimal(ci.getIntBaseRedondeo()));
					datos.put(CTE_PROP_PORCENTAJE_REDONDEO, ci.getIntPorRedondeo());
					datos.put(CTE_PROP_COND_PROMOTOR_ADQUIRENTE, new BigDecimal(ci.getIntCondicionesDeAdquirenteOPromotor()));
					datos.put(CTE_PROP_ORDEN_DE_APLICACION,  new BigDecimal(ci.getIntOrdenAplicacion()));
					datos.put(CTE_PROP_USUARIO, ci.getStrUsuario());
					datos.put(CTE_PROP_ID_RELACION, ci.getBidIdRelacion());
					
					//Añadimos el COD de error y descripción según el codigoErrorDiferencial recibido
					
					if(null!=codigoErrorDiferencial) 
					{
						switch (codigoErrorDiferencial)
						{
							case 0:
								datos.put(CTE_PROP_COD_ERROR, BigDecimal.ZERO);
								datos.put(CTE_PROP_DESC_ERROR, "");
								break;
							
							case 1:
								datos.put(CTE_PROP_COD_ERROR, BigDecimal.ONE);
								datos.put(CTE_PROP_DESC_ERROR, DESC_ERROR_SUELO_MENOR_DIFERENCIAL);
								break;
							
							case 2:
								datos.put(CTE_PROP_COD_ERROR, BigDecimal.valueOf(2));
								datos.put(CTE_PROP_DESC_ERROR, DESC_ERROR_SUELO_NO_CERO);
								break;
						}
					}
					else
					{
						datos.put(CTE_PROP_COD_ERROR, BigDecimal.ZERO);
						datos.put(CTE_PROP_DESC_ERROR, "");
					}
					
					
					salida[i++] = datos;
				}
				else
				{
					IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ERROR_ID_CTX);
					datos.put(CTE_ERROR_PROP_COD_ERROR,  new BigDecimal(interesVO.getCodError().intValue()));
					salida[i++] = datos;
				}
			}
		}
		else
		{
			salida = new IContexto[1];
			IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ERROR_ID_CTX);
			datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(CTE_COD_ERROR_CERO));				
			salida[0] = datos;
		}
		return salida;			
	}
	
		
	/**
	 * @param pCondicionesInteres Lista de condiciones de interés
	 * @return salida Contexto de salida
	 */
	public static IContexto[] rellenarDatosContexto(final Collection<CondicionesInteresC> pCondicionesInteres)
	{
		IContexto[] salida = null;
		
		if (null != pCondicionesInteres && 0 < pCondicionesInteres.size())
		{
			int i = 0;
			
			final int iSize = pCondicionesInteres.size();
			
			salida = new IContexto[iSize];
			
			for  (CondicionesInteresC ci : pCondicionesInteres)
			{
				IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ID_CTX);
				datos.put(CTE_PROP_OFICINA_SOLICITUD,  new BigDecimal(ci.getCondicionesInteresKey().getIntOficinaSolicitud()));
				datos.put(CTE_PROP_NUM_SOLICITUD,  new BigDecimal(ci.getCondicionesInteresKey().getIntNumeroSolicitud()));
				datos.put(CTE_PROP_VERSION_SOLICITUD,  new BigDecimal(ci.getCondicionesInteresKey().getIntVersionSolicitud()));
				datos.put(CTE_PROP_ORDEN,  new BigDecimal(ci.getCondicionesInteresKey().getIntOrdenDelTramo()));
				datos.put(CTE_PROP_TIPO_CONDICION,  new BigDecimal(ci.getCondicionesInteresKey().getIntTipoCondicion()));
				datos.put(CTE_PROP_PRIORIDAD,  new BigDecimal(ci.getCondicionesInteresKey().getIntPrioridad()));
				datos.put(CTE_PROP_NUC_EXPEDIENTE,  new BigDecimal(ci.getCondicionesInteresKey().getIntNucExpediente()));
				datos.put(CTE_PROP_TIPO_INT,  ci.getStrTipoDeInteres());
				datos.put(CTE_PROP_GESTION_CAMPANAS,  new BigDecimal(ci.getIntGestionCampanas()));
				datos.put(CTE_PROP_VALORACION,  ci.getStrValoracionIVI());
				datos.put(CTE_PROP_PLAZO,  new BigDecimal(ci.getIntPlazo()));
				datos.put(CTE_PROP_NIVEL_PLAZO,  new BigDecimal(ci.getIntNivelPlazo()));
				datos.put(CTE_PROP_INT,  ci.getIntInteres());
				datos.put(CTE_PROP_NIVEL_INT,  new BigDecimal(ci.getIntNivelInteres()));
				datos.put(CTE_PROP_TOMA_REFERENCIA,  new BigDecimal(ci.getIntTomaDeReferencia()));
				datos.put(CTE_PROP_TIPO_REFERENCIA,  new BigDecimal(ci.getIntTipoReferencia()));
				datos.put(CTE_PROP_NIVEL_TIPO_REFERENCIA,  new BigDecimal(ci.getIntNivelTipoReferencia()));
				datos.put(CTE_PROP_PERIODICIDAD_PUBLICACION, ci.getStrPeriodicidadPublicacion());
				datos.put(CTE_PROP_FECHA_CONSIDERAR,  new BigDecimal(ci.getIntFechaAConsiderar()));
				datos.put(CTE_PROP_PERIODOS_RESTAR, new BigDecimal(ci.getIntPeriodosARestar()));
				datos.put(CTE_PROP_UNIDAD_PERIODOS_RESTAR, ci.getStrUnidadDelPeriodo());
				datos.put(CTE_PROP_ESPECIAL, ci.getStrEsEspecial());
				datos.put(CTE_PROP_MONEDA_TIPO_REFERENCIA, ci.getStrMonedaTipoReferencia());
				datos.put(CTE_PROP_TIP_REF_PERIODO_ANTERIOR, ci.getStrTipoReferenciaPeriodoAnterior());
				datos.put(CTE_PROP_DIFERENCIAL_MIN_TIPOS_REF, ci.getIntDifMinEntreTiposReferencia());
				datos.put(CTE_PROP_MAXIMO_INT_INICIAL, ci.getIntMaximoInteresInicial());
				datos.put(CTE_PROP_DIFERENCIAL, ci.getIntDif());
				datos.put(CTE_PROP_NIVEL_DIFERENCIAL, new BigDecimal(ci.getIntNivelDif()));
				datos.put(CTE_PROP_DIFERENCIAL_MIN_MAX, ci.getIntDifMinimoMaximo());
				datos.put(CTE_PROP_NIVEL_DIFERENCIAL_MIN_MAX, new BigDecimal(ci.getIntNivelDifMinimoMaximo()));
				datos.put(CTE_PROP_DIFERENCIAL_BONIFICADO, ci.getIntDifBonificado());
				datos.put(CTE_PROP_NIVEL_DIF_BONIFICADO, new BigDecimal(ci.getIntNivelDifBonificado()));
				datos.put(CTE_PROP_TIPO_INT_DEMORA, new BigDecimal(ci.getIntTipoInteresDemora()));
				datos.put(CTE_PROP_DEMORA_CAPITAL, ci.getIntPorDemoraSobreCapital());
				datos.put(CTE_PROP_NIVEL_DEMORA_CAPITAL, new BigDecimal(ci.getIntNivelPorDemoraSobreCapital()));
				datos.put(CTE_PROP_DEMORA_INT, ci.getIntPorDemoraSobreInteres());
				datos.put(CTE_PROP_NIVEL_DEMORA_INT, new BigDecimal(ci.getIntNivelPorDemoraSobreInteres()));
				datos.put(CTE_PROP_NUM_PERIODOS_REVISION, new BigDecimal(ci.getIntNumPeriodosRevision()));
				datos.put(CTE_PROP_NIVEL_NUM_PERIODOS_REVISION, new BigDecimal(ci.getIntNivelNumPeriodosRevision()));
				datos.put(CTE_PROP_UNIDAD_PERIODOS_REVISION, ci.getStrUnidadPeriodosRevision());
				datos.put(CTE_PROP_TIPO_PERIODOS_REVISION, new BigDecimal(ci.getIntTipoPeriodosRevision()));
				datos.put(CTE_PROP_PERIODO_MINIMO_REVISION, new BigDecimal(ci.getIntPeriodoMinimoRevision()));
				datos.put(CTE_PROP_PERIODICIDAD_NUM_PERIODO, new BigDecimal(ci.getIntPeriodicidadNumPeriodo()));
				datos.put(CTE_PROP_PERIODICIDAD_UNIDAD_PERIODO, ci.getStrPeriodicidadUnidadPeriodo());
				datos.put(CTE_PROP_PERIODICIDAD_TIPO_PERIODO, new BigDecimal(ci.getIntPeriodicidadTipoPeriodo()));
				datos.put(CTE_PROP_PAGO_UNICO_VENCIMIENTO_FINAL, ci.getStrPagoUnicoVencimientoFinal());
				datos.put(CTE_PROP_INDICADOR_PERIODO_MIN_LIQUIDACION, new BigDecimal(ci.getIntIndPeriodoMinimoLiquidacion()));
				datos.put(CTE_PROP_NUM_PERIODO_MIN_LIQUIDACION, new BigDecimal(ci.getIntNumPeriodoMinLiquidacion()));
				datos.put(CTE_PROP_UNIDAD_PERIODO_MIN_LIQUIDACION, ci.getStrUnidadPeriodoMinLiquidacion());
				datos.put(CTE_PROP_FORZAR_FIN_TRAMO_FECHA_PAGO, new BigDecimal(ci.getIntForzarFinTramoFechaPago()));
				datos.put(CTE_PROP_COINCID_FECHA_REV_CON_FECHA_PA, new BigDecimal(ci.getIntCoincidenciaPlazoRevisionConFechaPago()));
				datos.put(CTE_PROP_APLICA_SUELO_INT_INICIAL, new BigDecimal(ci.getIntAplicaSueloInteresInicial()));
				//Comparacion para solucionar el problema al recuperar un 0 con precision 7
				if(0 == ci.getIntSueloInteresInicial().compareTo(BigDecimal.ZERO)) {
					datos.put(CTE_PROP_SUELO_INT_INICIAL, BigDecimal.ZERO);
				}else {
					datos.put(CTE_PROP_SUELO_INT_INICIAL, ci.getIntSueloInteresInicial());
				}
				datos.put(CTE_PROP_NIVEL_SUELO_INT_INICIAL, new BigDecimal(ci.getIntNivelSueloInteresInicial()));
				//Comparacion para solucionar el problema al recuperar un 0 con precision 7
				if (0 == ci.getIntSuelo().compareTo(BigDecimal.ZERO)) {
					datos.put(CTE_PROP_SUELO, BigDecimal.ZERO);
				}else {
					datos.put(CTE_PROP_SUELO, ci.getIntSuelo());
				}
				datos.put(CTE_PROP_NIVEL_SUELO, new BigDecimal(ci.getIntNivelSuelo()));
				//Comparacion para solucionar el problema al recuperar un 0 con precision 7
				if(0 == ci.getIntTecho().compareTo(BigDecimal.ZERO)) {
					datos.put(CTE_PROP_TECHO, BigDecimal.ZERO);
				}else {
					datos.put(CTE_PROP_TECHO, ci.getIntTecho());
				}
				datos.put(CTE_PROP_SUELO_APLICA_SOBRE, new BigDecimal(ci.getIntSobreQueAplicaElSuelo()));
				datos.put(CTE_PROP_MINIMO_VARIACION, ci.getIntMinimoVariacion());
				datos.put(CTE_PROP_INDICADOR_MINIMO_VARIACION, new BigDecimal(ci.getIntIndMinimoVariacion()));
				datos.put(CTE_PROP_TIPO_REDONDEO, new BigDecimal(ci.getIntTipoRedondeo()));
				datos.put(CTE_PROP_BASE_REDONDEO, new BigDecimal(ci.getIntBaseRedondeo()));
				datos.put(CTE_PROP_PORCENTAJE_REDONDEO, ci.getIntPorRedondeo());
				datos.put(CTE_PROP_COND_PROMOTOR_ADQUIRENTE, new BigDecimal(ci.getIntCondicionesDeAdquirenteOPromotor()));
				datos.put(CTE_PROP_ORDEN_DE_APLICACION,  new BigDecimal(ci.getIntOrdenAplicacion()));
				datos.put(CTE_PROP_USUARIO, ci.getStrUsuario());
				datos.put(CTE_INDICADOR_FLEXIBILIDAD, ci.getBidIndicadorFlexibilidad());
				datos.put(CTE_PROP_ID_RELACION, ci.getBidIdRelacion());
				
				salida[i++] = datos;
			}
		}
		else
		{
			salida = new IContexto[0];
		}
		return salida;
					
	}
}