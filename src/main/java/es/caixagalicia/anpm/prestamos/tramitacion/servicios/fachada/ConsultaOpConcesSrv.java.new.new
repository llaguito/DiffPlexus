package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada;

import java.math.BigDecimal;
import java.util.List;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.cuentas.DatosCuentasC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.mensajes.Mensaje;

public class ConsultaOpConcesSrv extends ServicioNegocio {

    private static final String CTE_ENTRADA_NUC = "NUC";

    @Override
    public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada) {
        // Declaración de variables
        BigDecimal nuc = null;
        Boolean indProdConcesio = false;
        Boolean indCuenExterna = false;
        String resultadoFinal = new Mensaje(ServicioNegocio.getContexto(), COMPROBAR_INDICADORES_PRODUCTO_V_LIDO_CONCESIONAR_891011536).toString();
        // devolverá 0 en caso de que el expediente  tenga un producto NO válido para concesionarios; devolverá 1 si es válido
        BigDecimal prodConcesi = BigDecimal.ZERO;
        // devolverá 0 en caso de no tener una cuenta externa ; devolverá 1 si la tiene
        BigDecimal cuentaExterna = BigDecimal.ZERO;
        String resultadoCuenta = new Mensaje(ServicioNegocio.getContexto(), CUENTA_EXTERNA_343269143).toString();
        String resultadoConcesi = new Mensaje(ServicioNegocio.getContexto(), PRODUCTO_V_LIDO_CONCESIONARIOS_975605282).toString();
        // Se establece el diario electrónico
        contexto.setDiarioElectronico(new DiarioElectronico(DiarioElectronico.TIPO_CONSULTA));
        // Datos de entrada
        nuc = datosEntrada.getDecimal(CTE_ENTRADA_NUC);
        final GestionDatosSolicitud gds = new GestionDatosSolicitud();
        if (!UtilidadesTramitacion.isBlankOrNull(nuc)) {
            // si el nuc viene informado, recuperamos de la tabla AN25 la última versión completa
            final DatosSolicitudC datosSolicitud = gds.getUltimaVersionCompleta(nuc);
            if (// si el NUC existe en la tabla AN25
            (null != datosSolicitud) && (!UtilidadesTramitacion.isBlankOrNull(nuc))) {
                // producto
                final String productoActual = datosSolicitud.getProducto().toString();
                // subproducto
                final String subproductoActual = datosSolicitud.getSubproducto().toString();
                // se recuperan las cuentas de la tabla AN32
                final List<DatosCuentasC> cuentas = datosSolicitud.getCuentas();
                for (// recorremos las cuentas asociadas al nuc
                DatosCuentasC cuentaCargo : // recorremos las cuentas asociadas al nuc
                cuentas) {
                    if (// si es la cuenta de cargo --> campo AN320100 = "C"
                    (cuentaCargo.getTipoCuenta().equals(Constantes.CTE_TIPO_CUENTA_CARGO)) && // si la cuenta es externa	--> campo AN320200 =  2
                    (0 == (cuentaCargo.getBidTipoCuenta().compareTo(Constantes.CTE_BID_2)))) {
                        // true si existe una cuenta externa
                        indCuenExterna = true;
                        cuentaExterna = BigDecimal.ONE;
                        resultadoCuenta = new Mensaje(ServicioNegocio.getContexto(), CUENTA_EXTERNA_2051408795).toString();
                    }
                }
                // se comprueba que es un producto válido para concesionarios
                indProdConcesio = UtilidadesComun.esProductoConcesionarios(productoActual, subproductoActual);
                if ((indProdConcesio)) {
                    // resultado si es producto válido para concesionarios y además, tiene una cuenta externa
                    resultadoConcesi = new Mensaje(ServicioNegocio.getContexto(), PRODUCTO_V_LIDO_CONCESIONARIOS_975605282).toString();
                    prodConcesi = BigDecimal.ONE;
                }
                if ((indProdConcesio) && (indCuenExterna)) {
                    resultadoFinal = resultadoConcesi + "" + resultadoCuenta;
                }
            }
        }
        IContexto[] salida = new IContexto[1];
        salida[0] = ContextoFactory.getInstance().getContexto("ANPMN297");
        salida[0].put("ANPMN297010", resultadoFinal);
        salida[0].put("ANPMN297020", prodConcesi);
        salida[0].put("ANPMN297030", cuentaExterna);
        return salida;
    }

    private static final String CUENTA_EXTERNA_2051408795 = "CUENTA_EXTERNA_2051408795";

    private static final String PRODUCTO_V_LIDO_CONCESIONARIOS_975605282 = "PRODUCTO_V_LIDO_CONCESIONARIOS_975605282";

    private static final String COMPROBAR_INDICADORES_PRODUCTO_V_LIDO_CONCESIONAR_891011536 = "COMPROBAR_INDICADORES_PRODUCTO_V_LIDO_CONCESIONAR_891011536";

    private static final String CUENTA_EXTERNA_343269143 = "CUENTA_EXTERNA_343269143";
}
