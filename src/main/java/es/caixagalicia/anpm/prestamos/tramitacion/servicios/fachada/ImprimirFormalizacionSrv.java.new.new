package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos.ContextoImpresionFormalizado;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesImpresion;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.impresion.ConfiguracionImpresion;
import es.caixagalicia.ifrt.impresion.ImpresionHelper;
import es.caixagalicia.ifrt.impresion.Propiedades;
import es.caixagalicia.ifrt.impresion.gestorImpresion.RespuestaImpresion;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mainframe.ctgfacade.CtgFacade;
import es.caixagalicia.ifrt.util.Helper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

/**
 * Se obtendrá la información de igual manera que para la oferta vinculante
 * @author F001443
 */
public class ImprimirFormalizacionSrv extends ServicioNegocio {

    // Campos de entrada
    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_OFICINA_SOLICITUD = "OFICINA_SOLICITUD";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_NUMERO_SOLICITUD = "NUMERO_SOLICITUD";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_VERSION_SOLICITUD = "VERSION_SOLICITUD";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_NUC_EXPEDIENTE = "NUC_EXPEDIENTE";

    // Cuenta contable de la aplicacion .
    private static final Integer ID_CUENTA_ANPM = Integer.valueOf(507);

    private static final String CUENTA_ANPM = "ANPM";

    // Codigo de operacion del servicio de consulta solicitud
    private static final Integer ID_CODOP_CONSULTA_SOL = Integer.valueOf(150);

    // Posiciones de los campos de entrada del servicio DatosSolicitudLstSrv
    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_OFICINA_SOLICITUD = 0;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_NUMERO_SOLICITUD = 1;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_VERSION_SOLICITUD = 2;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_NUC_EXPEDIENTE = 3;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_DETALLE_HIJOS = 4;

    // Codigo de operacion del servicio que consulta el detalle de un producto
    private static final Integer ID_CODOP_DETALLE_PRODUCTO = Integer.valueOf(48);

    // Posiciones para el servicio de consulta del subproducto de una solicitud
    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ID_PRODUCTO = 0;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_ID_SUBPRODUCTO = 1;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_COLECTIVO = 2;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ID_VERSION_GENERAL = 3;

    // OPTATIVO
    private static final int CTE_POSICION_TIRA_COD_COLECTIVO = 9;

    // Cuenta contable de MEFC
    private static final Integer ID_CUENTA_MEFC = Integer.valueOf(565);

    // Codigo de operacion del servicio de consulta de los titulares de un expediente de una solicitud
    private static final Integer ID_CODOP_CONSULTA_TITULARES = Integer.valueOf(0);

    // Codigo de operacion del servicio de consulta de los titulares de un expediente de una solicitud
    // Campos para el servicio de consulta de titulares del expediente
    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_APLICACION = "APLICACION";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_CODOPER = "CODOPER";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_NUC = "NUC";

    // Servicio para la consulta de cuentas de una solicitud
    private static final Integer CTE_COD_OP_SOL_DATOS_CUENTAS = Integer.valueOf(175);

    // Nombre del contexto de datos solicitud
    private static final String ID_CTXTO_DATOS_SOLICITUD = "ANPMN050";

    private static final String CAMPO_CTXTO_SOL_IDPRODUCTO = "ANPMN050080";

    private static final String CAMPO_CTXTO_SOL_SUBPRODUCTO = "ANPMN050090";

    private static final String CAMPO_CTXTO_SOL_COLECTIVO = "ANPMN050110";

    private static final String CAMPO_CTXTO_SOL_VERSION_GENERAL = "ANPMN050100";

    private static final String CAMPO_CTXTO_SOL_NUC = "ANPMN050040";

    private static final String CAMPO_CTXTO_SOL_COD_COLECTIVO = "ANPMN050893";

    // Datos de entrada para el programa de corretaje
    // Moneda importe solicitado
    private static final String CMPO_CTXTO_SOL_DIVISA = "ANPMN050590";

    // Importe solicitado
    private static final String CMPO_CTXTO_SOL_IMPORTE = "ANPMN050580";

    // Plazo concedido. Plazo total
    private static final String CMPO_CTXTO_SOL_PLAZO = "ANPMN050710";

    // Fecha concedido <-> Fecha1
    private static final String CMPO_CTXTO_SOL_FECHA = "ANPMN050994";

    // Tipo de garantia
    private static final String CMPO_CTXTO_SOL_TIPO_GARANTIA = "ANPMN050220";

    // private static final String CAMPO_CTXTO_SOL_TIPO_EXP = "ANPMN050270";
    // Garantia contable
    private static final String CMPO_CTXTO_SOL_GARANTIA_CONTABLE = "ANPMN050260";

    // Garantia oficina
    private static final String CMPO_CTXTO_SOL_GARANTIA_OFICINA = "ANPMN050230";

    // Nombre del programa
    private static final String ID_PROG_CORRETAJE = "ANPMR201";

    // Calcular corretaje
    private static final String CMPO_CTXTO_SOL_CORRETAJE = "ANPMN050998";

    // Contexto Programa corretaje
    private static final String ID_CTXTO_PROG_CORRETAJE = "ANPMN073";

    private static final String ANPMN073_DIVISA = "ANPMN073010";

    private static final String ANPMN073_IMP_CONCEDIDO = "ANPMN073020";

    private static final String ANPMN073_PLAZO_CONCEDIDO = "ANPMN073030";

    private static final String ANPMN073_FECHA_CONCESION = "ANPMN073040";

    private static final String ANPMN073_GARANTIA = "ANPMN073050";

    private static final String ANPMN073_IMP_CORRETAJE = "ANPMN073060";

    private static final String ANPMN073_COD_ERROR = "ANPMN073070";

    private static final String ANPMN073_MSG_ERROR = "ANPMN073080";

    private static final String ANPMN073_OFICINA = "ANPMN073090";

    private static final String ANPMN073_NUMERO = "ANPMN073100";

    private static final String ANPMN073_VERSION = "ANPMN073110";

    private static final String ANPMN073_NUC = "ANPMN073120";

    // Error. Fecha concesion
    private static final Integer CTE_MSG_ERROR_FECHA_CONCESION = Integer.valueOf(10808);

    // 2014-02-20 - G000895
    // Se sustituye el ID del documento de impresión PMOSST20088 por el CGALST20088 debido a una modificación hecha en la impresión del recibo
    // "Este impreso lo utilizan varias aplicaciones (creditos, y alguna otra) y se pasó a un proyecto de impresos comunes" -> Se emplea el contexto CGALN117 en vez de ANPMN102
    // Documento a imprimir
    // private static final String ID_DOCUMENTO_IMPRESION = "PMOSST20088";
    private static final String ID_DOCUMENTO_IMPRESION = "CGALST20088";

    // Servicio para el cambio de divisa
    // Datos para la llamada al servicio de cambio de divisa
    private static final Integer CODAP_ITAL = Integer.valueOf(340);

    private static final Integer COOP_CAMBIO_DIVISA = Integer.valueOf(302);

    // Datos de entrada del servicio de cambio de divisa
    private static final String TIPO_OPERACION = "TIPOOPERACION";

    private static final String APLICACION = "APLICACION";

    private static final String ACCESO = "ACCESO";

    private static final String DIVISA_COMPRA = "DIVISACOMPRA";

    private static final String TIPO_DIVISA_COMPRA = "TIPODIVISACOMPRA";

    private static final String DIVISA_VENTA = "DIVISAVENTA";

    private static final String TIPO_DIVISA_VENTA = "TIPODIVISAVENTA";

    private static final String IMPORTE_DIVISA_COMPRA = "IMPORTEDIVISACOMPRA";

    private static final String IMPORTE_DIVISA_VENTA = "IMPORTEDIVISAVENTA";

    private static final String CLASE_CAMBIO = "CLASECAMBIO";

    private static final String TIPO_CAMBIO = "TIPOCAMBIO";

    private static final String FECHA_CAMBIO = "FECHACAMBIO";

    // Valores para los parametros de entrada
    private static final String VALOR_TIPO_OPERACION = "C";

    private static final String VALOR_TIPO_ACCESO = "ANPMPITA";

    private static final String VALOR_TIPO_DIVISA = "D";

    private static final String VALOR_CLASE_CAMBIO_OPERATIVO = "O";

    private static final String CTXTO_DIVISA_CONV = "IT006CON";

    private static final String CTXTO_DIVISA_CONV_IMPORTE_VENTA = "IT006C040";

    private static final String CTXTO_DIVISA_CONV_COD_ERROR = "IT006C010";

    private static final String CTXTO_DIVISA_CONV_DESC_ERROR = "IT006C020";

    // Error. No se ha podido calcular el cambio de divisa
    private static final Integer CTE_MSG_ERROR_CONV_DIVISA = Integer.valueOf(10882);

    private static final LogHelper LOGGER = LogHelper.getLog(ImprimirFormalizacionSrv.class);

    public ImprimirFormalizacionSrv() {
        super();
    }

    /**
     * @param contexto
     * @param datosEntrada
     * @return Contexto de datos de la oferta
     */
    @Override
    public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada) {
        IContexto[] aContextoSalida = null;
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO SNANPM267: Imprimir formalización");
        }
        contexto.setDiarioElectronico(new DiarioElectronico(Constantes.CTE_OPERACION_AC, Integer.valueOf(0), BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, Constantes.CTE_STRING_EMPTY, Constantes.CTE_STRING_EMPTY, BigDecimal.ZERO, BigDecimal.ZERO, Integer.valueOf(0)));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Se recogen los datos de entrada");
        }
        BigDecimal bidOficinaSolicitud = datosEntrada.getDecimal(NOMBRE_CAMPO_OFICINA_SOLICITUD);
        BigDecimal bidNumeroSolicitud = datosEntrada.getDecimal(NOMBRE_CAMPO_NUMERO_SOLICITUD);
        BigDecimal bidVersionSolicitud = datosEntrada.getDecimal(NOMBRE_CAMPO_VERSION_SOLICITUD);
        BigDecimal bidNucExpediente = datosEntrada.getDecimal(NOMBRE_CAMPO_NUC_EXPEDIENTE);
        List<IContexto> lstContextosImprimir = new ArrayList<IContexto>(15);
        boolean exito = false;
        String codigoDocumento = "";
        final IContexto[] aCtxtoDatosSolicitud = consultarDatosSolicitud(bidOficinaSolicitud, bidNumeroSolicitud, bidVersionSolicitud, bidNucExpediente);
        lstContextosImprimir.addAll(java.util.Arrays.asList(aCtxtoDatosSolicitud));
        IContexto contextoDatosSolicitud = null;
        int iLength = aCtxtoDatosSolicitud.length;
        for (int i = 0; i < iLength && contextoDatosSolicitud == null; i++) {
            if (ID_CTXTO_DATOS_SOLICITUD.equals(aCtxtoDatosSolicitud[i].getNombre())) {
                contextoDatosSolicitud = aCtxtoDatosSolicitud[i];
            }
        }
        lstContextosImprimir.addAll(Arrays.asList(consultarDatosCuentas(bidOficinaSolicitud, bidNumeroSolicitud, bidVersionSolicitud, bidNucExpediente)));
        lstContextosImprimir.addAll(Arrays.asList(consultarProductoSolicitud(contextoDatosSolicitud)));
        lstContextosImprimir.addAll(Arrays.asList(consultarTitularesSolicitud(contextoDatosSolicitud)));
        if (Constantes.CTE_LETRA_S.equals(contextoDatosSolicitud.getString(CMPO_CTXTO_SOL_CORRETAJE))) {
            lstContextosImprimir.addAll(Arrays.asList(consultarCorretaje(contextoDatosSolicitud)));
        }
        IContexto[] ctxsImpresion = ContextoImpresionFormalizado.rellenarDatosContexto(lstContextosImprimir);
        if (imprimirContexto(ctxsImpresion)) {
            aContextoSalida = ctxsImpresion;
        }
        // BigDecimal tipoExp = contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_TIPO_EXP);
        // BigDecimal producto = contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_IDPRODUCTO);
        // BigDecimal subprod = contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_SUBPRODUCTO);
        // BigDecimal vg = contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION_GENERAL);
        // BigDecimal colectivo = contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COLECTIVO);
        // String descripcion = GestionClausulaDocumentos.obtenerDescripcionDocumento(producto.intValue(), subprod.intValue(), vg.intValue(),
        // colectivo.intValue(), "FI", tipoExp.intValue());
        codigoDocumento = UtilidadesImpresion.obtenerCodigoDocumento(UtilidadesImpresion.RECIBO_FORMALIZACION);
        if (UtilidadesTramitacion.isBlankOrNull(codigoDocumento)) {
            exito = false;
        } else {
            // boolean exito = UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion
            // (bidNucExpediente, "", ID_DOCUMENTO_IMPRESION,
            // UtilidadesImpresion.COD_DOCUMENTO_GD_FORMALIZACION, ctxsImpresion);
            // Esta llamada NO incluye guardado del pdf en directorio de ANPMCFG_FICHEROS_RUTA_SALIDA
            // RespuestaImpresion respuesta = UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, codigoDocumento, ctxsImpresion);
            // Esta llamada SI incluye guardado del pdf en directorio de ANPMCFG_FICHEROS_RUTA_SALIDA
            // RespuestaImpresion respuesta = UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, codigoDocumento, ctxsImpresion, UtilidadesImpresion.RECIBO_FORMALIZACION, contextoDatosSolicitud, null);
            RespuestaImpresion respuesta = UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, codigoDocumento, ctxsImpresion, UtilidadesImpresion.RECIBO_FORMALIZACION, contextoDatosSolicitud);
            if (Constantes.CTE_STRING_CERO.equals(respuesta.getCodigoError())) {
                exito = true;
            } else {
                exito = false;
            }
        }
        if (exito) {
            LOGGER.debug("Adjuntado al gestor documental");
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN SNANPM267: Imprimir formalización");
        }
        return aContextoSalida;
    }

    /**
     * @param ctxsImpresion
     * @return
     */
    private boolean imprimirContexto(IContexto[] ctxsImpresion) {
        Propiedades prop = new Propiedades();
        ConfiguracionImpresion configuracionImpresion = new ConfiguracionImpresion();
        // Número de Copias
        configuracionImpresion.setCgsi4440(BigDecimal.ONE.toString());
        configuracionImpresion.setCgsi4441(new Mensaje(ServicioNegocio.getContexto(), PIE_ORIGINAL_1421888027).toString());
        es.caixagalicia.ifrt.impresion.Configuracion configuracion = new es.caixagalicia.ifrt.impresion.Configuracion();
        configuracion.setImpresion(configuracionImpresion);
        boolean exito = ImpresionHelper.imprimir(ID_DOCUMENTO_IMPRESION, Constantes.CTE_IMPRIMIR_DOCUMENTO, ctxsImpresion, prop, configuracion);
        return exito;
    }

    /**
     * @param bidOficinaSolicitud
     * @param bidNumeroSolicitud
     * @param bidVersionSolicitud
     * @param bidNucExpediente
     * @return Datos de la solicitud junto con las condiciones, etc, asociadas
     */
    private IContexto[] consultarDatosSolicitud(final BigDecimal bidOficinaSolicitud, final BigDecimal bidNumeroSolicitud, final BigDecimal bidVersionSolicitud, final BigDecimal bidNucExpediente) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO Consulta datos solicitud");
        }
        IDatosEntradaTx datosEntradaDatosSolicitud = getPrograma(ServicioNegocio.getContexto(), ID_CUENTA_ANPM, ID_CODOP_CONSULTA_SOL);
        datosEntradaDatosSolicitud.addCampo(CTE_POSICION_TIRA_OFICINA_SOLICITUD, bidOficinaSolicitud);
        datosEntradaDatosSolicitud.addCampo(CTE_POSICION_TIRA_NUMERO_SOLICITUD, bidNumeroSolicitud);
        datosEntradaDatosSolicitud.addCampo(CTE_POSICION_TIRA_VERSION_SOLICITUD, bidVersionSolicitud);
        datosEntradaDatosSolicitud.addCampo(CTE_POSICION_TIRA_NUC_EXPEDIENTE, bidNucExpediente);
        datosEntradaDatosSolicitud.addCampo(CTE_POSICION_TIRA_DETALLE_HIJOS, Constantes.SI);
        return invocarServicio(ServicioNegocio.getContexto(), datosEntradaDatosSolicitud);
    }

    /**
     * @param contextoDatosSolicitud
     * @return Producto asociado a la solicitud
     */
    private IContexto[] consultarProductoSolicitud(final IContexto contextoDatosSolicitud) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO Consulta producto solicitud");
        }
        IDatosEntradaTx datosEntradaDatosProducto = getPrograma(ServicioNegocio.getContexto(), ID_CUENTA_ANPM, ID_CODOP_DETALLE_PRODUCTO);
        datosEntradaDatosProducto.addCampo(CTE_POSICION_TIRA_ID_PRODUCTO, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_IDPRODUCTO));
        datosEntradaDatosProducto.addCampo(CTE_POSICION_TIRA_ID_SUBPRODUCTO, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_SUBPRODUCTO));
        datosEntradaDatosProducto.addCampo(CTE_POSICION_TIRA_COLECTIVO, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COLECTIVO));
        datosEntradaDatosProducto.addCampo(CTE_POSICION_TIRA_ID_VERSION_GENERAL, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION_GENERAL));
        datosEntradaDatosProducto.addCampo(CTE_POSICION_TIRA_COD_COLECTIVO, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_COLECTIVO));
        return invocarServicio(ServicioNegocio.getContexto(), datosEntradaDatosProducto);
    }

    /**
     * @param contextoDatosSolicitud
     * @return Titulares asociados a la solicitud
     */
    private IContexto[] consultarTitularesSolicitud(final IContexto contextoDatosSolicitud) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO Consulta titulares del expediente de la solicitud");
        }
        IDatosEntradaTx datosEntradaConsultaTitulares = getPrograma(ServicioNegocio.getContexto(), ID_CUENTA_MEFC, ID_CODOP_CONSULTA_TITULARES);
        datosEntradaConsultaTitulares.addCampo(NOMBRE_CAMPO_APLICACION, CUENTA_ANPM);
        datosEntradaConsultaTitulares.addCampo(NOMBRE_CAMPO_CODOPER, Constantes.CODOPER_CONSULTA);
        datosEntradaConsultaTitulares.addCampo(NOMBRE_CAMPO_NUC, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC));
        return invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaTitulares);
    }

    /**
     * @param contextoSolicitud
     * @return
     */
    private IContexto[] consultarCorretaje(final IContexto contextoSolicitud) {
        IContexto[] aContextoCorretaje = new IContexto[0];
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO: calcular corretaje de la solicitud");
        }
        final String strFechaConcesion = contextoSolicitud.getString(CMPO_CTXTO_SOL_FECHA);
        if (DateUtils.dateLowest().compareTo(DateUtils.parseDate(strFechaConcesion, DateUtils.FORMATO_FECHA_CORTO)) == 0) {
            rollback(CTE_MSG_ERROR_FECHA_CONCESION, null, null, null);
        }
        BigDecimal bidFechaConcesion = new BigDecimal(DateUtils.formatDate(DateUtils.parseDate(strFechaConcesion, DateUtils.FORMATO_FECHA_CORTO), "yyyyMMdd"));
        final String strDivisa = contextoSolicitud.getString(CMPO_CTXTO_SOL_DIVISA);
        final BigDecimal bidImporte = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_IMPORTE);
        final BigDecimal bidPlazo = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_PLAZO);
        final BigDecimal bidTipoGarantia = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_TIPO_GARANTIA);
        final BigDecimal bidGarantia;
        if (Constantes.CTE_EXPEDIENTE_EN_GARANTIA.equals(bidTipoGarantia)) {
            bidGarantia = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_GARANTIA_CONTABLE);
        } else {
            bidGarantia = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_GARANTIA_OFICINA);
        }
        final IContexto contextoProgramaCorretaje = ContextoFactory.getInstance().getContexto(ID_CTXTO_PROG_CORRETAJE);
        contextoProgramaCorretaje.put(ANPMN073_DIVISA, strDivisa);
        contextoProgramaCorretaje.put(ANPMN073_IMP_CONCEDIDO, bidImporte);
        contextoProgramaCorretaje.put(ANPMN073_PLAZO_CONCEDIDO, bidPlazo);
        contextoProgramaCorretaje.put(ANPMN073_FECHA_CONCESION, bidFechaConcesion);
        contextoProgramaCorretaje.put(ANPMN073_GARANTIA, bidGarantia);
        if (null != contextoSolicitud.getBigDecimal("ANPMN050010") && null != contextoSolicitud.getBigDecimal("ANPMN050020") && null != contextoSolicitud.getBigDecimal("ANPMN050030") && null != contextoSolicitud.getBigDecimal("ANPMN050040")) {
            contextoProgramaCorretaje.put(ANPMN073_OFICINA, contextoSolicitud.getBigDecimal("ANPMN050010"));
            contextoProgramaCorretaje.put(ANPMN073_NUMERO, contextoSolicitud.getBigDecimal("ANPMN050020"));
            contextoProgramaCorretaje.put(ANPMN073_VERSION, contextoSolicitud.getBigDecimal("ANPMN050030"));
            contextoProgramaCorretaje.put(ANPMN073_NUC, contextoSolicitud.getBigDecimal("ANPMN050040"));
        }
        CtgFacade ctg = new CtgFacade();
        aContextoCorretaje = ctg.invocarProgramaCics(contextoProgramaCorretaje, ID_PROG_CORRETAJE);
        for (IContexto contextoActual : aContextoCorretaje) {
            if (ID_CTXTO_PROG_CORRETAJE.equals(contextoActual.getNombre())) {
                if (Constantes.CTE_ERROR_HOST.equals(contextoActual.getString(ANPMN073_COD_ERROR))) {
                    LOGGER.error("Error al calcular el corretaje " + contextoActual.getString(ANPMN073_MSG_ERROR));
                    aContextoCorretaje = new IContexto[0];
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN: calcular corretaje de la solicitud");
        }
        if (!Constantes.CTE_DIVISA_EURO.equalsIgnoreCase(strDivisa)) {
            aContextoCorretaje[0].put(ANPMN073_IMP_CORRETAJE, convertirAdivisaPrestamo(aContextoCorretaje[0].getBigDecimal(ANPMN073_IMP_CORRETAJE), strDivisa, strFechaConcesion));
        }
        return aContextoCorretaje;
    }

    /**
     * Se llama al servicio ITAL_302 que calcula el cambio de divisa
     * @param importe
     * @param divisaDestino
     * @param fechaConcesion
     * @return El importe recibido como parametro a la divisa que se recibe como
     * parametro
     */
    private static BigDecimal convertirAdivisaPrestamo(BigDecimal importe, String divisaDestino, String fechaConcesion) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO Consulta el cambio de divisa de corretaje");
        }
        BigDecimal resultado = importe;
        IDatosEntradaTx datosEntradaCambioDivisa = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), CODAP_ITAL, COOP_CAMBIO_DIVISA);
        datosEntradaCambioDivisa.addCampo(TIPO_OPERACION, VALOR_TIPO_OPERACION);
        datosEntradaCambioDivisa.addCampo(APLICACION, CUENTA_ANPM);
        datosEntradaCambioDivisa.addCampo(ACCESO, VALOR_TIPO_ACCESO);
        datosEntradaCambioDivisa.addCampo(DIVISA_COMPRA, Constantes.CTE_DIVISA_EURO.toUpperCase());
        datosEntradaCambioDivisa.addCampo(TIPO_DIVISA_COMPRA, VALOR_TIPO_DIVISA);
        datosEntradaCambioDivisa.addCampo(DIVISA_VENTA, divisaDestino);
        datosEntradaCambioDivisa.addCampo(TIPO_DIVISA_VENTA, VALOR_TIPO_DIVISA);
        datosEntradaCambioDivisa.addCampo(IMPORTE_DIVISA_COMPRA, importe);
        datosEntradaCambioDivisa.addCampo(IMPORTE_DIVISA_VENTA, BigDecimal.ZERO);
        datosEntradaCambioDivisa.addCampo(CLASE_CAMBIO, VALOR_CLASE_CAMBIO_OPERATIVO);
        datosEntradaCambioDivisa.addCampo(TIPO_CAMBIO, BigDecimal.ZERO);
        datosEntradaCambioDivisa.addCampo(FECHA_CAMBIO, DateUtils.formatDate(DateUtils.parseDate(fechaConcesion, DateUtils.FORMATO_FECHA_CORTO), DateUtils.FORMATO_FECHA_AMERICANO));
        IContexto[] aDivisaConv = ServicioNegocio.invocarServicio(getContexto(), datosEntradaCambioDivisa);
        if (aDivisaConv.length != 0 && aDivisaConv[0].getNombre().equals(CTXTO_DIVISA_CONV) && (Helper.isNullOrEmpty(aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_COD_ERROR)) || BigDecimal.ZERO.equals(aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_COD_ERROR))) && !Helper.isNullOrEmpty(aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_IMPORTE_VENTA))) {
            resultado = aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_IMPORTE_VENTA);
        } else {
            rollback(CTE_MSG_ERROR_CONV_DIVISA, null, new String[] { aDivisaConv[0].getString(CTXTO_DIVISA_CONV_DESC_ERROR) }, null);
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO Consulta el cambio de divisa de corretaje");
        }
        return resultado;
    }

    /**
     * @param bidOficinaSolicitud
     * @param bidNumeroSolicitud
     * @param bidVersionSolicitud
     * @param bidNucExpediente
     * @return Consulta de los datos de las cuentas
     */
    private IContexto[] consultarDatosCuentas(BigDecimal bidOficinaSolicitud, BigDecimal bidNumeroSolicitud, BigDecimal bidVersionSolicitud, BigDecimal bidNucExpediente) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO Consulta cuentas solicitud");
        }
        IDatosEntradaTx datosEntradaDatosCuentas = getPrograma(ServicioNegocio.getContexto(), ID_CUENTA_ANPM, CTE_COD_OP_SOL_DATOS_CUENTAS);
        datosEntradaDatosCuentas.addCampo(NOMBRE_CAMPO_OFICINA_SOLICITUD, bidOficinaSolicitud);
        datosEntradaDatosCuentas.addCampo(NOMBRE_CAMPO_NUMERO_SOLICITUD, bidNumeroSolicitud);
        datosEntradaDatosCuentas.addCampo(NOMBRE_CAMPO_VERSION_SOLICITUD, bidVersionSolicitud);
        datosEntradaDatosCuentas.addCampo(NOMBRE_CAMPO_NUC_EXPEDIENTE, bidNucExpediente);
        final IContexto[] aCuentas = invocarServicio(ServicioNegocio.getContexto(), datosEntradaDatosCuentas);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN Consulta cuentas solicitud");
        }
        return aCuentas;
    }

    private static final String PIE_ORIGINAL_1421888027 = "PIE_ORIGINAL_1421888027";
}
