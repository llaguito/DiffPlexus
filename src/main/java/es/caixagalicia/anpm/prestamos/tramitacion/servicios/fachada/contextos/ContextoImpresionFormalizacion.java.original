package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.apache.commons.lang.StringUtils;

import es.caixagalicia.anpm.prestamos.catalogo.persistencia.clausulas.ClausulaDocumentoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.clausulas.ParametrosC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.condCapital.ModalidadAmortizacionC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionClausulaDocumentos;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionClausulasRestringuidas;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionModalidadesAmortizacion;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.cuentas.DatosCuentasEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.gastosadic.GastosAdicionalesC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.gastosadic.GastosAdicionalesEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.ofertaVinculante.OfertaVinculanteC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.ofertaVinculante.OfertaVinculanteEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.ofertaVinculante.OfertaVinculanteKey;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionConsultaDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionConsultaTitularidad;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.IConstantesTramitacion;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.ImprimirDocumentosVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.LengthConstants;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesImpresion;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.anpm.prestamos.tramitacionmultimedio.aplicacion.AbstractSolicitudMultimedio;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mainframe.ctgfacade.CtgFacade;
import es.caixagalicia.ifrt.util.Helper;

/**
 * Contexto que contiene los campos comunes a todos los documentos de impresión
 * de la petición de preformaliación-formalicación préstamos PITA:
 * <ul><li>Impresion previa</li>
 * <li>Oferta vinculante</li>
 * <li>Póliza préstamo en divisa</li></ul>
 * @author F001443
 *
 */
public class ContextoImpresionFormalizacion
{
	public static final int 	PASO_DOC_IMPRESION_PREVIA = 0;
	public static final int		PASO_DOC_OFERTA_VINCULANTE = 1;
	public static final int		PASO_DOC_POLIZA_PRESTAMO = 2;
	public static final int 	PASO_DOC_CONTRATO_CREDIVENTAS = 3;
	public static final int     PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA = 4;

	private static CtgFacade ctgFacade = new CtgFacade();

	private static final String ID_CTX = "ANPMN100";
	//	Campos para el documento de impresión

	//private static final String MONEDA_EUROS = "EUR";
	/** CHAR 5*/
	private static final String ID_PROP_NUMERO_POLIZA = "ANPMN100010";
	/** CHAR 1*/
	private static final String ID_PROP_LISTAR_DILIGENCIA = "ANPMN100011"; // PENDIENTE
	/** CHAR 9*/
	private static final String ID_PROP_PRCTJ_TAE_PRESTAMO= "ANPMN100020";
	/** CHAR 40*/
	private static final String ID_PROP_NOMBRE_OFICINA = "ANPMN100030";
	/** CHAR 4*/
	private static final String ID_PROP_MONEDA = "ANPMN100040";
	/** CHAR 26*/
	private static final String ID_PROP_NUMERO_PRESTAMO = "ANPMN100050";
	/** CHAR 150*/
	private static final String ID_PROP_LUGAR_Y_FECHA = "ANPMN100060";
	//	/** PIC 2*/
	//	private static final String ID_PROP_NUMERO_FIADORES = "ANPMN100070";
	//	/** PIC 2*/
	//	private static final String ID_PROP_NUMERO_TITULARES = "ANPMN100080";
	/** PIC 11(2)*/
	private static final String ID_PROP_CAPITAL = "ANPMN100091";
	/** CHAR 100*/
	private static final String ID_PROP_CAPITAL_EN_LETRA = "ANPMN100092";
	/** PIC 5*/
	private static final String ID_PROP_PLAZO_EN_MESES = "ANPMN100100";
	/** CHAR 10*/
	private static final String ID_PROP_FECHA_INICIO_PLAZO = "ANPMN100110";
	/** CHAR 10*/
	private static final String ID_PROP_FECHA_PRIMERA_ENTREGA = "ANPMN100120";
	/** CHAR 80*/
	private static final String ID_PROP_SUCESIVAS_ENTREGAS = "ANPMN100130";
	/** CHAR 10*/
	private static final String ID_PROP_FECHA_ULTIMA_ENTREGA = "ANPMN100140";
	/** CHAR 10*/
	private static final String ID_PROP_FECHA_FIN_PERIODO_DISPOSICION = "ANPMN100145";
	/** PIC 3*/
	private static final String ID_PROP_NUMERO_ENTREGAS = "ANPMN100150";
	/** PIC 11(2)*/
	private static final String ID_PROP_IMPORTE_PRIMERA_ENT = "ANPMN100161";



	/** CHAR 3*/
	private static final String ID_PROP_MARCA_PRIMERA_ENT = "ANPMN100162";
	/** CHAR 80*/
	private static final String ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE = "ANPMN100170";
	/** CHAR 8*/
	private static final String ID_PROP_PORC_INTERES_INICIAL = "ANPMN100181";
	/** CHAR 3*/
	private static final String ID_PROP_MARCAR_INTERES_INICIAL= "ANPMN100182"; // PENDIENTE
	/** CHAR 3*/
	private static final String ID_PROP_NUM_PAGOS_INTERESES = "ANPMN100190";
	/** CHAR 10*/
	private static final String ID_PROP_FECH_PRIMER_PAGO_INT = "ANPMN100200"; // PENDIENTE
	/** CHAR 1*/
	private static final String ID_PROP_MARCA_FECHA_PRIMER_PAGO = "ANPMN100201";
	/** CHAR 80*/
	private static final String ID_PROP_SUCESISVOS_PAGOS_INT = "ANPMN100210";
	/** PIC 7(4)*/
	private static final String ID_PROP_IMP_RECARGO_DEMORA = "ANPMN100220";
	/** CHAR 5 -> CHAR 15*/ 
	private static final String ID_PROP_DIAS_LIQUIDACION = "ANPMN100230"; // PENDIENTE
	/** CHAR 10*/
	private static final String ID_PROP_FEC_LIMITE_INTER_INICIAL = "ANPMN100240"; // PENDIENTE
	/** CHAR 19*/
	private static final String ID_PROP_TIPO_REFER_PRINCIPAL = "ANPMN100250";
	/** PIC 7(4)*/
	private static final String ID_PROP_MARGEN_PRINCIPAL = "ANPMN100260";
	/** PIC 7(4)*/
	private static final String ID_PROP_PORC_MARGEN_MAX_REF = "ANPMN100265"; // PENDIENTE
	/** CHAR 19*/
	private static final String ID_PROP_TIPO_REFER_SUST = "ANPMN100270";
	/** PIC 7(4)*/
	private static final String ID_PROP_PORC_MARGEN_SUST = "ANPMN100280";
	/** CHAR 7*/
	private static final String ID_PROP_PORC_INT_MAXIMO = "ANPMN100290";
	/** CHAR 7*/
	private static final String ID_PROP_PORC_INT_MINIMO = "ANPMN100300";
	/** CHAR 80*/
	private static final String ID_PROP_PERIODICIDAD_REVISION ="ANPMN100310";
	/** CHAR 32*/
	private static final String ID_PROP_CUENTA_ASOCIADA = "ANPMN100320";
	/** CHAR 36*/
	private static final String ID_PROP_OFICINA_CUENTA_ASOCIADA ="ANPMN100330";
	/** CHAR 6*/
	private static final String ID_PROP_PRCTJ_COMISION_APERTURA = "ANPMN100340";
	/** CHAR (15)*/
	private static final String ID_PROP_IMP_MINIMO_COMISION_APERTURA = "ANPMN100350";
	/** CHAR 6*/
	private static final String ID_PROP_PRCTJ_COMISION_ESTUDIO = "ANPMN100360";
	/** PIC 9(2)*/
	private static final String ID_PROP_IMP_MINIMO_COMISION_ESTUDIO = "ANPMN100370";
	/** CHAR 6*/
	private static final String ID_PROP_PRCTJ_COM_CANC_ANTIC_TOTAL = "ANPMN100380";
	/** CHAR 6*/
	private static final String ID_PROP_PRCTJ_COM_CANC_ANTIC_PARCIAL = "ANPMN100390";
	/** CHAR 6*/
	private static final String ID_PROP_PRCTJ_CAPITAL_INICIO_ANO = "ANPMN100400";
	/** CHAR 6*/
	private static final String ID_PROP_PRCTJ_COM_EXCESO_AMORT_ANTIC = "ANPMN100410"; // PENDIENTE
	/** CHAR 6*/
	private static final String ID_PROP_PRCTJ_MODIFICACION = "ANPMN100420"; // PENDIENTE
	/** CHAR 12*/
	private static final String ID_PROP_IMP_RECLAMACION_DEUDA = "ANPMN100430";
	/** PIC 9(2)*/
	private static final String ID_PROP_IMP_CORRETAJE = "ANPMN100440";
	/** PIC 2*/
	private static final String ID_PROP_NUM_LINEAS_OBSRV = "ANPMN100452";
	/** PIC 4*/
	//private static final String ID_PROP_NUM_CUOTAS_PAGOS="ANPMN100455";
	/** PIC 4*/
	//private static final String ID_PROP_NUM_CUOTAS_RESUMEN="ANPMN100475";
	/** CHAR 1*/
	//private static final String ID_PROP_TIPO_CUADRO="ANPMN100480";
	/** PIC 2*/
	//private static final String ID_PROP_NUMERO_PRODUCTOS="ANPMN100490";
	/** CHAR 26*/
	private static final String ID_PROP_PRESTAMO_HIPOTECARIO="ANPMN100500";
	/** CHAR 10*/
	private static final String ID_PROP_FECHA_PRIMERA_DISPOSICION = "ANPMN100510";
	/** CHAR 80*/
	private static final String ID_PROP_SUCESIVAS_DISPOSICIONES = "ANPMN100520";
	/** CHAR 4*/
	private static final String ID_PROP_FECHA_ULTIMA_DISPOSICION = "ANPMN100530";
	/** PIC 15(2)*/
	private static final String ID_PROP_IMP_DISPOSICIONES = "ANPMN100540";
	/** CHAR 10*/
	private static final String ID_PROP_FEC_PRIMERA_LIQUIDACION = "ANPMN100550";
	/** PIC 15(2)*/
	private static final String ID_PROP_IMP_CUOTA_PACTADA = "ANPMN100560";
	/** PIC 15(2)*/
	private static final String ID_PROP_IMP_ULTIMA_CUOTA = "ANPMN100570";
	/** PIC 5*/
	private static final String ID_PROP_PAGO_APLAZ_CARENCIA_MESES = "ANPMN100580";
	/** CHAR 10*/
	private static final String ID_PROP_FEC_PAGO_APLAZ_ULTIMA_ENTREGA = "ANPMN100590";
	/** PIC 15(2)*/
	private static final String ID_PROP_IMP_TOTAL_INTERESES_PAGO_APLAZ = "ANPMN100600";
	/** CHAR 350*/
	private static final String ID_PROP_DESC_OBG_PIGNORADO = "ANPMN100610";
	/** PIC 15(2)*/
	private static final String ID_PROP_IMP_TASACION= "ANPMN100620";
	/** PIC 7(4)*/
	private static final String ID_PROP_PORC_GASTOS_SEGUROS = "ANPMN100630";
	/** PIC 7(4)*/
	private static final String ID_PROP_PORC_COM_SOBRE_TASACION = "ANPMN100640";
	/** PIC 9*/
	private static final String ID_PROP_ALOJAMIENTO = "ANPMN100650";
	/** CHAR 50*/
	private static final String ID_PROP_TIPO_PRESTAMO = "ANPMN100660";
	/** CHAR 4 -> CHAR 30*/
	private static final String ID_PROP_MODALIDAD_AMORTIZACION = "ANPMN100670";
	/** CHAR 10*/
	private static final String ID_PROP_IMP_TOTAL_INTERESES = "ANPMN100675";
	/** CHAR 10*/
	private static final String ID_PROP_IMP_TOTAL_COMISIONES_A_FECHA_FORM = "ANPMN100680";
	/** CHAR 10*/
	private static final String ID_PROP_IMP_TOTAL_PAGOS_INT = "ANPMN100685";

	private static final String ID_REG_OBSERVACIONES = "ANPMN100450"; // PENDIENTE
	/** CHAR 80*/
	private static final String ID_PROP_LINEA_OBSERVACIONES = "ANPMN100451"; // PENDIENTE

	//private static final String ID_REG_PRODUCTOS = "ANPMN100495";
	/** PIC 7(4)*/
	//private static final String ID_PROP_PRODUCTO_PESO = "ANPMN100491";
	/** CHAR 2*/
	//private static final String ID_PROP_PRODUCTO_TEXTO = "ANPMN100692";
	/** CHAR 70*/
	//private static final String ID_PROP_PRODUCTO_DESCRIPCION = "ANPMN100493";

	private static final String ID_REG_FIADORES = "ANPMN100070";
	/** CHAR 100*/
	private static final String ID_PROP_NOMBRE_FIADOR = "ANPMN100071";
	/** CHAR 48*/
	private static final String ID_PROP_APELLIDO1_FIADOR = "ANPMN100072";
	/** CHAR 27*/
	private static final String ID_PROP_APELLIDO2_FIADOR = "ANPMN100073";
	/** CHAR 30*/
	private static final String ID_PROP_NIF_FIADOR = "ANPMN100074";
	/** CHAR 1*/
	private static final String ID_PROP_LETRA_NIF_FIADOR = "ANPMN100075";
	/** CHAR 37*/
	private static final String ID_PROP_CALLE_DOMICILIO_FIADOR = "ANPMN100076";
	/** CHAR 5*/
	private static final String ID_PROP_CP_DOMICILIO_FIADOR = "ANPMN100077";
	/** CHAR 60*/
	private static final String ID_PROP_LOCALIDAD_DOMICILIO_FIADOR = "ANPMN100078";
	


	private static final String ID_REG_TITULAR = "ANPMN100080";
	/** CHAR 100*/
	private static final String ID_PROP_NOMBRE_TITULAR = "ANPMN100081";
	/** CHAR 48*/
	private static final String ID_PROP_APELLIDO1_TITULAR = "ANPMN100082";
	/** CHAR 27*/
	private static final String ID_PROP_APELLIDO2_TITULAR = "ANPMN100083";
	/** CHAR 30*/
	private static final String ID_PROP_NIF_TITULAR = "ANPMN100084";
	/** CHAR 1*/
	//private static final String ID_PROP_LETRA_NIF_TITULAR = "ANPMN100085";
	/** CHAR 37*/
	private static final String ID_PROP_CALLE_DOMICILIO_TITULAR = "ANPMN100086";
	/** CHAR 5*/
	private static final String ID_PROP_CP_DOMICILIO_TITULAR = "ANPMN100087";
	/** CHAR 60*/
	private static final String ID_PROP_LOCALIDAD_DOMICILIO_TITULAR = "ANPMN100088";
	/** CHAR 30*/
	private static final String ID_PROP_ROL_TITULAR = "ANPMN100090";
	/** CHAR 75*/
	private static final String ID_PROP_EMAIL_TITULAR = "ANPMN100093";
	/** CHAR 3*/
	private static final String ID_PROP_SECUENCIA_TITULAR = "ANPMN100089";

	private static final String ID_REG_PAGOS = "ANPMN100460";
	/** CHAR 10*/
	private static final String ID_PROP_PAGOS_FEC_PAGO = "ANPMN100461";
	/** CHAR 14*/
	private static final String ID_PROP_PAGOS_CAPITAL = "ANPMN100462";
	/** CHAR 14*/
	private static final String ID_PROP_PAGOS_INTERES = "ANPMN100463";
	/** CHAR 14*/
	private static final String ID_PROP_PAGOS_TOTAL = "ANPMN100464";
	/** CHAR 14*/
	//private static final String ID_PROP_PAGOS_INT_CAPIT = "ANPMN100465";
	/** CHAR 14*/
	private static final String ID_PROP_PAGOS_CAPIT_NO_VEN = "ANPMN100466";

	private static final String ID_REG_RESUMEN = "ANPMN100470";
	/** CHAR 100*/
	private static final String ID_PROP_RESUMEN_TEXTO = "ANPMN100471";

	private static final String ID_PROP_ROL_AVALISTA = "ANPMN100095";

	private static final String ID_PROP_SECUENCIA_AVALISTA = "ANPMN100079";

	//Pendiente de añadir el id del campo del registro
	private static final String ID_PROP_PORC_PART_AVALISTA = "ANPMN100096";

	//Campo tae bonificada 
	//Añadido el 27/01/2015
	private static final String ID_TAE_BONIFICADA = 	"ANPMN100690";

	private static final String ID_PROP_TEXTO_DISPOSICION = "ANPMN100710";
	private static final String ID_PROP_TEXTO_GARANTIA_REQUERIDA = "ANPMN100720";
	private static final String ID_PROP_TEXTO_INTERES_BONIFICADO = "ANPMN100730";
	private static final String ID_PROP_FECHA_DEVENGO_INTERESES = "ANPMN100740";

	/** pic 11(2)**/
	private static final String ID_IMPORTE_ULTIMA_ENTREGA_ENT = "ANPMN100750";

	private static final String ID_PROP_CONSUMIDOR_SN = "ANPMN100760";

	/**Crediventas**/
	private static final String ID_PROP_IDENTIFICACION_EXPEDIENTE = "ANPMN100770";
	private static final String ID_PROP_NOMBRE_ESTABLECIMIENTO =    "ANPMN100780";
	private static final String ID_PROP_NIF_CIF_ESTABLECIMIENTO = "ANPMN100790";
	private static final String ID_PROP_SERVICIO_CREDIVENTAS = "ANPMN100800";
	private static final String ID_PROP_CODIGO_VENDEDOR = "ANPMN100810";
	private static final String ID_PROP_INTERES_DEMORA = "ANPMN100820";
	private static final String ID_PROP_TELEFONO_MOVIL_PRIMER_TITULAR = "ANPMN100094";

	/**Información normalizada europea**/
	private static final String ID_PROP_PRODUCTO = "ANPMN100830";
	private static final String ID_PROP_DESCRIPCION_PRODUCTO = "ANPMN100840";
	private static final String ID_PROP_SUBPRODUCTO = "ANPMN100850";
	private static final String ID_PROP_DESCRIPCION_SUBPRODUCTO = "ANPMN100860";
	private static final String ID_PROP_NUMERO_HORAS_RESOLUCION = "ANPMN100870";

	// 2016-02-22 - Nuevos campos en contexto impresion para concesionarios
	private static final String ID_PROP_INDICADOR_DOMICILIACION_EXTERNA = "ANPMN100880";
	private static final String ID_PROP_DESCRIPCION_ENTIDAD = "ANPMN100890";

	private static final String ID_PROP_COMUNIDAD_BIENES = 		"ANPMN100900";
	private static final String ID_PROP_APLICA_SOLCHAGA = 		"ANPMN100910";
	private static final String ID_PROP_IND_CAPITAL_NEGATIVO =	"ANPMN100920";


	private static final String CTE_ANEXO=  "ANPMN100930";


	private static final String ID_TIPO_PRESTAMO = "ANPMN100940";
	private static final String ID_INDICADOR_SUELO = "ANPMN100950";
	private static final String ID_INDICADOR_TECHO = "ANPMN100960";
	private static final String ID_INTERES_TRAMOS_SUCESIVOS = "ANPMN100970";
	private static final String ID_TIPO_REFERENCIA = "ANPMN100980";
	private static final String ID_FECHA_PRIMER_REV = "ANPMN100990"; 
	private static final String ID_NUMERO_MESES_TRAMO_INCIAL = "ANPMN100991";

	private static final String ID_CARENCIA_DE_INTERES 				   = "ANPMN100992";
	private static final String ID_INDICADOR_DE_CARENCIA			   = "ANPMN100993";
	private static final String ID_INDICADOR_SOLICITUD_CONTRATO 	   = "ANPMN100994";
	private static final String ID_INDICADOR_CANAL_OPERACION 		   = "ANPMN100995";

	private static final String ID_PRIMERA_CUOTA_SEGUNDO_TRAMO  	   = "ANPMN100996";
	private static final String ID_PRIMERA_CUOTA_COMPLETA_CAPITAL_CERO = "ANPMN100997";
	private static final String ID_VALOR_TIPO_REFERENCIA 			   = "ANPMN100998";
	private static final String ID_NUMERO_MESES_INI_SIN_CARENCIA 	   = "ANPMN100999";


	// campos necesarios para anexo de comunidad de bienes  
	private static final String ID_NOMBRE_COMUNIDAD 		= "ANPMN100901";
	private static final String ID_CIF_COMUNIDAD		    = "ANPMN100902";
	private static final String ID_DIRECCION_COMUNIDAD 		= "ANPMN100903";
	private static final String ID_CODIGO_POSTAL_COMUNIDAD 	= "ANPMN100904";
	private static final String ID_LOCALIDAD_COMUNIDAD 		= "ANPMN100905";
	private static final String ID_CODIGO_ANEXO_CB          = "ANPMN100906";
	
	// campos para la matriz de gastos adicionales
	private static final String ID_MATRIZ_GASTOS = "ANPMN100931";
	private static final String ID_GASTO_ID_CONCEPTO = "ANPMN100932";
	private static final String ID_GASTO_DESCRIPCION_CONCEPTO = "ANPMN100933";
	private static final String ID_GASTO_IMPORTE_CONCEPTO = "ANPMN100934";
	private static final String ID_IMPORTE_SOLICITADO = "ANPMN100941";
	
	// Campo nuevo para la garantía
	private static final String ID_GARANTIA = "ANPMN100942";
	
	//Indicador Fijo con tramo inicial, S: Si el segundo tramo es Variable Bonificable.
	private static final String ID_INDICADOR_FIJO_TRAMO_INICIAL = "ANPMN100952";
	
	//Tae de demora
	private static final String ID_TAE_DEMORA = "ANPMN100962";
	
	private static final String ID_PROP_PRCTJ_COMISION_DEVOLUCION		= "ANPMN100963";
	private static final String ID_PROP_IMP_MINIMO_COMISION_DEVOLUCION 	= "ANPMN100964";
	private static final String ID_PROP_DESTINO_FONDOS 					= "ANPMN100965";

	/*20151016 Constante para el código de modelo de la info previa nueva, es decir, la INE*/
	private static final int CTE_CODIGO_MODELO_INFO_PREVIA_NUEVA_INE = 20671;

	//Textos del documento de informacion previa	
	private static final String TEXTO_DISPOSICION = "A LA FIRMA";
	private static final String TEXTO_GARANTIA_REQUERIDA = "GARANTÍA REQUERIDA:PERSONAL ILIMITADA DE PRESTATARIOS, Y EN SU CASO AVALISTAS";
	private static final String TEXTO_INTERES_BONIFICADO = "EL INTERES DEL PRESTAMO PODRA RESULTAR BONIFICADO, UNA VEZ FINALIZADO EL PERIODO INICIAL,POR LA CONTRATACION DE DETERMINADOS PRODUCTOS Y SERVICIOS";


	private static final String RESTO_PERIODOS = "TIPO REF+MARGEN";

	// Campos contexto datos solicitud (ANPMN050)
	private static final String CAMPO_CTXTO_SOL_OFICINA = "ANPMN050010";
	private static final String CAMPO_CTXTO_SOL_NUMERO = "ANPMN050020";
	private static final String CAMPO_CTXTO_SOL_VERSION = "ANPMN050030";
	private static final String CAMPO_CTXTO_SOL_NUC = "ANPMN050040";
	private static final String CAMPO_CTXTO_SOL_DIGITO = "ANPMN050070";
	private static final String CAMPO_CTXTO_SOL_COD_PROD = "ANPMN050080";
	private static final String CAMPO_CTXTO_SOL_COD_SUBPROD = "ANPMN050090";
	private static final String CAMPO_CTXTO_SOL_VERSION_GENERAL = "ANPMN050100";
	//private static final String CAMPO_CTXTO_SOL_ENTIDAD = "ANPMN050310";
	private static final String CAMPO_CTXTO_SOL_ID_TARIFA = "ANPMN050886";
	private static final String CAMPO_CTXTO_SOL_IMPORTE_INVERSION = "ANPMN050560";
	private static final String CAMPO_CTXTO_SOL_PLAZO_DIFERIMIENTO = "ANPMN050670";
	//private static final String CAMPO_CTXTO_SOL_IMPORTE_SOLICITADO = "ANPMN050580";
	 


	// Campos contexto destino (ANPMN055)
	private static final String CAMPO_CTXTO_DESTINO_COMENTARIO 		= "ANPMN055090";
	private static final String CAMPO_CTXTO_DESTINO_ES_PRINCIPAL 	= "ANPMN055110";
	private static final String CAMPO_CTXTO_DESTINO	 				= "ANPMN055060";

	// Campos contexto cuentas (ANPMN072)
	private static final String CAMPO_CTXTO_CUENTA_TIPO_CUENTA_CARGO_ABONO = "ANPMN072100";
	private static final String CAMPO_CTXTO_CUENTA_TIPO_CUENTA_INT_EXT = "ANPMN072200";
	private static final String CAMPO_CTXTO_CUENTA_ENTIDAD = "ANPMN072110";

	// Campos contexto datos expediente (EE273CON)
	private static final String CAMPO_CTXTO_EXPEDIENTE_DESCRIPCION_PRESCRIPTOR = "EE273C0385";

	// Campos para llamar al sevicio de negocio que calcula la tae bonificada
	private static final Integer ID_CODOP_CONSULTA_AMORTIZACION = Integer.valueOf(266);
	private static final String NOMBRE_CAMPO_OFICINA_SOLICITUD = "OFICINA_SOLICITUD"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_NUMERO_SOLICITUD = "NUMERO_SOLICITUD";// OBLIGATORIO
	private static final String NOMBRE_CAMPO_VERSION_SOLICITUD = "VERSION_SOLICITUD"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_NUC_EXPEDIENTE = "NUC_EXPEDIENTE"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_PANTALLA_ORIGEN = "PANTALLA_ORIGEN";	
	private static final String NOMBRE_CAMPO_SRV_ORIGEN = "SERVICIO_ORIGEN"; 
	private static final String NOMBRE_CAMPO_DIGITO_SOLICITUD = "DIGITO_SOLICITUD"; // OBLIGATORIO

	//Constantes para la llamada al ANPMR208
	private static final String CTE_MATRIZ_DATOS_BONIFICACION =  "ANPMN439100"; 
	private static final int CTE_TAMANHO_MATRIZ_BONIFICACION = 300;


	/** Literales para el control de tipo de cliente asociado al prestamo **/
	private static final String ETIQUETA_NIF = "NIF";
	private static final String ETIQUETA_CIF = "CIF";
	private static final String ETIQUETA_PASAPORTE_ESP = "PASAPORTE ESPAÑOL";
	private static final String ETIQUETA_DESUSO = "TARJETA RESIDENTE";
	private static final String ETIQUETA_CARTA_EXT = "CARTA EXTRANJEROS";
	//	Literales para la matriz de pagos
	private static final String ETIQ_NUM_PAGOS_CAPITAL = "NÚMERO DE PAGOS DE CAPITAL   ";
	private static final String ETIQ_TOTAL_CAPITAL = "      TOTAL CAPITAL   ";
	private static final String ETIQ_NUM_PAGOS_INTERES = "NÚMERO DE PAGOS DE INTERESES ";
	private static final String ETIQ_TOTAL_INTERESES = "      TOTAL INTERESES ";
	private static final String ETIQ_TOTAL_COMISIONES_PAGADAS = "TOTAL DE COMISIONES PAGADAS EN FECHA DE FORMALIZACIÓN  ";
	private static final String ETIQ_TOTAL_COMISIONES_PAGADAS_ASF = "TOTAL DE COMISIONES PAGADAS  ";

	// Intereses consignados
	private static final String ETIQ_CUADRO_INFORMATIVO = "CUADRO INFORMATIVO REFERIDO A FECHA";
	//private static final String ETIQ_INTERESES_CONSIGNADOS = ". LOS INTERESES CONSIGNADOS PARA EL PRIMER PERIODO";
	//private static final String ETIQ_DEBERAN_REVISAR = "DEBERAN SER REVISADOS EN FUNCION DE LA FECHA DE FORMALIZACION DEL CONTRATO.";

	private static final String ETIQ_INTERESES_PRIMER_PERIODO_1 = ". POR TANTO, EL IMPORTE DE LOS INTERESES INDICADOS "; 
	private static final String ETIQ_INTERESES_PRIMER_PERIODO_2 = "PARA EL PRIMER PERIODO DE LIQUIDACIÓN ";
	private static final String ETIQ_INTERESES_PRIMER_PERIODO_3 = "PODRÁ VARIAR SI EL CONTRATO ";
	private static final String ETIQ_INTERESES_PRIMER_PERIODO_4 = "SE FORMALIZA EN FECHA DISTINTA.";

	private static final String ETIQ_INTERESES_PRIMER_PERIODO_5 = "(EN CASO DE QUE LA PRIMERA CUOTA NO HAYA AMORTIZACIÓN ";
	private static final String ETIQ_INTERESES_PRIMER_PERIODO_6 = "DE CAPITAL O SE TRATE DE UN PRÉSTAMO CON CARENCIA DE AMORTIZACIÓN) ";


	private static final String ETIQ_EL_TIPO_INTERES = "EL TIPO DE INTERÉS ARRIBA INDICADO SE MODIFICARÁ AL FINALIZAR EL PERÍODO DE DURACIÓN DEL TIPO DE";
	private static final String ETIQ_INTERES_ORDINARIO = "DE INTERÉS INICIAL, PASANDO A APLICARSE EL TIPO DE INTERÉS ORDINARIO PREVISTO EN LA";
	private static final String ETIQ_SOLICITUD_CONTRATO = "SOLICITUD-CONTRATO O,EN CASO DE QUE RESULTE DE APLICACIÓN ALGUNA BONIFICACIÓN, EL QUE CORRESPONDA,";
	private static final String ETIQ_PRODUCTOS_BONIF = "EN FUNCIÓN DE SI EL CLIENTE	CONTRATA Y/O MANTIENE TODOS O ALGUNO DE LOS PRODUCTOS QUE DAN LUGAR A";
	private static final String ETIQ_LA_MISMA = "LA MISMA";
	private static final String ETIQ_TOTAL_PAGOS = "IMPORTE TOTAL PAGOS";
	private static final String ETIQ_PAGOS_SUCESIVOS = "*PAGOS SUCESIVOS: CON LA MISMA PERIODICIDAD Y SEGUN TIPO DE INTERES.";
	private static final String ETIQ_PAGOS_SUCESIVOS_MULTI = "PAGOS SUCESIVOS: CON LA MISMA PERIODICIDAD. SE AJUSTARÁN LAS CUOTAS SEGUN EL TIPO DE INTERÉS QUE"; 
	private static final String ETIQ_CORRESPONDA_APLICAR = "CORRESPONDA APLICAR.";
	private static final String ETIQ_PIE_RESUMEN = "TITULARES                              FIADORES                               POR LA ENTIDAD.";
	private static final String ETIQ_TEXTO_ANHO = "Año";
	//private static final String ETIQ_TEXTO_MES = "Mes";

	private static final String CONSTANTE_DOC_ANEXO = "AN";
	private static final String CONSTANTE_DOC_ANEXO_CB = "CB";
	
	// Constantes llamada RSAL_101 (datos de entidad)
	private final static Integer RSAL_101_CC = new Integer(415);
	private final static Integer RSAL_101_CO = new Integer(101); 
	
	private final static String RSAL_101_ENTRADA_TIPO_CONSULTA = "TIPO_CONSULTA";
	private final static String RSAL_101_ENTRADA_COD_ENTIDAD = "COD_ENTIDAD";
	private final static String RSAL_101_CTE_TIPO_CONSULTA_C = "C";
	
	private final static String RSAL_101_CTX_RS101CON = "RS101CON";
	private final static String RSAL_101_CTX_RS101C070 = "RS101C070";

	//private static final BigDecimal COD_PROD_PREST_COM_PROP = new BigDecimal(5085);

	/**
	 * Log de la clase.
	 */
	private static final LogHelper LOGGER = LogHelper.getLog(ContextoImpresionFormalizacion.class);



	private ContextoImpresionFormalizacion() 
	{
		super();
	}

	/**
	 * 
	 * @param aContextoSalida Recibe un array de contextos con los datos de la solicitud, comisiones, 
	 * @param pCodError
	 * @return
	 */
	public static IContexto[] rellenarDatosContexto(IContexto [] aContextos, int paso, Integer modelo)
	{
		// IDs de los contextos que se esperan recibir
		final String strCtxtoSolicitud 					= "ANPMN050";
		final String strCtxtoProducto 					= "ANPMN001";
		final String strCtxtoSubproducto 				= "ANPMN002";
		final String strCtxtoDestinos 					= "ANPMN055";
		final String strCtxtoCondicionesCapitalPrestamo = "ANPMN051";
		final String strCtxtoInteres 					= "ANPMN052";
		final String strCtxtoComisiones 				= "ANPMN053";
		final String strCtxtoSolicitudProducto 			= "ANPMN050080";
		//final String strCtxtoTratamientoAdelantos = "ANPMN054";
		final String strCtxtoCuentasPrestamo 			= "ANPMN072";
		final String strCtxtoSubProducto 				= "ANPMN002";
		final String strCtxtoClientes 					= "MEFCN000";
		final String strCtxtoProgramaAmortizacion 		= "ANPMN075";
		final String strCtxtoProgramaCorretaje 			= "ANPMN073";
		final String strSolPropCodigoProducto 			= "ANPMN050080";
		final String strSolPropCodigoSubproducto 		= "ANPMN050090";
		final String strSolPropNucSolicitud 			= "ANPMN050040";
		final String strSolEspecialidadDivisa 			= "ANPMN050120";
		final String strSolIdTarifa 					= "ANPMN050886";
		final String strVersionGeneral					= "ANPMN050100";
		final String strNucExpediente 					= "ANPMN050040";
		final String strEntidad 						= "ANPMN050310";
		final String strTipoExpediente					= "ANPMN050270";
		final String strCtxtoDatosExpediente 			= "EE273CON";

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarDatosContexto");	
		}

		IContexto[] aContextoSalida = new IContexto[1];
		IContexto contextoImpresion = ContextoFactory.getInstance().getContexto(ID_CTX);
		final IContexto ctxtoSolicitud = UtilidadesTramitacion.getContexto(aContextos, strCtxtoSolicitud);
		final IContexto ctxtProducto = UtilidadesTramitacion.getContexto(aContextos, strCtxtoProducto);
		final IContexto ctxtSubproducto = UtilidadesTramitacion.getContexto(aContextos, strCtxtoSubproducto);
		final IContexto ctxtPrograma = UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion);
		final IContexto[] aCtxtoIntereses = getArrayContexto(strCtxtoInteres, aContextos);
		IContexto[] contextosComisiones = getArrayContexto("ANPMN053", aContextos);
		IContexto condicionesCapital = UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo);

		final boolean bolPrestamoFijo = isPrestamoFijo(aCtxtoIntereses);
		//En la comprobacion pasamos un null en el segundo parametro para que la comprobacion sea solo a nivel de producto y no a nivel de subprodcuto
		final boolean esMulticredito = 	UtilidadesTramitacion.esMulticredito48H(ctxtoSolicitud.
				getBigDecimal(strCtxtoSolicitudProducto).toString(), null);
		//Determina si una solicitud es enotario
		final boolean esEnotario = UtilidadesTramitacion.esEnotario(ctxtoSolicitud);

		String consumidor = new String();
		if(UtilidadesTramitacion.esDivisaPorEspecialidad(ctxtoSolicitud.getString(strSolEspecialidadDivisa))) {	
			if(UtilidadesTramitacion.esEntornoAbanca() && UtilidadesTramitacion.comprobarControlOperatoria(ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud),new BigDecimal(150003),false)) {
				//consumidor = UtilidadesImpresion.esConsumidor(ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud));
				consumidor = UtilidadesTramitacion.esConsumidorNoIlog(ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud));
			}
		}

		final boolean esDivisa = UtilidadesTramitacion.esDivisaPorEspecialidad(ctxtoSolicitud.getString(strSolEspecialidadDivisa));
		final boolean esConcesionario = UtilidadesComun.esProductoConcesionarios(
				ctxtoSolicitud.getBigDecimal(strCtxtoSolicitudProducto).toString(), null);
		final BigDecimal numPeriodos = obtenerNumPeriodosOrdenUno(aCtxtoIntereses);

		final String indCapitalNegativo = UtilidadesImpresion.obtenerIndCapitalNegativo(ctxtoSolicitud);
		final String medidaSolchaga = UtilidadesImpresion.obtenerMedidaSolchaga(ctxtoSolicitud);


		switch (paso)
		{
		case PASO_DOC_IMPRESION_PREVIA:

			// Si la solicitud no tiene comisiones se inicializa a 0 para que no haya problemas
			if(UtilidadesTramitacion.isBlankOrNull(modelo)) 
			{
				//contextoImpresion.put(ID_PROP_NUMERO_POLIZA, Constantes.CTE_BID_ID_DOC_IMP_PREVIA);
				ServicioNegocio.rollback(CodigosError.ERROR_IMPRESION_MODELO_DOC.intValue(),null,null,null);
			}
			else 
			{
				contextoImpresion.put(ID_PROP_NUMERO_POLIZA, ""+modelo.intValue());
			}

			/*Instanciamos la matriz de observaciones ANPMN100450 rellenando el campo ANPMN100451 */
			rellenaDatosBonificacionCampanhas(
					ctxtoSolicitud.getBigDecimal(strSolPropCodigoProducto),
					ctxtoSolicitud.getBigDecimal(strSolPropCodigoSubproducto),
					ctxtoSolicitud.getBigDecimal(strSolIdTarifa),
					contextoImpresion,
					ctxtoSolicitud.getBigDecimal(strVersionGeneral),
					ctxtoSolicitud.getBigDecimal(strNucExpediente),
					numPeriodos
					);

			rellenarImpresionConCntxtoSolicitud(ctxtoSolicitud, contextoImpresion, paso, aCtxtoIntereses);
			rellenarImpresionConCntxtoSubProducto(UtilidadesTramitacion.getContexto(aContextos, strCtxtoSubProducto), contextoImpresion);
			rellenarImpresionConCntxtoCondicionesCapital(
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
					contextoImpresion,
					!bolPrestamoFijo, 
					paso);
			rellenarImpresionConCntxtoComisiones(getArrayContexto(strCtxtoComisiones, aContextos), 
					contextoImpresion, paso, esMulticredito, ctxtoSolicitud);
			rellenarImpresionConCntxtoClientesTitulares(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion, Boolean.FALSE);
			rellenarImpresionConCntxtoInteres(aCtxtoIntereses, contextoImpresion, bolPrestamoFijo, paso, 
					esMulticredito, esConcesionario, ctxtPrograma, esDivisa);
			
			rellenarImpresionConCntxtoPrograma(
					ctxtPrograma,
					ctxtoSolicitud, 
					contextoImpresion, 
					paso, 
					!bolPrestamoFijo,
					esMulticredito,
					consumidor,
					false,
					esDivisa, 
					esConcesionario,
					aCtxtoIntereses,
					contextosComisiones,
					condicionesCapital);
			
			if(UtilidadesTramitacion.esBonificable(aCtxtoIntereses)) 
			{
				rellenarImpresionConTaeBonificada(contextoImpresion, ctxtoSolicitud);

				/*20150204 Se informa la máxima bonificación en el campo ANPMN100700. */
				rellenarImpresionConMaximaBonificacion(contextoImpresion, ctxtoSolicitud);
				rellenarInteresOrdinario(ctxtoSolicitud, aCtxtoIntereses, contextoImpresion);	
			}
			if(esMulticredito) 
			{
				rellenarTextosInfoPreviaMulticredito48H(contextoImpresion);
				//20151016 Falta pasarle el modelo.
				rellenarInteresMaximoBonificado(contextoImpresion, ctxtoSolicitud, aCtxtoIntereses, modelo);
			}
			rellenarImpresionConsumidorNoConsumidor(contextoImpresion, consumidor);
			recalcularPagosDeInteresConCarencia(contextoImpresion, ctxtoSolicitud);
			rellenarProductoSubproducto(contextoImpresion, ctxtProducto,ctxtSubproducto);

			// 2016-02-23 - Rellenar solo para concesionarios: 
			// > ANPMN100610: descripcion bien a financiar
			// > ANPMN100780: nombre del establecimiento            
			if (esConcesionario)
			{
				rellenarDatosConcesionarios(contextoImpresion, 
						UtilidadesTramitacion.getContextos(aContextos, strCtxtoDestinos), 
						UtilidadesTramitacion.getContexto(aContextos, strCtxtoDatosExpediente));
			} 

			// 2016-02-23 - Rellenar importe tasacion (ANPMN100620) con el precio 
			// de la inversion (AN250560 --> campo ANPMN050560 del contexto de la solicitud)
			rellenarImporteTasacion(contextoImpresion, ctxtoSolicitud);

			//2016-07-13 - Rellenar si aplica medida solchaga (ANPMN100910) 0/1
			//			 - Rellenar indicador negativo de capital (ANPMN100920) 0/1
			contextoImpresion.put(ID_PROP_APLICA_SOLCHAGA, medidaSolchaga);				
			contextoImpresion.put(ID_PROP_IND_CAPITAL_NEGATIVO, indCapitalNegativo);
			
			// 2016-11-30 - Rellenar la matriz de gastos adicionales con los gastos
			// de la AN44TB01 que tengan la marca de la TAE (normal) a 1.
			rellenarMatrizGastos(contextoImpresion, ctxtoSolicitud);

			// 2016-12-20 - Se mueve a este punto la funcion que rellena el ind. carencia
			rellenarIndicadorCarencia(ctxtoSolicitud,contextoImpresion);
		
			//if(UtilidadesImpresion.comprobacionASF(ctxtoSolicitud)){
			//	rellenarImpresionConTaeDemora(contextoImpresion, ctxtoSolicitud);
			//}
			
			if (UtilidadesComun.esASF(ctxtoSolicitud.getString(strEntidad))){
				rellenarTextoCuentaAbono(ctxtoSolicitud.getBigDecimal(strSolPropCodigoProducto),
						UtilidadesTramitacion.getContextos(aContextos, strCtxtoDestinos),contextoImpresion,ctxtoSolicitud.getBigDecimal(strTipoExpediente));
			}			
			
			break;

		case PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA:

			// Si la solicitud no tiene comisiones se inicializa a 0 para que no haya problemas
			if(UtilidadesTramitacion.isBlankOrNull(modelo)) 
			{
				//contextoImpresion.put(ID_PROP_NUMERO_POLIZA, Constantes.CTE_BID_ID_DOC_IMP_PREVIA);
				ServicioNegocio.rollback(CodigosError.ERROR_IMPRESION_MODELO_DOC.intValue(),null,null,null);
			}
			else 
			{
				contextoImpresion.put(ID_PROP_NUMERO_POLIZA, ""+modelo.intValue());
			}

			rellenarImpresionConCntxtoSolicitud(ctxtoSolicitud, contextoImpresion, paso, aCtxtoIntereses);
			rellenarImpresionConCntxtoSubProducto(UtilidadesTramitacion.getContexto(aContextos, strCtxtoSubProducto), contextoImpresion);
			rellenarImpresionConCntxtoCondicionesCapital(
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
					contextoImpresion,
					!bolPrestamoFijo, 
					paso);
			rellenarImpresionConCntxtoComisiones(getArrayContexto(strCtxtoComisiones, aContextos), 
					contextoImpresion, paso, esMulticredito, ctxtoSolicitud);
			rellenarImpresionConCntxtoClientesTitulares(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion, Boolean.FALSE);
			rellenarImpresionConCntxtoInteres(aCtxtoIntereses, contextoImpresion, bolPrestamoFijo, paso,
					esMulticredito, esConcesionario, ctxtPrograma, esDivisa);
			rellenarImpresionConCntxtoPrograma(
					ctxtPrograma,
					ctxtoSolicitud, 
					contextoImpresion, 
					paso, 
					!bolPrestamoFijo,
					esMulticredito,
					consumidor,
					true,
					esDivisa, 
					esConcesionario, 
					aCtxtoIntereses,
					contextosComisiones,
					condicionesCapital); //Es crediventas

			/**
			 * Rellenamos los datos correspondientes a crediventas
			 */
			rellenarContratoCrediventas(contextoImpresion, ctxtoSolicitud, ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud));
			rellenarImpresionConsumidorNoConsumidor(contextoImpresion, consumidor);
			rellenarProductoSubproducto(contextoImpresion, ctxtProducto,ctxtSubproducto);
			recalcularPagosDeInteresConCarencia(contextoImpresion, ctxtoSolicitud);

			// 2016-07-13 - Rellenar si aplica medida solchaga (ANPMN100910) 0/1
			//			  - Rellenar indicador negativo de capital (ANPMN100920) 0/1
			contextoImpresion.put(ID_PROP_APLICA_SOLCHAGA, medidaSolchaga);
			contextoImpresion.put(ID_PROP_IND_CAPITAL_NEGATIVO, indCapitalNegativo);
			
			// 2016-11-30 - Rellenar la matriz de gastos adicionales con los gastos
			// de la AN44TB01 que tengan la marca de la TAE (normal) a 1.
			rellenarMatrizGastos(contextoImpresion, ctxtoSolicitud);
			
			// 2016-12-20 - Se mueve a este punto la funcion que rellena el ind. carencia
			rellenarIndicadorCarencia(ctxtoSolicitud,contextoImpresion);
			
			//if(UtilidadesImpresion.comprobacionASF(ctxtoSolicitud)){
			//	rellenarImpresionConTaeDemora(contextoImpresion, ctxtoSolicitud);
			//}
			
			if (UtilidadesComun.esASF(ctxtoSolicitud.getString(strEntidad))){
				rellenarTextoCuentaAbono(ctxtoSolicitud.getBigDecimal(strSolPropCodigoProducto),
						UtilidadesTramitacion.getContextos(aContextos, strCtxtoDestinos),contextoImpresion,ctxtoSolicitud.getBigDecimal(strTipoExpediente));
			}
			
			break;

		case PASO_DOC_OFERTA_VINCULANTE:

			if(UtilidadesTramitacion.isBlankOrNull(modelo)) 
			{
				//contextoImpresion.put(ID_PROP_NUMERO_POLIZA, Constantes.CTE_BID_ID_DOC_IMP_VINCULANTE);
				ServicioNegocio.rollback(CodigosError.ERROR_IMPRESION_MODELO_DOC.intValue(),null,null,null);
			}
			else 
			{
				contextoImpresion.put(ID_PROP_NUMERO_POLIZA, ""+modelo.intValue());
			}
			rellenarImpresionConCntxtoSolicitud(ctxtoSolicitud, contextoImpresion, paso, null);
			rellenarImpresionConCntxtoCuentas(getArrayContexto(strCtxtoCuentasPrestamo, aContextos), contextoImpresion, ctxtoSolicitud.getString(strEntidad));
			rellenarImpresionConCtxtoCorretaje(UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaCorretaje), contextoImpresion);
			rellenarImpresionConCntxtoClientesTitulares(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion, Boolean.TRUE);
			rellenarImpresionConCntxtoClientesAvalistas(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion);
			rellenarImpresionConCntxtoComisiones(getArrayContexto(strCtxtoComisiones, aContextos), 
					contextoImpresion, paso, esMulticredito, ctxtoSolicitud);
			rellenarImpresionConCntxtoCondicionesCapital(
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
					contextoImpresion,
					!bolPrestamoFijo, 
					paso);
			rellenarImpresionConCntxtoInteres(aCtxtoIntereses, contextoImpresion, bolPrestamoFijo, paso,
					esMulticredito, esConcesionario, ctxtPrograma, esDivisa);
			rellenarImpresionConCntxtoPrograma(
					ctxtPrograma,
					ctxtoSolicitud, 
					contextoImpresion, 
					paso, 
					!bolPrestamoFijo,
					esMulticredito,
					consumidor,
					false,
					esDivisa, 
					esConcesionario,
					aCtxtoIntereses,
					contextosComisiones,
					condicionesCapital);
			crearMatrizResumen(contextoImpresion, 
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion), paso, 
					bolPrestamoFijo, esMulticredito, medidaSolchaga,ctxtoSolicitud);

			if(esMulticredito) 
			{
				rellenaLugarFecha(contextoImpresion);
				rellenarInteresOrdinario(UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion), aCtxtoIntereses, contextoImpresion);
				rellenarInteresMaximoBonificado(contextoImpresion, ctxtoSolicitud,aCtxtoIntereses, Constantes.CTE_INTEGER_CERO);
				rellenarSucesivasEntregasImporte(UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
						contextoImpresion, esConcesionario);
				rellenaDatosBonificacionCampanhas(
						ctxtoSolicitud.getBigDecimal(strSolPropCodigoProducto),
						ctxtoSolicitud.getBigDecimal(strSolPropCodigoSubproducto),
						ctxtoSolicitud.getBigDecimal(strSolIdTarifa), /*20150925 Para llamar al programa de bonificación de campañas, ANPMR208*/
						contextoImpresion,
						ctxtoSolicitud.getBigDecimal(strVersionGeneral),// 20160308 - Se añade la versión general para la llamada al ANPMR208						
						ctxtoSolicitud.getBigDecimal(strNucExpediente),
						numPeriodos);// 20160506 - Se añaden nuc y numPeriodos para la llamada al ANPMR208
			}
			
			// Ahora se informa siempre
			rellenarFechaDevengoInteresMulticredito(contextoImpresion,UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion));
			
			rellenarImpresionConsumidorNoConsumidor(contextoImpresion, consumidor);
			/**
			 * Si no es multicredito y es consumidor rellenamos con ----- los campos 
			 * ANPMN100300 y ANPMN100181
			 */
			if(!esMulticredito && consumidor.equals(Constantes.CTE_SI_COMPROBACION_S)) {
				rellenarConsumidorSueloInicialNulo(contextoImpresion);
			}
			recalcularPagosDeInteresConCarencia(contextoImpresion, ctxtoSolicitud);

			// 2016-02-23 - Rellenar importe tasacion (ANPMN100620) con el precio 
			// de la inversion (AN250560 --> campo ANPMN050560 del contexto de la solicitud)
			rellenarImporteTasacion(contextoImpresion, ctxtoSolicitud);	

			//2016-07-13 - Rellenar si aplica medida solchaga (ANPMN100910) 0/1
			//			 - Rellenar indicador negativo de capital (ANPMN100920) 0/1
			contextoImpresion.put(ID_PROP_APLICA_SOLCHAGA, medidaSolchaga);
			contextoImpresion.put(ID_PROP_IND_CAPITAL_NEGATIVO, indCapitalNegativo);

			rellenarSucesivasEntregasImportePoliza(esDivisa, aCtxtoIntereses, 
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
					ctxtPrograma, contextoImpresion);

			//2016-11-02 Campos Anexo y recuperación código documento Anexo
			rellenarCamposAnexoComBienes(contextoImpresion, ctxtoSolicitud, getArrayContexto(strCtxtoCuentasPrestamo, aContextos));

			break;

		case PASO_DOC_CONTRATO_CREDIVENTAS:

			if(UtilidadesTramitacion.isBlankOrNull(modelo)) 
			{
				//contextoImpresion.put(ID_PROP_NUMERO_POLIZA, Constantes.CTE_BID_ID_DOC_IMP_POLIZA);
				ServicioNegocio.rollback(CodigosError.ERROR_IMPRESION_MODELO_DOC.intValue(),null,null,null);
			}
			else 
			{
				contextoImpresion.put(ID_PROP_NUMERO_POLIZA, ""+modelo.intValue());
			}

			rellenarImpresionConCntxtoSolicitud(ctxtoSolicitud, contextoImpresion, paso, null);
			rellenarImpresionConCntxtoCuentas(getArrayContexto(strCtxtoCuentasPrestamo, aContextos), contextoImpresion, ctxtoSolicitud.getString(strEntidad));
			rellenarImpresionConCtxtoCorretaje(UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaCorretaje), contextoImpresion);
			rellenarImpresionConCntxtoClientesTitulares(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion, Boolean.TRUE);
			rellenarImpresionConCntxtoClientesAvalistas(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion);
			rellenarImpresionConCntxtoComisiones(getArrayContexto(strCtxtoComisiones, aContextos), 
					contextoImpresion, paso, esMulticredito, ctxtoSolicitud);
			rellenarImpresionConCntxtoCondicionesCapital(
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
					contextoImpresion,
					!bolPrestamoFijo, 
					paso);
			rellenarImpresionConCntxtoInteres(aCtxtoIntereses, contextoImpresion, bolPrestamoFijo, paso, 
					esMulticredito, esConcesionario, ctxtPrograma, esDivisa);
			rellenarImpresionConCntxtoPrograma(
					ctxtPrograma,
					ctxtoSolicitud, 
					contextoImpresion, 
					paso, 
					!bolPrestamoFijo,
					esMulticredito,
					consumidor,
					true,
					esDivisa, 
					esConcesionario,
					aCtxtoIntereses,
					contextosComisiones,
					condicionesCapital);
			crearMatrizResumen(contextoImpresion, UtilidadesTramitacion.getContexto(
					aContextos, strCtxtoProgramaAmortizacion), paso, bolPrestamoFijo,
					esMulticredito, medidaSolchaga,ctxtoSolicitud);
			
			// Ahora se informa siempre
			rellenarFechaDevengoInteresMulticredito(contextoImpresion,UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion));
			
			rellenarImpresionConsumidorNoConsumidor(contextoImpresion, consumidor);
			/**
			 * Rellenamos los datos correspondientes a crediventas
			 */
			//rellenaLugarFecha(contextoImpresion);
			recalcularPagosDeInteresConCarencia(contextoImpresion, ctxtoSolicitud);
			rellenarContratoCrediventas(contextoImpresion, ctxtoSolicitud, ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud));
			anulaDatosConValorCero(contextoImpresion);

			// 2016-03-09 - Rellenar descripcion entidad
			//rellenarDescripcionEntidad(contextoImpresion, ctxtoSolicitud);
			rellenarDescripcionEntidad(contextoImpresion, getArrayContexto(strCtxtoCuentasPrestamo, aContextos));
			//2016-07-13 - Rellenar si aplica medida solchaga (ANPMN100910) 0/1
			//			 - Rellenar indicador negativo de capital (ANPMN100920) 0/1
			contextoImpresion.put(ID_PROP_APLICA_SOLCHAGA, medidaSolchaga);
			contextoImpresion.put(ID_PROP_IND_CAPITAL_NEGATIVO, indCapitalNegativo);
			
			//if(UtilidadesImpresion.comprobacionASF(ctxtoSolicitud)){
			//	rellenarImpresionConTaeDemora(contextoImpresion, ctxtoSolicitud);
			//}

			break;

		case PASO_DOC_POLIZA_PRESTAMO: 

			if(UtilidadesTramitacion.isBlankOrNull(modelo)) 
			{
				//contextoImpresion.put(ID_PROP_NUMERO_POLIZA, Constantes.CTE_BID_ID_DOC_IMP_POLIZA);
				ServicioNegocio.rollback(CodigosError.ERROR_IMPRESION_MODELO_DOC.intValue(),null,null,null);
			}
			else 
			{
				contextoImpresion.put(ID_PROP_NUMERO_POLIZA, ""+modelo.intValue());
			}

			rellenarImpresionConCntxtoSolicitud(ctxtoSolicitud, contextoImpresion, paso, null);
			rellenarImpresionConCntxtoCuentas(getArrayContexto(strCtxtoCuentasPrestamo, aContextos), contextoImpresion, ctxtoSolicitud.getString(strEntidad));
			rellenarImpresionConCtxtoCorretaje(UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaCorretaje), contextoImpresion);
			rellenarImpresionConCntxtoClientesTitulares(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion, Boolean.TRUE);
			rellenarImpresionConCntxtoClientesAvalistas(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion);
			rellenarImpresionConCntxtoComisiones(getArrayContexto(strCtxtoComisiones, aContextos), 
					contextoImpresion, paso, esMulticredito, ctxtoSolicitud);
			rellenarImpresionConCntxtoCondicionesCapital(
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
					contextoImpresion,
					!bolPrestamoFijo, 
					paso);
			rellenarImpresionConCntxtoInteres(aCtxtoIntereses, contextoImpresion, bolPrestamoFijo, paso,
					esMulticredito, esConcesionario, ctxtPrograma, esDivisa);
			rellenarImpresionConCntxtoPrograma(
					ctxtPrograma,
					ctxtoSolicitud, 
					contextoImpresion, 
					paso, 
					!bolPrestamoFijo,
					esMulticredito,
					consumidor,
					false,
					esDivisa, 
					esConcesionario,
					aCtxtoIntereses,
					contextosComisiones,
					condicionesCapital);
			rellenarImpresionComBienes(contextoImpresion,ctxtoSolicitud, getArrayContexto(strCtxtoCuentasPrestamo, aContextos));
			//Rellenar impresion con TAE Bonificada
			//Modificación para multicredito 48H
			if(UtilidadesTramitacion.esBonificable(aCtxtoIntereses)) 
			{
				rellenarImpresionConTaeBonificada(contextoImpresion, ctxtoSolicitud);
				rellenarImpresionConMaximaBonificacion(contextoImpresion, ctxtoSolicitud);

			}
			crearMatrizResumen(contextoImpresion, UtilidadesTramitacion.getContexto(
					aContextos, strCtxtoProgramaAmortizacion), paso, bolPrestamoFijo,
					esMulticredito, medidaSolchaga,ctxtoSolicitud);

			// 2016-02-23 - Rellenar también para concesionarios:
			// > Lugar y fecha en caso de que en la AN25TB01 esten en blanco
			// > Fecha devengo intereses (ANPMN100740)
			if(esMulticredito || esConcesionario) 
			{
				rellenaLugarFecha(contextoImpresion);
				//rellenarSucesivasEntregasImporte(UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
				//		contextoImpresion, esConcesionario);
			}
			
			// Ahora se informa siempre
			rellenarFechaDevengoInteresMulticredito(contextoImpresion,UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion));

			// 2016-07-18 - Rellenar sucesivas entregas importe en funcion de la especialidad 
			// y la modalidad de amortizacion:
			// - Si especialidad = "D": se muestra la ultima entrega
			// - Si especialidad <> "D":
			//   > Si modalidad amortizacion es EPC (02):
			//     . Si interes es bonificado (03): el texto es el de multicredito
			//     . Si no: el texto es el de concesionarios
			//   > Si no: texto vacio
			rellenarSucesivasEntregasImportePoliza(esDivisa, aCtxtoIntereses, 
					UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), 
					ctxtPrograma, contextoImpresion);


			if(esMulticredito)
			{
				rellenarInteresOrdinario(UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion), aCtxtoIntereses, contextoImpresion);
				rellenarInteresMaximoBonificado(contextoImpresion, ctxtoSolicitud,aCtxtoIntereses, Constantes.CTE_INTEGER_CERO);
				rellenaDatosBonificacionCampanhas(
						ctxtoSolicitud.getBigDecimal(strSolPropCodigoProducto),
						ctxtoSolicitud.getBigDecimal(strSolPropCodigoSubproducto),
						ctxtoSolicitud.getBigDecimal(strSolIdTarifa), /*20150925 Para llamar al programa de bonificación de campañas, ANPMR208*/
						contextoImpresion,
						ctxtoSolicitud.getBigDecimal(strVersionGeneral),// 20160308 - Se añade la versión general para la llamada al ANPMR208
						ctxtoSolicitud.getBigDecimal(strNucExpediente),
						numPeriodos);// 20160506 - Se añaden nuc y numPeriodos para la llamada al ANPMR208
			}
			 
			if (UtilidadesComun.esASF(ctxtoSolicitud.getString(strEntidad))){
				rellenarTextoCuentaAbono(ctxtoSolicitud.getBigDecimal(strSolPropCodigoProducto),
						UtilidadesTramitacion.getContextos(aContextos, strCtxtoDestinos),contextoImpresion,ctxtoSolicitud.getBigDecimal(strTipoExpediente));
			}
			
			if(esEnotario){
				rellenaLugarFechaVacios(contextoImpresion);
			}
			
			rellenarImpresionConsumidorNoConsumidor(contextoImpresion, consumidor);
			/**
			 * Si no es multicredito y es consumidor rellenamos con ----- los campos 
			 * ANPMN100300 y ANPMN100181
			 */
			if(!esMulticredito && consumidor.equals(Constantes.CTE_SI_COMPROBACION_S)) 
			{
				rellenarConsumidorSueloInicialNulo(contextoImpresion);
			}
			recalcularPagosDeInteresConCarencia(contextoImpresion, ctxtoSolicitud);

			/*20151015 Obtenemos el número de días de resolución sólo si es multicrédito*/
			if (esMulticredito)
			{
				rellenarNumeroDiasResolucion(contextoImpresion, ctxtoSolicitud);
			}

			// 2016-02-22 - Rellenar solo para concesionarios: 
			// > ANPMN100610: descripcion bien a financiar
			// > ANPMN100780: nombre del establecimiento            
			if (esConcesionario)
			{
				rellenarDatosConcesionarios(contextoImpresion, 
						UtilidadesTramitacion.getContextos(aContextos, strCtxtoDestinos), 
						UtilidadesTramitacion.getContexto(aContextos, strCtxtoDatosExpediente));
			}

			// 2016-02-22 - Rellenar para todos los productos:
			// > ANPMN100880: indicador domiciliacion externa
			// > ANPMN100890: descripcion entidad
			rellenarIndicadorDomiciliacionExterna(contextoImpresion, UtilidadesTramitacion.
					getContextos(aContextos, strCtxtoCuentasPrestamo));
			//rellenarDescripcionEntidad(contextoImpresion, ctxtoSolicitud);
			rellenarDescripcionEntidad(contextoImpresion, getArrayContexto(strCtxtoCuentasPrestamo, aContextos));

			// 2016-02-23 - Rellenar importe tasacion (ANPMN100620) con el precio 
			// de la inversion (AN250560 --> campo ANPMN050560 del contexto de la solicitud)
			rellenarImporteTasacion(contextoImpresion, ctxtoSolicitud);

			//2016-07-13 - Rellenar si aplica medida solchaga (ANPMN100910) 0/1
			//			 - Rellenar indicador negativo de capital (ANPMN100920) 0/1
			contextoImpresion.put(ID_PROP_APLICA_SOLCHAGA, medidaSolchaga);
			contextoImpresion.put(ID_PROP_IND_CAPITAL_NEGATIVO, indCapitalNegativo);

			// 2016-07-15 - Si es capital negativo, poner 1 en la marca de fecha primer pago interes, 
			// e indicar el texto correspondiente en las observaciones

			if (medidaSolchaga.equals("1"))
			{
				rellenarObservacionesPrimerPagoInteres(ctxtPrograma, contextoImpresion, indCapitalNegativo);
			}

			// Se rellena campo Anexo (ANPMN100930) con constante sólo si la solicitud es refacionaria
			// Si es refaccionario se asigna el código correspondiente
			boolean esRefaccionario = UtilidadesTramitacion.esRefaccionario(
																	ctxtoSolicitud.getBigDecimal("ANPMN050914"),
																	ctxtoSolicitud.getBigDecimal("ANPMN050080"),
																	ctxtoSolicitud.getBigDecimal("ANPMN050110"),
																	ctxtoSolicitud.getBigDecimal("ANPMN050893"));			
			if(esRefaccionario)
			{
				BigDecimal codigo = obtieneCodigoRefaccionario(ctxtoSolicitud);
				
				if(null != codigo)
				{
					contextoImpresion.put(CTE_ANEXO, codigo);
				}
			}
			else 
			{	
				//23092016 También se rellenaría campo Anexo (ANPMN100930) en caso de tratarse de un préstamo personal comunidad de propietarios
				//con avalistas que tengan un porcentaje de participación menor del 100%
				Integer documentoAnexo = evaluarPorcentajeAvalista(contextoImpresion, ctxtoSolicitud);
				
				if(!Utilidades.isBlankOrNull(documentoAnexo)) 
				{
					contextoImpresion.put(CTE_ANEXO, new BigDecimal(documentoAnexo));
				}
			}

			rellenarConsumidorSueloInicialNuloCuandoCero(contextoImpresion);

			// 2016-12-20 - Se mueve a este punto la funcion que rellena el ind. carencia
			// 2017-01-27 - Para la póliza de momento no es necesario el indicador de carencia
			//rellenarIndicadorCarencia(ctxtoSolicitud,contextoImpresion);
			
			
			break;

		default: break;
		}

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarDatosContexto");	
		}
		aContextoSalida[0] = contextoImpresion;
		return aContextoSalida;
	}


	/**
	 * 
	 * Método que evalúa  si la solicitud se corresponde con un Prestamo Personal 
	 * para comunidad de propietarios (5085) y teniendo avalistas estos participen
	 * en un porcentaje distinto de 100%. 
	 * 
	 * En ese caso devuelve el número de documento que debe llevar el campo anexo en 
	 * el contexto de impresión 
	 * 
	 * @param contextoImpresion
	 * @param ctxtoSolicitud
	 * @return
	 */
	private static Integer evaluarPorcentajeAvalista(IContexto contextoImpresion, IContexto ctxtoSolicitud)
	{
		Integer documento = null;
		List<Integer> listSubProd = new ArrayList<Integer>(0);
		List<ClausulaDocumentoC> documentos = new ArrayList<ClausulaDocumentoC>(0);

		//Se comprueba que el producto sea el de comunidad de propietarios y que tenga avalistas 
		if(UtilidadesComun.esProductoComunidadPropietarios(ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_PROD).toString(), 
				ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_SUBPROD).toString())
				&& !Utilidades.isBlankOrNull(contextoImpresion.getRegistro(ID_REG_FIADORES))) 
		{
			IRegistro[] avalistas = contextoImpresion.getRegistro(ID_REG_FIADORES);

			for (IRegistro avalista : avalistas)
			{
				//si uno de los avalistas tiene un porcentaje de participación inferior a 100
				// se debe recoger el anexo
				if (0 > avalista.getBigDecimal(ID_PROP_PORC_PART_AVALISTA).compareTo(new BigDecimal(100))) 
				{
					listSubProd.add(new Integer(ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_SUBPROD).intValue()));
					//Se busca el Documento del anexo por codigo de producto y subproducto
					documentos = GestionClausulaDocumentos.obtenerClausulasDocumentoSubproducto(
							new Integer(ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_PROD).intValue()), 
							listSubProd);
					//se obtiene el código del documento que debe de ir en el anexo
					for (ClausulaDocumentoC doc : documentos)
					{
						if(CONSTANTE_DOC_ANEXO.equals(doc.getStrTipoDocumento().trim())) 
						{
							documento = doc.getIntModeloDocumento();
							break;
						}
					}

					break;
				}
			}
		}

		return documento;
	}
	
	/**
	 * Método que obtiene de la tabla AN09 el código correspondiente para una solicitud con anexo refaccionario.
	 * 
	 * @param solicitud
	 * @return
	 */
	private static BigDecimal obtieneCodigoRefaccionario(IContexto solicitud)
	{
		BigDecimal codigo = null;
		List<Integer> subProductos = new ArrayList<Integer>(0);
		List<ClausulaDocumentoC> clausulas = new ArrayList<ClausulaDocumentoC>(0);

		subProductos.add(solicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_SUBPROD).intValue());
			
		// Se buscan las cláusulas del documento por codigo de producto y subproducto
		clausulas = GestionClausulaDocumentos.obtenerClausulasDocumentoSubproducto(
																	solicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_PROD).intValue(), 
																	subProductos);
		
		// Se obtiene el código del documento que debe de ir en el anexo
		for (ClausulaDocumentoC clausula : clausulas)
		{
			if("RF".equals(clausula.getStrTipoDocumento().trim())) 
			{
				codigo = new BigDecimal(clausula.getIntModeloDocumento());
				break;
			}
		}
		
		return codigo;
	}

	/**
	 * Método que rellena el campo de comunidad de bienes en el contexto de impresión
	 * a partir del nuc del expediente
	 * 
	 * @param contextoImpresion
	 * @param nucExpediente
	 */
	private static void rellenarImpresionComBienes(final IContexto contextoImpresion,final IContexto ctxtoSolicitud, IContexto[] strCtxtoCuentasPrestamo)
	{
		IContexto[] contextoClientes = new IContexto[0];
		String campoNumCliente = "FC722C0040";
		String campoDeclarable = "FC01C0188";

		//se obtienen los clientes de un expediente
		contextoClientes = GestionConsultaTitularidad.consultarClientesPorContrato(ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC));


		//De manera inicial se setea a cero comunidad de bienes
		BigDecimal esComBienes = BigDecimal.ZERO;

		if (null != contextoClientes)
		{
			for (IContexto iContexto : contextoClientes)
			{
				IContexto[] salidaConsultaDatosCliente = GestionConsultaTitularidad.consultarClientePorClave(iContexto.getBigDecimal(campoNumCliente));
				for (IContexto iContextoCli : salidaConsultaDatosCliente) 
				{
					//Cuando el campo declarable es 4, sí es comunidad de bienes y se setea a 1
					if(iContextoCli.getString(campoDeclarable).equals("4")) 
					{
						esComBienes = BigDecimal.ONE;
						break;
					}
				}

				//Si ya se ha seteado a 1 la comunidad de bienes se sale del bucle "padre"
				if(0 == BigDecimal.ONE.compareTo(esComBienes)) 
				{
					break;
				}

			}
		}
		contextoImpresion.put(ID_PROP_COMUNIDAD_BIENES, esComBienes);

		// 2016-11-02 --> se rellenan los campos del anexo para póliza
		rellenarCamposAnexoComBienes(contextoImpresion,ctxtoSolicitud, strCtxtoCuentasPrestamo);

	}

	/**
	 * Método que devuelve el número de periodos en función del orden del interés
	 * recibido
	 * 
	 * @param aCtxtoIntereses
	 * @param orden
	 * @return
	 */
	private static BigDecimal obtenerNumPeriodosOrdenUno(
			IContexto[] aCtxtoIntereses)
	{
		BigDecimal numPeriodos = null;
		String ordenInteresCampo 	= "ANPMN052040";
		String numPeriodosCampo 	= "ANPMN052430";
		String tipoCondicion		= "ANPMN052050";

		for (IContexto iContexto : aCtxtoIntereses)
		{
			if(0 == BigDecimal.ONE.compareTo(iContexto.getBigDecimal(ordenInteresCampo))
			&& 0 == BigDecimal.ZERO.compareTo(iContexto.getBigDecimal(tipoCondicion)))
			{
				numPeriodos = iContexto.getBigDecimal(numPeriodosCampo);
				break;
			}
		}

		return numPeriodos;
	}

	/**
	 * 
	 * @param idContexto nombre del contexto a buscar
	 * @param aContextos
	 * @return Retorna un array de contextos que coincidan con el nombre que se pasa como parametro
	 */
	private static IContexto[] getArrayContexto(String idContexto, IContexto[] aContextos)
	{
		List<IContexto> lstContexto = new ArrayList<IContexto>(0);
		for (IContexto contexto : aContextos)
		{
			if (idContexto.equals(contexto.getNombre()))
			{
				lstContexto.add(contexto);
			}
		}
		return lstContexto.toArray(new IContexto[0]);
	}
	
	/**
	 * Si la condicion de orden uno es fijo y la condicion de orden dos es variable bonificable
	 * @param aCtxtoIntereses
	 * @return true o false dependiendo de si se cumple o no la condicion
	 */
	private static boolean isPrestamoFijoBonificado(final IContexto[] aCtxtoIntereses){
			
		final String strIntPropTramo = "ANPMN052040";
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";
		boolean cumpleTramoUno = false;
		boolean cumpleTramoDos = false;
		boolean isPrestamoFijoBonificado = false;
	
		IContexto ctxInteresPrimerTramo = null;
		IContexto ctxInteresSegundoTramo = null;
		
		
		
		for (IContexto ctxInteres : aCtxtoIntereses)
		{
			if (Constantes.CTE_BID_1.equals(ctxInteres.getBigDecimal(strIntPropTramo)) &&
					Constantes.INTERES_NIVEL_TIPO_INTERES.equals(ctxInteres.getBigDecimal(strIntPropTipoCondicion)))
			{
				ctxInteresPrimerTramo = ctxInteres;
			}
			
			if (Constantes.CTE_BID_2.equals(ctxInteres.getBigDecimal(strIntPropTramo)) &&
					Constantes.INTERES_NIVEL_TIPO_INTERES.equals(ctxInteres.getBigDecimal(strIntPropTipoCondicion)))
			{
				ctxInteresSegundoTramo = ctxInteres;
			}
		}
		
		if (null != ctxInteresPrimerTramo && Constantes.INTERES_NIVEL_TIPO_INTERES.equals(ctxInteresPrimerTramo.getBigDecimal(strIntPropTipoCondicion)))
		{
			if (Constantes.TIPO_INT_FIJO.equals(ctxInteresPrimerTramo.getString(strIntPropTipoInteres)))
			{
				cumpleTramoUno = true;
			}
		}
		
		if (null != ctxInteresSegundoTramo && Constantes.INTERES_NIVEL_TIPO_INTERES.equals(ctxInteresSegundoTramo.getBigDecimal(strIntPropTipoCondicion)))
		{
			if (Constantes.TIPO_INT_VAR_BONIF.equals(ctxInteresSegundoTramo.getString(strIntPropTipoInteres)))
			{
				cumpleTramoDos = true;
			}
		}
		
		if(cumpleTramoUno && cumpleTramoDos){
			isPrestamoFijoBonificado = true;
		}
		
		return isPrestamoFijoBonificado;
	}

	/**
	 * Para saber si  un préstamo es de interés fijo o variable hay que mirar
	 * el tipo de interés en la tabla AN27TB01,  es decir si existe alguna fila 
	 * con (AN270050=0 AND AN270080 IN (02,03,04,05) )
	 * @param aCtxtoIntereses
	 * @return True si el presatamo es fijo, False en otro caso
	 */
	private static boolean isPrestamoFijo(final IContexto[] aCtxtoIntereses)
	{		
		final String strIntPropTramo = "ANPMN052040";
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";
		final String strIntPropTipoReferencia = "ANPMN052160";
		BigDecimal tipoReferencia = null;

		IContexto ctxInteresSegundoTramo = null;

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion isPrestamoFijo");	
		}
		boolean prestamoFijo = Boolean.TRUE;
		final int aLenght = aCtxtoIntereses.length;
		for (int i=0; i < aLenght && prestamoFijo; i++)
		{
			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion)))
			{
				if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)))
				{
					prestamoFijo = false;
				}
			}
		}

		/*20150204 El préstamo tambien es fijo si el segundo tramo es variable pero su tipo de referencia es no referenciado. 
		 * Se obtiene el segundo tramo de interés, si lo hay.*/

		for (IContexto ctxInteres : aCtxtoIntereses)
		{
			if (Constantes.CTE_BID_2.equals(ctxInteres.getBigDecimal(strIntPropTramo)) &&
					Constantes.INTERES_NIVEL_TIPO_INTERES.equals(ctxInteres.getBigDecimal(strIntPropTipoCondicion)))
			{
				ctxInteresSegundoTramo = ctxInteres;
			}
		}
		if (null != ctxInteresSegundoTramo)
		{
			if (Constantes.TIPO_INT_VARIABLE.equals(ctxInteresSegundoTramo.getString(strIntPropTipoInteres)) ||
					Constantes.TIPO_INT_VAR_BONIF.equals(ctxInteresSegundoTramo.getString(strIntPropTipoInteres)) ||
					Constantes.TIPO_INT_VAR_PENAL.equals(ctxInteresSegundoTramo.getString(strIntPropTipoInteres)) ||
					Constantes.TIPO_INT_VAR_DIF_BONIF.equals(ctxInteresSegundoTramo.getString(strIntPropTipoInteres)))
			{
				tipoReferencia = ctxInteresSegundoTramo.getBigDecimal(strIntPropTipoReferencia);
				prestamoFijo = prestamoFijo || GestionConsultaDatosSolicitud.esTipoReferenciaNoReferenciado(tipoReferencia.toString());
			}

		}

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion isPrestamoFijo");	
		}
		return prestamoFijo;
	}

	//	private static boolean isInteresFijo(final IContexto aCtxtoIntereses)
	//	{		
	//		final String strIntPropTipoCondicion = "ANPMN052050";
	//		final String strIntPropTipoInteres = "ANPMN052080";
	//
	//		if (LOGGER.isDebugEnabled())
	//		{
	//			LOGGER.debug("INICIO ContextoImpresionFormalizacion isPrestamoFijo");	
	//		}
	//		boolean prestamoFijo = Boolean.TRUE;
	//		//final int aLenght = aCtxtoIntereses.length;
	//		
	//			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses.getBigDecimal(strIntPropTipoCondicion)))
	//			{
	//				if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses.getString(strIntPropTipoInteres)) ||
	//						Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses.getString(strIntPropTipoInteres)) ||
	//						Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses.getString(strIntPropTipoInteres)) ||
	//						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses.getString(strIntPropTipoInteres)))
	//				{
	//					prestamoFijo = false;
	//				}
	//			}
	//		
	//		if (LOGGER.isDebugEnabled())
	//		{
	//			LOGGER.debug("FIN ContextoImpresionFormalizacion isInteresFijo");	
	//		}
	//		return prestamoFijo;
	//	}


	// 08-08-2012 se obtiene el primer tramo variable de interes para obtener de este tramo
	// los datos necesarios del tramo variable, Diferencial, periodicidad de revisión....

	private static IContexto getPrimerVariable(final IContexto[] aCtxtoIntereses) {
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion isPrestamoFijo");	
		}
		boolean prestamoFijo = Boolean.TRUE;
		final int aLenght = aCtxtoIntereses.length;
		for (int i=0; i < aLenght && prestamoFijo; i++)
		{
			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion)))
			{
				if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)))
				{
					return aCtxtoIntereses[i];
				}
			}
		}

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion getPrimerVariable");	
		}
		return null;
	}


	/**
	 * Devuelve el registro de interes correspondiente al sustitutivo. Si no lo encuentra
	 * devuelve null.
	 * 
	 * @param aCtxtoIntereses registros de interes
	 * @return registro de interes correspondiente al sustitutivo, null si no lo encuentra.
	 */
	private static IContexto getSustitutivo(final IContexto[] aCtxtoIntereses) {

		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";

		final int aLenght = aCtxtoIntereses.length;

		for (int i = 0; i < aLenght; i ++)
		{
			if (Constantes.INTERES_NIVEL_SUSTITUTIVO.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion)))
			{
				if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres))  ||
						Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)))
				{
					return aCtxtoIntereses[i];
				}
			}
		}

		return null;
	}


	/**
	 * Rellena el contexto consumidor si o no
	 * @param contextoImpresion
	 * @param consumidorSN
	 */
	private static void rellenarImpresionConsumidorNoConsumidor(IContexto contextoImpresion,String consumidorSN) {
		contextoImpresion.put(ID_PROP_CONSUMIDOR_SN, consumidorSN);
	}

	/**
	 * 
	 * @param contextoCorretaje
	 * @param contextoImpresion
	 */
	private static void rellenarImpresionConCtxtoCorretaje(IContexto contextoCorretaje, IContexto contextoImpresion)
	{
		final String CMPO_CTXTO_PROG_CORRETAJE = "ANPMN073060";
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCtxtoCorretaje");	
		}
		if (null != contextoCorretaje)
		{
			contextoImpresion.put(ID_PROP_IMP_CORRETAJE, contextoCorretaje.getBigDecimal(CMPO_CTXTO_PROG_CORRETAJE));
		}
		else
		{
			// Si el corretaje no viene informado se muestra un 0,00
			contextoImpresion.put(ID_PROP_IMP_CORRETAJE, BigDecimal.ZERO);
		}
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCtxtoCorretaje");	
		}

	}

	/**
	 * Rellena la impresion con los datos de la solicitud correspondientes para info previa y informacion normalizada europea
	 * @param contextoDatosSolicitud
	 * @param contextoImpresion
	 * @param paso
	 */
	private static void rellenarImpresionConCntxtoSolicitudInformacionPreviaInformacionNormalizadaEuropea(
			final IContexto contextoDatosSolicitud, final IContexto contextoImpresion, final int paso, final IContexto [] aCtxtoIntereses)
	{

		final String strSolPropNumeroSolicitud = "ANPMN050020";		
		final String strSolPropOficinaSolicitud = "ANPMN050010";
		final String strSolPropDigitoSolicitud = "ANPMN050070";
		//final String strSolPropImporteTotal = "ANPMN050630";
		final String strSolPropCarenciaMeses = "ANPMN050650";
		final String strSolCarenciaInteres  = "ANPMN050670";


		//20161010 Para INE e info previa se rellena Carencia de Interés, Ind.Carencia,Ind.Sol-Cont,Ind.Canal Operación
		contextoImpresion.put(ID_CARENCIA_DE_INTERES, contextoDatosSolicitud.getBigDecimal(strSolCarenciaInteres));
		//rellenarIndicadorCarencia(contextoDatosSolicitud,contextoImpresion);
		rellenarIndicadorSolicitudContrato(contextoDatosSolicitud,contextoImpresion);
		rellenarIndicadorSolicitudCanalOperacion(contextoDatosSolicitud,contextoImpresion);


		contextoImpresion.put(ID_PROP_NUMERO_PRESTAMO, 
				getNumPrestamo(contextoDatosSolicitud, strSolPropOficinaSolicitud, strSolPropNumeroSolicitud, strSolPropDigitoSolicitud));
		//contextoImpresion.put(ID_PROP_IMP_TOTAL_INTERESES, 
		//	UtilidadesTramitacion.bigDecimalToString(
		//		contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal),
		//	6,
		//	2,
		//	false));

		contextoImpresion.put(ID_PROP_PAGO_APLAZ_CARENCIA_MESES, contextoDatosSolicitud.getBigDecimal(strSolPropCarenciaMeses));
	}


	/**
	 * Rellena la impresion con los datos necesarios para la poliza y el contrato de crediventas.
	 * @param contextoDatosSolicitud
	 * @param contextoImpresion
	 * @param paso
	 */
	private static void rellenarImpresionConCntxtoSolicitudPolizaContratoCrediventas(
			final IContexto contextoDatosSolicitud, final IContexto contextoImpresion, final int paso)
	{
		final String strSolPropNumeroSolicitud = "ANPMN050020";
		final String strSolPropOficinaSolicitud = "ANPMN050010";
		final String strSolPropDigitoSolicitud = "ANPMN050070";
		final String strSolPropImporteTotal = "ANPMN050630";
		//			final String strSolPropFechaSolicitud = "ANPMN050915";
		final String strSolPropMonedaImporteTotal = "ANPMN050640";
		//final String strSolPropPlazoTotal = "ANPMN050710";
		final String strSolPropCarenciaMeses = "ANPMN050650";
		//			final String strSolPropFechaFormalizacion = "ANPMN050920";
		//			final String strSolPropMinutaCentralizada = "ANPMN050970";
		//			final String strSolPropCodigoProducto = "ANPMN050080";
		//			final String strSolPropCodigoSubproducto = "ANPMN050090";
		final String strSolPropEspecialidad = "ANPMN050120";
		final String strSolCarenciaInteres  = "ANPMN050670";

		// Se obtiene el número para banca móvil de la AN82
    	BigDecimal numeroSolicitud = new BigDecimal(
    											UtilidadesComun.consultaParametroAgrupacion(
    																					"NUMERO", 
    																					UtilidadesComun.consultaAgrupacion("BMOVIL")
    																					).trim());
    	
    	// Si el número de solicitud es el de la 82, se setea el campo del número de solicitud a blanco
    	if(0 == numeroSolicitud.compareTo(contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud)))
    	{
    		contextoImpresion.put(ID_PROP_NUMERO_PRESTAMO, StringUtils.EMPTY);
    	}
    	else
    	{
	    	if(!contextoDatosSolicitud.getString(strSolPropEspecialidad).equals(Constantes.CTE_ESPECIALIDAD_DIVISA)) 
			{
				contextoImpresion.put(ID_PROP_NUMERO_PRESTAMO,
						Constantes.CTE_CUENTA_CONTABLE_PMOS+"-"+getNumOperacion(contextoDatosSolicitud, strSolPropOficinaSolicitud, strSolPropNumeroSolicitud, strSolPropDigitoSolicitud));
			}
			else {
				//contextoImpresion.put(ID_PROP_NUMERO_PRESTAMO,
				//getNumOperacion(contextoDatosSolicitud, strSolPropOficinaSolicitud, strSolPropNumeroSolicitud, strSolPropDigitoSolicitud));
				contextoImpresion.put(ID_PROP_NUMERO_PRESTAMO, 
						getNumPrestamo(contextoDatosSolicitud, strSolPropOficinaSolicitud, strSolPropNumeroSolicitud, strSolPropDigitoSolicitud));
			}
    	}


		contextoImpresion.put(ID_PROP_NOMBRE_OFICINA, UtilidadesTramitacion.getNombreOficina(
				contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud)));
		
		// Si se trata de una póliza para banca móvil, éste campo saldrá en blanco.
		if(AbstractSolicitudMultimedio.esPreconcedido(
												contextoDatosSolicitud.getBigDecimal("ANPMN050290"), 
												contextoDatosSolicitud.getBigDecimal("ANPMN050320"), 
												contextoDatosSolicitud.getBigDecimal("ANPMN050887")))
		{
			rellenaLugarFecha(contextoImpresion);
			contextoImpresion.put(ID_PROP_LUGAR_Y_FECHA, contextoImpresion.getString("ANPMN100060"));
		}
		else
		{
			contextoImpresion.put(ID_PROP_LUGAR_Y_FECHA, getLugaryFecha(contextoDatosSolicitud));
		}
		
		contextoImpresion.put(ID_PROP_CAPITAL_EN_LETRA, bidImporteToStr(
				contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal),
				contextoDatosSolicitud.getString(strSolPropMonedaImporteTotal),
				Boolean.TRUE));

		switch (paso) {
		//20161010 Para Póliza se rellena Carencia de Interés, Ind.Carencia,Ind.Sol-Cont,Ind.Canal Operación
		case PASO_DOC_POLIZA_PRESTAMO:

			contextoImpresion.put(ID_CARENCIA_DE_INTERES, contextoDatosSolicitud.getBigDecimal(strSolCarenciaInteres));
			//rellenarIndicadorCarencia(contextoDatosSolicitud,contextoImpresion);
			rellenarIndicadorSolicitudContrato(contextoDatosSolicitud,contextoImpresion);
			rellenarIndicadorSolicitudCanalOperacion(contextoDatosSolicitud,contextoImpresion);

			break;

		default:
			break;
		}

		contextoImpresion.put(ID_PROP_PAGO_APLAZ_CARENCIA_MESES, contextoDatosSolicitud.getBigDecimal(strSolPropCarenciaMeses));



	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro.
	 * @param contextoDatosSolicitud
	 * @param contextoImpresion
	 * @param paso Paso que configura datos genericos para todos los impresos
	 */
	private static void rellenarImpresionConCntxtoSolicitud(
			final IContexto contextoDatosSolicitud, final IContexto contextoImpresion, final int paso, final IContexto[] aCtxtoIntereses)
	{
		//final String strSolPropNumeroSolicitud = "ANPMN050020";
		//final String strSolPropOficinaSolicitud = "ANPMN050010";
		//final String strSolPropDigitoSolicitud = "ANPMN050070";
		final String strSolPropImporteTotal = "ANPMN050630";
		//		final String strSolPropFechaSolicitud = "ANPMN050915";
		final String strSolPropMonedaImporteTotal = "ANPMN050640";
		final String strSolPropPlazoTotal = "ANPMN050710";
		//		final String strSolPropFechaFormalizacion = "ANPMN050920";
		//		final String strSolPropMinutaCentralizada = "ANPMN050970";
		//		final String strSolPropCodigoProducto = "ANPMN050080";
		//		final String strSolPropCodigoSubproducto = "ANPMN050090";
		final String strSolImporteSolicitado = "ANPMN050580";
		final String strSolGarantia = "ANPMN050230";


		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoSolicitud");	
		}

		switch (paso)
		{
		case PASO_DOC_IMPRESION_PREVIA:
			rellenarImpresionConCntxtoSolicitudInformacionPreviaInformacionNormalizadaEuropea(contextoDatosSolicitud, contextoImpresion, paso,
					aCtxtoIntereses);
			break;
		case PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA:	
			rellenarImpresionConCntxtoSolicitudInformacionPreviaInformacionNormalizadaEuropea(contextoDatosSolicitud, contextoImpresion, paso,
					aCtxtoIntereses);
			break;
		case PASO_DOC_OFERTA_VINCULANTE:
		case PASO_DOC_POLIZA_PRESTAMO:
			rellenarImpresionConCntxtoSolicitudPolizaContratoCrediventas(contextoDatosSolicitud, contextoImpresion, paso);
			break;
		case PASO_DOC_CONTRATO_CREDIVENTAS:
			rellenarImpresionConCntxtoSolicitudPolizaContratoCrediventas(contextoDatosSolicitud, contextoImpresion, paso);
			break;
		default:
			break;
		}

		// Mapeos comunes a los tres impresos
		contextoImpresion.put(ID_PROP_MONEDA, 
				contextoDatosSolicitud.getString(strSolPropMonedaImporteTotal));
		contextoImpresion.put(ID_PROP_CAPITAL, 
				contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal));
		contextoImpresion.put(ID_PROP_PLAZO_EN_MESES, 
				contextoDatosSolicitud.getBigDecimal(strSolPropPlazoTotal));
		contextoImpresion.put(ID_IMPORTE_SOLICITADO, 
				contextoDatosSolicitud.getBigDecimal(strSolImporteSolicitado));
		
		// Añadido de garantía
		if(null != contextoDatosSolicitud.getBigDecimal(strSolGarantia))
		{
			contextoImpresion.put(ID_GARANTIA, 
					contextoDatosSolicitud.getBigDecimal(strSolGarantia));
		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoSolicitud");	
		}
	}

	/**
	 * 
	 * 
	 * 
	 * @param contextoDatosSolicitud
	 * @param contextoImpresion
	 */
	private static void rellenarIndicadorSolicitudCanalOperacion(
			IContexto contextoDatosSolicitud, IContexto contextoImpresion) {

		final String strSolPropCanal 	= "ANPMN050320";
		final String strSolPropPrescrip = "ANPMN050290";


		if(0 == contextoDatosSolicitud.getBigDecimal(strSolPropCanal).compareTo(BigDecimal.ONE))
		{
			if (0 == contextoDatosSolicitud.getBigDecimal(strSolPropPrescrip).compareTo(BigDecimal.ZERO))
			{
				contextoImpresion.put(ID_INDICADOR_CANAL_OPERACION, BigDecimal.ZERO);
			}
			else if(0 == contextoDatosSolicitud.getBigDecimal(strSolPropPrescrip).compareTo(new BigDecimal(2)))
			{
				contextoImpresion.put(ID_INDICADOR_CANAL_OPERACION, new BigDecimal(2));
			}
		}
		else if(0 == contextoDatosSolicitud.getBigDecimal(strSolPropCanal).compareTo(new BigDecimal(9)))
		{
			contextoImpresion.put(ID_INDICADOR_CANAL_OPERACION, new BigDecimal(9));
		}
	}

	/**
	 * Método que rellena el campo Indicador Solicitud Contrato
	 * a partir de los datos del contexto de la solicitud
	 * 
	 * @param contextoDatosSolicitud
	 * @param contextoImpresion
	 */
	private static void rellenarIndicadorSolicitudContrato(
			IContexto contextoDatosSolicitud, IContexto contextoImpresion) {

		if(UtilidadesComun.esSolicitudContrato(contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_PROD).toString()))
		{
			contextoImpresion.put(ID_INDICADOR_SOLICITUD_CONTRATO, Constantes.SI);
		}
		else
		{
			contextoImpresion.put(ID_INDICADOR_SOLICITUD_CONTRATO, Constantes.NO);
		}
	}

	
	/**
	 * Método que rellena el campo Indicador de carencia del contexto de impresión
	 * a partir de los datos del contexto de la solicitud.
	 * 
	 * Modificacion 2016-12-19:
	 * <ul> 
	 * <li>Si tiene carencia de capital (1):
	 *     <ul>
	 *     <li>Si plazo tramo inicial = num. meses carencia capital --> ind. carencia = 3</li>
	 *     <li>Si plazo tramo inicial < num. meses carencia capital --> ind. carencia = 5</li
	 *     </ul>
	 * </li>
	 * <li>Si tiene carencia de capital e intereses (2):
	 *     <ul>
	 *     <li>Si plazo tramo inicial = num. meses carencia interes --> ind. carencia = 4</li>
	 *     </ul>
	 * </li>
	 * </ul>
	 * @param contextoDatosSolicitud contexto con los datos de la solicitud.
	 * @param contextoImpresion contexto de impresion.
	 */
	private static void rellenarIndicadorCarencia(IContexto contextoDatosSolicitud, 
		IContexto contextoImpresion) 
	{

		// Inicializaciones
		BigDecimal indicadorCarencia = null;
		//BigDecimal periodoInicial = null;
		BigDecimal plazoTramoInicial = null;
		//BigDecimal plazoTramoIntereses = null;
		BigDecimal carenciaCapital = null;
		BigDecimal carenciaInteres = null;
		BigDecimal carenciaTotal = null;
						
		
		/* ----------------------------------------------------------------------------------------- */
		/* Obtener valores carencia capital, carencia interes, periodo inicial a partir de solicitud */
		/* ----------------------------------------------------------------------------------------- */

		// Campos contextos solicitud
		//final String strSolPropCarenciaMeses 	= "ANPMN050650"; // Carencia capital solicitud
		final String strSolCarenciaInteres  	= "ANPMN050670"; // Carencia interes solicitud
		//final String strSolOrdenInteres			= "ANPMN052040"; // Orden condicion interes solicitud
		//final String strSolPlazoTramoInteres	= "ANPMN052110"; // Plazo tramo interes solicitud

		// Obtener valores
		//carenciaCapital = contextoDatosSolicitud.getBigDecimal(strSolPropCarenciaMeses);
		carenciaTotal = contextoDatosSolicitud.getBigDecimal(strSolCarenciaInteres);	
		
		/*for (IContexto ctxInteres : contextosInteres)
		{
			if (0 == BigDecimal.ONE.compareTo(ctxInteres.getBigDecimal(strSolOrdenInteres)))
			{
				plazoTramoIntereses =  ctxInteres.getBigDecimal(strSolPlazoTramoInteres);
				break;
			}
		}
		if((!UtilidadesTramitacion.isBlankOrNull(plazoTramoIntereses) &&
				(!UtilidadesTramitacion.isBlankOrNull(carenciaCapital))))
		{
			periodoInicial = (plazoTramoIntereses).subtract(carenciaCapital);
		}
		*/
		
		/* --------------------------------------------------------------------------------------------- */
		/* Obtener valores carencia capital, carencia interes, periodo inicial a partir de ctx impresion */
		/* --------------------------------------------------------------------------------------------- */
		
		// Campos contexto impresion
		final String strImpMesesCarenciaCapital = "ANPMN100580"; // Carencia capital ctx. impresion
		final String strImpMesesCarenciaInteres = "ANPMN100992"; // Carencia interes ctx. impresion
		//final String strImpMesesPeriodoInicial  = "ANPMN100999"; // Periodo inicial ctx. impresion
		final String strImpMesesPlazoTramoInicial = "ANPMN100991"; // Meses del tramo inicial ctx. impresion

		// Obtener valores
		carenciaCapital = contextoImpresion.getBigDecimal(strImpMesesCarenciaCapital);
		carenciaInteres = contextoImpresion.getBigDecimal(strImpMesesCarenciaInteres);			
		//periodoInicial = contextoImpresion.getBigDecimal(strImpMesesPeriodoInicial);
		plazoTramoInicial = contextoImpresion.getBigDecimal(strImpMesesPlazoTramoInicial);
		
		if ((null != carenciaCapital) && (null != carenciaInteres) && (null != plazoTramoInicial))
		{
			// Si tiene carencia de capital y de interes:
			// - Si plazo tramo inicial = carencia interes --> indicador carencia = 4
			// - Resto de casos						       --> indicador carencia = 2
			if(0 < carenciaCapital.compareTo(BigDecimal.ZERO)
					&& 0 < (carenciaInteres.compareTo(BigDecimal.ZERO)))
			{
				// Tiene carencia de capital e interes
				if (0 == plazoTramoInicial.compareTo(carenciaInteres)) 
				{
					// Periodo inicial = carencia interes
					indicadorCarencia = new BigDecimal(4);
				} 
				else 
				{
					// Resto de casos
					indicadorCarencia = new BigDecimal(2);
				}
			}
			
			// Si solo tiene carencia de capital:
			// - Si plazo tramo inicial = carencia capital --> indicador carencia = 3
			// - Si plazo tramo inicial < carencia capital --> indicador carencia = 5
			// - Resto de casos		   				       --> indicador carencia = 1
			else if(0 < carenciaCapital.compareTo(BigDecimal.ZERO))
			{
				// Solo tiene carencia de capital
				if (0 == plazoTramoInicial.compareTo(carenciaCapital)) 
				{
					// Periodo inicial = carencia capital
					indicadorCarencia = new BigDecimal(3);
				} 
				else 
				{
					if (0 > plazoTramoInicial.compareTo(carenciaCapital)) 
					{	
						// Periodo inicial < carencia capital
						indicadorCarencia = new BigDecimal(5);
					} 
					else 
					{
						// Resto de casos
						indicadorCarencia = BigDecimal.ONE;
					}
				}
			}
			
			// En caso de no tener carencia de capital ni interes lleva un cero
			else if(0 == carenciaCapital.compareTo(BigDecimal.ZERO)
					&& 0 == (carenciaInteres.compareTo(BigDecimal.ZERO)))
			{
				// No tiene carencia de capital ni interes
				indicadorCarencia = BigDecimal.ZERO;
			}
		}
		
		if(null != plazoTramoInicial 
		&& null != carenciaTotal
		&& plazoTramoInicial.intValue() < carenciaTotal.intValue())
		{
			indicadorCarencia = new BigDecimal(6);
		}
		
		// Rellenar indicador de carencia
		contextoImpresion.put(ID_INDICADOR_DE_CARENCIA, indicadorCarencia);
	}

	
	/**
	 * Usa el servicio 100-601 para transformar un importe en letra
	 * @param cantidad
	 * @param moneda
	 * @param conParentesis
	 * @return Retorna en letra el valor cantidad pasado como parámetro
	 */
	private static String bidImporteToStr(final BigDecimal cantidad, final String moneda, final Boolean conParentesis)
	{
		final int iCGAL = 100;
		final int iCodop = 601;
		final String strCampoEntradaCantidad = "CANTIDAD";
		final String strCampoSalidaLetra = "CGALN027010";

		final IDatosEntradaTx datosEntrada = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), iCGAL, iCodop);
		datosEntrada.addCampo(strCampoEntradaCantidad, cantidad);
		final IContexto []aContextoSalida = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntrada);
		String strLetra = Constantes.CTE_STRING_EMPTY;
		if (aContextoSalida.length > 0)
		{
			strLetra = aContextoSalida[0].getString(strCampoSalidaLetra);
			String strDescDivisa = Constantes.CTE_STRING_EMPTY;
			if (!UtilidadesTramitacion.isBlankOrNull(moneda))
			{
				strDescDivisa = getDescripcionDivisa(moneda);
			}
			if (conParentesis)
			{
				strLetra = Constantes.CTE_LETRA_PARENT_AB + strLetra.trim() + Constantes.CTE_STRING_BLANK + strDescDivisa + Constantes.CTE_LETRA_PARENT_CI;
			}
		}
		return strLetra;
	}

	/**
	 * @param contextoDatosSolicitud
	 * @param strSolPropOficinaSolicitud
	 * @param strSolPropNumeroSolicitud
	 * @param strSolPropDigitoSolicitud
	 * @return Devuelve el numero de operacion a partir de los datos de solicitud:
	 * OOOO-SSSSSS/D <br>
	 * Donde O: Nº Oficia, S: Nº de solicitud y D es el digito de la solicitud
	 */
	private static String getNumOperacion(IContexto contextoDatosSolicitud,
			String strSolPropOficinaSolicitud,
			String strSolPropNumeroSolicitud,
			String strSolPropDigitoSolicitud)
	{
		final StringBuilder sb = new StringBuilder(13);
		sb.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud).toString(), LengthConstants.LENGTH_0004, '0'));
		sb.append(Constantes.CTE_STRING_GUION);
		sb.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud).toString(), 6, '0'));
		sb.append(Constantes.CTE_STRING_BARRA);
		sb.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropDigitoSolicitud).toString(), 1, '0'));
		return sb.toString();
	}

	/**
	 * 
	 * @param contextoDatosSolicitud
	 * @param strSolPropMonedaImporteTotal
	 * @param strSolPropOficinaSolicitud
	 * @param strSolPropNumeroSolicitud
	 * @param strSolPropDigitoSolicitud
	 * @return Devuelve el numero de prestamo a partir de los datos de solicitud: 
	 * MMM-OOOO-SSSSSS-D
	 */
	private static String getNumPrestamo(IContexto contextoDatosSolicitud,
			String strSolPropOficinaSolicitud,
			String strSolPropNumeroSolicitud, String strSolPropDigitoSolicitud)
	{
		final StringBuilder strbNumPrstamo = new StringBuilder(13);
		strbNumPrstamo.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud).toString(), LengthConstants.LENGTH_0004, '0'));
		strbNumPrstamo.append(Constantes.CTE_STRING_GUION + Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud).toString(), 6, '0'));
		strbNumPrstamo.append(Constantes.CTE_STRING_GUION + Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropDigitoSolicitud).toString(), 1, '0'));
		return strbNumPrstamo.toString();
	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro. Guarda:
	 * @param contextoSubproducto
	 * @param contextoImpresion Contexto que se mandará a impresión
	 */
	private static void rellenarImpresionConCntxtoSubProducto(
			final IContexto contextoSubproducto, final IContexto contextoImpresion)
	{
		final String strPrdctoDescripcion = "ANPMN002040";

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarDatosContextoSubProducto");	
		}
		contextoImpresion.put(ID_PROP_TIPO_PRESTAMO, contextoSubproducto.getString(strPrdctoDescripcion));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarDatosContextoSubProducto");	
		}
	}


	/**
	 * Rellena la impresion con el contexto de condiciones de capital para la info previa y la informacion normalizada  europea
	 * @param contextoCondicionesCapital
	 * @param contextoImpresion
	 * @param isPrestamoVariable
	 * @param paso
	 */
	private static void rellenarImpresionConCntxtoCondicionesCapitalInformacionPreviaInformacionNormalizadaEuropea(
			final IContexto contextoCondicionesCapital, final IContexto contextoImpresion,
			final Boolean isPrestamoVariable,
			final Integer paso)
	{
		final String strCondPropMDA = "ANPMN051090";
		final String strCondPropIntNumPeriodos = "ANPMN051150";
		final String strCondPropStrUnidadPeriodo = "ANPMN051160";
		final String strCondPropIntTipoPeriodo = "ANPMN051170";
		final String strCondPropPagoUnico = "ANPMN051180";

		final ModalidadAmortizacionC modalidad = new ModalidadAmortizacionC();
		modalidad.setMDA(contextoCondicionesCapital.getBigDecimal(strCondPropMDA).intValue());
		final String strModalidad = GestionModalidadesAmortizacion.obtenerDescripcionModalidadAmortizacion(modalidad);

		contextoImpresion.put(ID_PROP_MODALIDAD_AMORTIZACION, strModalidad);
		contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS, getDescPeriodoRevision(
				contextoCondicionesCapital.getString(strCondPropPagoUnico),
				contextoCondicionesCapital.getBigDecimal(strCondPropIntNumPeriodos), 
				contextoCondicionesCapital.getString(strCondPropStrUnidadPeriodo),  
				contextoCondicionesCapital.getBigDecimal(strCondPropIntTipoPeriodo),
				paso,
				Boolean.FALSE));
		if (isPrestamoVariable)
		{
			contextoImpresion.put(ID_PROP_TIPO_REFER_SUST, RESTO_PERIODOS);
		}
	}



	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoCondicionesCapital
	 * @param contextoImpresion Contexto que se mandará a impresión
	 * @param isPrestamoVariable True si es variable, false en otro caso
	 * @param paso
	 */
	private static void rellenarImpresionConCntxtoCondicionesCapital(
			final IContexto contextoCondicionesCapital, final IContexto contextoImpresion,
			final Boolean isPrestamoVariable,
			final Integer paso)
	{
		//final String strCondPropMDA = "ANPMN051090";
		final String strCondPropIntNumPeriodos = "ANPMN051150";
		final String strCondPropStrUnidadPeriodo = "ANPMN051160";
		final String strCondPropIntTipoPeriodo = "ANPMN051170";
		final String strCondPropPagoUnico = "ANPMN051180";

		if (null != contextoCondicionesCapital)
		{
			if (LOGGER.isDebugEnabled())
			{
				LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoCondicionesCapital");	
			}
			switch (paso)
			{
			case PASO_DOC_IMPRESION_PREVIA:
				rellenarImpresionConCntxtoCondicionesCapitalInformacionPreviaInformacionNormalizadaEuropea(contextoCondicionesCapital, contextoImpresion, isPrestamoVariable, paso);
				break;
			case PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA:
				rellenarImpresionConCntxtoCondicionesCapitalInformacionPreviaInformacionNormalizadaEuropea(contextoCondicionesCapital, contextoImpresion, isPrestamoVariable, paso);

				break;
			case PASO_DOC_POLIZA_PRESTAMO:
			case PASO_DOC_CONTRATO_CREDIVENTAS:
				contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS, getDescPeriodoRevision(
						contextoCondicionesCapital.getString(strCondPropPagoUnico),
						contextoCondicionesCapital.getBigDecimal(strCondPropIntNumPeriodos), 
						contextoCondicionesCapital.getString(strCondPropStrUnidadPeriodo),  
						contextoCondicionesCapital.getBigDecimal(strCondPropIntTipoPeriodo),
						paso,
						Boolean.FALSE));
				break;
			case PASO_DOC_OFERTA_VINCULANTE:
				contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS, getDescPeriodoRevision(
						contextoCondicionesCapital.getString(strCondPropPagoUnico),
						contextoCondicionesCapital.getBigDecimal(strCondPropIntNumPeriodos), 
						contextoCondicionesCapital.getString(strCondPropStrUnidadPeriodo),  
						contextoCondicionesCapital.getBigDecimal(strCondPropIntTipoPeriodo),
						paso,
						Boolean.FALSE));
				break;
			default:
				break;
			}
			if (LOGGER.isDebugEnabled())
			{
				LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoCondicionesCapital");	
			}
		}
	}

	/**
	 * Rellena la impresion de los datos de interés para la informacion previa y la informacion normalizada europea
	 * @param aContextoInteres
	 * @param contextoImpresion
	 * @param bolPrestamoFijo
	 * @param paso
	 * @param esMulticredito
	 */
	private static void rellenarImpresionConCntxtoInteresInfoPreviaInfoNormalizada(final IContexto[] aContextoInteres, final IContexto contextoImpresion,
			final Boolean bolPrestamoFijo, final int paso, final boolean esMulticredito) {

		final String strIntPropOrdenTramo = "ANPMN052040";
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";
		final String strIntPropTipoReferencia = "ANPMN052160";
		final String strIntPropPorcTipoInteres = "ANPMN052130";
		final String strPropDirefencial = "ANPMN052270";
		final String strIntPropPorcDemora = "ANPMN052340";
		final String strIntNumPeriodoIntRev = "ANPMN052380";
		final String strIntPropIntNumPeriodo = "ANPMN052430";
		final String strIntPropStrUnidadPeriodo = "ANPMN052440";
		final String strIntPropStrUnidadPeriodoRev = "ANPMN052400";
		final String strIntPropIntTipoPeriodo = "ANPMN052450";
		final String strPropIntPagoUnico = "ANPMN052460";
		//		final String strIntPropIntMargen = "ANPMN052250";
		//		final String strIntPropPorcMaximo = "ANPMN052570";
		//		final String strIntPropPorcMinimo = "ANPMN052520";
		final String strSuelo = "ANPMN052550";
		final String strSueloInteresInicial = "ANPMN052530";		
		final String strAplicaSueloAInteresInicial = "ANPMN052520";
		final String strSobreQueAplicaSuelo = "ANPMN052590";
		final String strTecho = "ANPMN052570";
		/*20150205 Cuando la descripción del tipo de referencia es "FIJO" enviamos el campo ANPMN100250 a blancos.*/
		String descrTipoReferencia = null;

		for (IContexto contextoInteres : aContextoInteres)
		{
			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(contextoInteres.getBigDecimal(strIntPropTipoCondicion)))
			{
				if (BigDecimal.ONE.equals(contextoInteres.getBigDecimal(strIntPropOrdenTramo)) && 
						(Constantes.TIPO_INT_FIJO.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
								Constantes.TIPO_INT_FIJO_PENLZABLE.equals(contextoInteres.getString(strIntPropTipoInteres))))
				{
					if (bolPrestamoFijo && 
							UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_PORC_INTERES_INICIAL)))
					{
						contextoImpresion.put(ID_PROP_PORC_INTERES_INICIAL, 
								UtilidadesTramitacion.bigDecimalToString(
										contextoInteres.getBigDecimal(strIntPropPorcTipoInteres),
										LengthConstants.LENGTH_0003,
										LengthConstants.LENGTH_0004,
										true));
					}
				}


				if (BigDecimal.ONE.equals(contextoInteres.getBigDecimal(strIntPropOrdenTramo)) && 
						UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_SUCESISVOS_PAGOS_INT)) &&
						(Constantes.TIPO_INT_FIJO.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
								Constantes.TIPO_INT_FIJO_PENLZABLE.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
								Constantes.TIPO_INT_VARIABLE.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
								Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
								Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
								Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres))))
				{
					contextoImpresion.put(ID_PROP_SUCESISVOS_PAGOS_INT,
							getDescPeriodoRevision(
									contextoInteres.getString(strPropIntPagoUnico),
									contextoInteres.getBigDecimal(strIntPropIntNumPeriodo),
									contextoInteres.getString(strIntPropStrUnidadPeriodo),
									contextoInteres.getBigDecimal(strIntPropIntTipoPeriodo),
									paso,
									Boolean.FALSE));
				}

				if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getBigDecimal(ID_PROP_IMP_RECARGO_DEMORA)))
				{
					contextoImpresion.put(ID_PROP_IMP_RECARGO_DEMORA, 
							contextoInteres.getBigDecimal(strIntPropPorcDemora));
				}
				if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_TIPO_REFER_PRINCIPAL)))
				{
					if (GestionConsultaDatosSolicitud.esTipoReferenciaNoReferenciado(contextoInteres.getBigDecimal(strIntPropTipoReferencia).toString()))
					{
						contextoImpresion.put(ID_PROP_TIPO_REFER_PRINCIPAL, StringUtils.EMPTY);
					}
					else
					{
						descrTipoReferencia = UtilidadesTramitacion.comprobarDatoNull(
								getStrDescrTipoReferencia(contextoInteres.getBigDecimal(strIntPropTipoReferencia)));
						if (! Constantes.CTE_STR_FIJO.equals(descrTipoReferencia))
						{
							contextoImpresion.put(ID_PROP_TIPO_REFER_PRINCIPAL, 
									descrTipoReferencia);
						}
						else
						{
							contextoImpresion.put(ID_PROP_TIPO_REFER_PRINCIPAL, StringUtils.EMPTY);
						}
					}
				}

				//Modificacion para incluir suelo y techo en la informacion previa
				if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strAplicaSueloAInteresInicial))) {
					contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
							contextoInteres.getBigDecimal(strSueloInteresInicial),
							LengthConstants.LENGTH_0003,
							LengthConstants.LENGTH_0006, 
							true));
				}else if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
					contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
							contextoInteres.getBigDecimal(strSuelo), 
							LengthConstants.LENGTH_0003, 
							LengthConstants.LENGTH_0006, true));
				}

				if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
					contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO, UtilidadesTramitacion.bigDecimalToString(
							contextoInteres.getBigDecimal(strTecho),
							LengthConstants.LENGTH_0003, 
							LengthConstants.LENGTH_0006,
							true));
				}
			}
			else if (Constantes.INTERES_NIVEL_SUSTITUTIVO.equals(contextoInteres.getBigDecimal(strIntPropTipoCondicion)))
			{
				//						contextoImpresion.put(ID_PROP_PORC_MARGEN_SUST, contextoInteres.getBigDecimal(strIntPropIntMargen));
				//						contextoImpresion.put(ID_PROP_TIPO_REFER_SUST, 
				//								getStrDescrTipoReferencia(contextoInteres.getBigDecimal(strIntPropTipoReferencia)));
			}

		}

		final IContexto contextoInteresPrimerVariableA = getPrimerVariable(aContextoInteres);

		if (!bolPrestamoFijo && 
				UtilidadesTramitacion.isBlankOrNull(contextoInteresPrimerVariableA.getString(ID_PROP_PERIODICIDAD_REVISION)) &&
				//BigDecimal.ONE.equals(contextoInteresPrimerVariableA.getBigDecimal(strIntPropOrdenTramo)) && 
				(Constantes.TIPO_INT_VARIABLE.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres))))
		{
			contextoImpresion.put(ID_PROP_MARGEN_PRINCIPAL, contextoInteresPrimerVariableA.getBigDecimal(strPropDirefencial));

			contextoImpresion.put(ID_PROP_PERIODICIDAD_REVISION,
					getDescPeriodoRevision(
							null,
							contextoInteresPrimerVariableA.getBigDecimal(strIntNumPeriodoIntRev),
							contextoInteresPrimerVariableA.getString(strIntPropStrUnidadPeriodoRev),
							contextoInteresPrimerVariableA.getBigDecimal(strIntPropIntTipoPeriodo),
							paso,
							Boolean.FALSE));

		}
	}

	/**
	 * Rellena los datos de interés para el contrato de crediventas.
	 * @param aContextoInteres
	 * @param contextoImpresion
	 * @param bolPrestamoFijo
	 * @param paso
	 * @param esMulticredito
	 */
	public static void rellenarImpresionConCntxtoInteresContratoCrediventas(final IContexto[] aContextoInteres, final IContexto contextoImpresion) {


		final String strIntPropPorcDemora = "ANPMN052340";
		final String strSuelo = "ANPMN052550";
		final String strSueloInteresInicial = "ANPMN052530";		
		final String strAplicaSueloAInteresInicial = "ANPMN052520";
		final String strSobreQueAplicaSuelo = "ANPMN052590";
		final String strTecho = "ANPMN052570";


		for (IContexto contextoInteres : aContextoInteres)
		{
			if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getBigDecimal(ID_PROP_IMP_RECARGO_DEMORA)))
			{
				contextoImpresion.put(ID_PROP_IMP_RECARGO_DEMORA, 
						contextoInteres.getBigDecimal(strIntPropPorcDemora));	
			}

			//Modificacion para incluir suelo y techo en la informacion previa
			if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strAplicaSueloAInteresInicial))) {
				contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
						contextoInteres.getBigDecimal(strSueloInteresInicial),
						LengthConstants.LENGTH_0003,
						LengthConstants.LENGTH_0004, 
						true));
			}else if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
				contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
						contextoInteres.getBigDecimal(strSuelo), 
						LengthConstants.LENGTH_0003, 
						LengthConstants.LENGTH_0004, true));
			}

			if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
				contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO, UtilidadesTramitacion.bigDecimalToString(
						contextoInteres.getBigDecimal(strTecho),
						LengthConstants.LENGTH_0003, 
						LengthConstants.LENGTH_0004,
						true));
			}				

		}

	}



	/**
	 * Rellena los campos de interes para la poliza y el contrato crediventas
	 * @param aContextoInteres
	 * @param contextoImpresion
	 * @param bolPrestamoFijo
	 * @param paso
	 * @param esMulticredito
	 */
	public static void rellenarImpresionConCntxtoInteresPoliza(final IContexto[] aContextoInteres, 
			final IContexto contextoImpresion,final Boolean bolPrestamoFijo, final int paso, 
			final boolean esMulticredito, final boolean esConcesionario, final IContexto contextoPrograma,
			final boolean esDivisa) 
	{

		// Campos contexto interes
		//final String strIntPropOrdenTramo = "ANPMN052040";
		final String strPlazo = "ANPMN052110";
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";
		final String strIntPropTipoReferencia = "ANPMN052160";
		//final String strIntPropPorcTipoInteres = "ANPMN052130";
		final String strPropDirefencial = "ANPMN052270";
		final String strIntPropPorcDemora = "ANPMN052340";
		//final String strIntNumPeriodoIntRev = "ANPMN052380";
		final String strIntPropIntNumPeriodo = "ANPMN052430";
		final String strIntPropStrUnidadPeriodo = "ANPMN052440";
		//final String strIntPropStrUnidadPeriodoRev = "ANPMN052400";
		final String strIntPropIntTipoPeriodo = "ANPMN052450";
		final String strPropIntPagoUnico = "ANPMN052460";
		//final String strIntPropIntMargen = "ANPMN052250";
		//final String strIntPropPorcMaximo = "ANPMN052570";
		//final String strIntPropPorcMinimo = "ANPMN052520";
		final String strSuelo = "ANPMN052550";
		final String strSueloInteresInicial = "ANPMN052530";		
		final String strAplicaSueloAInteresInicial = "ANPMN052520";
		final String strSobreQueAplicaSuelo = "ANPMN052590";
		final String strTecho = "ANPMN052570";

		// Campo contexto programa (solo para interes fijo)
		final String strCtxtoCmpoImpInteres = "ANPMN075390";
		// 20150205 Cuando la descripción del tipo de referencia es "FIJO" enviamos el campo ANPMN100250 a blancos.
		//String descrTipoReferencia = null;


		// Obtener primer variable
		//final IContexto contextoInteresPrimerVariable = getPrimerVariable(aContextoInteres);
		IContexto contextoInteresPrimerVariable = getPrimerVariable(aContextoInteres);

		// Si no hay variable, coger primer tramo
		if ((null == contextoInteresPrimerVariable) && 
				(null != aContextoInteres) && (0 < aContextoInteres.length))
		{
			contextoInteresPrimerVariable = aContextoInteres[0];
		}

		if (null != contextoInteresPrimerVariable && Constantes.INTERES_NIVEL_TIPO_INTERES.equals(
				contextoInteresPrimerVariable.getBigDecimal(strIntPropTipoCondicion)))
		{
			if (UtilidadesTramitacion.isBlankOrNull(contextoInteresPrimerVariable.getString(ID_PROP_SUCESISVOS_PAGOS_INT)) &&
					//BigDecimal.ONE.equals(contextoInteres.getBigDecimal(strIntPropOrdenTramo)) && 
					(Constantes.TIPO_INT_VARIABLE.equals(contextoInteresPrimerVariable.getString(strIntPropTipoInteres)) ||
							Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteresPrimerVariable.getString(strIntPropTipoInteres)) ||
							Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteresPrimerVariable.getString(strIntPropTipoInteres)) ||
							Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteresPrimerVariable.getString(strIntPropTipoInteres)) || 
							Constantes.TIPO_INT_FIJO.equals(contextoInteresPrimerVariable.getString(strIntPropTipoInteres)))) 
			{
				contextoImpresion.put(ID_PROP_SUCESISVOS_PAGOS_INT,
						getDescPeriodoRevision(
								contextoInteresPrimerVariable.getString(strPropIntPagoUnico),
								contextoInteresPrimerVariable.getBigDecimal(strIntPropIntNumPeriodo),
								contextoInteresPrimerVariable.getString(strIntPropStrUnidadPeriodo),
								contextoInteresPrimerVariable.getBigDecimal(strIntPropIntTipoPeriodo),
								paso,
								Boolean.FALSE));

				// 2016-07-15 - Se sustituye la comprobacion esMulticredito/esConcesionario por
				// la comprobacion del campo especialidad de la solicitud:
				// - Si especialidad =  'D' (es divisa): dias liquid. en texto (MENSUAL, TRIMESTRAL...)
				// - Si especialidad <> 'D' (no es divisa): dias liquid. en numero (30, 90, ...)
				//if (esMulticredito || esConcesionario) 
				//{
				//	contextoImpresion.put(ID_PROP_DIAS_LIQUIDACION, getDescDuracionPeriodosMulticredito(
				//			contextoInteresPrimerVariable.getBigDecimal(strIntPropIntNumPeriodo),
				//			contextoInteresPrimerVariable.getString(strIntPropStrUnidadPeriodo)));
				//}
				//else 
				//{
				//	contextoImpresion.put(ID_PROP_DIAS_LIQUIDACION, getDescDuracionPeriodos(
				//			contextoInteresPrimerVariable.getBigDecimal(strIntPropIntNumPeriodo),
				//			contextoInteresPrimerVariable.getString(strIntPropStrUnidadPeriodo)));
				//}			 
				if (esDivisa)
				{	
					// Especialidad = 'D' (es divisa): dias liquid. en texto (MENSUAL, TRIMESTRAL...)
					contextoImpresion.put(ID_PROP_DIAS_LIQUIDACION, getDescDuracionPeriodos(
							contextoInteresPrimerVariable.getBigDecimal(strIntPropIntNumPeriodo),
							contextoInteresPrimerVariable.getString(strIntPropStrUnidadPeriodo)));
				}
				else 
				{
					boolean pagoUnico = false;
					String pagoUnicoVencimientoFinal = contextoInteresPrimerVariable.getString("ANPMN052460");
					
					// Se comprueba si es un pago único en la fecha de vencimiento
					if(null != pagoUnicoVencimientoFinal)
					{
						pagoUnico = 0 == "1".compareTo(pagoUnicoVencimientoFinal.trim());
					}
					
					BigDecimal plazo = contextoInteresPrimerVariable.getBigDecimal(strPlazo);
					
					// Especialidad <> 'D' (no es divisa): dias liquid en numero (30, 90, ...)
					contextoImpresion.put(ID_PROP_DIAS_LIQUIDACION, getDescDuracionPeriodosMulticredito(
							contextoInteresPrimerVariable.getBigDecimal(strIntPropIntNumPeriodo),
							contextoInteresPrimerVariable.getString(strIntPropStrUnidadPeriodo),
							pagoUnico, plazo));
				}				

				contextoImpresion.put(ID_PROP_MARGEN_PRINCIPAL, contextoInteresPrimerVariable.getBigDecimal(strPropDirefencial));

				contextoImpresion.put(ID_PROP_TIPO_REFER_PRINCIPAL, 
						getStrDescrTipoReferencia(contextoInteresPrimerVariable.getBigDecimal(strIntPropTipoReferencia)));

			}

			for (IContexto contextoInteres : aContextoInteres)
			{
				if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getBigDecimal(ID_PROP_IMP_RECARGO_DEMORA)))
				{
					contextoImpresion.put(ID_PROP_IMP_RECARGO_DEMORA, 
							contextoInteres.getBigDecimal(strIntPropPorcDemora));	
				}

				// Modificacion para incluir suelo y techo en la informacion previa 
				if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strAplicaSueloAInteresInicial))) 
				{
					contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
							contextoInteres.getBigDecimal(strSueloInteresInicial),
							LengthConstants.LENGTH_0003,
							LengthConstants.LENGTH_0004, 
							true));
				}
				else
				{ 
					if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) 
					{

						contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
								contextoInteres.getBigDecimal(strSuelo), 
								LengthConstants.LENGTH_0003, 
								LengthConstants.LENGTH_0004, true));

					}
					else
					{
						if (Constantes.TIPO_INT_FIJO.equals(contextoInteresPrimerVariable.getString(strIntPropTipoInteres)))
						{
							// Si es fijo: el interes ordinario es igual que el inicial
							contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
									contextoPrograma.getBigDecimal(strCtxtoCmpoImpInteres.trim()),
									LengthConstants.LENGTH_0003,
									LengthConstants.LENGTH_0004,
									true));
						}
					}
				}

				if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) 
				{

					contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO, UtilidadesTramitacion.bigDecimalToString(
							contextoInteres.getBigDecimal(strTecho),
							LengthConstants.LENGTH_0003, 
							LengthConstants.LENGTH_0004,
							true));



				}
			}

			//	for (IContexto contextoInteres : aContextoInteres)
			//	{
			//		if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_TIPO_REFER_PRINCIPAL)))
			//		{
			//			contextoImpresion.put(ID_PROP_TIPO_REFER_PRINCIPAL, 
			//				getStrDescrTipoReferencia(contextoInteres.getBigDecimal(strIntPropTipoReferencia)));
			//		}
			//	}
		}
	}


	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro. 
	 * 
	 * @param contextoInteres
	 * @param contextoImpresion Contexto que se mandará a impresión
	 * @param bolPrestamoFijo True si el prestamo es fijo, false en otro caso
	 * @param paso 
	 */
	private static void rellenarImpresionConCntxtoInteres(
			final IContexto[] aContextoInteres, final IContexto contextoImpresion,
			final Boolean bolPrestamoFijo, final int paso, final boolean esMulticredito, 
			final boolean esConcesionario, IContexto contextoPrograma, boolean esDivisa)
	{		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoInteres");	
		}

		switch (paso)
		{
		case PASO_DOC_IMPRESION_PREVIA:
			rellenarImpresionConCntxtoInteresInfoPreviaInfoNormalizada(aContextoInteres, contextoImpresion, 
					bolPrestamoFijo, paso, esMulticredito);
			break;
		case PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA:
			rellenarImpresionConCntxtoInteresInfoPreviaInfoNormalizada(aContextoInteres, contextoImpresion, 
					bolPrestamoFijo, paso, esMulticredito);
			break;
		case PASO_DOC_OFERTA_VINCULANTE:
			//rellenarImpresionTipoInteresMargenSustitutivo(aContextoInteres, contextoImpresion);
			//rellenarImpresionPeriodicidadRevision(aContextoInteres, bolPrestamoFijo, paso, contextoImpresion);
			//break;
		case PASO_DOC_POLIZA_PRESTAMO:
			rellenarImpresionConCntxtoInteresPoliza(aContextoInteres, contextoImpresion, bolPrestamoFijo, 
					paso, esMulticredito, esConcesionario, contextoPrograma, esDivisa);
			rellenarImpresionTipoInteresMargenSustitutivo(aContextoInteres, contextoImpresion);
			rellenarImpresionPeriodicidadRevision(aContextoInteres, bolPrestamoFijo, paso, contextoImpresion);
			break;
		case PASO_DOC_CONTRATO_CREDIVENTAS:
			rellenarImpresionConCntxtoInteresContratoCrediventas(aContextoInteres, contextoImpresion);
			break;
		default:
			break;
		}

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoInteres");	
		}
	}

	/**
	 * @param bidPagoUnico
	 * @param bidNumPeriodos
	 * @param strUnidadPeriodos
	 * @param paso Tipo de documento que estamos imprimiendo
	 * @param reducido Si True se redice el texto para la casilla
	 * @return Literal en base al numero de periodo y a la unidad de peridod
	 */
	private static String getDescPeriodoRevision(final String bidPagoUnico, 
			final BigDecimal bidNumPeriodos, 
			final String strUnidadPeriodos, 
			final BigDecimal bidTipoPeriodo,
			final int paso,
			final boolean reducido)
	{
		StringBuilder sbPeriodicidad = new StringBuilder(45);

		if (null != bidPagoUnico && Constantes.CTE_UNO.equals(bidPagoUnico))
		{
			sbPeriodicidad.append(Constantes.CTE_PERIODO_FINAL);
		}
		else
		{
			if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(strUnidadPeriodos))
			{
				if (BigDecimal.ONE.equals(bidNumPeriodos)) 
				{
					sbPeriodicidad.append(Constantes.CTE_PERIODO_MES);
				}
				else if (Constantes.CTE_BID_TRES.equals(bidNumPeriodos))
				{
					sbPeriodicidad.append(Constantes.CTE_PERIODO_TRIMESTRE);
				}
				else if (Constantes.CTE_BID_SEIS.equals(bidNumPeriodos))
				{
					sbPeriodicidad.append(Constantes.CTE_PERIODO_SEMESTRE);
				}
				else if (Constantes.CTE_BID_DOCE.equals(bidNumPeriodos))
				{
					sbPeriodicidad.append(Constantes.CTE_PERIODO_ANIO);
				}

				if (BigDecimal.ONE.equals(bidTipoPeriodo))
				{
					sbPeriodicidad.append(Constantes.CTE_STRING_BLANK);
					if (BigDecimal.ONE.equals(bidNumPeriodos) && PASO_DOC_IMPRESION_PREVIA != paso)
					{
						if (reducido)
						{
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL_RED);
						}
						else
						{
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL);
						}
					}
					else
					{
						sbPeriodicidad.append(Constantes.CTE_PERIODO_VENCIDO);
					}
				}
				else if (Constantes.CTE_BID_DOS.equals(bidTipoPeriodo))
				{
					sbPeriodicidad.append(Constantes.CTE_STRING_BLANK);
					if (BigDecimal.valueOf(12).equals(bidNumPeriodos) || PASO_DOC_IMPRESION_PREVIA == paso)
					{
						sbPeriodicidad.append(Constantes.CTE_PERIODO_NATURAL);
					}
					else
					{
						if (reducido)
						{
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL_RED);
						}
						else
						{
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL);
						}
					}
				}
			}
		}

		return sbPeriodicidad.toString();
	}

	/**
	 * @param bidNumPeriodos
	 * @param strUnidadPeriodos
	 * @return Literal en base a la unidad de periodicidad
	 */
	private static String getDescDuracionPeriodos(final BigDecimal bidNumPeriodos, final String strUnidadPeriodos)
	{
		StringBuilder sbPeriodicidad = new StringBuilder(45);

		if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(strUnidadPeriodos))
		{
			if (BigDecimal.ONE.equals(bidNumPeriodos)) 
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_MENSUAL);
			}
			else if (Constantes.CTE_BID_TRES.equals(bidNumPeriodos))
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_TRIMESTRAL);
			}
			else if (Constantes.CTE_BID_SEIS.equals(bidNumPeriodos))
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_SEMESTRAL);
			}
			else if (Constantes.CTE_BID_DOCE.equals(bidNumPeriodos))
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_ANUAL);
			}
		}

		return sbPeriodicidad.toString();
	}

	/**
	 * @param bidNumPeriodos
	 * @param strUnidadPeriodos
	 * @return Literal en base a la unidad de periodicidad
	 */
	private static String getDescDuracionPeriodosMulticredito(final BigDecimal bidNumPeriodos, final String strUnidadPeriodos, boolean pagoUnico, 
			BigDecimal plazo)
	{
		StringBuilder sbPeriodicidad = new StringBuilder(45);
		
		if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(strUnidadPeriodos))
		{
			if (BigDecimal.ONE.equals(bidNumPeriodos)) 
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_MENSUAL_30);
			}
			else if (Constantes.CTE_BID_TRES.equals(bidNumPeriodos))
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_TRIMESTRAL_90);
			}
			else if (Constantes.CTE_BID_SEIS.equals(bidNumPeriodos))
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_SEMESTRAL_180);
			}
			else if (Constantes.CTE_BID_DOCE.equals(bidNumPeriodos))
			{
				sbPeriodicidad.append(Constantes.CTE_PERIODO_ANUAL_360);
			}
		}

		if(pagoUnico
		&& null != plazo)
		{
			BigDecimal diasLiquidacion = new BigDecimal(Constantes.CTE_PERIODO_MENSUAL_30);
			diasLiquidacion = diasLiquidacion.multiply(plazo);
			sbPeriodicidad.append(diasLiquidacion.toString());
		}

		return sbPeriodicidad.toString();
	}

	/**
	 * Accede a la tabla CG32TB01 para obtener la descripción donde CG320010 = 'IBI' ahora 'IBN' (29/10/2013)
	 * y el CG320020=bidTipoReferencia
	 * @param bidTipoReferencia
	 * @return Descripción del tipo de referencia
	 */
	private static String getStrDescrTipoReferencia(BigDecimal bidTipoReferencia)
	{
		final GestionClausulasRestringuidas gcr = new GestionClausulasRestringuidas();
		final ParametrosC descripcion = gcr.obtenerTipoRefBusquedaProducto(bidTipoReferencia.intValue());
		String strDescripcion = Constantes.CTE_STRING_EMPTY;
		if (descripcion != null)
		{
			strDescripcion = descripcion.getCG320030().trim();
		}
		return strDescripcion;
	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoComisiones
	 * @param contextoImpresion Contexto que se mandará a impresión
	 * @param paso 
	 */
	private static void rellenarImpresionConCntxtoComisiones(final IContexto[] aContextoComisiones, 
			final IContexto contextoImpresion, final int paso, boolean esMulticredito, 
			IContexto contextoSolicitud)
	{
		final String strComPropIntTipoComision = "ANPMN053040";
		final String strComPropPorcComision = "ANPMN053070";
		final String strComPropImpMinimoComision = "ANPMN053090";
		final String strComPropPlazoPago = "ANPMN053180";
		final String strComPropImpMin = "ANPMN053090";
		final String strComPropPorCapInicioAno = "ANPMN053130";
		final String strCompPropOrden = "ANPMN053050";

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoComisiones");	
		}
		//Inicializar las comisiones
		//Comision de apertura, porcentaje de comision
		contextoImpresion.put(ID_PROP_PRCTJ_COMISION_APERTURA, Constantes.CTE_COMISION_NULA);
		//Comision de apertura, importe de comision
		contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA, Constantes.CTE_COMISION_NULA);
		//Comision de gastos de estudio porcentaje
		contextoImpresion.put(ID_PROP_PRCTJ_COMISION_ESTUDIO, Constantes.CTE_COMISION_ESTUDIO_PORCENTAJE_CERO);
		//Comision de gastos de estudio importe minimo
		contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO, Constantes.CTE_COMISION_ESTUDIO_PORCENTAJE_CERO);
		//Comision de cancelacion anticipada
		contextoImpresion.put(ID_PROP_PRCTJ_COM_CANC_ANTIC_TOTAL, Constantes.CTE_COMISION_NULA);
		//Comision de amortizacion anticipada
		contextoImpresion.put(ID_PROP_PRCTJ_COM_EXCESO_AMORT_ANTIC, Constantes.CTE_COMISION_NULA);
		//Comision de amortizacion parcial anticipada
		contextoImpresion.put(ID_PROP_PRCTJ_COM_CANC_ANTIC_PARCIAL, Constantes.CTE_COMISION_NULA);
		//Comision modificacion
		contextoImpresion.put(ID_PROP_PRCTJ_MODIFICACION, Constantes.CTE_COMISION_NULA);
		//Porcentaje capital inicio año
		contextoImpresion.put(ID_PROP_PRCTJ_CAPITAL_INICIO_ANO, Constantes.CTE_COMISION_NULA);
		//Reclamacion posiciones deudoras importe
		contextoImpresion.put(ID_PROP_IMP_RECLAMACION_DEUDA, Constantes.CTE_COMISION_NULA);	
		//Comision de devolucion, porcentaje de comision
		contextoImpresion.put(ID_PROP_PRCTJ_COMISION_DEVOLUCION, Constantes.CTE_COMISION_NULA);
		//Comision de devolucion, importe de comision
		contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_DEVOLUCION, Constantes.CTE_COMISION_NULA);

		final BigDecimal bidImpTotal = contextoImpresion.getBigDecimal(ID_PROP_CAPITAL);
		BigDecimal bidSumaImpCom = BigDecimal.ZERO;

		for (IContexto contextoComisiones : aContextoComisiones)
		{		
			// 2016-05-19 - Se toma el valor del tramo 1
			if (contextoComisiones.getBigDecimal(strCompPropOrden).compareTo(BigDecimal.ONE) == 0)
			{
				//switch (paso)
				//{
				//	case PASO_DOC_IMPRESION_PREVIA:

				if (Constantes.TIPO_COMISION_CANCELACION.equals(contextoComisiones.getString(strComPropIntTipoComision)))
					//&& UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COM_CANC_ANTIC_TOTAL)))
				{
					contextoImpresion.put(ID_PROP_PRCTJ_COM_CANC_ANTIC_TOTAL,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
									2, LengthConstants.LENGTH_0003, false));
				}
				else if (Constantes.TIPO_COMISION_ADELANTO.equals(contextoComisiones.getString(strComPropIntTipoComision)))
					//&& UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COM_CANC_ANTIC_PARCIAL)))
				{
					contextoImpresion.put(ID_PROP_PRCTJ_COM_CANC_ANTIC_PARCIAL,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
									2, LengthConstants.LENGTH_0003, false));	
				}
				else if (Constantes.TIPO_COMISION_AMORT_SUPERIOR_A.equals(contextoComisiones.getString(strComPropIntTipoComision)))
					//&& UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_CAPITAL_INICIO_ANO)))
				{
					contextoImpresion.put(ID_PROP_PRCTJ_CAPITAL_INICIO_ANO,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPlazoPago),
									2, LengthConstants.LENGTH_0003, false));

					// 20-07-2012 - P7279 Añadido exceso amortizacion inicio año porque no se estaba mostrando en los documentos de impresión 
					contextoImpresion.put(ID_PROP_PRCTJ_CAPITAL_INICIO_ANO,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorCapInicioAno),
									2, LengthConstants.LENGTH_0003, false));

					contextoImpresion.put(ID_PROP_PRCTJ_COM_EXCESO_AMORT_ANTIC,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
									2, LengthConstants.LENGTH_0003, false));	
				}
				else if (Constantes.TIPO_COMISION_MODIF_COND.equals(contextoComisiones.getString(strComPropIntTipoComision)))
					//&& UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_MODIFICACION)))	
				{
					contextoImpresion.put(ID_PROP_PRCTJ_MODIFICACION,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
									2, LengthConstants.LENGTH_0003, false));	
				}
				else if (Constantes.TIPO_COMISION_RECLAMACION_DEUDA.equals(contextoComisiones.getString(strComPropIntTipoComision)))
					//&& UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_IMP_RECLAMACION_DEUDA)))
				{

					//23-07-2012. Quitar de importe de reclamación de posiciones deudoras la moneda = EUR
					//contextoImpresion.put(ID_PROP_IMP_RECLAMACION_DEUDA,
					//		bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMin), 5, 2, false) +
					//		Constantes.CTE_STRING_BLANK +
					//		Constantes.CTE_DIVISA_EURO.toUpperCase());

					contextoImpresion.put(ID_PROP_IMP_RECLAMACION_DEUDA,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMin), 5, 2, false));

				}

				//		break;
				//	default:
				//		break;

				//}

				if (Constantes.TIPO_COMISION_APERTURA.equals(contextoComisiones.getString(strComPropIntTipoComision)))
				{
					//int porcentajeComisApertura = contextoComisiones.getBigDecimal(strComPropPorcComision).intValue();
					BigDecimal porcentajeComisionApertura = contextoComisiones.getBigDecimal(strComPropPorcComision);

					// Si la comision de apertura es igual a 0
					if(0 == porcentajeComisionApertura.compareTo(BigDecimal.ZERO)) 
					{
						contextoImpresion.put(ID_PROP_PRCTJ_COMISION_APERTURA, Constantes.CTE_COMISION_NULA);
					}
					else 
					{
						contextoImpresion.put(ID_PROP_PRCTJ_COMISION_APERTURA,
								UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
										2, LengthConstants.LENGTH_0003, false));	
					}

					// 20-07-2012 - P7279 Comentado por la necesidad de mostrar el importe calculado de la comision de 
					// apertura y no el importe mínimo de comisión
					//contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA,
					//		contextoComisiones.getBigDecimal(strComPropImpMinimoComision));


					// 2016-02-23 - Calcular el importe de la comision de apertura en funcion del indicador
					// de capitalizacion (indicador = 1 --> importeSolicitado, indicador = 0 --> importe total)
					//BigDecimal bidImpCom = bidImpTotal.multiply(
					//		contextoComisiones.getBigDecimal(strComPropPorcComision));
					//if (bidImpCom.compareTo(BigDecimal.ZERO) != 0)
					//{
					//	bidImpCom = bidImpCom.divide(BigDecimal.valueOf(100L));
					//}
					BigDecimal bidImpCom = UtilidadesTramitacion.importeComision(contextoSolicitud, contextoComisiones);

					if (bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0)
					{
						bidSumaImpCom = bidSumaImpCom.add(bidImpCom);
					}
					else
					{
						bidSumaImpCom = bidSumaImpCom.add(contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
					}

					//if(bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0 && 
					//	!UtilidadesTramitacion.isBlankOrNull(porcentajeComisApertura) && porcentajeComisApertura == 0) {
					//		BigDecimal imp = bidImpCom;
					//		imp = imp.setScale(2);
					//		contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA, imp.toPlainString());
					//		contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA,"min "+UtilidadesTramitacion.bigDecimalToString(bidImpCom, 9, 2, false));	
					//}else {
					//	contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA,
					//		 UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 9, 2, false));
					//}

					if(bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision) ) > 0) 
					{
						//BigDecimal imp = bidImpCom;
						//imp = imp.setScale(2);
						//contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA, imp.toPlainString());
						contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString(bidImpCom, 9, 2, false));	
					}
					else 
					{
						contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA,
								"mín " + UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 9, 2, false));
					}

					if(null != porcentajeComisionApertura && 0 == porcentajeComisionApertura.compareTo(BigDecimal.ZERO)) 
					{	
						contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 9, 2, false));
					}


					//20-07-2012 Incorporamos en el contexto de salida el importe calculado de la comision de apertura
					//contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_APERTURA, bidImpCom);
				}
				else if (Constantes.TIPO_COMISION_ESTUDIO.equals(contextoComisiones.getString(strComPropIntTipoComision)))
				{


					if (PASO_DOC_IMPRESION_PREVIA == paso || PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA == paso)
						//&& UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COMISION_ESTUDIO)))
					{
						contextoImpresion.put(ID_PROP_PRCTJ_COMISION_ESTUDIO,
								UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
										2, LengthConstants.LENGTH_0003, false));	
					}
					else
					{
						// 14-09-2012 P7279. Cambio de dividir entre por 10 por multiplicar entre 10 (expresar porcentaje gastos 
						// de estudio en tanto por mil.
						contextoImpresion.put(ID_PROP_PRCTJ_COMISION_ESTUDIO,
								UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision).multiply(BigDecimal.valueOf(10L)),
										2, LengthConstants.LENGTH_0003, false));
					}

					//20-07-2012 - P7279 Comentado por la necesidad de mostrar el importe calculado de los gastos 
					// de estudio y no el importe mínimo de comisión

					//	contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO,
					//			contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
					//}

					BigDecimal bidImpCom = UtilidadesTramitacion.importeComision(contextoSolicitud, contextoComisiones);
					
					if (bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0)
					{
						bidSumaImpCom = bidSumaImpCom.add(bidImpCom);
					}
					else
					{
						bidSumaImpCom = bidSumaImpCom.add(contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
					}

					if(bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0) {
						//if(bidImpCom.divide(BigDecimal.valueOf(10L)).compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0) {
						//BigDecimal imp = bidImpCom.divide(BigDecimal.valueOf(10L));
						//imp = imp.setScale(2);
						//contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO, imp.toPlainString());
						contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO, UtilidadesTramitacion.bigDecimalToString(bidImpCom, 5, 2, false));
						//contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO, bigDecimalToString(bidImpCom.divide(BigDecimal.valueOf(10L)), 5, 2, false));

					}else {
						contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO,
								"mín " + UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 5, 2, false));
					}

					//Si es una impresion previa
					if (PASO_DOC_IMPRESION_PREVIA == paso || PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA == paso) {
						//Si el porcentaje de comision es mayor que cero quitamos la palabra min, sino la ponemos
						if(contextoComisiones.getBigDecimal(strComPropPorcComision).intValue() > 0 ) {
							contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO, UtilidadesTramitacion.bigDecimalToString(bidImpCom, 5, 2, false));
						}
					}

					//20-07-2012 Incorporamos en el contexto de salida el importe calculado de los gastos de estudio
					//contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO, bidImpCom.divide(BigDecimal.valueOf(10L)));
				}
				else if (Constantes.TIPO_COMISION_DEVOLUCION.equals(contextoComisiones.getString(strComPropIntTipoComision))){
					BigDecimal porcentajeComisionDevolucion = contextoComisiones.getBigDecimal(strComPropPorcComision);

					// Si la comision de apertura es igual a 0
					if(0 == porcentajeComisionDevolucion.compareTo(BigDecimal.ZERO)) {
						contextoImpresion.put(ID_PROP_PRCTJ_COMISION_DEVOLUCION, Constantes.CTE_COMISION_NULA);
					}
					else {
						contextoImpresion.put(ID_PROP_PRCTJ_COMISION_DEVOLUCION,
								UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
										2, LengthConstants.LENGTH_0003, false));	
					}

					contextoImpresion.put(ID_PROP_IMP_MINIMO_COMISION_DEVOLUCION,UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 5, 2, false));


				}
			}
		}
		// Suma de los importes 
		contextoImpresion.put(ID_PROP_IMP_TOTAL_COMISIONES_A_FECHA_FORM, UtilidadesTramitacion.bigDecimalToString(bidSumaImpCom, 9, 2, false));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoComisiones");	
		}
	}

	/**
	 * Rellena el contexto de impresión con los datos de los clientes titulares de la solicitud
	 * @param lstContextoClientes
	 * @param contextoImpresion
	 * @param filtroTitular si True se crean solo registro para los titulares, en otro caso se almacenan todos
	 */
	private static void rellenarImpresionConCntxtoClientesTitulares(
			final IContexto[] lstContextoClientes, final IContexto contextoImpresion, 
			final Boolean filtroTitular)
	{
		final String strPropRelacionTitular = "MEFCN000040";

		List<IRegistro> lstRegistroClientes = new ArrayList<IRegistro>(0);
		List<IRegistro> lstRegistroAvalistas = new ArrayList<IRegistro>(0);
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoClientesTitulares");	
		}
		for (IContexto contextoCliente : lstContextoClientes)
		{
			if (Constantes.CTE_RELACION_TITULAR.equalsIgnoreCase(contextoCliente.getString(strPropRelacionTitular)))
			{
				lstRegistroClientes.add(crearRegistroCliente(contextoCliente, contextoImpresion, filtroTitular));
			}
			if(Constantes.CTE_RELACION_AVALISTA.equalsIgnoreCase(contextoCliente.getString(strPropRelacionTitular))) {
				lstRegistroAvalistas.add(crearRegistroCliente(contextoCliente, contextoImpresion, filtroTitular));
			}

		}
		if (!lstRegistroClientes.isEmpty()) 
		{
			contextoImpresion.put(ID_REG_TITULAR, lstRegistroClientes.toArray(new IRegistro[lstRegistroClientes.size()]));
		}
		if(!lstRegistroAvalistas.isEmpty()) {
			contextoImpresion.put(ID_REG_FIADORES, lstRegistroAvalistas.toArray(new IRegistro[lstRegistroAvalistas.size()]));
		}
		//		contextoImpresion.put(ID_PROP_NUMERO_TITULARES, new BigDecimal(Integer.toString(lstRegistroClientes.size())));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoClientesTitulares");	
		}
	}

	/**
	 * Rellena el contexto de impresión con los datos de los clientes titulares de la solicitud
	 * @param lstContextoClientes
	 * @param contextoImpresion
	 * @param filtroTitular si True se crean solo registro para los titulares, en otro caso se almacenan todos
	 */
	private static void rellenarImpresionConCntxtoClientesAvalistas(
			final IContexto[] lstContextoClientes, final IContexto contextoImpresion)
	{
		final String strPropRelacionTitular = "MEFCN000040";

		List<IRegistro> lstRegistroClientes = new ArrayList<IRegistro>(0);
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoClientesAvalistas");	
		}
		for (IContexto contextoCliente : lstContextoClientes)
		{
			if (Constantes.CTE_RELACION_AVALISTA.equalsIgnoreCase(contextoCliente.getString(strPropRelacionTitular)))
			{
				lstRegistroClientes.add(crearRegistroCliente(contextoCliente, contextoImpresion, Boolean.FALSE));
			}
		}
		if (!lstRegistroClientes.isEmpty()) 
		{
			contextoImpresion.put(ID_REG_FIADORES, lstRegistroClientes.toArray(new IRegistro[lstRegistroClientes.size()]));
		}
		//		contextoImpresion.put(ID_PROP_NUMERO_TITULARES, new BigDecimal(Integer.toString(lstRegistroClientes.size())));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoClientesTitulares");	
		}
	}

	/**
	 * Se crea un registro con los clientes
	 * @param contextoCliente
	 * @param contextoImpresion
	 * @param filtroTitular si True se guardan sólo los titulares
	 * @return
	 */
	private static IRegistro crearRegistroCliente(IContexto contextoCliente, IContexto contextoImpresion, Boolean filtroTitular)
	{
		final String strNumeroCliente 		= "MEFCN000010";
		final String strCliStrNombre 		= "MEFCN000240";
		final String strCliStrSec			= "MEFCN000050";
		final String strCliStrNIF 			= "MEFCN000160";
		final String strCliStrApellidoUno 	= "MEFCN000250";
		final String strCliStrApellidoDos 	= "MEFCN000260";
		final String strCliStrRol 			= "MEFCN000490";
		final String strCliStrCalle		 	= "MEFCN000400";
		final String strCliStrLocalidad 	= "MEFCN000440";
		final String strCliIntCP 			= "MEFCN000220";
		final String strCliRelacion			= "MEFCN000040";
		final String strCliTipoDoc 			= "MEFCN000450";
		final String strCliEmail 			= "MEFCN000380";
		final String strCliTelefonoMovil 	= "MEFCN000370";
		final String bidCliPorcPart 		= "MEFCN000130";


		IRegistro cliente = null;
		if (!filtroTitular || Constantes.CTE_RELACION_TITULAR.equals(contextoCliente.getString(strCliRelacion).trim()))
		{
			if (LOGGER.isDebugEnabled())
			{
				LOGGER.debug("INICIO ContextoImpresionFormalizacion crearRegistroCliente");	
			}
			final String strTipoDoc = contextoCliente.getString(strCliTipoDoc).trim();			
			if (Constantes.CTE_RELACION_TITULAR.equals(contextoCliente.getString(strCliRelacion).trim()))
			{
				cliente = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_TITULAR);
				cliente.put(ID_PROP_NOMBRE_TITULAR, contextoCliente.getString(strCliStrNombre).trim());
				cliente.put(ID_PROP_APELLIDO1_TITULAR, contextoCliente.getString(strCliStrApellidoUno).trim());
				cliente.put(ID_PROP_APELLIDO2_TITULAR, contextoCliente.getString(strCliStrApellidoDos).trim());
				//final int iNifLenght = contextoCliente.getString(strCliStrNIF).length();  
				cliente.put(ID_PROP_NIF_TITULAR, getLiteralDocumento(strTipoDoc, contextoCliente.getString(strCliStrNIF)));
				//cliente.put(ID_PROP_LETRA_NIF_TITULAR, contextoCliente.getString(strCliStrNIF).substring(iNifLenght - 1));
				cliente.put(ID_PROP_CALLE_DOMICILIO_TITULAR, contextoCliente.getString(strCliStrCalle).trim());
				cliente.put(ID_PROP_CP_DOMICILIO_TITULAR, contextoCliente.getString(strCliIntCP));
				//cliente.put(ID_PROP_LOCALIDAD_DOMICILIO_TITULAR, contextoCliente.getString(strCliStrLocalidad).trim());
				cliente.put(ID_PROP_LOCALIDAD_DOMICILIO_TITULAR, getLocalidadTitular(contextoCliente.getBigDecimal(strNumeroCliente)));
				cliente.put(ID_PROP_ROL_TITULAR, contextoCliente.getString(strCliStrRol));
				cliente.put(ID_PROP_SECUENCIA_TITULAR, contextoCliente.getString(strCliStrSec));
				cliente.put(ID_PROP_EMAIL_TITULAR, contextoCliente.getString(strCliEmail));
				cliente.put(ID_PROP_TELEFONO_MOVIL_PRIMER_TITULAR, contextoCliente.getString(strCliTelefonoMovil));

			}
			else if (Constantes.CTE_RELACION_AVALISTA.equals(contextoCliente.getString(strCliRelacion).trim()))
			{
				cliente = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_FIADORES);
				cliente.put(ID_PROP_NOMBRE_FIADOR, contextoCliente.getString(strCliStrNombre).trim());
				cliente.put(ID_PROP_APELLIDO1_FIADOR, contextoCliente.getString(strCliStrApellidoUno).trim());
				cliente.put(ID_PROP_APELLIDO2_FIADOR, contextoCliente.getString(strCliStrApellidoDos).trim());
				final int iNifLenght = contextoCliente.getString(strCliStrNIF).length();  
				cliente.put(ID_PROP_NIF_FIADOR, getLiteralDocumento(strTipoDoc, contextoCliente.getString(strCliStrNIF)));
				cliente.put(ID_PROP_LETRA_NIF_FIADOR, contextoCliente.getString(strCliStrNIF).substring(iNifLenght - 1));
				cliente.put(ID_PROP_CALLE_DOMICILIO_FIADOR, contextoCliente.getString(strCliStrCalle).trim());
				cliente.put(ID_PROP_CP_DOMICILIO_FIADOR, contextoCliente.getString(strCliIntCP));
				cliente.put(ID_PROP_LOCALIDAD_DOMICILIO_FIADOR, contextoCliente.getString(strCliStrLocalidad).trim());
				cliente.put(ID_PROP_ROL_AVALISTA, contextoCliente.getString(strCliStrRol));
				cliente.put(ID_PROP_SECUENCIA_AVALISTA, contextoCliente.getString(strCliStrSec));
				cliente.put(ID_PROP_PORC_PART_AVALISTA, contextoCliente.getBigDecimal(bidCliPorcPart));
			}
		}

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion crearRegistroCliente");	
		}
		return cliente;
	}

	/**
	 * 
	 * @param tipoDoc
	 * @param nif
	 * @return Devuelve la concatenacion del literal asociado al tipo de documento y
	 * el numero de documento
	 */
	private static String getLiteralDocumento(String tipoDoc, String nif)
	{
		StringBuilder sbRsultado = new StringBuilder(30);
		try {
			int iTipoDoc = Integer.valueOf(tipoDoc);
			switch (iTipoDoc)
			{
			case Constantes.TIPO_DOC_NIF: sbRsultado.append(ETIQUETA_NIF);
			break;
			case Constantes.TIPO_DOC_CIF: sbRsultado.append(ETIQUETA_CIF);
			break;
			case Constantes.TIPO_DOC_PAS_ESP: sbRsultado.append(ETIQUETA_PASAPORTE_ESP);
			break;
			case Constantes.TIPO_DOC_DESUSO: sbRsultado.append(ETIQUETA_DESUSO);
			break;
			case Constantes.TIPO_DOC_EXTRANJ: sbRsultado.append(ETIQUETA_CARTA_EXT);
			break;
			default:
				break;
			}
			sbRsultado.append(Constantes.CTE_STRING_GUION_BAJO);
		}catch(NumberFormatException e)
		{
			LOGGER.error(e);
		}
		sbRsultado.append(nif);
		return sbRsultado.toString();
	}


	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoCuenta
	 * @param contextoImpresion
	 */
	private static void rellenarImpresionConCntxtoCuentas(IContexto[] aContextoCuenta, 
			IContexto contextoImpresion, final String strEntidad)
	{
		final String strCtaStringTipoCuenta = "ANPMN072100";
		//final String strCtaBidEntidad = "ANPMN072110";
		final String strCtaBidOficina = "ANPMN072120";
		//final String strCtaBidCuentaContable = "ANPMN072130";
		//final String strCtaBidNumeroCuenta = "ANPMN072140";
		//final String strCtaBidDigitoCuenta = "ANPMN072150";
		final String strCtaStringCuenta = "ANPMN072180";
		//final String strCtaBidTipoCuenta = "ANPMN072200"; // Tipo cuenta: 1-interna, 2-externa
		final String strCtaBidPrioridad = "ANPMN072210";

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionContextoCuentas");	
		}

		// 2016-02-17 - Rellenar campos "cuenta asociada" y "oficina cuenta asociada" del contexto de impresion 
		//              (ANPMN100) con los datos de la cuenta de cargo leidos de la  AN32TB01 (datos devueltos 
		//              por ANPM_175 en contextos ANPMN072), tanto para cuentas externas como internas:
		//              > Cuenta asociada (ANPMN100320): campo ANPMN072180 de la salida de ANPM_175.
		//              > Oficina de la cuenta asociada (ANPMN100330): se obtiene como hasta ahora (llamada a 
		//                CGAL_307), pero con la oficina del campo ANPMN072120 para la cuenta de cargo (deberia 
		//                ser la misma que la de la solicitud).

		// Obtener datos de la cuenta de cargo
		for (IContexto contextoCuenta : aContextoCuenta)
		{		
			if (Constantes.CTE_PRIORIDAD_CUENTA_UNO.equals(contextoCuenta.getBigDecimal(strCtaBidPrioridad)))
			{
				if (Constantes.CTE_TIPO_CUENTA_CARGO.equals(contextoCuenta.getString(strCtaStringTipoCuenta)))
				{
					// Leer cuenta de la AN32TB01 (campo AN320180). El valor de este campo viene en la 
					// salida del ANPM_175 (campo ANPMN072180 del ctx de salida ANPMN072).
					String datosCuenta = contextoCuenta.getString(strCtaStringCuenta);

					// Formatear cuenta en grupos de 4 digitos
					String datosCuentaFormateado = datosCuenta.substring(0,4) + " " +
							datosCuenta.substring(4,8) + " " + datosCuenta.substring(8,12) + " " +
							datosCuenta.substring(12,16) + " " + datosCuenta.substring(16,20) + " " +
							datosCuenta.substring(20,24);

					// Obtener descripcion oficina 
					BigDecimal bidOficina = contextoCuenta.getBigDecimal(strCtaBidOficina);
					String nombreOficina = UtilidadesTramitacion.getNombreOficina(bidOficina); 

					// Rellenar campos contexto de impresion
					contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA, datosCuentaFormateado);

					if (!UtilidadesComun.esASF(strEntidad))
					{
						contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA, nombreOficina);				
					}					
					
					// Salir del bucle
					break;
				}
			}
		}


		//		for (IContexto contextoCuenta : aContextoCuenta)
		//		{
		//			if (Constantes.CTE_PRIORIDAD_CUENTA_UNO.equals(contextoCuenta.getBigDecimal(strCtaBidPrioridad)))
		//			{
		//				final BigDecimal bidEntidad = contextoCuenta.getBigDecimal(strCtaBidEntidad); 
		//				final BigDecimal bidOficina = contextoCuenta.getBigDecimal(strCtaBidOficina);
		//				final BigDecimal bidNumeroCuenta = contextoCuenta.getBigDecimal(strCtaBidNumeroCuenta);
		//				final BigDecimal bidCuentaContable = contextoCuenta.getBigDecimal(strCtaBidCuentaContable);
		//				final BigDecimal bidDigitoCuenta = contextoCuenta.getBigDecimal(strCtaBidDigitoCuenta);
		//				final BigDecimal bidTipoCuenta = contextoCuenta.getBigDecimal(strCtaBidTipoCuenta);
		//				
		//				if (Constantes.CTE_TIPO_CUENTA_ABONO.equals(contextoCuenta.getString(strCtaStringTipoCuenta)))
		//				{
		//					
		//					// 2016-02-16 - Formatear cuenta solo en caso de que sea de tipo 1 (interna)
		//					// (la llamada a CGAL_533 no funciona para cuentas externas)
		//					if (bidTipoCuenta.compareTo(BigDecimal.ONE) == 0)
		//					{
		//					
		//						//contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
		//						//	DatosCuentasC.getCuentaFormateadaCCC(bidEntidad, bidOficina,
		//						//	bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
		//					
		//						String datosCuenta = DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina,
		//										bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta);
		//						
		//						String datosCuentaFormateado = datosCuenta.substring(0,4) + " " +
		//								datosCuenta.substring(5,9) + " " + datosCuenta.substring(9,13) + " " +
		//								datosCuenta.substring(13,17) + " " + datosCuenta.substring(17,21) + " " +
		//								datosCuenta.substring(21,25);
		//						
		//						contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA, datosCuentaFormateado);
		//						
		//						//contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
		//						//	DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina,
		//						//	bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
		//							
		//						contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA,
		//								getNombreOficina(bidOficina));
		//					}
		//				}
		//				else
		//				{
		//					
		//					//contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
		//					//	DatosCuentasC.getCuentaFormateadaCCC(bidEntidad, bidOficina,
		//					//	bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
		//
		//					contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
		//							DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina,
		//									bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
		//					contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA,
		//							getNombreOficina(bidOficina));
		//				}
		//			}
		//		}


		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionContextoCuentas");	
		}
	}


	/**
	 * Rellena los campos necesarios en el caso de una informacion normalizada europea con el contexto programa
	 * @param ctxtImpresion
	 * @param aRegPagos
	 */
	private static void rellenarImpresionConCntxtProgramaInformacionNormalizadaEuropea(final IContexto ctxtPrograma, 
			final IContexto ctxtSolicitud, 
			final IContexto ctxtImpresion, 
			final String strFechaPrimVencInt,
			final IRegistro[] aRegPagos,
			final Boolean bolPrestamoVariable,
			final IContexto[] aContextoInteres) {

		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
		final String strCtxtoCmpoImpInteres = "ANPMN075390";
		final String strCtxtoCmpoFechaSol = "ANPMN050915";
		final String strCtxtoPorReferenciaActual = "ANPMN075520";
		final String ETIQUETA_INTERES_FIJO = "F";
		final String ETIQUETA_INTERES_VARIABLE = "V";
		BigDecimal referencia = null;
		BigDecimal EuriborMasDiferencial = null;
		boolean primeraEntregaEncontrado = false;
		boolean primeraCuotaEncontrado = false;
		boolean primeraCuotaSegTramo = false;

		for (IContexto ctxIntereses : aContextoInteres)
		{
			if (0 == BigDecimal.ONE.compareTo(ctxIntereses.getBigDecimal("ANPMN052040")))
			{
				ctxtImpresion.put(ID_NUMERO_MESES_TRAMO_INCIAL, ctxIntereses.getBigDecimal("ANPMN052110"));
				break;
			}
		}

		BigDecimal primeraCuotaSegundoTramo = BigDecimal.ZERO;
		if (!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getBigDecimal(ID_NUMERO_MESES_TRAMO_INCIAL)))
		{	
			primeraCuotaSegundoTramo =  ctxtImpresion.getBigDecimal(ID_NUMERO_MESES_TRAMO_INCIAL).add(BigDecimal.ONE);
		}

		if (0 != aRegPagos.length)
		{
			IRegistro primeraEntrega = null;

			for (IRegistro registroActual : aRegPagos)
			{	
				if (0 != (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital))) &&
						(primeraEntregaEncontrado == false))
				{
					primeraEntrega = registroActual;
					primeraEntregaEncontrado = true;
				}


				if (
						(0 == registroActual.getBigDecimal("ANPMN075143").compareTo(BigDecimal.ZERO)) &&
						(0 == new BigDecimal(2).compareTo(registroActual.getBigDecimal("ANPMN075141")) &&
						(primeraCuotaEncontrado == false))
						)
				{
					ctxtImpresion.put(ID_PRIMERA_CUOTA_COMPLETA_CAPITAL_CERO , registroActual.getBigDecimal("ANPMN075145"));
					primeraCuotaEncontrado = true;
				}

				if ((0 == primeraCuotaSegundoTramo.compareTo(registroActual.getBigDecimal("ANPMN075141")) &&
						(primeraCuotaSegTramo == false)))
				{
					ctxtImpresion.put(ID_PRIMERA_CUOTA_SEGUNDO_TRAMO, registroActual.getBigDecimal("ANPMN075145"));
					primeraCuotaSegTramo = true;
				}

			}

			if (null != primeraEntrega)
			{
				ctxtImpresion.put(ID_PROP_FECHA_PRIMERA_ENTREGA, primeraEntrega.getString(strCtxtoCmpoRegPagoFchPago));

				//23-07-2012. Comentado la primera entrega para sustituirlo por sucesivas entregas
				//ctxtImpresion.put(ID_PROP_IMPORTE_PRIMERA_ENT, primeraEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
				ctxtImpresion.put(ID_PROP_IMPORTE_PRIMERA_ENT, primeraEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
			}
		}

		for (IContexto ctxIntereses : aContextoInteres)
		{
			if (0!= BigDecimal.ZERO.compareTo(ctxIntereses.getBigDecimal("ANPMN052160")) &&
					!UtilidadesTramitacion.isBlankOrNull(ctxIntereses.getBigDecimal("ANPMN052160")))
			{
				referencia = UtilidadesTramitacion.obtenerReferenciaINE("ANPMN052160", ctxIntereses);
				break;
			}
		}

		if (!UtilidadesTramitacion.isBlankOrNull(referencia))
		{
			ctxtImpresion.put(ID_TIPO_REFERENCIA, referencia);	
		}
		if (bolPrestamoVariable)
		{
			ctxtImpresion.put(ID_PROP_PORC_INTERES_INICIAL, 
					UtilidadesTramitacion.bigDecimalToString(
							ctxtPrograma.getBigDecimal(strCtxtoCmpoImpInteres),
							LengthConstants.LENGTH_0003,
							LengthConstants.LENGTH_0004,
							true));
			String strFechaSolicitud = ctxtSolicitud.getString(strCtxtoCmpoFechaSol);
			// Se le pasa siempre un '1' a la función tras indicarse el problema por correo
			ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL,
					String.valueOf(
							getNumeroMeses(strFechaSolicitud, strFechaPrimVencInt, Integer.valueOf(1))));
			ctxtImpresion.put(ID_TIPO_PRESTAMO, ETIQUETA_INTERES_VARIABLE);		
		}
		else
		{
			ctxtImpresion.put(ID_TIPO_PRESTAMO, ETIQUETA_INTERES_FIJO);
		}
		
		if(isPrestamoFijoBonificado(aContextoInteres)){
			ctxtImpresion.put(ID_INDICADOR_FIJO_TRAMO_INICIAL , "S");
		}else{
			ctxtImpresion.put(ID_INDICADOR_FIJO_TRAMO_INICIAL , "N");
		}

		if (!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(ID_PROP_PORC_INT_MINIMO))) 
		{
			ctxtImpresion.put(ID_INDICADOR_SUELO, "S");
		}

		if (!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(ID_PROP_PORC_INT_MAXIMO))) 
		{
			ctxtImpresion.put(ID_INDICADOR_TECHO, "S");
		}

		// Valor euribor(ANPMN075520) + diferencial (ANPM100206)
		if ((!UtilidadesTramitacion.isBlankOrNull(ctxtPrograma.getBigDecimal(strCtxtoPorReferenciaActual)) && 
				(!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getBigDecimal(ID_PROP_MARGEN_PRINCIPAL)))))
		{
			EuriborMasDiferencial = ctxtPrograma.getBigDecimal(strCtxtoPorReferenciaActual).add(
					ctxtImpresion.getBigDecimal(ID_PROP_MARGEN_PRINCIPAL));
		}

		if (!UtilidadesTramitacion.isBlankOrNull(EuriborMasDiferencial))
		{
			ctxtImpresion.put(ID_INTERES_TRAMOS_SUCESIVOS, EuriborMasDiferencial);
		}

		if (!UtilidadesTramitacion.isBlankOrNull(ctxtPrograma.getBigDecimal(strCtxtoPorReferenciaActual)))
		{
			ctxtImpresion.put(ID_VALOR_TIPO_REFERENCIA, ctxtPrograma.getBigDecimal(strCtxtoPorReferenciaActual)); // 998
		}

		if (!UtilidadesTramitacion.isBlankOrNull(strFechaPrimVencInt))
		{
			ctxtImpresion.put(ID_FECHA_PRIMER_REV, strFechaPrimVencInt);
		}

		if((!UtilidadesTramitacion.isBlankOrNull(ID_NUMERO_MESES_TRAMO_INCIAL) &&
				(!UtilidadesTramitacion.isBlankOrNull(ID_PROP_PAGO_APLAZ_CARENCIA_MESES))))
		{

			BigDecimal mesesInicialSinCarencia = (ctxtImpresion.getBigDecimal(ID_NUMERO_MESES_TRAMO_INCIAL).subtract(
					ctxtImpresion.getBigDecimal(ID_PROP_PAGO_APLAZ_CARENCIA_MESES)));

			ctxtImpresion.put(ID_NUMERO_MESES_INI_SIN_CARENCIA, mesesInicialSinCarencia);
		}
	}


	/**
	 * Rellena los datos de programa para la info previa y la informacion europea normalizada
	 * @param ctxtPrograma
	 * @param ctxtSolicitud
	 * @param ctxtImpresion
	 * @param aRegPagos
	 * @param paso
	 * @param bolPrestamoVariable
	 * @param esMulticredito
	 * @param consumidor
	 */
	private static void  rellenarImpresionConCntxtoProgramaInfoPrevia(final IContexto ctxtPrograma, 
			final IContexto ctxtSolicitud, 
			final IContexto ctxtImpresion, 
			final String strFechaPrimVencInt,
			final IRegistro[] aRegPagos,
			final int paso,
			final Boolean bolPrestamoVariable,
			final Boolean esMulticredito,
			final String consumidor){

		final String strCtxtoCmpoImpInteres = "ANPMN075390";
		//final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		//final String StrCtxtoCampoNumeroCuotas = "ANPMN075080";
		final String strCtxtoCmpoFechaSol = "ANPMN050915";

		if (bolPrestamoVariable)
		{
			ctxtImpresion.put(ID_PROP_PORC_INTERES_INICIAL, 
					UtilidadesTramitacion.bigDecimalToString(
							ctxtPrograma.getBigDecimal(strCtxtoCmpoImpInteres),
							LengthConstants.LENGTH_0003,
							LengthConstants.LENGTH_0004,
							true));
			String strFechaSolicitud = ctxtSolicitud.getString(strCtxtoCmpoFechaSol);
			// Se le pasa siempre un '1' a la función tras indicarse el problema por correo
			ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL,
					String.valueOf(
							getNumeroMeses(strFechaSolicitud, strFechaPrimVencInt, Integer.valueOf(1))));
		}
	}

	/**
	 * Rellena los campos correspondientes al contexto programa para la poliza y el contrado de crediventas
	 * @param ctxtPrograma
	 * @param ctxtSolicitud
	 * @param ctxtImpresion
	 * @param paso
	 * @param bolPrestamoVariable
	 * @param esMulticredito
	 * @param consumidor
	 */
	private static void rellenarImpresionConCntxtoProgramaPolizaContratoCrediventas(final IContexto ctxtPrograma, 
			final IContexto ctxtSolicitud, 
			final IContexto ctxtImpresion, 
			final IRegistro[] aRegPagos,
			final int paso,
			final Boolean bolPrestamoVariable,
			final Boolean esMulticredito,
			final String consumidor,
			final Boolean esDivisa,
			final IContexto condicionesCapital) {

		//		final String strCtxtoCmpoFechaSol = "ANPMN050915";
		//		final String strCarencia = "ANPMN050650";
		//		final String strCtxtoCmpoNumCuotas = "ANPMN075080"; // Pendiente de si el numero de cuotas es de capital + intereses...
		//		final String strCtxtoCmpoDescPeriodoAmort = "ANPMN075090";
		//		final String strCtxtoCmpoImpPrimeraCuota = "ANPMN075100";
		//		final String strCtxtoCmpoDescCuotasSucesivasAmort = "ANPMN075110";
		//		final String strCtxtoCmpoImpUltimaCuota = "ANPMN075120";
		//		final String strCtxtoCmpoImpCapitalPrestamo = "ANPMN075130";
		//		final String strCtxtoRegMatrizPago = "ANPMN075140";
		//		final String strCtxtoCmpoRegPagoNumVcto = "ANPMN075141";
		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
		//		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
		//		final String strCtxtoCmpoPorcTae = "ANPMN075150";
		//		final String strCtxtoCmpoImpGastosSeguro = "ANPMN075160";
		//		final String strCtxtoCmpoImpTasacion = "ANPMN075170";
		//		final String strCtxtoCmpoPorcTasacion = "ANPMN075180";
		//		final String strCtxtoCmpoRelAlojamiento = "ANPMN075190"; // Importe para calcular el importe de alojamiento
		final String strCtxtoCmpoInicioPlazo = "ANPMN075200";
		//		final String strCtxtoCmpoVerficiacionRegistral = "ANPMN075230";
		//		final String strCtxtoCmpoArancelesNotariales = "ANPMN075240";
		//		final String strCtxtoCmpoArancelesRegistrales = "ANPMN075250";
		//		final String strCtxtoCmpoServicioTasacion = "ANPMN075260";
		//		final String strCtxtoCmpoImpRenta = "ANPMN075270";
		//		final String strCtxtoCmpoImpInteresOrdinario = "ANPMN075280";
		//		final String strCtxtoCmpoImpInteresDemora = "ANPMN075290";
		//		final String strCtxtoCmpoImpCostasYgastos = "ANPMN075300";
		//		final String strCtxtoCmpoImpTotalGarantizado = "ANPMN075310";
		final String strCtxtoCmpoImpInteres = "ANPMN075390";
		//		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		//		final String StrCtxtoCampoNumeroCuotas = "ANPMN075080";
		//		final String strSolPropCodigoProducto = "ANPMN050080";
		//					crearMatrizFiadores(ctxtPrograma, ctxtImpresion);

		//		BigDecimal plazoCarencia = ctxtSolicitud.getBigDecimal(strCarencia);


		if (0 != aRegPagos.length)
		{
			IRegistro primeraEntrega = null;
			IRegistro ultimaEntrega = null;
			IRegistro primerPago = null;
			IRegistro ultimoPago = null;

			for (IRegistro registroActual : aRegPagos)
			{	
				if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0)
				{
					primeraEntrega = registroActual;
					break;
				}
			}
			for (IRegistro registroActual : aRegPagos)
			{
				if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0)
				{
					primerPago = registroActual;
					break;
				}
			}
			for (int i= aRegPagos.length - 1; i >= 0 && ultimaEntrega == null; i--)
			{
				if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0)
				{
					ultimaEntrega = aRegPagos[i];
				}
			}
			for (int i= aRegPagos.length - 1; i >= 0 && ultimoPago == null; i--)
			{
				if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0)
				{
					ultimoPago = aRegPagos[i];
				}
			}
			if (null != primerPago)
			{
				ctxtImpresion.put(ID_PROP_FECH_PRIMER_PAGO_INT, primerPago.getString(strCtxtoCmpoRegPagoFchPago));
			}
			if (null != primeraEntrega)
			{
				ctxtImpresion.put(ID_PROP_FECHA_PRIMERA_ENTREGA, primeraEntrega.getString(strCtxtoCmpoRegPagoFchPago));

				//if(IConstantesSolicitud.CTE_COD_PERIODICIDAD_FP.equals(condicionCapitalSolicVO.getCodPeriodicidadCapital()))
				boolean pagoUnico = false;
				String pagoUnicoVencimientoFinal = condicionesCapital.getString("ANPMN051180");
				
				// Se comprueba si es un pago único en la fecha de vencimiento
				if(null != pagoUnicoVencimientoFinal)
				{
					pagoUnico = 0 == "1".compareTo(pagoUnicoVencimientoFinal.trim());
				}
				
				if(pagoUnico)
				{
					ctxtImpresion.put(ID_PROP_IMPORTE_PRIMERA_ENT, primeraEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
				}
				else
				{
					ctxtImpresion.put(ID_PROP_IMPORTE_PRIMERA_ENT, primeraEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
				}
			}
			
			if (null != ultimaEntrega)
			{
				ctxtImpresion.put(ID_PROP_FECHA_ULTIMA_ENTREGA, ultimaEntrega.getString(strCtxtoCmpoRegPagoFchPago));
				// 23-07-2012. Incorporación del importe de la última entrega para mostrarlo en la póliza.
				ctxtImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, UtilidadesTramitacion.bigDecimalToString(ultimaEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital),9,2,false));

				ctxtImpresion.put(ID_IMPORTE_ULTIMA_ENTREGA_ENT, ultimaEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
			}
			
			// Si se ha conseguido recuperar antes la fecha
			if(StringUtils.isBlank(ctxtImpresion.getString(ID_PROP_FECH_PRIMER_PAGO_INT)))
			{
				ctxtImpresion.put(ID_PROP_FECH_PRIMER_PAGO_INT, ultimaEntrega.getString(strCtxtoCmpoRegPagoFchPago));
			}

			ctxtImpresion.put(ID_PROP_PORC_INTERES_INICIAL, UtilidadesTramitacion.bigDecimalToString(
					ctxtPrograma.getBigDecimal(strCtxtoCmpoImpInteres.trim()),
					LengthConstants.LENGTH_0003,
					LengthConstants.LENGTH_0004,
					true));

			ctxtImpresion.put(ID_PROP_FECHA_INICIO_PLAZO, ctxtPrograma.getString(strCtxtoCmpoInicioPlazo));




			//Se han redefinido metodos de rellenado de las matrices
			if(esMulticredito) {
				//creaMatrizPagosMulticredito(ctxtPrograma, ctxtImpresion);
				rellenaCuadroAmortizacionTotalizadoMulticredito(ctxtPrograma, ctxtImpresion, bolPrestamoVariable,esDivisa);
			}else {
				crearMatrizPagos(ctxtPrograma, ctxtImpresion, bolPrestamoVariable, esDivisa, ctxtSolicitud);
			}
		}

	}


	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param ctxtPrograma
	 * @param ctxtSolicitud
	 * @param cntxtoImpresion
	 * @param paso Identificador del documento que se va a imprimir
	 * @param bolPrestamoVariable True si el prestamo es variable, false en otro caso
	 */
	private static void rellenarImpresionConCntxtoPrograma(final IContexto ctxtPrograma, 
			final IContexto ctxtSolicitud, 
			final IContexto ctxtImpresion, 
			final int paso,
			final Boolean bolPrestamoVariable,
			final Boolean esMulticredito,
			final String consumidor,
			final Boolean esCrediventas,
			final Boolean esDivisa, 
			final boolean esConcesionario,
			final IContexto[] aCtxtoIntereses,
			IContexto[] contextosComisiones,
			final IContexto condicionesCapital)
	{
		//		final String strCtxtoCmpoFechaSol = "ANPMN050915";
		//		final String strCtxtoCmpoNumCuotas = "ANPMN075080"; // Pendiente de si el numero de cuotas es de capital + intereses...
		//		final String strCtxtoCmpoDescPeriodoAmort = "ANPMN075090";
		//		final String strCtxtoCmpoImpPrimeraCuota = "ANPMN075100";
		//		final String strCtxtoCmpoDescCuotasSucesivasAmort = "ANPMN075110";
		//		final String strCtxtoCmpoImpUltimaCuota = "ANPMN075120";
		//		final String strCtxtoCmpoImpCapitalPrestamo = "ANPMN075130";
		final String strCtxtoRegMatrizPago = "ANPMN075140";
		final String strCtxtoCmpoRegPagoNumVcto = "ANPMN075141";
		//final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
		//		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
		final String strCtxtoCmpoPorcTae = "ANPMN075150";
		//		final String strCtxtoCmpoImpGastosSeguro = "ANPMN075160";
		//		final String strCtxtoCmpoImpTasacion = "ANPMN075170";
		//		final String strCtxtoCmpoPorcTasacion = "ANPMN075180";
		//		final String strCtxtoCmpoRelAlojamiento = "ANPMN075190"; // Importe para calcular el importe de alojamiento
		//		final String strCtxtoCmpoInicioPlazo = "ANPMN075200";
		//		final String strCtxtoCmpoVerficiacionRegistral = "ANPMN075230";
		//		final String strCtxtoCmpoArancelesNotariales = "ANPMN075240";
		//		final String strCtxtoCmpoArancelesRegistrales = "ANPMN075250";
		//		final String strCtxtoCmpoServicioTasacion = "ANPMN075260";
		//		final String strCtxtoCmpoImpRenta = "ANPMN075270";
		//		final String strCtxtoCmpoImpInteresOrdinario = "ANPMN075280";
		//		final String strCtxtoCmpoImpInteresDemora = "ANPMN075290";
		//		final String strCtxtoCmpoImpCostasYgastos = "ANPMN075300";
		//		final String strCtxtoCmpoImpTotalGarantizado = "ANPMN075310";
		//final String strCtxtoCmpoImpInteres = "ANPMN075390";
		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		final String StrCtxtoCampoNumeroCuotas = "ANPMN075080";
		//final String strSolPropCodigoProducto = "ANPMN050080";

		final String strContextoImpresionImpComisApertura = "ANPMN100350";
		final String strContextoImpresionImpGastosEstudio = "ANPMN100370";


		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoPrograma");	
		}
		if (ctxtPrograma != null)
		{
			final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
			int iNumEntregas = 0;
			String strFechaPrimVencInt = null;

			BigDecimal totalImpInteres = BigDecimal.ZERO;
			BigDecimal importeTotal = BigDecimal.ZERO;

			Integer contPrimerPeriodo = 0;			
			
			// Mapeos comunes
			for (IRegistro registroActual : aRegPagos)
			{
				if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0)
				{
					iNumEntregas++;
				}
				
				importeTotal = importeTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
				
				if(BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0
				|| esCrediventas)
				{
					//Pagos de capital mas interés 
					totalImpInteres = totalImpInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));

					if (strFechaPrimVencInt == null)
					{
						//31-01-2013 Corregido: strFechaPrimVencInt = fecha de la primera revisión:
						//strFechaPrimVencInt es la fecha del primer cambio de interés en lugar de la fecha de primer pago de interés 
						//que es lo que se estaba asignando en el código que aparece comentado 
						//strFechaPrimVencInt = registroActual.getString(strCtxtoCmpoRegPagoFchPago);
						strFechaPrimVencInt = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
					}
				}
				/**
				 * Esto soluciona un problema que existia con los prestamos para consumidores con interes 0
				 */
				if(Constantes.CTE_LETRA_S.equals(consumidor)) {
					if (strFechaPrimVencInt == null)
					{
						//31-01-2013 Corregido: strFechaPrimVencInt = fecha de la primera revisión:
						//strFechaPrimVencInt es la fecha del primer cambio de interés en lugar de la fecha de primer pago de interés 
						//que es lo que se estaba asignando en el código que aparece comentado 
						//strFechaPrimVencInt = registroActual.getString(strCtxtoCmpoRegPagoFchPago);
						strFechaPrimVencInt = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
					}
				}
				
				// Comprobar si tiene mas de un registro para el periodo 1
				if (BigDecimal.ONE.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoNumVcto)) == 0)
				{
					contPrimerPeriodo++;
				}
			}
			/**
			 * Si es crediventas al importe total debemos añadir ademas el importe de la comision de apertura.
			 * Tenemos que hacerlo fuera una vez realizada la suma de todos los parciales de la matriz de pagos.
			 * 
			 * 20151015 Modificación para que también se sumen los gastos en caso de Multicrédito
			 * 
			 * 20160225 Modificacion para que tambien se sumen los gastos en caso de Concesionarios.
			 */
			// 2016-08-03 - Sumar los gastos siempre
			//if((esCrediventas) || (esMulticredito) || (esConcesionario)) {
			/**
			 * Se suma al importe total todos los gastos pagados en el momento de la formalizacion, si existen
			 * comision de apertura y comision de gastos de estudio.
			 */
			
			BigDecimal financiaComisionApertura = null;
			BigDecimal financiaGastosEstudio = null;
			if(null != contextosComisiones)
			{
				for(IContexto contexto:contextosComisiones)
				{
					if("003".equals(contexto.getString("ANPMN053040")))
					{
						financiaComisionApertura = contexto.getBigDecimal("ANPMN053230");
					}
					else if ("005".equals(contexto.getString("ANPMN053040")))
					{
						financiaGastosEstudio = contexto.getBigDecimal("ANPMN053230");
					}
				}
			}

			if(!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(strContextoImpresionImpComisApertura)))
			{
				if(null == financiaComisionApertura 
				||(1 != financiaComisionApertura.intValue()
				  && ( paso == PASO_DOC_IMPRESION_PREVIA
				  	|| paso == PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA
			 		|| paso == PASO_DOC_OFERTA_VINCULANTE
		 			|| paso == PASO_DOC_POLIZA_PRESTAMO
		 			|| paso == PASO_DOC_CONTRATO_CREDIVENTAS)))
				{
					/**
					 * Se suma al importe total el importe de la comision de apertura si existe
					 */
					if(!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(strContextoImpresionImpComisApertura))) 
					{
						importeTotal = importeTotal.add(UtilidadesTramitacion.stringToBigDecimal(ctxtImpresion.getString(strContextoImpresionImpComisApertura), Locale.getDefault()));
					}
				}
			}
			
			if(!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(strContextoImpresionImpGastosEstudio)))
			{
				if(null == financiaGastosEstudio 
				||(1 != financiaGastosEstudio.intValue()
				  && ( paso == PASO_DOC_IMPRESION_PREVIA
				  	|| paso == PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA
			 		|| paso == PASO_DOC_OFERTA_VINCULANTE
		 			|| paso == PASO_DOC_POLIZA_PRESTAMO
		 			|| paso == PASO_DOC_CONTRATO_CREDIVENTAS)))
				{
					/**
					 * Se suma al importe total el importe de los gastos de estudio
					 */
					if(!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(strContextoImpresionImpGastosEstudio))) 
					{
						importeTotal = importeTotal.add(UtilidadesTramitacion.stringToBigDecimal(ctxtImpresion.getString(strContextoImpresionImpGastosEstudio), Locale.getDefault()));
					}
				}
			}
			
			//}

			// 23-07-2012. Añadido para obtener la fecha limite interes inicial en la póliza en el campo ANPMN100240 


			//ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL, strFechaPrimVencInt);


			// 06-09-2012. G2525


			//ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL, fechaSiguienteRevision);


			// FIN COMENTARIO


			//ctxtImpresion.put(ID_PROP_IMP_TOTAL_PAGOS_INT, UtilidadesTramitacion.bigDecimalToString(totalImpInteres, 7, 2, Boolean.FALSE));
			ctxtImpresion.put(ID_PROP_IMP_TOTAL_PAGOS_INT, UtilidadesTramitacion.bigDecimalToString(importeTotal, 7, 2, Boolean.FALSE));

			ctxtImpresion.put(ID_PROP_IMP_TOTAL_INTERESES, 
					UtilidadesTramitacion.bigDecimalToString(totalImpInteres, 7, 2, Boolean.FALSE));



			ctxtImpresion.put(ID_PROP_NUMERO_ENTREGAS, new BigDecimal(iNumEntregas));
			//ctxtImpresion.put(ID_PROP_NUM_PAGOS_INTERESES, String.valueOf(iNumPagos));

			ctxtImpresion.put(ID_PROP_NUM_PAGOS_INTERESES, ctxtPrograma.getBigDecimal(StrCtxtoCampoNumeroCuotas).toString());

			//Poliza, tres decimales y sin tanto por cien
			ctxtImpresion.put(ID_PROP_PRCTJ_TAE_PRESTAMO, 
					UtilidadesTramitacion.bigDecimalToString(ctxtPrograma.getBigDecimal(strCtxtoCmpoPorcTae),
							LengthConstants.LENGTH_0003,
							LengthConstants.LENGTH_0003,
							false));

			// Si tiene periodo irregular
			if (contPrimerPeriodo > 1)
			{
				ctxtImpresion.put(ID_PROP_MARCA_PRIMERA_ENT, Constantes.CTE_STRING_ASTERISCO);
			}			
			
			switch (paso)
			{
			case PASO_DOC_IMPRESION_PREVIA:
				rellenarImpresionConCntxtoProgramaInfoPrevia(ctxtPrograma, ctxtSolicitud, ctxtImpresion,strFechaPrimVencInt, 
						aRegPagos, paso, bolPrestamoVariable, esMulticredito, consumidor);
				// 20151015 Se incluye para la impresión previa el campo ID_PROP_IMPORTE_PRIMERA_ENT = "ANPMN100161"
				rellenarImpresionConCntxtProgramaInformacionNormalizadaEuropea(ctxtPrograma, ctxtSolicitud, ctxtImpresion, strFechaPrimVencInt, 
						aRegPagos, bolPrestamoVariable, aCtxtoIntereses);
				break;
			case PASO_DOC_INFORMACION_NORMALIZADA_EUROPEA:
				rellenarImpresionConCntxtProgramaInformacionNormalizadaEuropea(ctxtPrograma, ctxtSolicitud, ctxtImpresion, strFechaPrimVencInt,
						aRegPagos, bolPrestamoVariable, aCtxtoIntereses);

				break;
			case PASO_DOC_OFERTA_VINCULANTE:
				rellenarImpresionConCntxtoProgramaPolizaContratoCrediventas(ctxtPrograma, ctxtSolicitud, ctxtImpresion, 
						aRegPagos, paso, bolPrestamoVariable, esMulticredito, consumidor,esDivisa, condicionesCapital);
				
				rellenarCamposAdicionales(ctxtSolicitud, ctxtImpresion, aCtxtoIntereses, aRegPagos, ctxtPrograma); 

				break;
			case PASO_DOC_POLIZA_PRESTAMO: 
				rellenarImpresionConCntxtoProgramaPolizaContratoCrediventas(ctxtPrograma, ctxtSolicitud, ctxtImpresion, 
						aRegPagos, paso, bolPrestamoVariable, esMulticredito, consumidor,esDivisa, condicionesCapital);

				rellenarCamposAdicionales(ctxtSolicitud, ctxtImpresion, aCtxtoIntereses, aRegPagos, ctxtPrograma);
				rellenarCamposPolizasASF(ctxtSolicitud, ctxtImpresion, aCtxtoIntereses, aRegPagos, condicionesCapital);
				

				break;
			case PASO_DOC_CONTRATO_CREDIVENTAS:
				rellenarImpresionConCntxtoProgramaPolizaContratoCrediventas(ctxtPrograma, ctxtSolicitud, ctxtImpresion, 
						aRegPagos, paso, bolPrestamoVariable, esMulticredito, consumidor,esDivisa, condicionesCapital);

				rellenarCamposPolizasASF(ctxtSolicitud, ctxtImpresion, aCtxtoIntereses, aRegPagos, condicionesCapital);
				
				break;
			default:
				break;
			}
		}
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoPrograma");	
		}
	}

	//	/**
	//	 * Rellena el registro de matriz de observaciones
	//	 * @param ctxtPrograma
	//	 * @param ctxtImpresion
	//	 */
	//	private static void crearMatrizObservaciones(final IContexto ctxtPrograma,
	//			final IContexto ctxtImpresion)
	//	{
	//		final String strCtxtoRegNumObservaciones = "ANPMN075340";
	//		final int observacionesCount = ctxtPrograma.getBigDecimal(strCtxtoRegNumObservaciones).intValue();
	//		
	//		if (0 != observacionesCount)
	//		{
	//			if (LOGGER.isInfoEnabled())
	//			{
	//				LOGGER.info("INICIO: Creando matriz de observaciones");
	//			}
	//			final String strCtxtoRegMatrizObservaciones = "ANPMN075220";
	//			final String strCtxtoRegCmpoObsrvLinea = "ANPMN075221";
	//
	//			final IRegistro[] aRegObservaciones = ctxtPrograma.getRegistro(strCtxtoRegMatrizObservaciones);
	//			List <IRegistro> lstObservaciones = new ArrayList<IRegistro>(observacionesCount);
	//			for (int i=0; i < observacionesCount; i++)
	//			{
	//				final IRegistro registroActual = aRegObservaciones[i];
	//				IRegistro regObservacion = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_OBSERVACIONES);
	//				
	//				regObservacion.put(ID_PROP_LINEA_OBSERVACIONES, registroActual.getString(strCtxtoRegCmpoObsrvLinea));
	//				lstObservaciones.add(regObservacion);
	//				lstObservaciones.add(regObservacion);
	//			}
	//			if (!lstObservaciones.isEmpty())
	//			{
	//				ctxtImpresion.put(ID_REG_FIADORES, lstObservaciones.toArray(new IRegistro[lstObservaciones.size()]));
	//			}	
	//			ctxtImpresion.put(ID_REG_OBSERVACIONES, new BigDecimal(observacionesCount));
	//			if (LOGGER.isInfoEnabled())
	//			{
	//				LOGGER.info("FIN: Creando matriz de observaciones");
	//			}
	//		}
	//	}

	/**
	 * Rellena el registro de matriz de pagos para la FIPER, totalizando a partir del segundo año
	 * Se considera el primer año, desde la fecha del primer pago hasta el 31 de diciembre de ese año.
	 * Se totalizan los pagos por año a partir del segundo (teniendo como referencia el 31 de diciembre del año en cuestión)
	 * @param ctxtPrograma
	 * @param ctxtImpresion
	 * @param isPrestamoVariable
	 */
	private static void rellenaCuadroAmortizacionTotalizadoMulticredito(final IContexto ctxtPrograma,
			final IContexto ctxtImpresion, final Boolean isPrestamoVariable,final Boolean esDivisa)
	{

		final String strCtxtoRegNumCuotas = "ANPMN075080";
		final String strCtxtoRegNumRegistros = "ANPMN075320"; //en este campo en realidad se almacena el tamaño 
		//de la matriz de pagos.
		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		final int pagosCount = ctxtPrograma.getBigDecimal(strCtxtoRegNumCuotas).intValue();
		final int numRegistros = ctxtPrograma.getBigDecimal(strCtxtoRegNumRegistros).intValue();
		final String fechaSiguienteRevision = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);


		ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL, fechaSiguienteRevision);

		if (0 != pagosCount)
		{
			final String strCtxtoRegMatrizPago = "ANPMN075140";
			final String strCtxtoCmpoRegNumVencimiento = "ANPMN075141";
			final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
			final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
			final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
			final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
			final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
			final String strCtxtoCampoInteresCapitalizado = "ANPMN075550";

			final String strCtxtoImpresionCarencia = "ANPMN100580";

			BigDecimal bgPago = BigDecimal.ZERO;
			BigDecimal bgInteres = BigDecimal.ZERO;
			BigDecimal bgPagosTotal = BigDecimal.ZERO;
			BigDecimal bgPagosNoVen = BigDecimal.ZERO;

			final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
			final List <IRegistro> lstRegPagos = new ArrayList<IRegistro>(pagosCount);
			final List <IRegistro> lstRegPagosAnuales = new ArrayList<IRegistro>(pagosCount);

			List<IRegistro> lRegPagosMensual = new ArrayList<IRegistro>();
			List<IRegistro> lRegPagosAnual = new ArrayList<IRegistro>();
			int i = 0;
			int iMes= 1;
			int countAnho = 0; //Contador para la numeración de los años en los registros totalizados por año
			BigDecimal carencia = BigDecimal.ZERO;
			BigDecimal contadorPagos = BigDecimal.ZERO;
			boolean insertarRegistro = false;

			if(null != ctxtImpresion.getBigDecimal(strCtxtoImpresionCarencia)) {
				carencia = ctxtImpresion.getBigDecimal(strCtxtoImpresionCarencia);
			}


			//if(	!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(ID_PROP_MONEDA)) &&
			//	!ctxtImpresion.getString(ID_PROP_MONEDA).equals(MONEDA_EUROS)) {

			//ctxtImpresion.put(ID_PROP_FECHA_CIERRE_INIC, fechaSiguienteRevision);
			//}


			//if (!UtilidadesTramitacion.isEmptyOrNullString(ctxtImpresion.getString(ID_PROP_FECHA_CIERRE_INIC)))
			//{
			//ctxtImpresion.put(ID_PROP_FEC_CAMBIO_INTS, DateUtils.formatDate(
			//(DateUtils.addDays(DateUtils.parseDate(fechaSiguienteRevision, DateUtils.FORMATO_FECHA_CORTO), 1)),DateUtils.FORMATO_FECHA_CORTO));
			//}

			//Desde la fecha del primer pago hasta el duodécimo se imprimen tal como llegan
			//y se suman los totales para visualizarlos en el Año 1 (Año 1 no tiene por qué coincidir con año natural)

			/*20150305 Si el primer vencimiento llega desdoblado los dos primeros registros que se envian al documento
			 * pertenecen al primer mes.
			 * 
			 * Si el segundo registro tiene el mismo número de vencimiento y fecha que el primero y además
			 * el capital del primero es 0 entonces el primer vencimiento viene desdoblado
			 * 
			 * */
			if ((0 == aRegPagos[0].getBigDecimal(strCtxtoCmpoRegNumVencimiento).compareTo(aRegPagos[1].getBigDecimal(strCtxtoCmpoRegNumVencimiento))) &&
					(aRegPagos[0].getString(strCtxtoCmpoRegPagoFchPago).equals(aRegPagos[1].getString(strCtxtoCmpoRegPagoFchPago))) &&
					(0 == BigDecimal.ZERO.compareTo(aRegPagos[0].getBigDecimal(strCtxtoCmpoRegPagoImpCapital))))
			{
				IRegistro regPago = crearRegistroPagoMensual(ctxtImpresion, aRegPagos[i], iMes); //i==0, registro 0
				lstRegPagos.add(regPago);
				bgPago = bgPago.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
				bgInteres = bgInteres.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
				bgPagosTotal = bgPagosTotal.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
				i++;
				//NO INCREMENTAMOS MES
				regPago = crearRegistroPagoMensual(ctxtImpresion, aRegPagos[i], iMes); //i==1, registro 1
				lstRegPagos.add(regPago);
				bgPago = bgPago.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
				bgInteres = bgInteres.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
				bgPagosTotal = bgPagosTotal.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
				i++;
				iMes++;
				//a partir de aqui comienza el mes 2 en el registro 2 comenzando en 0
			}



			while(i < pagosCount && iMes <= Constantes.MESES_ANHO) {
				contadorPagos = contadorPagos.add(BigDecimal.ONE);
				final IRegistro registroActual = aRegPagos[i];

				insertarRegistro = escribirRegistroPago(contadorPagos, carencia,esDivisa);
				if(insertarRegistro) {
					/**
					 * Comprobar si el valor interes capitalizado no viene nulo
					 * Si no viene nulo y hay que insertar el registro comprobamos si tenemos que recalcular
					 */
					if(null != ctxtPrograma.getBigDecimal(strCtxtoCampoInteresCapitalizado)) {
						recalculaConInteresCapitalizado(ctxtPrograma.getBigDecimal(strCtxtoCampoInteresCapitalizado), registroActual, contadorPagos, carencia);
					}

					lRegPagosMensual.add(aRegPagos[i]);
					if (isPrestamoVariable) {
						IRegistro regPago = crearRegistroPagoMensual(ctxtImpresion, registroActual, iMes);
						lstRegPagos.add(regPago);
					}
					else {
						IRegistro regPago = crearRegistroPagoMensual(ctxtImpresion, registroActual, iMes);
						lstRegPagos.add(regPago);
					}

					//Sumamos los totales
					bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
					bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
					//Capital pendiente por año = capital pendiente del ultimo mes de ese año
					bgPagosNoVen = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
				}
				i++;
				iMes++;
			}

			//Añadimos los totales del Año 1
			countAnho++;
			anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago,
					strCtxtoCmpoRegPagoImpInteres,
					strCtxtoCmpoRegPagoImpCapital,
					strCtxtoCmpoRegPagoImpTotal,
					strCtxtoCmpoRegPagoImpCapitalPdte, bgPago,
					bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos,
					lRegPagosAnual, i,countAnho);

			bgPago = BigDecimal.ZERO;
			bgInteres = BigDecimal.ZERO;
			bgPagosTotal = BigDecimal.ZERO;
			iMes = 1;

			//A partir del Año 2 se calcula el sumatorio de los pagos de los siguientes 12 meses y 
			//se imprime el total por año
			//Calculamos los totales y los insertamos en lRegPagosAnual
			//while (i < pagosCount) {
			while (i < numRegistros) {
				final IRegistro registroActual = aRegPagos[i];
				if (iMes <= 12) {
					bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
					bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
					//Capital pendiente por año = capital pendiente del ultimo mes de ese año
					bgPagosNoVen = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
					i++;
					iMes++;
				}else {
					countAnho++;
					anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago,
							strCtxtoCmpoRegPagoImpInteres,
							strCtxtoCmpoRegPagoImpCapital,
							strCtxtoCmpoRegPagoImpTotal,
							strCtxtoCmpoRegPagoImpCapitalPdte, bgPago,
							bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos,
							lRegPagosAnual, i,countAnho);

					bgPago = BigDecimal.ZERO;
					bgInteres = BigDecimal.ZERO;
					bgPagosTotal = BigDecimal.ZERO;


					//i++;
					iMes =1;
				}
			}

			countAnho++;
			anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago,
					strCtxtoCmpoRegPagoImpInteres,
					strCtxtoCmpoRegPagoImpCapital, strCtxtoCmpoRegPagoImpTotal,
					strCtxtoCmpoRegPagoImpCapitalPdte, bgPago, bgInteres,
					bgPagosTotal, bgPagosNoVen, aRegPagos, lRegPagosAnual, i, countAnho);


			//Recorremos los pagos anuales (lRegPagosAnual) y mandamos a imprimir cada uno de sus registros
			if (isPrestamoVariable)
			{
				//				Si es un prestamo variable se copian primero todos los registros de pago de capital
				//				Despues se copian todos los registros que tengan importe de interes filtrado por 
				//				la fecha que viene por programa
				for (int j = 0; j < lRegPagosAnual.size(); j++)
				{
					final IRegistro registroActual = lRegPagosAnual.get(j);

					IRegistro regPago = crearRegistroPagoAnual(ctxtImpresion, registroActual); 
					lstRegPagosAnuales.add(regPago);
				}
			}
			else
			{
				//				Si es un prestamo fijo se copian todos los registros que llegan desde programa
				for (int j=0; j < lRegPagosAnual.size(); j++)
				{
					IRegistro regPago = crearRegistroPagoAnual(ctxtImpresion, lRegPagosAnual.get(j)); 
					lstRegPagosAnuales.add(regPago);
				}
			}

			if (!lstRegPagos.isEmpty())
			{
				ctxtImpresion.put(ID_REG_PAGOS, lstRegPagos.toArray(new IRegistro[lstRegPagos.size()]));
			}

			//Calculamos los totales para cuotas, capital e intereses
			if (!lstRegPagosAnuales.isEmpty())
			{

				ctxtImpresion.put(ID_REG_PAGOS, lstRegPagosAnuales.toArray(new IRegistro[lstRegPagosAnuales.size()]));

				//Si tenemos pagos mensuales y anuales metemos todos en la misma lista
				if(!lstRegPagos.isEmpty() && !lstRegPagosAnuales.isEmpty()) {

					List<IRegistro> listaTotalMesAnho = new ArrayList<IRegistro>();
					listaTotalMesAnho.addAll(lstRegPagos);
					listaTotalMesAnho.addAll(lstRegPagosAnuales);

					ctxtImpresion.put(ID_REG_PAGOS, listaTotalMesAnho.toArray(new IRegistro[listaTotalMesAnho.size()]));
				}	

				BigDecimal capitalTotal = BigDecimal.ZERO;
				BigDecimal interesTotal = BigDecimal.ZERO;
				BigDecimal importesCuotaTotal = BigDecimal.ZERO;

				for (IRegistro regPago : lstRegPagosAnuales)
				{

					//UtilidadesTramitacion.stringToBigDecimal(regPago.getString(ID_PROP_PAGOS_CAPITAL),  Locale.getDefault());
					//capitalTotal = capitalTotal.add(new BigDecimal(regPago.getString(ID_PROP_PAGOS_CAPITAL)));
					capitalTotal = capitalTotal.add(UtilidadesTramitacion.stringToBigDecimal(regPago.getString(ID_PROP_PAGOS_CAPITAL),  Locale.getDefault()));
					//interesTotal = interesTotal.add(new BigDecimal(regPago.getString(ID_PROP_PAGOS_INTERES)));
					interesTotal = interesTotal.add(UtilidadesTramitacion.stringToBigDecimal(regPago.getString(ID_PROP_PAGOS_INTERES),  Locale.getDefault()));
					//importesCuotaTotal = importesCuotaTotal.add(new BigDecimal(regPago.getString(ID_PROP_PAGOS_TOTAL)));
					importesCuotaTotal = importesCuotaTotal.add(UtilidadesTramitacion.stringToBigDecimal(regPago.getString(ID_PROP_PAGOS_TOTAL),  Locale.getDefault()));
				}



				//ctxtImpresion.put(ID_PROP_TOTAL_CAPITAL, capitalTotal);
				ctxtImpresion.put(ID_PROP_IMP_TOTAL_INTERESES, interesTotal.toString());
				//ctxtImpresion.put(ID_PROP_TOTAL_CUOTA, importesCuotaTotal);
			}
		}
	}


	/**
	 * Crea un registro con los cómputos anuales de amortización y lo inserta en la lista de pagos
	 * @param strCtxtoCmpoRegPagoFchPago
	 * @param strCtxtoCmpoRegPagoImpInteres
	 * @param strCtxtoCmpoRegPagoImpCapital
	 * @param strCtxtoCmpoRegPagoImpTotal
	 * @param strCtxtoCmpoRegPagoImpCapitalPdte
	 * @param bgPago
	 * @param bgInteres
	 * @param bgPagosTotal
	 * @param bgPagosNoVen
	 * @param lRegPagos
	 * @param lRegPagosAnual
	 * @param indice
	 */
	private static void anhadirRegistroAnual(
			final String strCtxtoCmpoRegPagoFchPago,
			final String strCtxtoCmpoRegPagoImpInteres,
			final String strCtxtoCmpoRegPagoImpCapital,
			final String strCtxtoCmpoRegPagoImpTotal,
			final String strCtxtoCmpoRegPagoImpCapitalPdte, BigDecimal bgPago,
			BigDecimal bgInteres, BigDecimal bgPagosTotal,
			BigDecimal bgPagosNoVen, final IRegistro[] lRegPagos,
			List<IRegistro> lRegPagosAnual, int indice, int numAnho)
	{
		IRegistro registroTotales;
		final IRegistro registroAnterior = lRegPagos[indice-1];
		registroTotales = registroAnterior;
		registroTotales.put(strCtxtoCmpoRegPagoFchPago, String.valueOf(numAnho));
		registroTotales.put(strCtxtoCmpoRegPagoImpCapital, bgPago);
		registroTotales.put(strCtxtoCmpoRegPagoImpInteres, bgInteres);
		registroTotales.put(strCtxtoCmpoRegPagoImpTotal, bgPagosTotal);
		registroTotales.put(strCtxtoCmpoRegPagoImpCapitalPdte, bgPagosNoVen);
		lRegPagosAnual.add(registroTotales);
	}

	/**
	 * 
	 * @param ctxtImpresion
	 * @param registroActual
	 * @param ocultarImporte Si True introduce una máscara en el campo importe de interés y el importe toal
	 * @return Un resgistro para la matriz de pagos a partir del registro del programa ANPMR203
	 *  que se pasa como parámetro
	 */
	private static IRegistro crearRegistroPagoAnual(final IContexto ctxtImpresion, final IRegistro registroActual)
	{
		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
		BigDecimal totalPagosCuota = BigDecimal.ZERO;

		final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_PAGOS);
		regPago.put(ID_PROP_PAGOS_FEC_PAGO, ETIQ_TEXTO_ANHO + UtilidadesTramitacion.stringToBigDecimal(registroActual.getString(strCtxtoCmpoRegPagoFchPago), Locale.getDefault()).toString());
		//regPago.put(ID_PROP_SUBTOTALES_NUMERO_ANHO, UtilidadesTramitacion.stringToBigDecimal(registroActual.getString(strCtxtoCmpoRegPagoFchPago), Locale.getDefault()));
		//regPago.put(ID_PROP_PAGOS_CAPITAL, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital).toString());
		regPago.put(ID_PROP_PAGOS_CAPITAL, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital), 11, 2, false));
		regPago.put(ID_PROP_PAGOS_CAPIT_NO_VEN, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte), 11, 2, false));
		totalPagosCuota = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital).add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
		regPago.put(ID_PROP_PAGOS_TOTAL, UtilidadesTramitacion.bigDecimalToString(totalPagosCuota, 11, 2, false));
		regPago.put(ID_PROP_PAGOS_INTERES, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres), 11, 2, false));

		return regPago;
	}

	//	/**
	//	 * Crea la matriz de pagos para el multicredito 
	//	 */
	//	private static void creaMatrizPagosMulticredito(final IContexto ctxtPrograma,
	//			final IContexto ctxtImpresion,final Boolean escribirPago) {
	//	
	//		final String strCtxtoRegNumPagos = "ANPMN075320";
	//		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
	//		final int pagosCount = ctxtPrograma.getBigDecimal(strCtxtoRegNumPagos).intValue();
	//		final String fechaSiguienteRevision = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
	//		
	//		if (0 != pagosCount)
	//		{
	//			if (LOGGER.isDebugEnabled())
	//			{
	//				LOGGER.debug("INICIO: Creando matriz de pagos");
	//			}
	//			final String strCtxtoRegMatrizPago = "ANPMN075140";
	//			final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
	//			final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
	//
	//			final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
	//			final List <IRegistro> lstRegPagos = new ArrayList<IRegistro>(pagosCount);
	//			
	//			// 06-09-2012. G2525
	//			
	//			
	//			ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL, fechaSiguienteRevision);
	//		
	//		//Si es un prestamo variable se copian primero todos los registros de pago de capital
	////				Despues se copian todos los registros que tengan importe de interes filtrado por 
	////				la fecha que viene por programa
	//				final Date dateFechaRevision = DateUtils.parseDate(fechaSiguienteRevision, 
	//						DateUtils.FORMATO_FECHA_CORTO);
	//				for (int i = 0; i < pagosCount; i++)
	//				{
	//					final IRegistro registroActual = aRegPagos[i];
	//					
	//					final Date dateFechaPago = DateUtils.parseDate(
	//							registroActual.getString(strCtxtoCmpoRegPagoFchPago), 
	//							DateUtils.FORMATO_FECHA_CORTO);
	//					
	//					boolean ocultarImporte = false;
	//					boolean esPrimerPago = false;
	//					//Si se trata del primer pago y viene a 0 el importe 
	//					if(i == 0 ) {						
	//						esPrimerPago = true;
	//					}
	//					
	//					if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0 &&
	//							dateFechaPago.compareTo(dateFechaRevision) > 0)
	//					{
	//						ocultarImporte = true;
	//					}
	//					//Se fuerza que salga todo el cuadro con el parametro ocultar importe a falso
	//					IRegistro regPago = crearRegistroPagoMulticredito(ctxtImpresion, registroActual, false,esPrimerPago,escribirPago); 
	//					lstRegPagos.add(regPago);
	//					
	//				}
	//			if (!lstRegPagos.isEmpty())
	//			{
	//				ctxtImpresion.put(ID_REG_PAGOS, lstRegPagos.toArray(new IRegistro[lstRegPagos.size()]));
	//			}	
	//			if (LOGGER.isDebugEnabled())
	//			{
	//				LOGGER.debug("FIN: Creando matriz de pagos");
	//			}
	//		
	//		
	//		}
	//		
	//	}

	/**
	 * Rellena el registro de matriz de pagos
	 * @param ctxtPrograma
	 * @param ctxtImpresion
	 * @param isPrestamoVariable
	 */
	private static void crearMatrizPagos(final IContexto ctxtPrograma, final IContexto ctxtImpresion, 
			final Boolean isPrestamoVariable, final Boolean esDivisa, final IContexto ctxtSolicitud)
	{
		final String strCtxtoRegNumPagos = "ANPMN075320";
		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		final String strCtxtoSolicitudCarenciaInteres = "ANPMN050670";

		final int pagosCount = ctxtPrograma.getBigDecimal(strCtxtoRegNumPagos).intValue();
		final String fechaSiguienteRevision = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
		BigDecimal contadorPago = BigDecimal.ONE;
		boolean escribirPago = false;
		BigDecimal carenciaInteres = BigDecimal.ZERO;

		// Carencia de interes
		if (null != ctxtSolicitud.getBigDecimal(strCtxtoSolicitudCarenciaInteres))
		{
			carenciaInteres = ctxtSolicitud.getBigDecimal(strCtxtoSolicitudCarenciaInteres);
		}

		if (0 != pagosCount)
		{
			if (LOGGER.isDebugEnabled())
			{
				LOGGER.debug("INICIO: Creando matriz de pagos");
			}
			final String strCtxtoRegMatrizPago = "ANPMN075140";
			final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
			final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";

			final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
			final List <IRegistro> lstRegPagos = new ArrayList<IRegistro>(pagosCount);

			// 06-09-2012. G2525

			if (StringUtils.isNotBlank(fechaSiguienteRevision))
			{
				ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL, fechaSiguienteRevision);
			}
			else
			{
				ctxtImpresion.put(ID_PROP_FEC_LIMITE_INTER_INICIAL, Constantes.CTE_DATO_NULO);
			}


			if (isPrestamoVariable)
			{
				//				Si es un prestamo variable se copian primero todos los registros de pago de capital
				//				Despues se copian todos los registros que tengan importe de interes filtrado por 
				//				la fecha que viene por programa
				final Date dateFechaRevision = DateUtils.parseDate(fechaSiguienteRevision, 
						DateUtils.FORMATO_FECHA_CORTO);
				for (int i = 0; i < pagosCount; i++)
				{
					contadorPago = contadorPago.add(BigDecimal.ONE);

					// 2016-10-04 - Realizar comprobacion para incluir registro pago utilizando
					//              la carencia de interes, en lugar de la carencia de capital.
					//escribirPago = UtilidadesImpresion.escribirRegistroPago(contadorPago, carencia,esDivisa);
					escribirPago = escribirRegistroPago(contadorPago, carenciaInteres, esDivisa);

					final IRegistro registroActual = aRegPagos[i];

					final Date dateFechaPago = DateUtils.parseDate(
							registroActual.getString(strCtxtoCmpoRegPagoFchPago), 
							DateUtils.FORMATO_FECHA_CORTO);

					boolean ocultarImporte = false;
					if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0 &&
							dateFechaPago.compareTo(DateUtils.addDays(dateFechaRevision, 1)) > 0)
					{
						ocultarImporte = true;
					}
					IRegistro regPago = crearRegistroPago(ctxtImpresion, registroActual, ocultarImporte,escribirPago); 
					lstRegPagos.add(regPago);

				}
			}
			else
			{
				//				Si es un prestamo fijo se copian todos los registros que llegan desde programa
				for (int i=0; i < pagosCount; i++)
				{
					contadorPago = contadorPago.add(BigDecimal.ONE);

					// 2016-10-04 - Realizar comprobacion para incluir registro pago utilizando
					//              la carencia de interes, en lugar de la carencia de capital.
					//escribirPago = UtilidadesImpresion.escribirRegistroPago(contadorPago, carencia,esDivisa);
					escribirPago = escribirRegistroPago(contadorPago, carenciaInteres, esDivisa);

					IRegistro regPago = crearRegistroPago(ctxtImpresion,  aRegPagos[i], Boolean.FALSE,escribirPago); 
					lstRegPagos.add(regPago);
				}
			}
			if (!lstRegPagos.isEmpty())
			{
				ctxtImpresion.put(ID_REG_PAGOS, lstRegPagos.toArray(new IRegistro[lstRegPagos.size()]));
			}	
			if (LOGGER.isDebugEnabled())
			{
				LOGGER.debug("FIN: Creando matriz de pagos");
			}
		}
	}

	/**
	 * 
	 * @param ctxtImpresion
	 * @param registroActual
	 * @param numeroMes
	 * @return Un resgistro para la matriz de pagos a partir del registro del programa ANPMR203
	 *  que se pasa como parámetro
	 */
	private static IRegistro crearRegistroPagoMensual(final IContexto ctxtImpresion, final IRegistro registroActual, int numeroMes)
	{
		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoCuota = "ANPMN075145";
		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";

		final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_PAGOS);
		regPago.put(ID_PROP_PAGOS_FEC_PAGO, registroActual.getString(strCtxtoCmpoRegPagoFchPago));
		//regPago.put(ID_PROP_NUMERO_MES, UtilidadesTramitacion.stringToBigDecimal(registroActual.getString(strCtxtoCmpoRegPagoFchPago), Locale.getDefault()));
		//regPago.put(ID_PROP_NUMERO_MES, new BigDecimal(numeroMes));
		regPago.put(ID_PROP_PAGOS_CAPITAL, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital), 11, 2, false));
		regPago.put(ID_PROP_PAGOS_CAPIT_NO_VEN, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte), 11, 2, false));
		//cuota = strCtxtoCmpoRegPagoImpCapital + strCtxtoCmpoRegPagoImpInteres
		regPago.put(ID_PROP_PAGOS_TOTAL, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoCuota), 11, 2, false));
		regPago.put(ID_PROP_PAGOS_INTERES, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres), 11, 2, false));

		return regPago;
	}


	/**
	 * 
	 * @param ctxtImpresion
	 * @param registroActual
	 * @param ocultarImporte Si True introduce una máscara en el campo importe de interés y el importe toal
	 * @return Un resgistro para la matriz de pagos a partir del registro del programa ANPMR203
	 *  que se pasa como parámetro
	 */
	private static IRegistro crearRegistroPago(final IContexto ctxtImpresion, final IRegistro registroActual, boolean ocultarImporte,boolean escribirPago)
	{
		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";

		final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_PAGOS);

		if(escribirPago) {
			regPago.put(ID_PROP_PAGOS_FEC_PAGO, registroActual.getString(strCtxtoCmpoRegPagoFchPago));
			regPago.put(ID_PROP_PAGOS_CAPITAL, 
					UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital), 11, 2, false));
			if (ocultarImporte)
			{
				regPago.put(ID_PROP_PAGOS_INTERES, Constantes.CTE_STRING_ASTERISCO);
				regPago.put(ID_PROP_PAGOS_TOTAL, Constantes.CTE_STRING_ASTERISCO);
			}
			else
			{
				regPago.put(ID_PROP_PAGOS_INTERES, 
						UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres), 11, 2, false));
				regPago.put(ID_PROP_PAGOS_TOTAL, 
						UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal), 11, 2, false));
			}
			regPago.put(ID_PROP_PAGOS_CAPIT_NO_VEN, 
					UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte), 11, 2, false));
		}


		return regPago;
	}

	//	/**
	//	 * Crea el registro de pago para el multicredito
	//	 * @param ctxtImpresion
	//	 * @param registroActual
	//	 * @param ocultarImporte
	//	 * @return
	//	 */
	//	private static IRegistro crearRegistroPagoMulticredito(final IContexto ctxtImpresion, final IRegistro registroActual, boolean ocultarImporte, boolean esPrimerPago,boolean escribirPago) {
	//		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
	//		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
	//		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
	//		final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
	//		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
	//
	//		final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_PAGOS);
	//		if(escribirPago) {
	//			regPago.put(ID_PROP_PAGOS_FEC_PAGO, registroActual.getString(strCtxtoCmpoRegPagoFchPago));
	//			regPago.put(ID_PROP_PAGOS_CAPITAL, 
	//					UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital), 11, 2, false));
	//			if (ocultarImporte)
	//			{
	//				regPago.put(ID_PROP_PAGOS_INTERES, Constantes.CTE_STRING_BLANK);
	//				regPago.put(ID_PROP_PAGOS_TOTAL, Constantes.CTE_STRING_BLANK);
	//				regPago.put(ID_PROP_PAGOS_FEC_PAGO, Constantes.CTE_STRING_BLANK );
	//				regPago.put(ID_PROP_PAGOS_CAPITAL, Constantes.CTE_STRING_BLANK);
	//			}
	//			else if(esPrimerPago && 0 == registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte).compareTo(BigDecimal.ZERO)){
	//
	//				//Si es primer pago y el registro nos trae un importe 0
	//				regPago.put(ID_PROP_PAGOS_CAPITAL, Constantes.CTE_STRING_BLANK);
	//				regPago.put(ID_PROP_PAGOS_TOTAL, Constantes.CTE_STRING_BLANK);
	//				regPago.put(ID_PROP_PAGOS_INTERES, 
	//						UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres), 11, 2, false));
	//			}
	//			else
	//			{
	//				regPago.put(ID_PROP_PAGOS_INTERES, 
	//						UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres), 11, 2, false));
	//				regPago.put(ID_PROP_PAGOS_TOTAL, 
	//						UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal), 11, 2, false));
	//			}
	//
	//			regPago.put(ID_PROP_PAGOS_CAPIT_NO_VEN, 
	//					UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte), 11, 2, false));
	//		}
	//
	//
	//		return regPago;
	//	}

	/**
	 * @param strFechaSolicitud
	 * @param strFechaPrimVencInt
	 * @param iNumPagos
	 * @return Número de meses al igual que se calcula en el programa PITAR200 
	 */
	private static BigDecimal getNumeroMeses(final String strFechaSolicitud,
			final String strFechaPrimVencInt, final int iNumPagos)
	{
		final Calendar fsCalendar = Calendar.getInstance();
		fsCalendar.setTime(DateUtils.parseDate(strFechaSolicitud, DateUtils.FORMATO_FECHA_CORTO));
		final Calendar fvCalendar = Calendar.getInstance();
		fvCalendar.setTime(DateUtils.parseDate(strFechaPrimVencInt, DateUtils.FORMATO_FECHA_CORTO));
		//		Se le resta doce para tener solo en cuenta la diferencia en meses
		//		P=((año(FI)-año(FS)*12 -12 + NV_duracion
		int iMeses = (fvCalendar.get(Calendar.YEAR) - fsCalendar.get(Calendar.YEAR))*12 - 12 + iNumPagos;
		//		P=P+(12-MESES(FS)+ meses(FI)
		iMeses += 12-(fsCalendar.get(Calendar.MONTH)+ 1) + (fvCalendar.get(Calendar.MONTH) + 1);
		//		P=p/NV_duracion
		if (iMeses != 0)
		{
			iMeses = iMeses / iNumPagos;
		}
		return new BigDecimal(iMeses);
	}

	/**
	 * @param contextoDatosSolicitud
	 * @return String con la concatenacion del lugar y la fecha de formalizacion
	 * de la solicitud en letra
	 */
	private static String getLugaryFecha(final IContexto contextoDatosSolicitud)
	{
		final String strCtxtoLocalidad = "ANPMN050999";
		final String strCtxtoFechaFormalizacion = "ANPMN050920";

		final SimpleDateFormat sdf = new SimpleDateFormat("MMMM", Locale.getDefault());
		final Calendar calendar = Calendar.getInstance();
		calendar.setTime(DateUtils.parseDate(
				contextoDatosSolicitud.getString(strCtxtoFechaFormalizacion), DateUtils.FORMATO_FECHA_CORTO));

		StringBuilder sb = new StringBuilder(150);
		
		sb.append(contextoDatosSolicitud.getString(strCtxtoLocalidad).trim());
		sb.append(Constantes.CTE_STRING_COMA);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(calendar.get(Calendar.DAY_OF_MONTH));
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(Constantes.CTE_STRING_DE);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(sdf.format(calendar.getTime()).toUpperCase());
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(Constantes.CTE_STRING_DE);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(calendar.get(Calendar.YEAR));
		return sb.toString();
	}

	/***
	 * Metodo sobrecargado para la construccion del lugar y fecha, recibe la localidad como parametro y construye 
	 * un string con la fecha del dia y la localidad que entra como parametro.
	 * @param localidad
	 * @return
	 */
	private static String getLugarFecha(String localidad) {

		final SimpleDateFormat sdf = new SimpleDateFormat("MMMM", Locale.getDefault());
		Date hoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());

		final Calendar calendar = Calendar.getInstance();
		calendar.setTime(DateUtils.parseDate(
				DateUtils.formatDate(hoy, DateUtils.FORMATO_FECHA_CORTO), DateUtils.FORMATO_FECHA_CORTO));

		StringBuilder sb = new StringBuilder(150);
		sb.append(localidad.trim());
		sb.append(Constantes.CTE_STRING_COMA);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(calendar.get(Calendar.DAY_OF_MONTH));
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(Constantes.CTE_STRING_DE);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(sdf.format(calendar.getTime()).toUpperCase());
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(Constantes.CTE_STRING_DE);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(calendar.get(Calendar.YEAR));
		return sb.toString();
	}

	//	/**
	//	 * Devolverá la fecha de hoy
	//	 * @return
	//	 */
	//	private static String fechaDeHoy() {
	//		
	//		final SimpleDateFormat sdf = new SimpleDateFormat("MMMM", Locale.getDefault());
	//		Date hoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());
	//
	//		final Calendar calendar = Calendar.getInstance();
	//		calendar.setTime(DateUtils.parseDate(
	//				DateUtils.formatDate(hoy, DateUtils.FORMATO_FECHA_CORTO), DateUtils.FORMATO_FECHA_CORTO));
	//
	//		StringBuilder sb = new StringBuilder(150);
	//		sb.append(calendar.get(Calendar.DAY_OF_MONTH));
	//		sb.append(Constantes.CTE_STRING_BLANK);
	//		sb.append(Constantes.CTE_STRING_DE);
	//		sb.append(Constantes.CTE_STRING_BLANK);
	//		sb.append(sdf.format(calendar.getTime()).toUpperCase());
	//		sb.append(Constantes.CTE_STRING_BLANK);
	//		sb.append(Constantes.CTE_STRING_DE);
	//		sb.append(Constantes.CTE_STRING_BLANK);
	//		sb.append(calendar.get(Calendar.YEAR));
	//		return sb.toString();
	//	}


	/**
	 * Hace uso del servicio 100-301 para obtener la descripción de la divisa
	 * @param divisa
	 * @return descripcion de la divisa
	 */
	private static String getDescripcionDivisa(final String divisa) 
	{
		// Constantes para invocación del servicio de consulta de divisas ITAL_600
		final Integer CTE_CUENTA_CONTABLE_CONSULTA_DIVISAS = Integer.valueOf("100");
		final Integer CTE_CODIGO_OPERACION_CONSULTA_DIVISAS = Integer.valueOf("301");
		final String  CTE_OPCONDIV_CAMPO_COD_CONTROL = "COD_CONTROL";
		final String  CTE_OPCONDIV_VALOR_COD_CONTROL = "D";
		final String  CTE_OPCONDIV_CAMPO_DEVOLVER_DIVISA = "DIVISA";
		//		Contexto de salida
		final String strCtxtoDetalleDivisa = "CG041CON";
		final String strDivStrNombreCompletoDivisa = "CG041C0040";

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO Consulta descripcion divisa");
		}

		// Consulta de divisa
		IDatosEntradaTx datosEntradaConsultaDivisaSrv = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), 
				CTE_CUENTA_CONTABLE_CONSULTA_DIVISAS, CTE_CODIGO_OPERACION_CONSULTA_DIVISAS);
		datosEntradaConsultaDivisaSrv.addCampo(CTE_OPCONDIV_CAMPO_COD_CONTROL, 
				CTE_OPCONDIV_VALOR_COD_CONTROL);
		datosEntradaConsultaDivisaSrv.addCampo(CTE_OPCONDIV_CAMPO_DEVOLVER_DIVISA,
				divisa);

		IContexto[] aContextoDetalleDivisa = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaDivisaSrv);
		String descripcionDivisa = Constantes.CTE_STRING_EMPTY;
		for (IContexto contextoDivisa : aContextoDetalleDivisa)
		{
			if (strCtxtoDetalleDivisa.equals(contextoDivisa.getNombre()))
			{
				descripcionDivisa = contextoDivisa.getString(strDivStrNombreCompletoDivisa).trim();
			}
		}
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN Consulta descripcion divisa");
		}
		return descripcionDivisa;
	}

	/**
	 * Proceso que crea la matriz de resumen que aparece depues de la matriz de pagos
	 * @param contextoImpresion
	 * @param ctxtProgramaAmort
	 * @param paso
	 * @param bolPrestamoFijo
	 * @param esMulticredito
	 */
	private static List<IRegistro> crearMatrizResumenProceso(IContexto contextoImpresion,
			IContexto ctxtProgramaAmort, int paso, boolean bolPrestamoFijo, boolean esMulticredito, 
			String medidaSolchaga,IContexto ctxtoSolicitud) {
		
		final String strEntidad 						= "ANPMN050310";

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO Rellenando matriz resumen proceso");
		}
		List<IRegistro> lstRegResumen = new ArrayList<IRegistro>(3);
		BigDecimal sumaTotales = BigDecimal.ZERO;
		final String strCtxtoFechaImpresionPoliza = "ANPMN075540";

		if(!esMulticredito) {
			lstRegResumen.add(createRegResumen(contextoImpresion, Constantes.CTE_STRING_EMPTY));
			if (!bolPrestamoFijo)
			{
				//					Linea de información sobre los pagos sucesivos
				lstRegResumen.add(createRegResumen(contextoImpresion, ETIQ_PAGOS_SUCESIVOS));
				lstRegResumen.add(createRegResumen(contextoImpresion, Constantes.CTE_STRING_EMPTY));
			}

			//				Linea con los datos del capital
			StringBuilder sb = new StringBuilder(100);
			sb.append(ETIQ_NUM_PAGOS_CAPITAL);
			sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(contextoImpresion.getBigDecimal(ID_PROP_NUMERO_ENTREGAS));
			sb.append(ETIQ_TOTAL_CAPITAL);
			sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(UtilidadesTramitacion.bigDecimalToString(
					contextoImpresion.getBigDecimal(ID_PROP_CAPITAL), 9, 2, Boolean.FALSE));
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(contextoImpresion.getString(ID_PROP_MONEDA));
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			//				linea con los datos de intereses					
			sb = new StringBuilder(100);
			sb.append(ETIQ_NUM_PAGOS_INTERES);
			sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(contextoImpresion.getString(ID_PROP_NUM_PAGOS_INTERESES));
			if(bolPrestamoFijo)
			{
				sb.append(ETIQ_TOTAL_INTERESES);
				sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
				sb.append(Constantes.CTE_STRING_BLANK);
				sb.append(contextoImpresion.getString(ID_PROP_IMP_TOTAL_INTERESES));
				sb.append(Constantes.CTE_STRING_BLANK);
				sb.append(contextoImpresion.getString(ID_PROP_MONEDA));
			}
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			//				linea con el total de comisiones pagadas
			sb = new StringBuilder(100);
			if (UtilidadesComun.esASF(ctxtoSolicitud.getString(strEntidad))){
				sb.append(ETIQ_TOTAL_COMISIONES_PAGADAS_ASF);
			}
			else{
				sb.append(ETIQ_TOTAL_COMISIONES_PAGADAS);
			}
						
			sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(contextoImpresion.getString(ID_PROP_IMP_TOTAL_COMISIONES_A_FECHA_FORM));
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(contextoImpresion.getString(ID_PROP_MONEDA));
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			if (bolPrestamoFijo)
			{
				//					linea con el importe total del sumatorio de todo lo anterior
				sb = new StringBuilder(100);
				sb.append(ETIQ_TOTAL_PAGOS);
				sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
				sb.append(Constantes.CTE_STRING_BLANK);

				//sumaTotales = sumaTotales.add(UtilidadesTramitacion.stringToBigDecimal(contextoImpresion.getString(ID_PROP_IMP_TOTAL_COMISIONES_A_FECHA_FORM),Locale.getDefault()));
				sumaTotales = sumaTotales.add(UtilidadesTramitacion.stringToBigDecimal(contextoImpresion.getString(ID_PROP_IMP_TOTAL_PAGOS_INT),Locale.getDefault()));
				//sumaTotales = sumaTotales.add(contextoImpresion.getBigDecimal(ID_PROP_CAPITAL));
				sb.append(
						UtilidadesTramitacion.bigDecimalToString(sumaTotales, 9, 2, Boolean.FALSE));

				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			}

			lstRegResumen.add(createRegResumen(contextoImpresion, Constantes.CTE_STRING_EMPTY));

			// Línea con las líneas de aviso
			sb = new StringBuilder(100);
			sb.append(ETIQ_CUADRO_INFORMATIVO);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(DateUtils.formatDate(DateUtils.dateNow(), DateUtils.FORMATO_FECHA_CORTO));

			// 2016-08-05 - Textos diferentes en funcion de si aplica medida solchaga o no
			//sb.append(ETIQ_INTERESES_CONSIGNADOS);
			//lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			//// Linea del cuadro
			//sb = new StringBuilder(100);
			//sb.append(ETIQ_DEBERAN_REVISAR);

			sb.append(ETIQ_INTERESES_PRIMER_PERIODO_1);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			if (!medidaSolchaga.equals("1"))
			{
				// Sin medida Solchaga
				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_2);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_3);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_4);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			}
			else
			{
				// Con medida Solchaga				
				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_2);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_5);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_6);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_3);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_4);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			}
		}
		//Si es multicredito lleva esta leyenda
		else {
			//Linea con los datos del capital
			StringBuilder sb = new StringBuilder(100);	

			//Linea pagos sucesivos multicredito
			sb = new StringBuilder(100);
			sb.append(Constantes.CTE_STRING_GUION);
			sb.append(ETIQ_PAGOS_SUCESIVOS_MULTI);
			sb.append(Constantes.CTE_STRING_BLANK);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			//Linea corresponda aplicar
			sb = new StringBuilder();
			sb.append(ETIQ_CORRESPONDA_APLICAR);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));


			//Linea con el total de comisiones pagadas
			sb = new StringBuilder(100);
			sb.append(Constantes.CTE_STRING_GUION);
			
			if (UtilidadesComun.esASF(ctxtoSolicitud.getString(strEntidad))){
				sb.append(ETIQ_TOTAL_COMISIONES_PAGADAS_ASF);
			}
			else{
				sb.append(ETIQ_TOTAL_COMISIONES_PAGADAS);
			}
			sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(contextoImpresion.getString(ID_PROP_IMP_TOTAL_COMISIONES_A_FECHA_FORM));
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(contextoImpresion.getString(ID_PROP_MONEDA));
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));


			//Separador, linea en blanco
			sb = new StringBuilder(100);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			//Intereses consignados
			sb = new StringBuilder(100);
			sb.append(Constantes.CTE_STRING_GUION);
			sb.append(ETIQ_CUADRO_INFORMATIVO);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(DateUtils.cambiaFormatoFecha(ctxtProgramaAmort.getString(strCtxtoFechaImpresionPoliza), DateUtils.FORMATO_FECHA_AMERICANO, DateUtils.FORMATO_FECHA_CORTO));

			// 2016-08-05 - Textos diferentes en funcion de si aplica medida solchaga o no
			//sb.append(ETIQ_INTERESES_CONSIGNADOS);
			//lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			//// linea del cuadro
			//sb = new StringBuilder(100);
			//sb.append(ETIQ_DEBERAN_REVISAR);
			//lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			sb.append(ETIQ_INTERESES_PRIMER_PERIODO_1);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			if (!medidaSolchaga.equals("1"))
			{
				// Sin medida Solchaga
				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_2);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_3);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_4);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			}
			else
			{
				// Con medida Solchaga				
				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_2);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_5);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_6);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_3);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

				sb = new StringBuilder(100);
				sb.append(ETIQ_INTERESES_PRIMER_PERIODO_4);
				lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
			}


			sb = new StringBuilder(100);
			sb.append(Constantes.CTE_STRING_GUION);	
			sb.append(ETIQ_EL_TIPO_INTERES);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			sb = new StringBuilder(100);
			sb.append(ETIQ_INTERES_ORDINARIO);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			sb = new StringBuilder(100);
			sb.append(ETIQ_SOLICITUD_CONTRATO);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			sb = new StringBuilder(100);
			sb.append(ETIQ_PRODUCTOS_BONIF);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));

			sb = new StringBuilder(100);
			sb.append(ETIQ_LA_MISMA);
			lstRegResumen.add(createRegResumen(contextoImpresion, sb.toString()));
		}

		lstRegResumen.add(createRegResumen(contextoImpresion, Constantes.CTE_STRING_EMPTY));
		lstRegResumen.add(createRegResumen(contextoImpresion, ETIQ_PIE_RESUMEN));
		lstRegResumen.add(createRegResumen(contextoImpresion, Constantes.CTE_STRING_EMPTY));

		return lstRegResumen;
			}


	/**
	 * 
	 * @param contextoImpresion
	 * @param ctxtProgramaAmort 
	 * @param paso
	 * @param bolPrestamoFijo
	 */
	private static void crearMatrizResumen(IContexto contextoImpresion,
			IContexto ctxtProgramaAmort, int paso, boolean bolPrestamoFijo, 
			boolean esMulticredito, String medidaSolchaga,IContexto ctxtoSolicitud)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO Rellenando matriz resumen");
		}
		List<IRegistro> lstRegResumen = new ArrayList<IRegistro>(3);

		switch (paso)
		{
		case PASO_DOC_OFERTA_VINCULANTE:
		case PASO_DOC_POLIZA_PRESTAMO:
			lstRegResumen = crearMatrizResumenProceso(contextoImpresion, ctxtProgramaAmort, 
					paso, bolPrestamoFijo, esMulticredito, medidaSolchaga,ctxtoSolicitud);
			break;
		case PASO_DOC_CONTRATO_CREDIVENTAS:
			lstRegResumen = crearMatrizResumenProceso(contextoImpresion, ctxtProgramaAmort, 
					paso, bolPrestamoFijo, esMulticredito, medidaSolchaga,ctxtoSolicitud);
			break;
		default:
			break;
		}

		contextoImpresion.put(ID_REG_RESUMEN, lstRegResumen.toArray(new IRegistro[lstRegResumen.size()]));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN Rellenando matriz resumen");
		}
	}

	/**
	 * Crea un nuevo registro en 
	 * @param ctxtImpresion
	 * @param linea
	 */
	private static IRegistro createRegResumen(final IContexto ctxtImpresion, final String linea)
	{
		final IRegistro regResumen = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_RESUMEN);
		regResumen.put(ID_PROP_RESUMEN_TEXTO, linea);
		return regResumen;
	}

	/** Almacena en BD (tabla AN37TB01) los datos relativos a una Oferta Vinculante 
	 * @param contextoOV
	 * @param bidOficinaSolicitud
	 * @param bidNumeroSolicitud
	 * @param bidVersionSolicitud
	 * @param bidNucExpediente
	 * */
	public static void guardarContextoOV(IContexto contextoOV,DatosSolicitudC solicitudActual)
	{
		OfertaVinculanteEng engOfertaV = new OfertaVinculanteEng();
		OfertaVinculanteC ofertaV = engOfertaV.createNewObject();

		asignarDatosOV(contextoOV, ofertaV, solicitudActual);

		ofertaV.persist();
	}


	/** Asigna los datos contenidos en el contexto de la OV a un objeto de tipo OfertaVinculanteC */
	private static void asignarDatosOV(IContexto contextoOV, OfertaVinculanteC ofertaV, DatosSolicitudC solicitudActual)
	{
		OfertaVinculanteKey ofKey = new OfertaVinculanteKey();

		ofKey.setBidOficina(solicitudActual.getDatosSolicitudKey().getOficinaSolicitud());
		ofKey.setBidNumero(solicitudActual.getDatosSolicitudKey().getNumSolicitud());
		ofKey.setBidVersion(solicitudActual.getDatosSolicitudKey().getVersionSolicitud());
		ofKey.setBidNuc(solicitudActual.getDatosSolicitudKey().getNucExpediente());
		ofertaV.setOfertaVinculanteKey(ofKey);

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_NUMERO_POLIZA)))
			ofertaV.setStrNumPoliza(contextoOV.getString(ID_PROP_NUMERO_POLIZA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_CAPITAL)))
			ofertaV.setBidImportePrestamo(contextoOV.getBigDecimal(ID_PROP_CAPITAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_MONEDA)))
			ofertaV.setStrMonedaPrestamo(contextoOV.getString(ID_PROP_MONEDA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_PLAZO_EN_MESES)))
			ofertaV.setBidPlazo(contextoOV.getBigDecimal(ID_PROP_PLAZO_EN_MESES));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_TIPO_PRESTAMO)))
			ofertaV.setStrTipoPrestamo(contextoOV.getString(ID_PROP_TIPO_PRESTAMO));

		/**
		 * Si el dato viene a nulo en determinados casos vamos a enviar ---- esto no se puede convertir a BigDecimal
		 * por lo tando metemos manualmente un cero que es el equivalente numerico a -----
		 */
		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PORC_INT_MINIMO))) {
			if(contextoOV.getString(ID_PROP_PORC_INT_MINIMO).equals(Constantes.CTE_PORCENTAXE_NULO)){
				ofertaV.setBidSuelo(BigDecimal.ZERO);
			}else {
				ofertaV.setBidSuelo(UtilidadesTramitacion.stringToBigDecimal(contextoOV.getString(ID_PROP_PORC_INT_MINIMO),Locale.getDefault()));
			}
		}	

		/**
		 * Si el dato viene a nulo en determinados casos vamos a enviar ---- esto no se puede convertir a BigDecimal
		 * por lo tando metemos manualmente un cero que es el equivalente numerico a -----
		 */
		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PORC_INT_MAXIMO))) {
			if(contextoOV.getString(ID_PROP_PORC_INT_MAXIMO).equals(Constantes.CTE_PORCENTAXE_NULO)){
				ofertaV.setBidSuelo(BigDecimal.ZERO);
			}else {
				ofertaV.setBidTecho(UtilidadesTramitacion.stringToBigDecimal(contextoOV.getString(ID_PROP_PORC_INT_MAXIMO),Locale.getDefault()));
			}
		}

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_MODALIDAD_AMORTIZACION)))
			ofertaV.setStrModalidadAmortizacion(contextoOV.getString(ID_PROP_MODALIDAD_AMORTIZACION));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_TAE_PRESTAMO)))
			ofertaV.setStrTae(contextoOV.getString(ID_PROP_PRCTJ_TAE_PRESTAMO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO)))
			ofertaV.setStrGastosEstudio(contextoOV.getString(ID_PROP_IMP_MINIMO_COMISION_ESTUDIO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_IMP_MINIMO_COMISION_APERTURA)))
			ofertaV.setStrComisionApertura(contextoOV.getString(ID_PROP_IMP_MINIMO_COMISION_APERTURA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_TIPO_REFER_PRINCIPAL)))
			ofertaV.setStrReferencia(contextoOV.getString(ID_PROP_TIPO_REFER_PRINCIPAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_MARGEN_PRINCIPAL)))
			ofertaV.setBidDiferencial(contextoOV.getBigDecimal(ID_PROP_MARGEN_PRINCIPAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_COMISION_ESTUDIO)))
			ofertaV.setStrPorctjGastosEstudio(contextoOV.getString(ID_PROP_PRCTJ_COMISION_ESTUDIO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_COMISION_APERTURA)))
			ofertaV.setStrPorctjComisionApertura(contextoOV.getString(ID_PROP_PRCTJ_COMISION_APERTURA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMP_RECARGO_DEMORA)))
			ofertaV.setBidInteresDemora(contextoOV.getBigDecimal(ID_PROP_IMP_RECARGO_DEMORA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_NUMERO_ENTREGAS)))
			ofertaV.setBidNumeroPagos(contextoOV.getBigDecimal(ID_PROP_NUMERO_ENTREGAS));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_PAGO_APLAZ_CARENCIA_MESES)))
			ofertaV.setBidCarenciaMeses(contextoOV.getBigDecimal(ID_PROP_PAGO_APLAZ_CARENCIA_MESES));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMPORTE_PRIMERA_ENT)))
			ofertaV.setStrCuotaInicial(contextoOV.getBigDecimal(ID_PROP_IMPORTE_PRIMERA_ENT));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FEC_LIMITE_INTER_INICIAL))){
			//Si nos viene como nula se asigna la fecha nula.
			if(contextoOV.getString(ID_PROP_FEC_LIMITE_INTER_INICIAL).equals(Constantes.CTE_DATO_NULO)){
				ofertaV.setDateFechaCierreInic(DateUtils.toSQLDate(DateUtils.parseDate(
						DateUtils.CTE_DATELOWESTONLYDAY, DateUtils.FORMATO_FECHA_CORTO)));
			}else if(UtilidadesComun.isBlankOrNull(contextoOV.getString(ID_PROP_FEC_LIMITE_INTER_INICIAL))){	
				ofertaV.setDateFechaCierreInic(DateUtils.toSQLDate(DateUtils.parseDate(
						DateUtils.CTE_DATELOWESTONLYDAY, DateUtils.FORMATO_FECHA_CORTO)));
			}else{
				ofertaV.setDateFechaCierreInic(DateUtils.toSQLDate(DateUtils.parseDate(
						contextoOV.getString(ID_PROP_FEC_LIMITE_INTER_INICIAL), DateUtils.FORMATO_FECHA_CORTO)));
			}
		}

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_COM_CANC_ANTIC_PARCIAL)))
			ofertaV.setStrAmortParcialMenor5(contextoOV.getString(ID_PROP_PRCTJ_COM_CANC_ANTIC_PARCIAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_COM_CANC_ANTIC_TOTAL)))
			ofertaV.setStrNoSubrogatorioMenor5(contextoOV.getString(ID_PROP_PRCTJ_COM_CANC_ANTIC_TOTAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_COM_EXCESO_AMORT_ANTIC)))
			ofertaV.setStrSubrogatorioMenor5(contextoOV.getString(ID_PROP_PRCTJ_COM_EXCESO_AMORT_ANTIC));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_IMP_RECLAMACION_DEUDA)))
			ofertaV.setStrComisReclamacion(contextoOV.getString(ID_PROP_IMP_RECLAMACION_DEUDA));

		//Campos no comunes con el contexto ANPMN103
		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_LISTAR_DILIGENCIA)))
			ofertaV.setStrListarDiligencia(contextoOV.getString(ID_PROP_LISTAR_DILIGENCIA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_NOMBRE_OFICINA)))
			ofertaV.setStrNombreOficina(contextoOV.getString(ID_PROP_NOMBRE_OFICINA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_NUMERO_PRESTAMO)))
			ofertaV.setStrNumeroPrestamo(contextoOV.getString(ID_PROP_NUMERO_PRESTAMO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_LUGAR_Y_FECHA)))
			ofertaV.setStrLugarFecha(contextoOV.getString(ID_PROP_LUGAR_Y_FECHA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_CAPITAL_EN_LETRA)))
			ofertaV.setStrCapitalLetra(contextoOV.getString(ID_PROP_CAPITAL_EN_LETRA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FECHA_INICIO_PLAZO)))
			ofertaV.setDateFechaInicioPlazo(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FECHA_INICIO_PLAZO), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FECHA_PRIMERA_ENTREGA)))
			ofertaV.setDateFechaPrimeraEntrega(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FECHA_PRIMERA_ENTREGA), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_SUCESIVAS_ENTREGAS)))
			ofertaV.setStrSucesivasEntregas(contextoOV.getString(ID_PROP_SUCESIVAS_ENTREGAS));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FECHA_ULTIMA_ENTREGA)))
			ofertaV.setDateFechaUltimaEntrega(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FECHA_ULTIMA_ENTREGA), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FECHA_FIN_PERIODO_DISPOSICION)))
			ofertaV.setDateFechaFinPeriodoDisp(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FECHA_FIN_PERIODO_DISPOSICION), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_MARCA_PRIMERA_ENT)))
			ofertaV.setStrMarcaPrimeraEntrega(contextoOV.getString(ID_PROP_MARCA_PRIMERA_ENT));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_SUCESISVOS_PAGOS_INT)))
			ofertaV.setStrSucesivosPagos(contextoOV.getString(ID_PROP_SUCESISVOS_PAGOS_INT));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PORC_INTERES_INICIAL)))
			ofertaV.setStrInteresInicial(contextoOV.getString(ID_PROP_PORC_INTERES_INICIAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_MARCAR_INTERES_INICIAL)))
			ofertaV.setStrMarcaInteresInicial(contextoOV.getString(ID_PROP_MARCAR_INTERES_INICIAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_NUM_PAGOS_INTERESES)))
			ofertaV.setStrNumeroPagosInteres(contextoOV.getString(ID_PROP_NUM_PAGOS_INTERESES));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FECH_PRIMER_PAGO_INT)))
			ofertaV.setDateFechaPrimerPagoInteres(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FECH_PRIMER_PAGO_INT), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_SUCESISVOS_PAGOS_INT)))
			ofertaV.setStrSucesivosPagosInteres(contextoOV.getString(ID_PROP_SUCESISVOS_PAGOS_INT));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_DIAS_LIQUIDACION)))
			ofertaV.setStrDiasLiquidacion(contextoOV.getString(ID_PROP_DIAS_LIQUIDACION));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_PORC_MARGEN_MAX_REF)))
			ofertaV.setBidMargenMaxRef(contextoOV.getBigDecimal(ID_PROP_PORC_MARGEN_MAX_REF));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_TIPO_REFER_SUST)))
		{
			// 2016-10-13 - Se trunca el valor para que quepa en el campo AN371030 (tamanho 19)
			String tipoReferenciaSustitutivo = contextoOV.getString(ID_PROP_TIPO_REFER_SUST);
			if (contextoOV.getString(ID_PROP_TIPO_REFER_SUST).length() > 16)
			{
				tipoReferenciaSustitutivo = tipoReferenciaSustitutivo.substring(0, 16);
			}
			ofertaV.setStrTipoRefSustit(tipoReferenciaSustitutivo);
		}

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_MARGEN_PRINCIPAL)))
			ofertaV.setBidMargen(contextoOV.getBigDecimal(ID_PROP_MARGEN_PRINCIPAL));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PERIODICIDAD_REVISION)))
			ofertaV.setStrPeriodicidadRevision(contextoOV.getString(ID_PROP_PERIODICIDAD_REVISION));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_CUENTA_ASOCIADA)))
			ofertaV.setStrCuentaAsociada(contextoOV.getString(ID_PROP_CUENTA_ASOCIADA));

		if (!UtilidadesComun.esASF(solicitudActual.getEntidad()))
		{
			if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_OFICINA_CUENTA_ASOCIADA)))
				ofertaV.setStrOficinaCuentaAsociada(contextoOV.getString(ID_PROP_OFICINA_CUENTA_ASOCIADA));			
		}

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_CAPITAL_INICIO_ANO)))
			ofertaV.setStrPorctjCapitalInicioAnho(contextoOV.getString(ID_PROP_PRCTJ_CAPITAL_INICIO_ANO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRCTJ_MODIFICACION)))
			ofertaV.setStrPorctjComicionModificacion(contextoOV.getString(ID_PROP_PRCTJ_MODIFICACION));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMP_CORRETAJE)))
			ofertaV.setBidCorretaje(contextoOV.getBigDecimal(ID_PROP_IMP_CORRETAJE));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_NUM_LINEAS_OBSRV)))
			ofertaV.setBidNumLineasObservacion(contextoOV.getBigDecimal(ID_PROP_NUM_LINEAS_OBSRV));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_PRESTAMO_HIPOTECARIO)))
			ofertaV.setStrPrestamoHipotecario(contextoOV.getString(ID_PROP_PRESTAMO_HIPOTECARIO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FECHA_PRIMERA_DISPOSICION)))
			ofertaV.setDateFechaPrimeraDisposicion(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FECHA_PRIMERA_DISPOSICION), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_SUCESIVAS_DISPOSICIONES)))
			ofertaV.setStrSucesivasDisposiciones(contextoOV.getString(ID_PROP_SUCESIVAS_DISPOSICIONES));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FECHA_ULTIMA_DISPOSICION)))
			ofertaV.setStrFechaUltimaDisposicion(contextoOV.getString(ID_PROP_FECHA_ULTIMA_DISPOSICION));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMP_DISPOSICIONES)))
			ofertaV.setBidImporteDisposiciones(contextoOV.getBigDecimal(ID_PROP_IMP_DISPOSICIONES));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FEC_PRIMERA_LIQUIDACION)))
			ofertaV.setDateFechaPrimeraLiquidacion(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FEC_PRIMERA_LIQUIDACION), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMP_CUOTA_PACTADA)))
			ofertaV.setBidImporteCuotaPactada(contextoOV.getBigDecimal(ID_PROP_IMP_CUOTA_PACTADA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMP_ULTIMA_CUOTA)))
			ofertaV.setBidImporteUltimaCuota(contextoOV.getBigDecimal(ID_PROP_IMP_ULTIMA_CUOTA));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_FEC_PAGO_APLAZ_ULTIMA_ENTREGA)))
			ofertaV.setDateFechaUltimaEntregaPrimerPeriodo(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoOV.getString(ID_PROP_FEC_PAGO_APLAZ_ULTIMA_ENTREGA), DateUtils.FORMATO_FECHA_CORTO)));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMP_TOTAL_INTERESES_PAGO_APLAZ)))
			ofertaV.setBidImpTotalInteresesCapitalizados(contextoOV.getBigDecimal(ID_PROP_IMP_TOTAL_INTERESES_PAGO_APLAZ));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_DESC_OBG_PIGNORADO)))
			ofertaV.setStrDescripcionObjPignord(contextoOV.getString(ID_PROP_DESC_OBG_PIGNORADO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_IMP_TASACION)))
			ofertaV.setBidImporteTasacion(contextoOV.getBigDecimal(ID_PROP_IMP_TASACION));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_PORC_GASTOS_SEGUROS)))
			ofertaV.setBidPorctjGastosSeguro(contextoOV.getBigDecimal(ID_PROP_PORC_GASTOS_SEGUROS));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_PORC_COM_SOBRE_TASACION)))
			ofertaV.setBidPorctjComisionSbTasacion(contextoOV.getBigDecimal(ID_PROP_PORC_COM_SOBRE_TASACION));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getBigDecimal(ID_PROP_ALOJAMIENTO)))
			ofertaV.setBidAlojamiento(contextoOV.getBigDecimal(ID_PROP_ALOJAMIENTO));

		if (!UtilidadesTramitacion.isBlankOrNull(contextoOV.getString(ID_PROP_IMP_TOTAL_COMISIONES_A_FECHA_FORM)))
			ofertaV.setStrTotalComsPagadasFechaFormalizacion(contextoOV.getString(ID_PROP_IMP_TOTAL_COMISIONES_A_FECHA_FORM));
	}


	/**************************************************************************
	 * 
	 * 		PENDIENTE DE CONOCER SI FINALMENTE SE USAN ESTOS METODOS
	 * 
	 ***************************************************************************/
	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoClientes
	 * @param contextoImpresion Contexto que se mandará a impresión
	 */
	//	private static void rellenarImpresionConCntxtoConObservaciones(
	//			IContexto contextoClientes, IContexto contextoImpresion)
	//	{
	//		if (LOGGER.isInfoEnabled())
	//		{
	//			LOGGER.info("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoClientes");	
	//		}
	//
	//		if (LOGGER.isInfoEnabled())
	//		{
	//			LOGGER.info("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoClientes");	
	//		}
	//	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoActual
	 * @param contextoImpresion
	 */
	//	private static void rellenarImpresionConCntxtoDivisas(
	//			IContexto contextoDivisa, IContexto contextoImpresion)
	//	{
	//		
	//		if (LOGGER.isInfoEnabled())
	//		{
	//			LOGGER.info("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoDivisas");	
	//		}
	//	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoTratamiento
	 * @param contextoImpresion Contexto que se mandará a impresión
	 */
	//	private static void rellenarDatosConContextoTratamientoAdelantos(
	//			IContexto contextoTratamiento, IContexto contextoImpresion)
	//	{
	//		if (LOGGER.isInfoEnabled())
	//		{
	//			LOGGER.info("INICIO ContextoImpresionFormalizacion rellenarDatosContextoTratamientoAdelantos");	
	//		}
	//		if (LOGGER.isInfoEnabled())
	//		{
	//			LOGGER.info("FIN ContextoImpresionFormalizacion rellenarDatosContextoTratamientoAdelantos");	
	//		}
	//	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoDestinos
	 * @param contextoImpresion Contexto que se mandará a impresión
	 */
	//	private static void rellenarImpresionConCntxtoDestinos(
	//			IContexto []aContextoDestinos, IContexto contextoImpresion)
	//	{
	//		final String strCtxtoDestPorcentaje = "ANPMN055100";
	//		final String strCtxtoDestDestino = "ANPMN055060";
	//		BigDecimal porcentajeActual = new BigDecimal("-1");
	//		String destinoMayorPorc = Constantes.CTE_STRING_EMPTY;
	//		if (LOGGER.isInfoEnabled())
	//		{
	//			LOGGER.info("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoDestinos");	
	//		}
	//		for (IContexto contextoDestino : aContextoDestinos)
	//		{
	//			if (contextoDestino.getBigDecimal(strCtxtoDestPorcentaje).compareTo(porcentajeActual) > 0)
	//			{
	//				porcentajeActual = contextoDestino.getBigDecimal(strCtxtoDestPorcentaje);
	//				destinoMayorPorc = contextoDestino.getString(strCtxtoDestDestino);
	//			}
	//		}
	////		contextoImpresion.put(ID_PROP_IMP_DISPOSICIONES, getDescripcionDestino(destinoMayorPorc));
	//		if (LOGGER.isInfoEnabled())
	//		{
	//			LOGGER.info("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoDestinos");	
	//		}
	//	}

	//	/**
	//	 * @param strDestino
	//	 * @return Cadena con el destino del campo CG320030 where CG320010='DET' and CG320020 = destino
	//	 */
	//	private static String getDescripcionDestino(String strDestino)
	//	{
	//		final GestionClausulasRestringuidas gcr = new GestionClausulasRestringuidas();
	//		final ParametrosC descripcion = gcr.obtenerDestinoBusquedaProducto(strDestino);
	//		String strDescripcion = Constantes.CTE_STRING_EMPTY;
	//		if (descripcion != null)
	//		{
	//			strDescripcion = descripcion.getCG320030().trim();
	//		}
	//		return strDescripcion;
	//	}
	
	/**
	 * Rellena al impresion con la tae de demora y la actualiza en la tabla.
	 * @param contextoImprimir
	 * @param ctxtoSolicitud
	 * @param campoCtxActualizar
	 */
	private static void rellenarImpresionConTaeDemora(
			IContexto contextoImprimir,IContexto ctxtoSolicitud){
			BigDecimal taeDemora = null;
			IContexto[] resultadoConsultaAmortizacion = null;
			BigDecimal bidOficinaSolicitud = null;
			BigDecimal bidNumeroSolicitud = null;
			BigDecimal bidVersionSolicitud = null;
			BigDecimal bidDigitoSolicitud = null;
			BigDecimal bidNucExpediente = null;
			
			GestionDatosSolicitud gds = new GestionDatosSolicitud();
			
			bidOficinaSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_OFICINA);
			bidNumeroSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUMERO);
			bidVersionSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION);
			bidNucExpediente = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC);
			bidDigitoSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_DIGITO);
			
			final IDatosEntradaTx datosEntradaConsultaAmortizacion = 
				ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),
						Constantes.ID_CUENTA_ANPM,
						ID_CODOP_CONSULTA_AMORTIZACION);
			
			datosEntradaConsultaAmortizacion.addCampo(
					NOMBRE_CAMPO_OFICINA_SOLICITUD, bidOficinaSolicitud);
			datosEntradaConsultaAmortizacion.addCampo(
					NOMBRE_CAMPO_NUMERO_SOLICITUD, bidNumeroSolicitud);
			datosEntradaConsultaAmortizacion.addCampo(
					NOMBRE_CAMPO_VERSION_SOLICITUD, bidVersionSolicitud);
			datosEntradaConsultaAmortizacion.addCampo(
					NOMBRE_CAMPO_NUC_EXPEDIENTE, bidNucExpediente);
			
			datosEntradaConsultaAmortizacion.addCampo(
					NOMBRE_CAMPO_DIGITO_SOLICITUD, bidDigitoSolicitud);
			
			
			datosEntradaConsultaAmortizacion.addCampo(
					NOMBRE_CAMPO_PANTALLA_ORIGEN, Constantes.CTE_STR_8); //tipo operación = "8"

			resultadoConsultaAmortizacion = ServicioNegocio.invocarServicio(
				ServicioNegocio.getContexto(), datosEntradaConsultaAmortizacion);
			
			if (UtilidadesTramitacion.isBlankOrNull(resultadoConsultaAmortizacion)){
				ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_NO_CTX_ANPMN075_TAE_BONIF,
					null, null, null);
			}
			taeDemora = resultadoConsultaAmortizacion[0].getBigDecimal("ANPMN075150");
			
			contextoImprimir.put(ID_TAE_DEMORA, taeDemora);
			
			/*Se actualiza la tae bonificada en datos solicitud, AN25TB01*/
			gds.actualizarTaeDemora(bidOficinaSolicitud, bidNumeroSolicitud,
				bidVersionSolicitud, bidNucExpediente, taeDemora);		
		}

	/**
	 * Llamada a rellenar impresion con tae bonificada
	 */
	private static void rellenarImpresionConTaeBonificada(
			IContexto contextoImprimir,
			IContexto ctxtoSolicitud)
	{
		BigDecimal taeBonificada = null;
		IContexto[] resultadoConsultaAmortizacion = null;
		BigDecimal bidOficinaSolicitud = null;
		BigDecimal bidNumeroSolicitud = null;
		BigDecimal bidVersionSolicitud = null;
		BigDecimal bidDigitoSolicitud = null;
		BigDecimal bidNucExpediente = null;
		GestionDatosSolicitud gds = new GestionDatosSolicitud();

		bidOficinaSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_OFICINA);
		bidNumeroSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUMERO);
		bidVersionSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION);
		bidNucExpediente = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC);
		bidDigitoSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_DIGITO);

		final IDatosEntradaTx datosEntradaConsultaAmortizacion = 
				ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),
						Constantes.ID_CUENTA_ANPM,
						ID_CODOP_CONSULTA_AMORTIZACION);

		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_OFICINA_SOLICITUD, bidOficinaSolicitud);
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_NUMERO_SOLICITUD, bidNumeroSolicitud);
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_VERSION_SOLICITUD, bidVersionSolicitud);
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_NUC_EXPEDIENTE, bidNucExpediente);

		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_DIGITO_SOLICITUD, bidDigitoSolicitud);


		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_PANTALLA_ORIGEN, Constantes.CTE_STR_5); //tipo operación = "5"

		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_SRV_ORIGEN, Constantes.CTE_BID_OPCION_249);

		resultadoConsultaAmortizacion = ServicioNegocio.invocarServicio(
				ServicioNegocio.getContexto(), datosEntradaConsultaAmortizacion);

		if (UtilidadesTramitacion.isBlankOrNull(resultadoConsultaAmortizacion))
		{
			ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_NO_CTX_ANPMN075_TAE_BONIF,
					null, null, null);
		}
		taeBonificada = resultadoConsultaAmortizacion[0].getBigDecimal("ANPMN075150");

		contextoImprimir.put(ID_TAE_BONIFICADA, taeBonificada);

		/*Se actualiza la tae bonificada en datos solicitud, AN25TB01*/
		gds.actualizarTaeBonificada(bidOficinaSolicitud, bidNumeroSolicitud,
				bidVersionSolicitud, bidNucExpediente, taeBonificada);

	}

	/**
	 * Obtenemos la máxima bonificación invocando el programa puente ANPMR210.
	 * @param contextoImpresion
	 * @param ctxtoSolicitud
	 */

	private static void rellenarImpresionConMaximaBonificacion(IContexto contextoImpresion, IContexto ctxtoSolicitud)
	{

		BigDecimal bidNucExpediente = null;
		BigDecimal codProducto = null;
		BigDecimal codSubproducto = null;
		BigDecimal idTarifa = null;
		BigDecimal versionGeneral = null; 

		IContexto ctxEntrada = null;
		IContexto[] resultado = null;

		BigDecimal maximaBonificacion = null;

		bidNucExpediente = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC);
		codProducto = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_PROD);
		codSubproducto = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_SUBPROD);
		idTarifa = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_ID_TARIFA);
		versionGeneral = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION_GENERAL);

		/*Creamos el contexto de entrada a la include.*/
		ctxEntrada = ContextoFactory.getInstance().getContexto("ANPMN431");
		ctxEntrada.put("ANPMN431010", bidNucExpediente);
		ctxEntrada.put("ANPMN431020", codProducto);
		ctxEntrada.put("ANPMN431120", codSubproducto);
		ctxEntrada.put("ANPMN431130",idTarifa);
		// 2016-03-07 - Anhadir version general
		ctxEntrada.put("ANPMN431150", versionGeneral);

		/**
		 * Reservamos memoria para el registro que nos viene de garantias
		 */
		UtilidadesComun.reservarMemoriaRegistro(ctxEntrada, "ANPMN431140", 10);

		CtgFacade ctg = new CtgFacade();

		resultado = ctg.invocarProgramaCics(ctxEntrada, "ANPMR210");

		if (UtilidadesTramitacion.isBlankOrNull(resultado))
		{
			ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_NO_EXISTEN_MAXIMA_BONIF,
					null,
					new String[] {bidNucExpediente.toString(), codProducto.toString()},
					null);
		}

		maximaBonificacion = resultado[0].getBigDecimal("ANPMN431030");
		contextoImpresion.put("ANPMN100700", maximaBonificacion);
	}

	/**
	 * Rellenamos el interés maximo bonificado invocando el programa puente ANPMR210.
	 * @param contextoImpresion
	 * @param ctxtoSolicitud
	 */

	private static void rellenarInteresMaximoBonificado(
			IContexto contextoImpresion, IContexto ctxtoSolicitud,final IContexto[] ctxtInteres, Integer modelo)
	{
		final String strCtxtoInteresTecho = "ANPMN052570";
		BigDecimal bidNucExpediente = null;
		BigDecimal codProducto = null;
		BigDecimal codSubproducto = null;
		BigDecimal idTarifa = null;
		BigDecimal interesMaximoBonificado = null;
		BigDecimal versionGeneral = null;

		IContexto ctxEntrada = null;
		IContexto[] resultado = null;

		BigDecimal maximaBonificacion = null;

		//Obtenemos el primer tramo variable
		IContexto cntxtInteresVariable = getPrimerVariable(ctxtInteres);
		BigDecimal interesMaximo = cntxtInteresVariable.getBigDecimal(strCtxtoInteresTecho);

		bidNucExpediente = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC);
		codProducto = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_PROD);
		codSubproducto = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_SUBPROD);
		idTarifa = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_ID_TARIFA);
		versionGeneral = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION_GENERAL);;

		/*Creamos el contexto de entrada a la include.*/
		ctxEntrada = ContextoFactory.getInstance().getContexto("ANPMN431");
		ctxEntrada.put("ANPMN431010", bidNucExpediente);
		ctxEntrada.put("ANPMN431020", codProducto);
		ctxEntrada.put("ANPMN431120", codSubproducto);
		ctxEntrada.put("ANPMN431130", idTarifa);
		ctxEntrada.put("ANPMN431150", versionGeneral);

		/**
		 * Reservamos memoria para el registro que nos viene de garantias
		 */
		UtilidadesComun.reservarMemoriaRegistro(ctxEntrada, "ANPMN431140", 10);

		resultado = ctgFacade.invocarProgramaCics(ctxEntrada, "ANPMR210");

		if (UtilidadesTramitacion.isBlankOrNull(resultado))
		{
			ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_NO_EXISTEN_MAXIMA_BONIF,
					null,
					new String[] {bidNucExpediente.toString(), codProducto.toString()},
					null);
		}

		//El interés maximo bonificado, resulta del interés maximo menos la maxima bonificación
		maximaBonificacion = resultado[0].getBigDecimal("ANPMN431030");
		interesMaximoBonificado = interesMaximo.subtract(maximaBonificacion);

		/*20151016 Si el documento es la Info previa nueva, 20399, guardamos el interés máximo bonificado en el MINIMO, ANPMN100300*/
		if (CTE_CODIGO_MODELO_INFO_PREVIA_NUEVA_INE == modelo.intValue())
		{
			contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
					interesMaximoBonificado,
					LengthConstants.LENGTH_0003,
					LengthConstants.LENGTH_0004, 
					true));
		}
		else
		{
			//es decir, si imprimimos la info previa antigua, o si imprimimos cualquier otro documento personal
			//(oferta vinculante personal, póliza, solicitud-contrato,...) entonces hacemos como estaba antes, es decir
			//guardamos el interés máximo bonificado en el interés máximo, ANPMN100290.
			contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO, UtilidadesTramitacion.bigDecimalToString(
					interesMaximoBonificado,
					LengthConstants.LENGTH_0003,
					LengthConstants.LENGTH_0004, 
					true));
		}
	}




	/**
	 * Rellena el lugar y la fecha en el caso que viene vacia de la tabla an25tb01
	 * @param contextoImpresion
	 */
	public static void rellenaLugarFecha(final IContexto contextoImpresion) 
	{	
		IDatosEntradaTx datosEntradaServicioDatosCentro = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), 
				Constantes.CTE_CC_DATOS_CENTRO,Constantes.CTE_CO_DATOS_CENTRO);
		datosEntradaServicioDatosCentro.addCampo("CENTRO", ServicioNegocio.getContexto().getOficina());

		IContexto[] datosCentro = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaServicioDatosCentro);

		if(!UtilidadesTramitacion.isBlankOrNull(datosCentro) && datosCentro.length > 0) 
		{
			for(IContexto centro:datosCentro) 
			{
				if(!UtilidadesTramitacion.isBlankOrNull(centro.getString(Constantes.CTE_LUGAR_GEOGRAFICO))) 
				{
					contextoImpresion.put(ID_PROP_LUGAR_Y_FECHA, getLugarFecha(centro.getString(Constantes.CTE_LUGAR_GEOGRAFICO).trim()));
				}
			}
		}
	}

	/**
	 * Rellena el lugar y la fecha en el caso que viene vacia de la tabla an25tb01
	 * @param contextoImpresion
	 */
	public static void rellenaLugarFechaVacios(final IContexto contextoImpresion) 
	{	

		contextoImpresion.put(ID_PROP_LUGAR_Y_FECHA, "");

	}


	/**
	 * Rellena los campos extra del multicredito 48H, 
	 * 18 y 19
	 */
	public static void rellenarInteresOrdinario(final IContexto cntxtPrograma,final IContexto[] ctxtInteres,final IContexto contextoImpresion) {

		final String strCtxtoInteresTecho = "ANPMN052570";

		//Obtenemos el primer tramo variable

		IContexto cntxtInteresVariable = getPrimerVariable(ctxtInteres);

		contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, UtilidadesTramitacion.bigDecimalToString(
				cntxtInteresVariable.getBigDecimal(strCtxtoInteresTecho),
				LengthConstants.LENGTH_0003, 
				LengthConstants.LENGTH_0004,
				true));


	}

	/**
	 * Rellenar el recuadro 15 de las sucesivas entregas importe
	 * @param condicionesCapital
	 */
	public static void rellenarSucesivasEntregasImporte(final IContexto condicionesCapital,
			final IContexto contextoImpresion, boolean esConcesionario)
	{

		final String strCtxtoCondicionesCapitalModalidadAmortizacion = "ANPMN051090";
		final String strCtxtoCondicionesCapitalPagoUnicoVencimientoFinal = "ANPMN052460";


		//Segun la modalidad de amortizacion seleccionamos el mensaje correspondiente
		switch (condicionesCapital.getBigDecimal(strCtxtoCondicionesCapitalModalidadAmortizacion).intValue())
		{
		case Constantes.CTE_INT_UNO:
			//Si no es pago unico al vencimiento final, (no es FP)
			if(!condicionesCapital.getString(strCtxtoCondicionesCapitalPagoUnicoVencimientoFinal).
					equals(Constantes.CTE_STR_1)) 
			{
				//Iguales comprensivas solo de capital	
				contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, 
						recuperaDescripcionSucesivasEntregas(Constantes.CTE_STR_1, esConcesionario));
			}
			else 
			{
				//Opcion nula, tenemos que poner en el campito unas rayas
				contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, new String("------"));
			}
			break;

		case Constantes.CTE_INT_DOS:
			//Iguales importes que la primera, comprensivas de capital e intereses,salvo supuestos de bonificacion de intereses
			contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, 
					recuperaDescripcionSucesivasEntregas(Constantes.CTE_STR_2, esConcesionario));
			break;

		case Constantes.CTE_INT_CINCO:
			contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, 
					recuperaDescripcionSucesivasEntregas(Constantes.CTE_STR_5, esConcesionario));
			break;

		case Constantes.CTE_INT_OCHO:
			contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, 
					recuperaDescripcionSucesivasEntregas(Constantes.CTE_STR_8, esConcesionario));
			break;

		case Constantes.CTE_INT_QUINCE:
			contextoImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, 
					recuperaDescripcionSucesivasEntregas(Constantes.CTE_STR_15, esConcesionario));
			break;

		default:
			break;
		}

	}

	/**
	 * Rellena el campo sucesivas entregas importe con el valor correspondiente en funcion
	 * de la especialidad, la modalidad de amortizacion y el tipo de interes.
	 * <ul>
	 * <li>Si especialidad = "D" (es divisa): se muestra la ultima entrega.</li>
	 * <li>Si especialidad <> "D":
	 *     <ul>
	 *     <li>Si modalidad de amortizacion es EPC (02): 
	 *         <ul>
	 *         <li>Si interes es bonificado (03): el texto es el de multicredito.</li>
	 *         <li>Si no: el texto es el de concesionarios.</li>
	 *         </ul></li>
	 *     <li>Si no: texto vacio.</li>
	 *     </ul>
	 * </li>
	 * </ul>
	 *  
	 * @param esDivisa
	 * @param aCtxIntereses array de contextos de condiciones de interes (ANPMN052)
	 * @param ctxCondicionesCapital contexto de condiciones de capital (ANPMN051)
	 * @param ctxPrograma contexto programa (ANPMN075)
	 * @param ctxImpresion contexto de impresion (ANPMN100)
	 */
	private static void rellenarSucesivasEntregasImportePoliza(boolean esDivisa, final IContexto[] aCtxIntereses,
			IContexto ctxCondicionesCapital, IContexto ctxPrograma, IContexto ctxImpresion)
	{

		// Inicializaciones
		String tipoInteres = null;
		IRegistro ultimaEntrega = null;
		String sucesivasEntregasImporte = "------";

		IRegistro[] aRegPagos = ctxPrograma.getRegistro("ANPMN075140");
		BigDecimal modalidadAmortizacion = ctxCondicionesCapital.getBigDecimal("ANPMN051090");
		String strModalidadAmortizacion = "";
		if (null != modalidadAmortizacion)
		{
			strModalidadAmortizacion = modalidadAmortizacion.toString();
		}


		// Obtener el valor del campo sucesivas entregas importe en funcion de especialidad, 
		// modalidad de amortizacion y tipo interes.
		if (esDivisa)
		{
			// Si es divisa: mostrar ultima entrega.

			// Buscar registro ultima entrega
			if ((null != aRegPagos) && (0 < aRegPagos.length))
			{
				for (int i= aRegPagos.length - 1; i >= 0 && ultimaEntrega == null; i--)
				{
					if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal("ANPMN075143")) != 0)
					{
						ultimaEntrega = aRegPagos[i];
					}
				}
			}

			// Obtener valor ultima entrega
			if (null != ultimaEntrega)
			{
				sucesivasEntregasImporte = UtilidadesTramitacion.
						bigDecimalToString(ultimaEntrega.getBigDecimal("ANPMN075143"), 9, 2, false);
			}
		}
		else
		{
			// Si no es divisa: comprobar modalidad de amortizacion

			if (0 == Constantes.CTE_MOD_AMORTIZACION_EPC.compareTo(modalidadAmortizacion))
			{
				// Si la modalidad de amortizacion es EPC (02): comprobar tipo interes

				// Buscar en los contextos de intereses alguno con tipo interes variable bonificado (03)
				boolean existeTipoInteresVarBonif = false;
				if ((null != aCtxIntereses) && (0 < aCtxIntereses.length))
				{
					for (IContexto ctxInteres : aCtxIntereses)
					{
						tipoInteres = ctxInteres.getString("ANPMN052080");

						if (StringUtils.isNotBlank(tipoInteres) && 
								(tipoInteres.equals(Constantes.TIPO_INT_VAR_BONIF)))
						{
							existeTipoInteresVarBonif = true;
							break;
						}
					}
				}

				// Obtener descrpicion en funcion del tipo interes
				if (existeTipoInteresVarBonif)
				{
					// Si algun tipo interes es variable bonificado: mostrar texto multicredito
					sucesivasEntregasImporte = recuperaDescripcionSucesivasEntregas(
							strModalidadAmortizacion, false);

				}
				else
				{
					// Si ningun tipo interes es variable bonificado: mostrar texto concesionarios
					sucesivasEntregasImporte = recuperaDescripcionSucesivasEntregas(
							strModalidadAmortizacion, true);
				}
			}
			else
			{
				// Texto = vacio
			}
		}

		// Anhadir valor del campo sucesivas entregas importe al contexto de impresion
		ctxImpresion.put(ID_PROP_SUCESIVAS_ENTREGAS_IMPORTE, sucesivasEntregasImporte);
	}


	/**
	 * Recupera las distintas descripciones que se corresponden con la modalidad de amortizacion
	 * @param modalidadAmortizacion
	 * @return
	 */
	public static String recuperaDescripcionSucesivasEntregas(String modalidadAmortizacion, boolean esConcesionario) 
	{	
		final IDatosEntradaTx datosEntradaConsultaParametro = ServicioNegocio.getPrograma(
				ServicioNegocio.getContexto(), IConstantesTramitacion.CTE_CC_CONSULTA_PARAMETRO,IConstantesTramitacion.CTE_CO_CONSULTA_PARAMETRO);

		datosEntradaConsultaParametro.addCampo(IConstantesTramitacion.NOMBRE_CAMPO_PARAMETRO, modalidadAmortizacion);

		if (esConcesionario)
		{
			datosEntradaConsultaParametro.addCampo(IConstantesTramitacion.NOMBRE_AGRUPACION_PARAMETRO, "SUC_ENT_CO");
		}
		else
		{
			datosEntradaConsultaParametro.addCampo(IConstantesTramitacion.NOMBRE_AGRUPACION_PARAMETRO, "SUCE_ENTRE");
		}

		final IContexto[] aContextoParametro = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaParametro);

		if(!UtilidadesTramitacion.isBlankOrNull(aContextoParametro) && aContextoParametro.length > 0
				&& !UtilidadesTramitacion.isBlankOrNull(aContextoParametro[0].getString(IConstantesTramitacion.CTXTO_PARAMETRO_VALOR))) {

			return aContextoParametro[0].getString(IConstantesTramitacion.CTXTO_PARAMETRO_VALOR);
		}
		//Si no encontramos el mensaje devolvemos un string vacio
		return new String();

	}
	
	/**
	 * Rellena los textos de cuenta abono
	 * @param contextoImpresion
	 */
	public static void rellenarTextoCuentaAbono(final BigDecimal producto, IContexto[] contextosDestino,
			final IContexto contextoImpresion,final BigDecimal tipoExpediente) {
		
		String destino = Constantes.CTE_STRING_EMPTY;
		if (null != contextosDestino){
			for (IContexto ctx : contextosDestino){
				String destinoPrincipal = ctx.getString(CAMPO_CTXTO_DESTINO_ES_PRINCIPAL);
				if (StringUtils.isNotBlank(destinoPrincipal) && destinoPrincipal.equals(Constantes.SI)){
					destino = ctx.getString(CAMPO_CTXTO_DESTINO);
					break;
				}
			}
		}
		
		String texto = Constantes.CTE_STRING_EMPTY;
		//Si es preconcedido 
		if (UtilidadesComun.esPreconcedidoASF(tipoExpediente)) {			
			texto = "Abono en la cuenta indicada en el recuadro 22";							
		}		
		//Si es refinanciacion (consumo con destino 5202)
		else if (UtilidadesComun.esRefinanciancionASF(tipoExpediente, destino)){			
			texto = "Aplicar a la deuda actualmente impagada por el Prestatario en la Entidad";			
		}
		//Si es concesionario o consumo sin ser refinanciacion (consumo con destino diferente a 5202)
		else if ((UtilidadesComun.esConsumoASFsinRefinaciacion(tipoExpediente, destino)) || 
			(UtilidadesComun.esConcesionarioASF(tipoExpediente))){
			
			texto = "Transferencia a la cuenta del Establecimiento para proceder al abono de la compra objeto de financiación previo descuento de la comisión de apertura,en caso de que ésta se devengue";						
		}		
		contextoImpresion.put(ID_PROP_DESTINO_FONDOS, texto);
	}


	/**
	 * Rellena los datos de bonificación en el contexto de impresion
	 * @param contextoImpresion
	 */
	public static void rellenaDatosBonificacionCampanhas(final BigDecimal producto,final BigDecimal subproducto, final BigDecimal idTarifa, 
			final IContexto contextoImpresion, final BigDecimal versionGeneral, final BigDecimal nucExpediente, final BigDecimal numPeriodos) {

		//Variables contexto devuelto por ANPMR208
		final String  strContextoCampanhaRegBonificaciones =  "ANPMN439100"; 
		final String  strElementoDeCampanha = "ANPMN439102";
		final String  strNumeroCampanha = "ANPMN439101";
		final String  strPorcentajeDeBonificacion = "ANPMN439105";
		List<BigDecimal> visitados = new ArrayList<BigDecimal>();

		IContexto[] datosDeCampanhas = recuperaDatosBonificacionCampanhas(producto, subproducto, idTarifa, versionGeneral, nucExpediente, numPeriodos);
		IContexto[] datosDeCorrespondencia = recuperaCorrespondenciasBonificacion();

		List<IRegistro> lstRegBonificacion = new ArrayList<IRegistro>(datosDeCampanhas.length);

		final IRegistro[] aRegBonificacion = datosDeCampanhas[0].getRegistro(strContextoCampanhaRegBonificaciones);

		for(IRegistro registroBonificacion:aRegBonificacion) {
			//Comprobamos el numero de campaña para descartar todos los elementos nulos que vienen del pl1 mas de 296 ...!
			if(null != registroBonificacion.getBigDecimal(strNumeroCampanha) && 
					registroBonificacion.getBigDecimal(strNumeroCampanha).intValue() > 0
					&& !visitados.contains(registroBonificacion.getBigDecimal(strElementoDeCampanha))) {
				lstRegBonificacion = procesaRegistroDeBonificacion(datosDeCorrespondencia, registroBonificacion.getBigDecimal(strElementoDeCampanha), 
						registroBonificacion.getBigDecimal(strPorcentajeDeBonificacion), contextoImpresion,lstRegBonificacion);
				//Poner el elemento como visitado
				visitados.add(registroBonificacion.getBigDecimal(strElementoDeCampanha));
			}
		}	
		if(!lstRegBonificacion.isEmpty()) {
			contextoImpresion.put(ID_REG_OBSERVACIONES, lstRegBonificacion.toArray(new IRegistro[lstRegBonificacion.size()]));
		}
	}

	/**
	 * Crea un registro de bonificación
	 * @param datosCorrespondencia
	 * @param numeroCampanha
	 * @param porcentajeBonificacion
	 * @param contextoImpresion
	 */
	public static IRegistro creaRegistroDeBonificacion(final IContexto[] datosCorrespondencia, BigDecimal numeroCampanha, BigDecimal porcentajeBonificacion, final IContexto contextoImpresion) {

		IRegistro registroBonificacion = null;
		final String strContextoParametrosNombreParam = "ANPMN031040";
		final String strContextoPrametrosValorParam = "ANPMN031050";
		StringBuilder sb = new StringBuilder();
		boolean hayCorrespondencia = false;

		for(IContexto datoCorrespondiente:datosCorrespondencia) {
			if(numeroCampanha.toString().equals(datoCorrespondiente.getString(strContextoParametrosNombreParam))) {
				if(!hayCorrespondencia) {
					//Si es falso, es la primera vez que se entra en el if, por tanto añadimos el guion de inicio de frase
					sb.append(Constantes.CTE_STRING_GUION);
				}
				sb.append(datoCorrespondiente.getString(strContextoPrametrosValorParam));
				sb.append(Constantes.CTE_STRING_BLANK);
				hayCorrespondencia = true;
			}
		}
		if(hayCorrespondencia) {
			sb.append(porcentajeBonificacion.toString());
			sb.append(Constantes.CTE_STRING_PORCENTAJE);


			registroBonificacion = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_OBSERVACIONES);	
			registroBonificacion.put(ID_PROP_LINEA_OBSERVACIONES, sb.toString());

		}


		return registroBonificacion;
	}

	/**
	 * 
	 * @param datosCorrespondencia
	 * @param numeroCampanha
	 * @param porcentajeBonificación
	 * @param contextoImpresion
	 */
	public static List<IRegistro> procesaRegistroDeBonificacion (final IContexto[] datosCorrespondencia, BigDecimal numeroCampanha, 
			BigDecimal porcentajeBonificación, final IContexto contextoImpresion, List<IRegistro> lstRegBonificacion) {

		final String strContextoParametrosNombreParam = "ANPMN031040";
		final String strContextoPrametrosValorParam = "ANPMN031050";
		StringBuilder sb = new StringBuilder();
		boolean hayCorrespondencia = false;

		for(IContexto datoCorrespondiente:datosCorrespondencia) {
			if(numeroCampanha.toString().equals(datoCorrespondiente.getString(strContextoParametrosNombreParam))) {
				//Primer Caracter
				//Si es falso es la primera visita con esta correspondencia por lo tanto inicio de linea
				if(!hayCorrespondencia) {
					sb.append(Constantes.CTE_STRING_GUION);
				}

				sb.append(datoCorrespondiente.getString(strContextoPrametrosValorParam));
				sb.append(Constantes.CTE_STRING_BLANK);
				hayCorrespondencia = true;

			}
		}
		return  creaLineaDeBonificacion(sb, contextoImpresion, lstRegBonificacion, porcentajeBonificación);
	}

	/**
	 * Comprueba si la linea a sobrepasado el tamaño maximo
	 * @param sb
	 * @return
	 */
	public static boolean compruebaLongitud(StringBuilder sb) {

		//La longitud total permitida son 80
		if(sb.length() > 79) {
			return true;
		}

		return false;
	}


	/**
	 * Crea y añade a la lista la bonificación
	 * @param sb
	 * @param contexoImpresion
	 * @return la lista de registros para colocar en el apartado de bonificación
	 */
	public static List<IRegistro> creaLineaDeBonificacion(StringBuilder sb, 
			IContexto contexoImpresion, List<IRegistro> lstRegBonificacion,BigDecimal porcentajeBonificacion) {

		IRegistro registroBonificacion = null;
		int permitido = 70;
		int tamanhoTotal = sb.length();
		int i = 0;
		int control = 70;
		String stringAux = new String();
		boolean adelantado = false;

		if(compruebaLongitud(sb)) {
			//Si la longitud es mayor que 79
			//Necesitamos un registro multilinea
			while(i < tamanhoTotal){
				stringAux = sb.substring(i, control);

				while(!stringAux.endsWith(" ")) {
					stringAux = sb.substring(i,control);
					control = control + 1;
					adelantado = true;
				}
				if(adelantado) {
					i = i + stringAux.length();
					control = control - 1;
					adelantado = false;
				}else {
					i = i + permitido;
				}	
				control = control + permitido;

				if(control > tamanhoTotal) {
					control = tamanhoTotal;
					if(i >= tamanhoTotal) {
						//Si se ha rebasado el valor de i es el final
						//Si se produce este caso entonces concatenamos los dos puntos y la bonificacion
						stringAux = stringAux + ":" + " " + "-" + porcentajeBonificacion.toString() + "%" + "de bonificación";
					}

				}
				registroBonificacion = ContextoFactory.getInstance().getRegistro(contexoImpresion, ID_REG_OBSERVACIONES);
				registroBonificacion.put(ID_PROP_LINEA_OBSERVACIONES, stringAux);

				if(registroBonificacion != null) {
					//Si no es blanco ni nulo lo añadimos a la lista
					lstRegBonificacion.add(registroBonificacion);
				}
			}
		}else {
			//Antes de introducir la linea le ponemos los dos puntos y el porcentaje de bonif
			sb.append(Constantes.CTE_STRING_DOS_PUNTOS);
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append(Constantes.CTE_STRING_GUION);
			sb.append(porcentajeBonificacion.toString());
			sb.append("%");
			sb.append(Constantes.CTE_STRING_BLANK);
			sb.append("de bonificación");
			//Es una linea simple y se introduce asi
			registroBonificacion = ContextoFactory.getInstance().getRegistro(contexoImpresion, ID_REG_OBSERVACIONES);
			registroBonificacion.put(ID_PROP_LINEA_OBSERVACIONES, sb.toString());

			if(registroBonificacion != null) {
				//Si no es blanco ni nulo lo añadimos a la lista
				lstRegBonificacion.add(registroBonificacion);
			}
		}



		return lstRegBonificacion;
	}

	/**
	 *  los datos de campañas
	 * @param producto
	 * @param subproducto
	 * @return
	 */
	public static IContexto[] recuperaDatosBonificacionCampanhas(final BigDecimal producto,final BigDecimal subproducto, final BigDecimal idTarifa, final BigDecimal versionGeneral, 
			final BigDecimal nucExpediente, final BigDecimal numPeriodos) {

		/*20150925 AÑADIMOS EL ID TARIFA*/

		//final String strCtxtoTextoObservacion = "ANPMN439103";

		if(LOGGER.isDebugEnabled()) {
			LOGGER.debug("Inicio consulta de campanhas");
		}

		//Creamos una instancia al contexto del programa 
		IContexto ctxtPrograma = ContextoFactory.getInstance().getContexto(IConstantesTramitacion.ID_CONTEXTO_PROGRAMA_CAMPANHAS);

		ctxtPrograma.put(IConstantesTramitacion.CTE_CAMPO_ENTRADA_PRODUCTO_ANPMN439010, producto);
		ctxtPrograma.put(IConstantesTramitacion.CTE_CAMPO_ENTRADA_SUBPRODUCTO_ANPMN439020, subproducto);

		CtgFacade ctg = new CtgFacade();

		reservarMemoriaRegistro(ctxtPrograma,CTE_MATRIZ_DATOS_BONIFICACION,CTE_TAMANHO_MATRIZ_BONIFICACION);

		//Se añade el id tarifa a la invocación del programa ANPMR208 de bonificaciones para campañas.
		ctxtPrograma.put(IConstantesTramitacion.CTE_CAMPO_ENTRADA_ID_TARIFA_ANPMN439040, idTarifa);
		ctxtPrograma.put(IConstantesTramitacion.CTE_CAMPO_ENTRADA_VERSION_GENERAL_ANPMN439050, versionGeneral); // 20160308 - Se añade la versión general para la llamada al ANPMR208
		ctxtPrograma.put(IConstantesTramitacion.CTE_CAMPO_ENTRADA_NUC_EXPEDIENTE_ANPMN439060, nucExpediente);
		ctxtPrograma.put(IConstantesTramitacion.CTE_CAMPO_ENTRADA_PERIODICIAD_INTERES_ANPMN439070, numPeriodos);

		IContexto[] aContextoPrograma = ctg.invocarProgramaCics(ctxtPrograma, IConstantesTramitacion.ID_PROGRAMA_CAMPANHAS);
		if(LOGGER.isDebugEnabled()) {
			LOGGER.debug("FIN llamada al programa de campañas,ANPMR208------");
		}

		return aContextoPrograma;
	}


	/**
	 * Recupera las distintas descripciones que se corresponden con la modalidad de amortizacion
	 * @param modalidadAmortizacion
	 * @return
	 */
	public static IContexto[] recuperaCorrespondenciasBonificacion() {

		IContexto [] aContextoParametro = null;

		final IDatosEntradaTx datosEntradaConsultaParametro = ServicioNegocio.getPrograma(
				ServicioNegocio.getContexto(), IConstantesTramitacion.CTE_CC_CONSULTA_PARAMETRO,IConstantesTramitacion.CTE_CO_CONSULTA_PARAMETRO);

		datosEntradaConsultaParametro.addCampo(IConstantesTramitacion.NOMBRE_AGRUPACION_PARAMETRO, "CAMPANAS");

		aContextoParametro = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaParametro);

		if(!UtilidadesTramitacion.isBlankOrNull(aContextoParametro) && aContextoParametro.length > 0
				&& !UtilidadesTramitacion.isBlankOrNull(aContextoParametro[0].getString(IConstantesTramitacion.CTXTO_PARAMETRO_VALOR))) {

			return aContextoParametro;
		}
		//Si no encontramos el mensaje devolvemos un string vacio
		return aContextoParametro;

	}


	/**
	 * Reserva memoria en el contexto para el registro que se pasa como parámetro
	 * @param contexto Contexto donde reservar memoria
	 * @param strCtxtoIdRegistro Id del registro a crear
	 * @param iRegistrosSize Número de registros a crear
	 */
	private static void reservarMemoriaRegistro(IContexto contexto,
			String strCtxtoIdRegistro, int iRegistrosSize)
	{
		List <IRegistro> lstRegistros = new ArrayList<IRegistro>(iRegistrosSize);
		for (int i = 0; i < iRegistrosSize; i++)
		{
			lstRegistros.add(ContextoFactory.getInstance().getRegistro(contexto, strCtxtoIdRegistro));
		}
		contexto.put(strCtxtoIdRegistro, lstRegistros.toArray(new IRegistro[0]));
	}

	/**
	 * Rellena los campos de texto para la info previa de multicredito 48H
	 * @param contextoImpresion
	 */
	public static void rellenarTextosInfoPreviaMulticredito48H(final IContexto contextoImpresion) {

		//Rellenamos los campos de interes del multicredito para la info previa
		contextoImpresion.put(ID_PROP_TEXTO_DISPOSICION, TEXTO_DISPOSICION);
		contextoImpresion.put(ID_PROP_TEXTO_GARANTIA_REQUERIDA, TEXTO_GARANTIA_REQUERIDA);
		contextoImpresion.put(ID_PROP_TEXTO_INTERES_BONIFICADO, TEXTO_INTERES_BONIFICADO);

	}

	/**
	 * Rellenar la fecha de devngo de interés para multicredito
	 * @param contextoImpresion
	 */
	public static void rellenarFechaDevengoInteresMulticredito(final IContexto contextoImpresion, final IContexto contextoPrograma) {


		final String strCtxtoFechaImpresionPoliza = "ANPMN075540";

		//Se rellena el campo con la fecha de hoy, es decir la fecha de impresion del documento
		contextoImpresion.put(ID_PROP_FECHA_DEVENGO_INTERESES,DateUtils.cambiaFormatoFecha(contextoPrograma.getString(strCtxtoFechaImpresionPoliza), DateUtils.FORMATO_FECHA_AMERICANO, DateUtils.FORMATO_FECHA_CORTO));

	}

	/**
	 * Rellena el contexto con los campos correspondientes en caso de ser un tipo de interes suelo
	 * cero y una persona consumidora
	 * @param contextoImpresion
	 */
	public static void rellenarConsumidorSueloInicialNulo(final IContexto contextoImpresion) {

		contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, Constantes.CTE_PORCENTAXE_NULO);
		contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO, Constantes.CTE_PORCENTAXE_NULO);

	}


	/**
	 * Comprueba si el elemento de la matriz de impresion es cero de ser cero lo pone a nulo
	 * @param contextoImpresion
	 */
	public static void rellenarConsumidorSueloInicialNuloCuandoCero(final IContexto contextoImpresion) {

		if(!UtilidadesComun.isEmptyOrNullString(contextoImpresion.getString(ID_PROP_PORC_INT_MINIMO)) &&
				!contextoImpresion.getString(ID_PROP_PORC_INT_MINIMO).trim().equals(Constantes.CTE_PORCENTAXE_NULO)){
			if(0 == UtilidadesTramitacion.stringToBigDecimal(contextoImpresion.getString(ID_PROP_PORC_INT_MINIMO), Locale.getDefault()).compareTo(BigDecimal.ZERO)){
				contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, Constantes.CTE_PORCENTAXE_NULO);
			}
		}

		if(!UtilidadesComun.isEmptyOrNullString(contextoImpresion.getString(ID_PROP_PORC_INT_MAXIMO)) &&
				!contextoImpresion.getString(ID_PROP_PORC_INT_MAXIMO).trim().equals(Constantes.CTE_PORCENTAXE_NULO)){
			if(0 == UtilidadesTramitacion.stringToBigDecimal(contextoImpresion.getString(ID_PROP_PORC_INT_MAXIMO), Locale.getDefault()).compareTo(BigDecimal.ZERO)){
				contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO, Constantes.CTE_PORCENTAXE_NULO);
			}
		}


	}

	/**
	 * Se realiza una llamada al servicio de negocio que recupera los datos de catalogo para que podamos setear la descripcion
	 * y el codigo de producto y subproducto.
	 * @param contextoImpresion
	 * @param contextoDatosSolicitud
	 */
	public static void rellenarProductoSubproducto(final IContexto contextoImpresion,final IContexto contextoProducto,final IContexto contextoSubproducto){

		//final String strIntCodigoProducto = "ANPMN050080";
		//final String strIntCodigoSubproducto = "ANPMN050090";
		//final String strIntColectivo = "ANPMN050110";

		//¡¡OJO!!: La versión la setearemos nosotros del valor obtenido de las llamadas siguientes.
		//final Integer CTE_CC_OBTENER_DATOS_VG = new Integer(507);
		//final Integer CTE_CO_OBTENER_DATOS_VG = new Integer(48);		

		//IDatosEntradaTx datosEntradaSN = null;
		//IContexto[] arrayContextos = new IContexto[] {}; 


		//datosEntradaSN = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), CTE_CC_OBTENER_DATOS_VG, CTE_CO_OBTENER_DATOS_VG);

		//datosEntradaSN.addCampo(0, contextoDatosSolicitud.getBigDecimal(strIntCodigoProducto));
		//datosEntradaSN.addCampo(1, contextoDatosSolicitud.getBigDecimal(strIntCodigoSubproducto));
		//datosEntradaSN.addCampo(2, contextoDatosSolicitud.getBigDecimal(strIntColectivo));
		//datosEntradaSN.addCampo(4, BigDecimal.ONE);//Se le pasa uno en el paso para acotar el numero de resultados devueltos

		//arrayContextos = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaSN);

		//if(null != arrayContextos && arrayContextos.length >0) {
		//for(IContexto ctxt : arrayContextos) {
		/**Contexto de producto**/
		//if(ctxt.getNombre().equals("ANPMN001")) {
		contextoImpresion.put(ID_PROP_PRODUCTO, contextoProducto.getBigDecimal("ANPMN001010"));
		contextoImpresion.put(ID_PROP_DESCRIPCION_PRODUCTO, contextoProducto.getString("ANPMN001030"));
		//}
		/**Contexto de subproducto**/
		//if(ctxt.getNombre().equals("ANPMN002")) {
		contextoImpresion.put(ID_PROP_SUBPRODUCTO, contextoSubproducto.getBigDecimal("ANPMN002020"));
		contextoImpresion.put(ID_PROP_DESCRIPCION_SUBPRODUCTO, contextoSubproducto.getString("ANPMN002040"));
		//}
		//}
		//}

	}

	/**
	 * Rellena los campos especificos del contrato crediventas
	 * @param contextoImpresion
	 */
	public static void rellenarContratoCrediventas(final IContexto contextoImpresion,final IContexto contextoDatosSolicitud,BigDecimal nucExpediente) {

		final String bidImporteInversion = "ANPMN050560";

		IContexto[] datosCrediventas = recuperaDatosCrediventas(nucExpediente);
		//IContexto[] datosCrediventas  = null;
		if(!UtilidadesTramitacion.isBlankOrNull(datosCrediventas) && datosCrediventas.length > 0) {
			for(IContexto ctxCrediventas:datosCrediventas) {
				/**
				 * Se comprueba que los campos nos vienen distintos de nulo y se insertan.
				 */
				if(!UtilidadesTramitacion.isBlankOrNull(nucExpediente)) {
					contextoImpresion.put(ID_PROP_IDENTIFICACION_EXPEDIENTE, nucExpediente);
				}
				if(!UtilidadesTramitacion.isBlankOrNull(ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_PRIMER_TITULAR_NOMBRE))) {
					contextoImpresion.put(ID_PROP_NOMBRE_ESTABLECIMIENTO, ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_PRIMER_TITULAR_NOMBRE));
				}
				if(!UtilidadesTramitacion.isBlankOrNull(ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_NIF_PRIMER_TITULAR))){
					contextoImpresion.put(ID_PROP_NIF_CIF_ESTABLECIMIENTO, ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_NIF_PRIMER_TITULAR));
				}
				if(!UtilidadesTramitacion.isBlankOrNull(ctxCrediventas.getBigDecimal(Constantes.CTE_CTX_CREDIVENTAS_NUM_CONTRATO_BEE))) { 
					contextoImpresion.put(ID_PROP_SERVICIO_CREDIVENTAS, ctxCrediventas.getBigDecimal(Constantes.CTE_CTX_CREDIVENTAS_NUM_CONTRATO_BEE).toString());
				}
				if(!UtilidadesTramitacion.isBlankOrNull(ctxCrediventas.getBigDecimal(Constantes.CTE_CTX_CREDIVENTAS_NUM_VENDEDOR_CREDIVENTAS))) {
					contextoImpresion.put(ID_PROP_CODIGO_VENDEDOR, ctxCrediventas.getBigDecimal(Constantes.CTE_CTX_CREDIVENTAS_NUM_VENDEDOR_CREDIVENTAS).toString());
				}
				if(!UtilidadesTramitacion.isBlankOrNull(ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_ARTICULO))) {
					contextoImpresion.put(ID_PROP_DESC_OBG_PIGNORADO, ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_ARTICULO));
				}
				/**
				 * Comentario para forzar despliegue
				 */
				if(!UtilidadesTramitacion.isBlankOrNull(ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_DIRECCION))) {
					contextoImpresion.put(ID_PROP_LUGAR_Y_FECHA,getLugarFecha(ctxCrediventas.getString(Constantes.CTE_CTX_CREDIVENTAS_DIRECCION).toString()));
				}



			}
		}

		contextoImpresion.put(ID_PROP_IMP_TASACION, contextoDatosSolicitud.getBigDecimal(bidImporteInversion));
		contextoImpresion.put(ID_PROP_INTERES_DEMORA,  UtilidadesTramitacion.bigDecimalToString(calculaInteresDemoraCrediventas(contextoImpresion),LengthConstants.LENGTH_0003,LengthConstants.LENGTH_0004, true));


	}

	/**
	 * Rellena los campos especificos del contrato crediventas para el caso de llamada API/REST
	 * @param contextoImpresion
	 */
	public static IContexto[] rellenarContratoCrediventas(ImprimirDocumentosVO imprimirDocumentosVO,IContexto[] contextosImpresion) {

		IContexto contextoImpresion = contextosImpresion[0];

		if(!UtilidadesTramitacion.isBlankOrNull(imprimirDocumentosVO.getBidNucExpediente())) {
			contextoImpresion.put(ID_PROP_IDENTIFICACION_EXPEDIENTE, imprimirDocumentosVO.getBidNucExpediente());
		}
		if(!UtilidadesTramitacion.isBlankOrNull(imprimirDocumentosVO.getStrNombrePrimerTitularAplazos())) {
			contextoImpresion.put(ID_PROP_NOMBRE_ESTABLECIMIENTO, imprimirDocumentosVO.getStrNombrePrimerTitularAplazos());
		}
		if(!UtilidadesTramitacion.isBlankOrNull(imprimirDocumentosVO.getStrNifPrimerTitularAplazos())){
			contextoImpresion.put(ID_PROP_NIF_CIF_ESTABLECIMIENTO,imprimirDocumentosVO.getStrNifPrimerTitularAplazos());
		}
		if(!UtilidadesTramitacion.isBlankOrNull(imprimirDocumentosVO.getBidNumeroContratoAplazos())) { 
			contextoImpresion.put(ID_PROP_SERVICIO_CREDIVENTAS, imprimirDocumentosVO.getBidNumeroContratoAplazos().toString());
		}
		if(!UtilidadesTramitacion.isBlankOrNull(imprimirDocumentosVO.getBidNumeroVendedorAplazos())) {
			contextoImpresion.put(ID_PROP_CODIGO_VENDEDOR,imprimirDocumentosVO.getBidNumeroVendedorAplazos().toString());
		}
		if(!UtilidadesTramitacion.isBlankOrNull(imprimirDocumentosVO.getStrNombreArticuloAplazos())) {
			contextoImpresion.put(ID_PROP_DESC_OBG_PIGNORADO, imprimirDocumentosVO.getStrNombreArticuloAplazos());
		}
		if(!UtilidadesTramitacion.isBlankOrNull(imprimirDocumentosVO.getStrDireccionAplazos())) {
			contextoImpresion.put(ID_PROP_LUGAR_Y_FECHA,getLugarFecha(imprimirDocumentosVO.getStrDireccionAplazos()));
		}

		contextosImpresion[0] = contextoImpresion;
		return contextosImpresion;	
	}

	/**
	 * Calcula el interes de demora en crediventas a partir de los campos previamente relleandos en el contexto de impresion
	 * @param contextoImpresion
	 * @return
	 */
	public static BigDecimal calculaInteresDemoraCrediventas(final IContexto contextoImpresion) {

		BigDecimal interesDemora = BigDecimal.ZERO;

		if(!UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getBigDecimal(ID_PROP_IMP_RECARGO_DEMORA))   && 
				!UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PORC_INTERES_INICIAL))) {
			String porcentajeInteresInicial = contextoImpresion.getString(ID_PROP_PORC_INTERES_INICIAL);
			interesDemora = contextoImpresion.getBigDecimal(ID_PROP_IMP_RECARGO_DEMORA).add(UtilidadesTramitacion.stringToBigDecimal(porcentajeInteresInicial, Locale.getDefault()));

		}
		return interesDemora;
	}

	/**
	 * Invocamos al servicio de negocio BECR_029 para recuperar los datos de crediventas
	 * @param nucExpediente
	 * @return
	 */
	public static IContexto[] recuperaDatosCrediventas(BigDecimal nucExpediente) {

		IContexto [] aContextoParametro = null;

		final IDatosEntradaTx datosEntradaConsultaParametro = ServicioNegocio.getPrograma(
				ServicioNegocio.getContexto(), IConstantesTramitacion.CTE_CC_CONSULTA_PARAMETRO_CREDIVENTAS,IConstantesTramitacion.CTE_CO_CONSULTA_PARAMETRO_CREDIVENTAS);

		datosEntradaConsultaParametro.addCampo(IConstantesTramitacion.CTE_CPO_ENTRADA_CONSULTA_CREDIVENTAS_NUC, nucExpediente);

		aContextoParametro = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaParametro);

		if(!UtilidadesTramitacion.isBlankOrNull(aContextoParametro) && aContextoParametro.length > 0
				&& !UtilidadesTramitacion.isBlankOrNull(aContextoParametro[0].getString(IConstantesTramitacion.CTXTO_PARAMETRO_VALOR))) {

			return aContextoParametro;
		}
		//Si no encontramos el mensaje devolvemos un string vacio
		return aContextoParametro;
	}

	/**
	 * Este metodo coloca marca nula en los campos indicados en vez de ceros 
	 * @param contextoImpresion
	 */
	public static void anulaDatosConValorCero(final IContexto contextoImpresion) {
		BigDecimal porcentajeInteresInicial = UtilidadesTramitacion.stringToBigDecimal(contextoImpresion.getString(ID_PROP_PORC_INTERES_INICIAL), Locale.getDefault());
		/**
		 * Si el porcentaje de interés incial es cero sustituimos el valor
		 */
		if(0 == porcentajeInteresInicial.compareTo(BigDecimal.ZERO)) {
			contextoImpresion.put(ID_PROP_PORC_INTERES_INICIAL, Constantes.CTE_DATO_NULO);
		}
	}


	/**
	 * Recalcula el numero de plazos de interés si la carencia es distinta de 0
	 * @param contextoImpresion
	 */
	public static void recalcularPagosDeInteresConCarencia(final IContexto contextoImpresion, 
			final IContexto contextoSolicitud) 
	{
		// 2016-10-04 - Restar al numero de pagos de interes la carencia de interes obtenida
		//              de la solicitud (se le estaba restando la carencia de capital).
		//BigDecimal carencia = contextoImpresion.getBigDecimal(ID_PROP_PAGO_APLAZ_CARENCIA_MESES);
		BigDecimal carencia = contextoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_PLAZO_DIFERIMIENTO);

		BigDecimal numeroPagosInteres = UtilidadesTramitacion.stringToBigDecimal(contextoImpresion.
				getString(ID_PROP_NUM_PAGOS_INTERESES), Locale.getDefault());

		// Si la carencia no es nula y no es igual a 0
		if (null != carencia && 0 != carencia.compareTo(BigDecimal.ZERO)) 
		{
			// Recalculamos el numero de pagos de interés
			numeroPagosInteres = numeroPagosInteres.subtract(carencia);
			contextoImpresion.put(ID_PROP_NUM_PAGOS_INTERESES, numeroPagosInteres.toString());
		}
	}


	/**
	 * Rellena el campo del contexto que guarda el numero de horas para resolver 
	 * @param contextoImpresion	Contexto de impresion
	 * @param contextoSolicitud	Contexto de la solicitud
	 */
	public static void rellenarNumeroDiasResolucion (IContexto contextoImpresion, IContexto contextoSolicitud)
	{

		String numDiasRes = getNumeroDiasResolucion(contextoSolicitud);

		if(numDiasRes.equals("1"))
			contextoImpresion.put(ID_PROP_NUMERO_HORAS_RESOLUCION, BigDecimal.ONE);
		else if(numDiasRes.equals("2"))
			contextoImpresion.put(ID_PROP_NUMERO_HORAS_RESOLUCION, new BigDecimal(2));
		else if(numDiasRes.equals("0"))
			contextoImpresion.put(ID_PROP_NUMERO_HORAS_RESOLUCION, BigDecimal.ZERO);

	}


	/**
	 * Rellena el contexto de impresion con los datos necesarios para concesionarios:
	 * <ul>
	 * <li>ANPMN100610: descripcion del bien a financiar</li>
	 * <li>ANPMN100780: nombre establecimiento</li> 
	 * </ul>
	 * @param contextoImpresion contexto para impresion (ANPMN100).
	 * @param contextosDestino array de contextos ANPMN055 con los destinos del prestamo.
	 * @param contextoDatosExpediente contexto con los datos del expediente.
	 */
	private static void rellenarDatosConcesionarios(IContexto contextoImpresion, 
			IContexto[] contextosDestino, IContexto contextoDatosExpediente)
	{	
		// ANPMN100610 - Descripcion del bien a financiar: se lee del campo ANPMN055090 
		// del contexto ANPMN055, para el destino principal (ANPMN055110 = "S")
		String descripcionBienFinanciar = null; 

		if (null != contextosDestino)
		{
			for (IContexto ctx : contextosDestino)
			{
				String destinoPrincipal = ctx.getString(CAMPO_CTXTO_DESTINO_ES_PRINCIPAL);

				if (StringUtils.isNotBlank(destinoPrincipal) && destinoPrincipal.equals(Constantes.SI))
				{
					descripcionBienFinanciar = ctx.getString(CAMPO_CTXTO_DESTINO_COMENTARIO);
					break;
				}
			}
		}

		contextoImpresion.put(ID_PROP_DESC_OBG_PIGNORADO, descripcionBienFinanciar);

		// ANPMN100780 - Nombre del establecimiento: se lee del campo EE273C0385 de la 
		// salida del servicio EEXP_272.
		String nombreEstablecimiento = contextoDatosExpediente.getString(
				CAMPO_CTXTO_EXPEDIENTE_DESCRIPCION_PRESCRIPTOR);

		contextoImpresion.put(ID_PROP_NOMBRE_ESTABLECIMIENTO, nombreEstablecimiento);
	}


	/**
	 * Rellena el campo ANPMN100880 del contexto de impresion con el valor del indicador
	 * de domiciliacion externa. Este indicador podra tomar los siguientes valores:
	 * <ul>
	 * <li>"S": si la cuenta de cargo es externa</li>
	 * <li>"N": resto de casos</li>
	 * </ul> 
	 * 
	 * @param contextoImpresion contexto para impresion (ANPMN100).
	 * @param contextosCuentas array de contextos ANPMN072 con los datos de las cuentas
	 *                         asociadas a la solicitud.
	 */
	private static void rellenarIndicadorDomiciliacionExterna(IContexto contextoImpresion, 
			IContexto[] contextosCuentas)
	{

		// Inicializaciones
		String indDomiciliacionExterna = Constantes.NO; 

		// Obtener indicador de domiciliacion externa:
		// - Si la cuenta de cargo (ANPMN072100 = "C") es externa (ANPMN072200 = 2): indicador = "S"
		// - Resto de casos: indicador = "N"
		if (null != contextosCuentas)
		{
			String tipoCuentaCargoAbono = null; 		// C = cargo, A = abono
			BigDecimal tipoCuentaInternaExterna = null; // 1 = interna, 2 = externa

			for (IContexto ctx : contextosCuentas)
			{
				tipoCuentaCargoAbono = ctx.getString(CAMPO_CTXTO_CUENTA_TIPO_CUENTA_CARGO_ABONO);

				if (StringUtils.isNotBlank(tipoCuentaCargoAbono) && (tipoCuentaCargoAbono.
						equals(Constantes.CTE_TIPO_CUENTA_CARGO)))
				{
					tipoCuentaInternaExterna = ctx.getBigDecimal(CAMPO_CTXTO_CUENTA_TIPO_CUENTA_INT_EXT);

					if ((null != tipoCuentaInternaExterna) && (tipoCuentaInternaExterna.
							compareTo(Constantes.CTE_BID_CUENTA_EXTERNA) == 0))
					{
						indDomiciliacionExterna = Constantes.SI;
					}

					break;
				}
			}
		}

		// Rellenar campo indicador del contexto de impresion (ANPMN100880)
		contextoImpresion.put(ID_PROP_INDICADOR_DOMICILIACION_EXTERNA, 
				indDomiciliacionExterna);
	}


	/**
	 * Rellena el contexto de impresion con la descripcion de la entidad (ANPMN100890).
	 * Para obtener la descripcion de la entidad se realiza una llamada al servicio 
	 * RSAL_101.
	 * 
	 * @param contextoImpresion contexto para impresion (ANPMN100).
	 * @param contextoSolicitud contexto con los datos de la solicitud (ANPMN050).
	 */
	/*
	private static void rellenarDescripcionEntidad(IContexto contextoImpresion, 
			IContexto contextoSolicitud)
	{		
		// Obtener descripcion de la entidad (llamada a RSAL_101)
		String codEntidad = contextoSolicitud.getString(CAMPO_CTXTO_SOL_ENTIDAD);
		String descripcionEntidad = UtilidadesImpresion.obtenerDescripcionEntidad(codEntidad);

		// Rellenar contexto de impresion con la descripcion obtenida (ANPMN100890)
		contextoImpresion.put(ID_PROP_DESCRIPCION_ENTIDAD, descripcionEntidad);	
	}
	 */
	private static void rellenarDescripcionEntidad(IContexto contextoImpresion, 
			IContexto[] contextosCuentas)
	{		

		// Obtener entidad de la cuenta de cargo
		BigDecimal codEntidad = null;
		String strCodEntidad = null;

		if ((null != contextosCuentas) && (0 < contextosCuentas.length))
		{
			String tipoCuentaCargoAbono = "";

			for (IContexto ctxCuenta : contextosCuentas)
			{
				tipoCuentaCargoAbono = ctxCuenta.getString(CAMPO_CTXTO_CUENTA_TIPO_CUENTA_CARGO_ABONO);

				if (StringUtils.isNotBlank(tipoCuentaCargoAbono) && (tipoCuentaCargoAbono.
						equals(Constantes.CTE_TIPO_CUENTA_CARGO)))
				{
					// Se lee la entidad de la cuenta de cargo
					codEntidad = ctxCuenta.getBigDecimal(CAMPO_CTXTO_CUENTA_ENTIDAD);

					if (null != codEntidad)
					{
						strCodEntidad = codEntidad.toString();
					}

					break;
				}
			}
		}

		// Si se ha podido obtener la entidad de la cuenta de cargo, se obtiene la descripcion
		if (StringUtils.isNotBlank(strCodEntidad))
		{
			// Obtener descripcion de la entidad (llamada a RSAL_101)
			String descripcionEntidad = obtenerDescripcionEntidad(strCodEntidad);

			// Rellenar contexto de impresion con la descripcion obtenida (ANPMN100890)
			contextoImpresion.put(ID_PROP_DESCRIPCION_ENTIDAD, descripcionEntidad);
		}
	}



	/**
	 * Rellena el importe de tasacion del contexto de impresion (ANPMN100620) con 
	 * el valor de la inversion (campo AN250560 de BD, incluido en el campo ANPMN050560
	 * del contexto de la solicitud)
	 * 
	 * @param contextoImpresion contexto para impresion (ANPMN100).
	 * @param contextoSolicitud contexto con los datos de la solicitud (ANPMN050).
	 */
	private static void rellenarImporteTasacion(IContexto contextoImpresion, 
			IContexto contextoSolicitud)
	{
		// Obtener importe inversion
		BigDecimal importeInversion = contextoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_IMPORTE_INVERSION);

		// Rellenar contexto de impresion con el importe obtenido (ANPMN100620)
		contextoImpresion.put(ID_PROP_IMP_TASACION, importeInversion);

	}


	/**
	 * Si el indicador de capital negativo es 1, se indica un 1 en la marca del campo fecha
	 * primer pago interes (ANPMN100201), y se anhade el texto correspondiente en el campo 
	 * de observaciones (ANPMN100450).
	 * 
	 * @param ctxPrograma
	 * @param ctxImpresion
	 * @param indCapitalNegativo
	 */
	private static void rellenarObservacionesPrimerPagoInteres(IContexto ctxPrograma, 
			IContexto ctxImpresion, String indCapitalNegativo)
	{
		if (indCapitalNegativo.equals("1"))
		{
			// Marca fecha primer pago interes = 1 (campo ANPMN100201)
			ctxImpresion.put(ID_PROP_MARCA_FECHA_PRIMER_PAGO, Constantes.CTE_MARCA_PRIMER_PAGO_INTERES);

			// Observaciones primer pago interes (campo ANPMN100451). Se añade un registro a los 
			// ya existentes en este campo.

			// Obtener total primer pago. Cuando el capital es negativo, el importe total del 
			// primer pago = intereses primer pago + capital 0 = intereses primer pago.
			final IRegistro[] aRegPagos = ctxPrograma.getRegistro("ANPMN075140");
			String primerPago = "";
			if ((null != aRegPagos) && (0 < aRegPagos.length))
			{
				if (null != aRegPagos[0].getBigDecimal("ANPMN075145"))
				{
					primerPago = aRegPagos[0].getBigDecimal("ANPMN075145").toString();
				}
			}

			// Construir registro con texto a mostrar en observaciones (texto + primer pago)
			String obsPrimerPagoInteres = Constantes.CTE_OBS_PRIMER_PAGO_INTERES + primerPago;
			IRegistro regObsPrimerPagoInteres = ContextoFactory.getInstance().getRegistro(ctxImpresion, ID_REG_OBSERVACIONES);
			regObsPrimerPagoInteres.put(ID_PROP_LINEA_OBSERVACIONES, obsPrimerPagoInteres);

			// Añadir registro a los registros de observaciones existentes
			List<IRegistro> lstObservaciones = new ArrayList<IRegistro>(); 
			IRegistro[] regObservaciones = ctxImpresion.getRegistro(ID_REG_OBSERVACIONES);

			if ((null != regObservaciones) && (0 < regObservaciones.length))
			{
				for (IRegistro reg : regObservaciones)
				{
					lstObservaciones.add(reg); 
				}
			}

			lstObservaciones.add(regObsPrimerPagoInteres);

			// Anhadir registros de observaciones al contexto
			ctxImpresion.put(ID_REG_OBSERVACIONES, lstObservaciones.toArray(new IRegistro[lstObservaciones.size()]));
		}
	}

	/**
	 * Rellena los campos tipo de referencia y margen sustitutivo a partir del primer sustitutivo de los
	 * contextos de interes.
	 * 
	 * @param aContextoInteres contexto de interes
	 * @param contextoImpresion contexto de impresion
	 */
	private static void rellenarImpresionTipoInteresMargenSustitutivo(IContexto[] aContextoInteres, IContexto contextoImpresion)
	{
		// Campos contexto interes
		final String strIntPropTipoReferencia = "ANPMN052160";
		final String strPropDirefencial = "ANPMN052270";
		
		String strTipoRefSustitutivo = "";

		// 2016-10-13 - Rellenar tipo de referencia y margen sustitutivo
		IContexto contextoInteresSustitutivo = getSustitutivo(aContextoInteres);

		if (null != contextoInteresSustitutivo)
		{
			if (null !=  contextoInteresSustitutivo.getBigDecimal(strIntPropTipoReferencia))
			{
				strTipoRefSustitutivo = getStrDescrTipoReferencia(
						contextoInteresSustitutivo.getBigDecimal(strIntPropTipoReferencia));
				if(null != strTipoRefSustitutivo && strTipoRefSustitutivo.length() > 16){
					strTipoRefSustitutivo = strTipoRefSustitutivo.substring(0,16);
				}
				
				contextoImpresion.put(ID_PROP_TIPO_REFER_SUST, strTipoRefSustitutivo);
			}

			if (null != contextoInteresSustitutivo.getBigDecimal(strPropDirefencial))
			{
				contextoImpresion.put(ID_PROP_PORC_MARGEN_SUST, contextoInteresSustitutivo.
						getBigDecimal(strPropDirefencial));
			}
		}
	}


	/**
	 * Rellena el campo Periodicidad de revision del contexto de impresion, a partir de los datos del primer variable
	 * de los registros de interes. 
	 * 
	 * @param aContextoInteres contextos de interes
	 * @param bolPrestamoFijo indicador de si es prestamo fijo
	 * @param paso 
	 * @param contextoImpresion contexto de impresion
	 */
	private static void rellenarImpresionPeriodicidadRevision(IContexto[] aContextoInteres, boolean bolPrestamoFijo, 
			int paso, IContexto contextoImpresion)
	{

		final String strIntPropTipoInteres = "ANPMN052080";
		final String strIntNumPeriodoIntRev = "ANPMN052380";
		final String strIntPropStrUnidadPeriodoRev = "ANPMN052400";
		final String strIntPropIntTipoPeriodo = "ANPMN052450";

		final IContexto contextoInteresPrimerVariableA = getPrimerVariable(aContextoInteres);

		if (!bolPrestamoFijo && 
				UtilidadesTramitacion.isBlankOrNull(contextoInteresPrimerVariableA.getString(ID_PROP_PERIODICIDAD_REVISION)) &&
				//BigDecimal.ONE.equals(contextoInteresPrimerVariableA.getBigDecimal(strIntPropOrdenTramo)) && 
				(Constantes.TIPO_INT_VARIABLE.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres))))
		{

			contextoImpresion.put(ID_PROP_PERIODICIDAD_REVISION,
					getDescPeriodoRevision(
							null,
							contextoInteresPrimerVariableA.getBigDecimal(strIntNumPeriodoIntRev),
							contextoInteresPrimerVariableA.getString(strIntPropStrUnidadPeriodoRev),
							contextoInteresPrimerVariableA.getBigDecimal(strIntPropIntTipoPeriodo),
							paso,
							Boolean.FALSE));

		}
	}

	/**
	 * Método que rellena los campos ANPMN100996, ANPMN100997, ANPMN100998 y ANPMN100999
	 * 
	 * @param contexto datosSolicitud
	 * @param contexto de impresion
	 * @param contexto de intereses
	 * 
	 * @return void
	 * */
	public static void rellenarCamposAdicionales(final IContexto contextoDatosSolicitud, 
			final IContexto ctxtImpresion, final IContexto[] aContextoInteres, IRegistro [] aRegPagos, 
			final IContexto ctxtPrograma)
	{
		BigDecimal plazoTramoIntereses = null;
		BigDecimal carenciaMeses = null;
		boolean primeraCuotaEncontrado = false;
		boolean primeraCuotaSegTramo = false;

		for (IContexto ctxIntereses : aContextoInteres)
		{
			if (0 == BigDecimal.ONE.compareTo(ctxIntereses.getBigDecimal("ANPMN052040")))
			{
				plazoTramoIntereses =  ctxIntereses.getBigDecimal("ANPMN052110");
				break;
			}
		}

		BigDecimal primeraCuotaSegundoTramo = BigDecimal.ZERO;
		if (!UtilidadesTramitacion.isBlankOrNull(plazoTramoIntereses))
		{	
			primeraCuotaSegundoTramo =  plazoTramoIntereses.add(BigDecimal.ONE);
		}

		carenciaMeses = contextoDatosSolicitud.getBigDecimal("ANPMN050650");

		if((!UtilidadesTramitacion.isBlankOrNull(plazoTramoIntereses) &&
				(!UtilidadesTramitacion.isBlankOrNull(carenciaMeses))))
		{
			BigDecimal mesesInicialSinCarencia = (plazoTramoIntereses).subtract(carenciaMeses);
			ctxtImpresion.put(ID_NUMERO_MESES_INI_SIN_CARENCIA, mesesInicialSinCarencia);
		}


		if (!UtilidadesTramitacion.isBlankOrNull(ctxtPrograma.getBigDecimal("ANPMN075520")))
		{
			ctxtImpresion.put(ID_VALOR_TIPO_REFERENCIA, ctxtPrograma.getBigDecimal("ANPMN075520"));
		}

		if (0 != aRegPagos.length)
		{
			for (IRegistro registroActual : aRegPagos)
			{	// se cambia para OV y para la póliza el seteo del campo 997

				if (
						(0 == registroActual.getBigDecimal("ANPMN075143").compareTo(BigDecimal.ZERO)) &&
						(0 == new BigDecimal(2).compareTo(registroActual.getBigDecimal("ANPMN075141")) &&
						(primeraCuotaEncontrado == false))
						)
				{
					ctxtImpresion.put(ID_PRIMERA_CUOTA_COMPLETA_CAPITAL_CERO , registroActual.getBigDecimal("ANPMN075145"));
					primeraCuotaEncontrado = true;
				}

				if ((0 == primeraCuotaSegundoTramo.compareTo(registroActual.getBigDecimal("ANPMN075141")) &&
						(primeraCuotaSegTramo == false)))
				{
					ctxtImpresion.put(ID_PRIMERA_CUOTA_SEGUNDO_TRAMO, registroActual.getBigDecimal("ANPMN075145"));
					primeraCuotaSegTramo = true;
				}
			}
		}
	}

	
	/**
	 * Método que modifica los campos ANPMN100110 y ANPMN100161
	 * para las pólizas ASF con indicador de período mínimo de liquidación de capital e interés igual a 2 
	 * 
	 * @param contexto datosSolicitud
	 * @param contexto de impresion
	 * @param contexto de intereses
	 * 
	 * @return void
	 * */
	public static void rellenarCamposPolizasASF(final IContexto contextoDatosSolicitud, 
			final IContexto ctxtImpresion, final IContexto[] aContextoInteres, IRegistro [] aRegPagos, 
			final IContexto condicionesCapital)
	{
		//si es ASF
		//indicador de período mínimo de liquidación para capital = 2
		//indicador de período mínimo de liquidación para interés = 2
		if (UtilidadesComun.esASF(contextoDatosSolicitud.getString("ANPMN050310")) &&
			(BigDecimal.valueOf(2).compareTo(aContextoInteres[0].getBigDecimal("ANPMN052470"))== 0) &&
			(BigDecimal.valueOf(2).compareTo(condicionesCapital.getBigDecimal("ANPMN051190"))== 0)) 
		{
			 
			//la fecha de inicio de plazo es la fecha de formalización si la tiene
			if (!("01-01-0001".equals(contextoDatosSolicitud.getString("ANPMN050920")))) {
				ctxtImpresion.put(ID_PROP_FECHA_INICIO_PLAZO,contextoDatosSolicitud.getString("ANPMN050920"));	
			}
			// y si no la tiene la fecha del día	
			else {
				Date today = new Date();
				ctxtImpresion.put(ID_PROP_FECHA_INICIO_PLAZO, DateHelper.dateToString(today, DateHelper.FORMATO_DD_MM_YYYY_GUION));
			}
				
			//la primera entrega es la segunda cuota (vencimiento 2)
			if (0 != aRegPagos.length)
			{
				IRegistro segundaCuota = null;
				
				for (IRegistro registroActual : aRegPagos)
				{	
					if (BigDecimal.valueOf(2).compareTo(registroActual.getBigDecimal("ANPMN075141")) == 0)
					{
						segundaCuota = registroActual;
						break;
					}
				}
				
				if (null != segundaCuota)
				{
					ctxtImpresion.put(ID_PROP_IMPORTE_PRIMERA_ENT, segundaCuota.getBigDecimal("ANPMN075145"));					
				}
				
			}
			
		}
		
	}
	
	/**
	 * Rellena los campos para el anexo de Comunidad de Bienes de la poliza y la oferta vinculante. 
	 * Ademas hace una llamada para recuperar el contexto de los clientes.
	 *  
	 * @param contextoImpresion contexto de impresion.
	 * @param Contexto solicitud contexto con los datos de la solicitud.
	 * 
	 * */	
	private static void rellenarCamposAnexoComBienes(final IContexto contextoImpresion,final IContexto ctxtoSolicitud, 
			final IContexto[] strCtxtoCuentasPrestamo)
	{
		List<ClausulaDocumentoC> modeloDocumento = new ArrayList<ClausulaDocumentoC>(0);
		List<Integer> listSubProd = new ArrayList<Integer>(0);
		Integer anexoDocumento = null;
		IContexto[] contextoClientes = new IContexto[0];

		String nombreComunidadB 		= "FC01C0380";
		String apellidoUnoComunidadB 	= "FC01C0360";
		String apellidoDosComunidadB 	= "FC01C0370";

		String cifComunidadB			= "FC01C0060";

		String direccionUnoComunidadB 	= "FC01C0300";
		String direccionDosComunidadB 	= "FC01C0310";
		String direccionTresComunidadB 	= "FC01C0320";

		String cpComunidadB				= "FC01C0290";
		String localidadComunidadB 		= "FC01C0330";

		//Inicializaciones
		String direccionCompleta = "";
		String nombreCB  		 = "";
		String cifCB 			 = "";
		String codigoPostalCB	 = "";
		String localidadCB 		 = "";
		int uno = 1;
		String IBANcliente       = ""; 
		IContexto clienteActualContx  = null;
		//De manera inicial se setea a cero comunidad de bienes
		BigDecimal esComBienes = BigDecimal.ZERO;

		DatosCuentasEng dce = new DatosCuentasEng();
		Boolean indicadorAnexo = false;
		//Se busca en la tabla CAG.AN32TB01 por nuc 
		indicadorAnexo = dce.getIndicadorAnexoPolizaComunidadB(
														ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_OFICINA),
														ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUMERO),
														ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION),
														ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC));


		if (indicadorAnexo)
		{
			// Se recupera el código del anexo
			listSubProd.add(new Integer(ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_SUBPROD).intValue()));

			modeloDocumento = GestionClausulaDocumentos.obtenerClausulasDocumentoSubproducto(
					new Integer(ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COD_PROD).intValue()), listSubProd);

			for (ClausulaDocumentoC anexo : modeloDocumento)
			{
				if(CONSTANTE_DOC_ANEXO_CB.equals(anexo.getStrTipoDocumento().trim())) 
				{
					anexoDocumento = anexo.getIntModeloDocumento();
					break;
				}
			}

			// seteamos el documento anexo ANPMN100906
			if(!Utilidades.isBlankOrNull(anexoDocumento)) 
			{
				contextoImpresion.put(ID_CODIGO_ANEXO_CB, new BigDecimal(anexoDocumento));
			}


			// Se recuperan las cuentas

			for (IContexto cuentasCliente : strCtxtoCuentasPrestamo)
			{
				if ("C".equals(cuentasCliente.getString("ANPMN072100")))
				{
					IBANcliente = cuentasCliente.getString("ANPMN072180").trim();
					break;
				}
			}

			if (null != contextoClientes)
			{
				IContexto[] salidaConsultaClientesCuenta = GestionConsultaTitularidad.consultaClientesCuenta(
						GestionConsultaTitularidad.obtenerFormatoCCC(IBANcliente));
				for (IContexto clienteValidar : salidaConsultaClientesCuenta) 
				{
					IRegistro[] registoClientes = clienteValidar.getRegistro("FCLIN005100");
					String titular;

					for (IRegistro clientes : registoClientes)
					{
						titular = clientes.getString("FCLIN005120");

						if ("00".equals(titular))
						{
							IContexto[] datosCliente = GestionConsultaTitularidad.consultarClientePorClave(clientes.getBigDecimal("FCLIN005110"));

							//Cuando el campo declarable es 4, sí es comunidad de bienes y se setea a 1


							for ( IContexto clienteActual : datosCliente)
							{
								if("4".equals(clienteActual.getString("FC01C0188")))

								{
									clienteActualContx = clienteActual;
									esComBienes = BigDecimal.ONE;
									break; 
								}
							}
						}
					}
				}
			}
		}

		if ((null != clienteActualContx) && (0 == BigDecimal.ONE.compareTo(esComBienes)))
		{
			//Nombre comunidad de bienes
			nombreCB = clienteActualContx.getString(apellidoUnoComunidadB);

			if((null != clienteActualContx.getString(nombreComunidadB)) && (! "".equals(clienteActualContx.getString(nombreComunidadB))))
			{
				nombreCB = clienteActualContx.getString(nombreComunidadB).concat(" ").concat(nombreCB);
			}
			if ((null != clienteActualContx.getString(apellidoDosComunidadB)) && (! "".equals(clienteActualContx.getString(apellidoDosComunidadB))))
			{
				nombreCB = nombreCB.concat(" ").concat(clienteActualContx.getString(apellidoDosComunidadB));
			}
			contextoImpresion.put(ID_NOMBRE_COMUNIDAD, nombreCB);

			//CIF comunidad de bienes
			cifCB = clienteActualContx.getString(cifComunidadB);
			contextoImpresion.put(ID_CIF_COMUNIDAD, cifCB);

			//Dirección comunidad de bienes
			direccionCompleta = clienteActualContx.getString(direccionUnoComunidadB);

			if ((null!= clienteActualContx.getString(direccionDosComunidadB)) && (! "".equals(clienteActualContx.getString(direccionDosComunidadB))))
			{
				direccionCompleta = direccionCompleta.concat(clienteActualContx.getString(direccionDosComunidadB));
			}
			if ((null!= clienteActualContx.getString(direccionTresComunidadB)) && (! "".equals(clienteActualContx.getString(direccionTresComunidadB))))
			{
				direccionCompleta = direccionCompleta.concat(clienteActualContx.getString(direccionTresComunidadB));
			}

			contextoImpresion.put(ID_DIRECCION_COMUNIDAD, direccionCompleta);

			//Código Postal comunidad de bienes
			codigoPostalCB = clienteActualContx.getString(cpComunidadB);
			contextoImpresion.put(ID_CODIGO_POSTAL_COMUNIDAD, codigoPostalCB);

			//Localidad comunidad de bienes
			localidadCB = clienteActualContx.getString(localidadComunidadB);

			if (null != localidadCB)
			{
				int inicio = localidadCB.indexOf(" ");
				//int fin = localidadCB.indexOf(" ", inicio + uno);

				String localidadSola = localidadCB.substring(inicio+ uno);
				contextoImpresion.put(ID_LOCALIDAD_COMUNIDAD, localidadSola);
			}
		}
	}
	
	
	/**
	 * Metodo que rellena la matriz de gastos del contexto de impresion (campo ANPMN100931) 
	 * con los gastos leidos de la tabla AN44TB01. Solo se incluyen los gastos que se incluyan 
	 * en el calculo de la TAE normal (campo AN440140 = 1)
	 * 
	 * @param contextoImpresion contexto de impresion.
	 * @param ctxtoSolicitud contexto con los datos de la solicitud.
	 */
	private static void rellenarMatrizGastos(IContexto contextoImpresion, IContexto ctxtoSolicitud)
	{
		
		// Inicializaciones
		GastosAdicionalesEng gastosAdicionalesEng = new GastosAdicionalesEng();
		
		// Obtener datos solicitud
		BigDecimal oficinaSolicitud = ctxtoSolicitud.getBigDecimal("ANPMN050010");  
		BigDecimal numeroSolicitud = ctxtoSolicitud.getBigDecimal("ANPMN050020");
		BigDecimal versionSolicitud = ctxtoSolicitud.getBigDecimal("ANPMN050030");
		BigDecimal nuc = ctxtoSolicitud.getBigDecimal("ANPMN050040");
		 
		// Obtener gastos adicionales para los que aplica la TAE normal
		List<GastosAdicionalesC> gastosAdicionalesTAE = gastosAdicionalesEng.
			obtenerGastosAdicionalesTAENormal(oficinaSolicitud, numeroSolicitud, 
					versionSolicitud, nuc);
		
		// Si hay gastos adicionales, se incluyen en la matriz de gastos
		if ((null != gastosAdicionalesTAE) && (0 < gastosAdicionalesTAE.size()))
		{	
			List<IRegistro> listaGastos = new ArrayList<IRegistro>();
			
			for (GastosAdicionalesC gasto : gastosAdicionalesTAE)
			{
				IRegistro regGasto = ContextoFactory.getInstance().getRegistro(
					contextoImpresion, ID_MATRIZ_GASTOS);
				
				regGasto.put(ID_GASTO_ID_CONCEPTO, gasto.getId().getIdConcepto());
				regGasto.put(ID_GASTO_DESCRIPCION_CONCEPTO, gasto.getDescripcionConcepto());
				regGasto.put(ID_GASTO_IMPORTE_CONCEPTO, gasto.getImporte());
				
				listaGastos.add(regGasto);
			}
			
			IRegistro[] regGastos = listaGastos.toArray(new IRegistro[listaGastos.size()]);
			
			contextoImpresion.put(ID_MATRIZ_GASTOS, regGastos);	
		}
		
	}

	/**
	 * Obtiene la localidad de un cliente
	 * @param nuc
	 * @return
	 */
	private static String getLocalidadTitular(BigDecimal numCliente){
	
		String localidad = "";
		
		IDatosEntradaTx datosEntradaTx = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), 
				IConstantesTramitacion.CTE_CC_CONSULTA_CLIENTES,
				IConstantesTramitacion.CTE_CO_CONSULTA_DOMICILIOS_CLIENTE);
		
		//Anahdimnos el campo de entrada del nuc
		//En el primer campo le pasamos C porque buscamos un cliente
		datosEntradaTx.addCampo(IConstantesTramitacion.CTE_CPO_ENTRADA_CONSULTA_DIRECCION_DIRECCION, "C");
		datosEntradaTx.addCampo(IConstantesTramitacion.CTE_CPO_ENTRADA_CONSULTA_DIRECCION_NUM_CLIENTE, numCliente);
		//Le pasamos una F porque es fiscal
		datosEntradaTx.addCampo(IConstantesTramitacion.CTE_CPO_ENTRADA_CONSULTA_DIRECCION_CLASE_DIRECCION, "F");
		
		
		//Invocar el srv
		IContexto[] salidaConsultaLocalidadCliente = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaTx);
		
		
		if(null != salidaConsultaLocalidadCliente && salidaConsultaLocalidadCliente.length > 0) {
			{
				localidad = salidaConsultaLocalidadCliente[0].getString(IConstantesTramitacion.CTE_CTX_FCLIN086090_LOCALIDAD_CLIENTE);
			}
		}
		return localidad;
	}
	
	/**
	 * Comprueba si cuando hay carencia tenemos que escribir el registro de pago actual.d 
	 * @param contadorPago
	 * @param carencia
	 * @return
	 */
	private static boolean escribirRegistroPago(BigDecimal contadorPago,BigDecimal carencia,Boolean esDivisa) 
	{
		boolean escribirRegistroPago = false;
		if(esDivisa) {
			escribirRegistroPago = true;
		}else {
			if(!UtilidadesTramitacion.isBlankOrNull(contadorPago) && !UtilidadesTramitacion.isBlankOrNull(carencia)) {
				//Si la carencia existe y es mayor que cero
				if(carencia.intValue() > 0) {
					if(contadorPago.intValue() == carencia.intValue() 
							|| contadorPago.intValue() > carencia.intValue() ) {
						escribirRegistroPago = true;
					}
				}else {
					//Si no hay carencia el registro de pago se escribe siempre
					escribirRegistroPago = true;
				}

			}	
		}

		return escribirRegistroPago;
	}
	
	/**
	 * Devuelve el registro modificado con el interes capitalizado y el capital mas el interes capital para el ultimo pago de carencia
	 * @param interesCapitalizado
	 * @param registroActual
	 * @param contadorPago
	 * @param carencia
	 * @return
	 */
	private static IRegistro recalculaConInteresCapitalizado(BigDecimal interesCapitalizado,IRegistro registroActual,BigDecimal contadorPago,BigDecimal carencia) 
	{
		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";

		BigDecimal capitalConInteresCapitalizado = BigDecimal.ZERO;
		BigDecimal capitalNoVencido = BigDecimal.ZERO;

		if(carencia.intValue() > 0) {
			//Si el ultimo pago con carencia se capitalizan los intereses
			if(contadorPago.intValue() == carencia.intValue()) {
				//Aqui tenemos que hacer dos cosas, que el interes sea igual al interes capitalizado durante la carencia
				//Y que el capital sea el capital mas el interes capitalizado durante la carencia
				registroActual.put(Constantes.CTE_ID_PROP_PAGOS_INTERES, interesCapitalizado);
				if(null != registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte)) {
					capitalNoVencido = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
					capitalConInteresCapitalizado = capitalNoVencido.add(interesCapitalizado);
				}
				registroActual.put(Constantes.CTE_ID_PROP_PAGOS_CAPIT_NO_VEN, capitalConInteresCapitalizado);
			}
		}

		return registroActual;
	}
	
	/**
	 * Método que obtiene el numero de dias de la resolucion del credito.
	 * 
	 * @param datosSolicitud
	 * @return numDiasRes numero de dias que tardan en resolver la aprobacion del credito.
	 */
	
	private static String getNumeroDiasResolucion (IContexto ctxSolicitud)
	{
		IContexto ctxParametros = null;
		
		String numDiasRes = "";
		
		String codigoProducto = ctxSolicitud.getBigDecimal("ANPMN050080").toString();
		BigDecimal tipoPrescriptor = ctxSolicitud.getBigDecimal("ANPMN050290");
		
		/*20151015 No tiene por qué exstir el parámetro en la CG32TB01
		 * 20151017 Ya miramos en el método invocante que sea multicrédito, así que tiene que existir.
		 * */
		ctxParametros = UtilidadesTramitacion.getParametroUnico("PSC", codigoProducto, true);
		
		if (tipoPrescriptor.equals(new BigDecimal(9)))
			numDiasRes = ctxParametros.getString("CG151C160");
		else
			numDiasRes = UtilidadesTramitacion.bigDecimalToString(ctxParametros.getBigDecimal("CG151C120") , 1, 0, false);
		
		if (!numDiasRes.equals(Constantes.CTE_STR_1) && !numDiasRes.equals(Constantes.CTE_STR_2)) {
			numDiasRes = "0";
		}
		
		
		return numDiasRes;
	}
	
	/**
	 * Obtiene la descripcion de la entidad a partir del codigo de entidad. Para obtener
	 * los datos de la entidad se realiza una llamada al servicio RSAL_101.
	 * 
	 * @param codigoEntidad codigo de entidad para la que se obtendra la descripcion.
	 * @return descripcion de la entidad correspondiente al codigo recibido como entrada.
	 */
	private static String obtenerDescripcionEntidad(String codigoEntidad)
	{
		
		// Inicializaciones
		String descripcionEntidad = "";
		
		// Datos de entrada al servicio
		IDatosEntradaTx entradaRSAL101 = ServicioNegocio.getPrograma(
				ServicioNegocio.getContexto(), RSAL_101_CC, RSAL_101_CO);
		
		entradaRSAL101.addCampo(RSAL_101_ENTRADA_TIPO_CONSULTA, RSAL_101_CTE_TIPO_CONSULTA_C);
		entradaRSAL101.addCampo(RSAL_101_ENTRADA_COD_ENTIDAD, codigoEntidad);
		
		// Llamada RSAL_101
		IContexto[] salidaRSAL101 = ServicioNegocio.invocarServicio(
				ServicioNegocio.getContexto(), entradaRSAL101);		
		
		if (null != salidaRSAL101)
		{
			for (IContexto ctx : salidaRSAL101)
			{
				if (ctx.getNombre().equals(RSAL_101_CTX_RS101CON))
				{
					descripcionEntidad = ctx.getString(RSAL_101_CTX_RS101C070);
				}
			}
		}
		
		// Devolver salida de RSA_101
		return descripcionEntidad;
	}
}
