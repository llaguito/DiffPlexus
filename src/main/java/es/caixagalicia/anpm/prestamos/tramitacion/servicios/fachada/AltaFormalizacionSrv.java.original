package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada;

/**
 * 507 - 255
 * Alta de los datos de formalizacion de una solicitud
 */

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import es.caixagalicia.anpm.prestamos.autorizaciones.persistencia.DatosAutorizacionC;
import es.caixagalicia.anpm.prestamos.autorizaciones.servicios.aplicacion.GestionDatosAutorizacion;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.comun.constantes.ConstantesComun;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesAutorizacion;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.enotario.persistencia.datosgenerales.DatosgeneralesC;
import es.caixagalicia.anpm.prestamos.enotario.servicios.aplicacion.GestionDatosGeneralesEnotario;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.ControlTriad;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionComisiones;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionPreformalizacionFormalizacionComunes;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos.ContextoComisiones;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos.ContextoImpresionFormalizado;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos.ContextosDatosSolicitudPrestamo;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesImpresion;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.impresion.gestorImpresion.Documento;
import es.caixagalicia.ifrt.impresion.gestorImpresion.RespuestaImpresion;
import es.caixagalicia.ifrt.impresion.gestorImpresion.parametros.Parametros;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mainframe.ctgfacade.CtgFacade;
import es.caixagalicia.ifrt.util.Helper;

/**
 * Alta de los datos de formalización de una solicitud de préstamo
 * @author F001443
 *
 */
public class AltaFormalizacionSrv extends ServicioNegocio
{
	/*CC y CO del SN de cálculo de diferencial según la PD del cliente y según
	 * el rango en el que esté el valor del referencial, ANPM_411.*/
	private static final Integer CTE_SN_CALC_DIF_CC = new Integer(507); //ANPM
	private static final Integer CTE_SN_CALC_DIF_CO = new Integer(411);
	private static final String CTE_SN_CALC_DIF_ENT_NUC = "NUC";
	//private static final String CTE_SN_CALC_DIF_SAL_COD_RET = "ANPMN411010";
	
	private static final BigDecimal CTE_COD_PROD_HIPOT_INTEL_EVO = new BigDecimal(5990);	
	
	// campos para poder localizar la solicitud
	private static final String NOMBRE_CAMPO_OFICINA_SOLICITUD 	= "OFICINA_SOLICITUD"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_NUMERO_SOLICITUD 	= "NUMERO_SOLICITUD"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_VERSION_SOLICITUD 	= "VERSION_SOLICITUD"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_NUC_EXPEDIENTE 	= "NUC_EXPEDIENTE"; // OBLIGATORIO
	// campos a modificar en la solicitud
	private static final String NOMBRE_CAMPO_FECHA_FORMALIZACION = "FECHA_FORMALIZACION"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_ENVIO_CORRESPONDENCIA 	= "ENVIO_CORRESPONDENCIA"; // OBLIGATORIO
	// Programa para la modificación y volcado de la solicitud
	private static final String ID_PROG_VOLCADO_SOLICITUD = "ANPMR202";
//	Datos para el programa de volcado de solicitud
	private static final String ID_CTXTO_PROG_VOLCADO = "ANPMN074";
//	Campos del programa de volcado
	private static final String CMPO_CTXTO_PROG_OFICINA = "ANPMN074010";
	private static final String CMPO_CTXTO_PROG_SOLICITUD = "ANPMN074020";
	private static final String CMPO_CTXTO_PROG_VERSION = "ANPMN074030";
	private static final String CMPO_CTXTO_PROG_NUC = "ANPMN074040";
	private static final String CMPO_CTXTO_PROG_ERROR = "ANPMN074050";
	private static final String CMPO_CTXTO_PROG_MSG_ERROR = "ANPMN074060";
	private static final String CMPO_CTXTO_PROG_INDICADOR_ENVIO = "ANPMN074070";
	private static final String CMPO_CTXTO_PROG_FECHA_FORMALIZACION = "ANPMN074080";
	private static final String CMPO_CTXTO_PROG_TERMINAL = "ANPMN074090";
	private static final String CMPO_CTXTO_PROG_REG_TITULAR = "ANPMN074100";
	private static final String CMPO_CTXTO_PROG_IND_CONTROL_OPERATORIA = "ANPMN074120";
	private static final String CMPO_CTXTO_PROG_NUM_ASIENTO = "ANPMN074130"; 
	
//	Servicio para la consulta de autorizacion de la solicitud
	private static final Integer COD_APLIC_ANPM = Integer.valueOf(507);
		
	//Mensaje de error en estado solicitud
	public static final int CTE_ERROR_ESTADO_NO_VALIDO = 12113; //no param
	//Mensaje de error al actualizar el estado de la tarea	
	public static final int CTE_ERROR_ACTUALIZAR_ESTADO = 12114; //NO PARAM
	
	public static final BigDecimal CTE_ESTADO_FORMALIZADO = new BigDecimal(6);
	
	private static final String CUENTA_ANPM = "ANPM";
	//private static final String NUMERO_AUTORIZACION = "NUMERO_AUTORIZACION";
	//private static final String CTE_ESTADO_AUTORIZACION = "ANPMN070050";

	//	Servicio para la consulta de cuentas de una solicitud
	private static final Integer CTE_COD_OP_SOL_DATOS_CUENTAS = Integer.valueOf(175);
//	Nombre del programa
	private static final String ID_PROG_CORRETAJE = "ANPMR201";
//	Calcular corretaje
	private static final String CMPO_CTXTO_SOL_CORRETAJE = "ANPMN050998";	
	private static final String CMPO_CTXTO_MEDIO_FORMALIZACION = "ANPMN050955";	
	
//	Contexto Programa corretaje
	private static final String ID_CTXTO_PROG_CORRETAJE = "ANPMN073";
	private static final String ANPMN073_DIVISA = "ANPMN073010";
	private static final String ANPMN073_IMP_CONCEDIDO = "ANPMN073020";
	private static final String ANPMN073_PLAZO_CONCEDIDO = "ANPMN073030";
	private static final String ANPMN073_FECHA_CONCESION = "ANPMN073040";
	private static final String ANPMN073_GARANTIA = "ANPMN073050";
	private static final String ANPMN073_IMP_CORRETAJE = "ANPMN073060";
	private static final String ANPMN073_COD_ERROR = "ANPMN073070";
	private static final String ANPMN073_MSG_ERROR_CORRETAJE = "ANPMN073080";
	private static final String ANPMN073_OFICINA = "ANPMN073090";
	private static final String ANPMN073_NUMERO = "ANPMN073100";
	private static final String ANPMN073_VERSION = "ANPMN073110";
	private static final String ANPMN073_NUC = "ANPMN073120";
	
//	Datos de entrada para el programa de corretaje
//	Moneda importe solicitado
	private static final String CMPO_CTXTO_SOL_DIVISA = "ANPMN050590";
//	Importe solicitado
	private static final String CMPO_CTXTO_SOL_IMPORTE = "ANPMN050580";
//	Plazo concedido. Plazo total
	private static final String CMPO_CTXTO_SOL_PLAZO = "ANPMN050710";
//	Fecha concedido <-> Fecha1
	private static final String CMPO_CTXTO_SOL_FECHA = "ANPMN050994";
	//Fecha formalizacion
	private static final String CMPO_CTXTO_FECHA_FORMALIZACION =  "ANPMN050920";
	
//	Tipo de garantia
	private static final String CMPO_CTXTO_SOL_TIPO_GARANTIA = "ANPMN050220";
//	Garantia contable
	private static final String CMPO_CTXTO_SOL_GARANTIA_CONTABLE = "ANPMN050260";
//	Garantia oficina
	private static final String CMPO_CTXTO_SOL_GARANTIA_OFICINA = "ANPMN050230";
	
//	Servicio para el cambio de divisa
//	Datos para la llamada al servicio de cambio de divisa
	private static final Integer CODAP_ITAL = Integer.valueOf(340);
	private static final Integer COOP_CAMBIO_DIVISA = Integer.valueOf(302);
//	Datos de entrada del servicio de cambio de divisa
	private static final String TIPO_OPERACION	 	  = "TIPOOPERACION";
	private static final String APLICACION            = "APLICACION";
	private static final String ACCESO                = "ACCESO";
	private static final String DIVISA_COMPRA         = "DIVISACOMPRA";
	private static final String TIPO_DIVISA_COMPRA    = "TIPODIVISACOMPRA";
	private static final String DIVISA_VENTA          = "DIVISAVENTA";
	private static final String TIPO_DIVISA_VENTA     = "TIPODIVISAVENTA";
	private static final String IMPORTE_DIVISA_COMPRA = "IMPORTEDIVISACOMPRA";
	private static final String IMPORTE_DIVISA_VENTA  = "IMPORTEDIVISAVENTA";
	private static final String CLASE_CAMBIO          = "CLASECAMBIO";
	private static final String TIPO_CAMBIO           = "TIPOCAMBIO";
	private static final String FECHA_CAMBIO          = "FECHACAMBIO";
//	Valores para los parametros de entrada
	private static final String VALOR_TIPO_OPERACION = "C";
	private static final String VALOR_TIPO_ACCESO = "ANPMPITA";
	private static final String VALOR_TIPO_DIVISA = "D";
	private static final String VALOR_CLASE_CAMBIO_OPERATIVO = "O";
	private static final String CTXTO_DIVISA_CONV = "IT006CON";
	private static final String CTXTO_DIVISA_CONV_IMPORTE_VENTA = "IT006C040";
	private static final String CTXTO_DIVISA_CONV_COD_ERROR = "IT006C010";
	private static final String CTXTO_DIVISA_CONV_DESC_ERROR = "IT006C020";
//	Error. No se ha podido calcular el cambio de divisa
	private static final Integer CTE_MSG_ERROR_CONV_DIVISA = Integer.valueOf(10882);
	
//	Codigo de operacion del servicio que consulta el detalle de un producto
	private static final Integer ID_CODOP_DETALLE_PRODUCTO = Integer.valueOf(48);
//	Posiciones para el servicio de consulta del subproducto de una solicitud
	private static final int CTE_POSICION_TIRA_ID_PRODUCTO = 0; // OBLIGATORIO
	private static final int CTE_POSICION_TIRA_ID_SUBPRODUCTO = 1; // OPCIONAL
	private static final int CTE_POSICION_TIRA_COLECTIVO = 2; // OBLIGATORIO
	private static final int CTE_POSICION_TIRA_ID_VERSION_GENERAL = 3; // OBLIGATORIO
	private static final int CTE_POSICION_TIRA_PASO = 4; // OBLIGATORIO
	private static final String CAMPO_CTXTO_SOL_IDPRODUCTO = "ANPMN050080";
	private static final String CAMPO_CTXTO_SOL_SUBPRODUCTO = "ANPMN050090";
	private static final String CAMPO_CTXTO_SOL_COLECTIVO = "ANPMN050110";
	private static final String CAMPO_CTXTO_SOL_VERSION_GENERAL = "ANPMN050100";
	
	private static final String ID_CTXTO_DATOS_SOLICITUD = "ANPMN050";
	
//	Error. Fecha concesion
	private static final Integer CTE_MSG_ERROR_FECHA_CONCESION = Integer.valueOf(10808);
	
	//2014-02-20 - G000895
	//Se sustituye el ID del documento de impresión PMOSST20088 por el CGALST20088 debido a una modificación hecha en la impresión del recibo
	//"Este impreso lo utilizan varias aplicaciones (creditos, y alguna otra) y se pasó a un proyecto de impresos comunes" -> Se emplea el contexto CGALN117 en vez de ANPMN102
	// Documento a imprimir
//	private static final String ID_DOCUMENTO_IMPRESION = "PMOSST20088";
	private static final String ID_DOCUMENTO_IMPRESION = "CGALST20088";
	
	private static final LogHelper LOGGER = LogHelper.getLog(AltaFormalizacionSrv.class);
	
	
	private static final BigDecimal CAMPO_PARA_PREFORMALIZACION = new BigDecimal(9); // 20151211 Campo de optmización para llamar a servicio ANPM_048
	
	private static final String  CTE_MENSAJE_ERROR_296 = "ANPMN296030";
	
	
//	private static final Integer ID_CUENTA_ANPM = Integer.valueOf(507);
////	Codigo de operacion del servicio de consulta solicitud
//	private static final Integer ID_CODOP_IMPRIMIR_FORM = Integer.valueOf(267);
////	Posiciones de los campos de entrada del servicio Datos 
//	private static final int CTE_POSICION_TIRA_OFICINA_SOLICITUD = 0; // OBLIGATORIO
//	private static final int CTE_POSICION_TIRA_NUMERO_SOLICITUD = 1; // OBLIGATORIO
//	private static final int CTE_POSICION_TIRA_VERSION_SOLICITUD = 2; // OBLIGATORIO 
//	private static final int CTE_POSICION_TIRA_NUC_EXPEDIENTE = 3; // OBLIGATORIO
	
	public AltaFormalizacionSrv()
	{
		super();
	}
	
	/**
	 * @param contexto
	 * @param datosEntrada
	 * @return datos devueltos por el programa que modifica y vuelca la solicitud
	 */
	@Override
	public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada){
		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO SNANPM255: Alta formalización.");
		}
		
		contexto.setDiarioElectronico(new DiarioElectronico(
				Constantes.CTE_OPERACION_AC,
				Integer.valueOf(0),
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Constantes.CTE_STRING_EMPTY,
                Constantes.CTE_STRING_EMPTY,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Integer.valueOf(0)));

		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("Obtenemos los parámetros de entrada");
		}
		
		BigDecimal oficina	= datosEntrada.getDecimal(NOMBRE_CAMPO_OFICINA_SOLICITUD);
		BigDecimal numero	= datosEntrada.getDecimal(NOMBRE_CAMPO_NUMERO_SOLICITUD);
		BigDecimal version	= datosEntrada.getDecimal(NOMBRE_CAMPO_VERSION_SOLICITUD);
		BigDecimal nucExpediente	= datosEntrada.getDecimal(NOMBRE_CAMPO_NUC_EXPEDIENTE);
		BigDecimal indicadorEnvio 	= datosEntrada.getDecimal(NOMBRE_CAMPO_ENVIO_CORRESPONDENCIA);
		String fechaFormalizacion 	= datosEntrada.getString(NOMBRE_CAMPO_FECHA_FORMALIZACION);
		
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("INICIO Obteniendo solicitud");
		}
		
		GestionDatosSolicitud gds = new GestionDatosSolicitud();
		DatosSolicitudC datosSolicitud = new DatosSolicitudC();
		
		if(!UtilidadesTramitacion.isBlankOrNull(oficina) 
				&& !UtilidadesTramitacion.isBlankOrNull(numero) && !UtilidadesTramitacion.isBlankOrNull(version)) {
			//	Se intenta obtener la solicitud
			datosSolicitud = gds.obtenerDatosSolicitud(
											oficina, 
											numero, 
											version, 
											nucExpediente);
		}
		else {
			datosSolicitud = gds.getUltimaVersionCompleta(nucExpediente); //20151211: optimización de código 
			oficina = datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud();
			numero =  datosSolicitud.getDatosSolicitudKey().getNumSolicitud();
			version = datosSolicitud.getDatosSolicitudKey().getVersionSolicitud();
		}
		
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("FIN Obteniendo solicitud");
		}
		
		/**
		 * Se comprueba el estado de la solicitud si ya esta formalizada 
		 * lanzamos un mensaje de error con un rollback.		
		 */
		if (0 == datosSolicitud.getEstadoSolicitud().compareTo(CTE_ESTADO_FORMALIZADO)) {
			UtilidadesTramitacion.enviarCorreo(
					CTE_ERROR_ESTADO_NO_VALIDO, 
					datosSolicitud);
			ServicioNegocio.rollback(CTE_ERROR_ESTADO_NO_VALIDO, null, null, null);
		}
		
		GestionPreformalizacionFormalizacionComunes gpfc = new GestionPreformalizacionFormalizacionComunes();
		gpfc.comprobarVigenciaProducto(datosSolicitud, fechaFormalizacion);
		
		GestionDatosAutorizacion gda = new GestionDatosAutorizacion();
		DatosAutorizacionC datosAutorizacion = gda.buscarPorVersion(datosSolicitud.getDatosSolicitudKey().getNumSolicitud(),
				datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud(),
				datosSolicitud.getDatosSolicitudKey().getVersionSolicitud());
		
		
		if(BigDecimal.ONE.equals(datosSolicitud.getIndicadorAutorizacion())){
			if(!datosSolicitud.getMarcaBO().equals(ConstantesComun.CTE_STR_S)){
				if(null != datosAutorizacion){
					if(!UtilidadesAutorizacion.isSolicitudAutorizada(datosSolicitud))
					{
						UtilidadesTramitacion.enviarCorreo(
								CodigosError.CTE_COD_MSG_ERROR_AUTORIZACION, 
								datosSolicitud);
						rollback(CodigosError.CTE_COD_MSG_ERROR_AUTORIZACION, null, null, null);
					}
				}
			}
		}
			
		
		
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug(" INICIO Invocacion al programa de modificación y volcado de solicitud");
		}
		
		if(UtilidadesTramitacion.esEntornoEvo()
				&& CTE_COD_PROD_HIPOT_INTEL_EVO.equals(datosSolicitud.getProducto())){
			invocarCalculoDiferencial(nucExpediente);
		}

		// Se comprueban las condiciones de Triad para préstamos personales de ANPM y PMOS.
		final int PMOS = 1;
		final int ANPM = 191;
		
		/**
		 * 22/05/2017 - Petición Analista.
		 * Unicamente realizamos la comprobacion de TRIAD en expedientes que se formalizan por medio Oficina
		 * AN251010 = 0 (Medio Oficina)
		 */
		if(null != datosSolicitud.getMedioFormalizacion() &&
				0 == datosSolicitud.getMedioFormalizacion().compareTo(BigDecimal.ZERO)){
			if(PMOS == datosSolicitud.getTipoExpediente().intValue()
					|| ANPM == datosSolicitud.getTipoExpediente().intValue()){
				// Si no cumple las condiciones Triad se interrumpe la formalización. 
				if(!(new ControlTriad()).condicionesTriad(datosSolicitud)){
					String[] mensaje = {", no cumple las condiciones Triad"};
					UtilidadesTramitacion.enviarCorreo(
							CodigosError.ERROR_ALTA_FORMALIZACION, 
							datosSolicitud,
							mensaje);
					rollback(
							CodigosError.ERROR_ALTA_FORMALIZACION, 
							null, 
							mensaje, 
							null);
				}
			}
		}
		
		
		
		//Llamada al programa que vuelca una solicitud ANPMNR202 -> ANPMR100
		IContexto contextoEntrada = ContextoFactory.getInstance().getContexto(ID_CTXTO_PROG_VOLCADO);
		contextoEntrada.put(CMPO_CTXTO_PROG_OFICINA, oficina);
		contextoEntrada.put(CMPO_CTXTO_PROG_SOLICITUD, numero);
		contextoEntrada.put(CMPO_CTXTO_PROG_VERSION, version);
		contextoEntrada.put(CMPO_CTXTO_PROG_NUC, nucExpediente);
		contextoEntrada.put(CMPO_CTXTO_PROG_INDICADOR_ENVIO, indicadorEnvio);
		contextoEntrada.put(CMPO_CTXTO_PROG_FECHA_FORMALIZACION, fechaFormalizacion);
		contextoEntrada.put(CMPO_CTXTO_PROG_TERMINAL, contexto.getTerminal());
		reservarMemoriaRegistro(contextoEntrada, CMPO_CTXTO_PROG_REG_TITULAR, 10);
		contextoEntrada.put(CMPO_CTXTO_PROG_IND_CONTROL_OPERATORIA,BigDecimal.ONE);
		//Si es un expediente de subrogación, control de operatoria = 4
		/*if (UtilidadesComun.esExpedienteSubrogacion(datosSolicitud.getTipoExpediente())){
			contextoEntrada.put(CMPO_CTXTO_PROG_IND_CONTROL_OPERATORIA,new BigDecimal(4));
		}
		else{
			contextoEntrada.put(CMPO_CTXTO_PROG_IND_CONTROL_OPERATORIA,BigDecimal.ONE);
		}*/
		
		final CtgFacade ctg = new CtgFacade();
		final IContexto [] aContextoSalida = ctg.invocarProgramaCics(contextoEntrada, ID_PROG_VOLCADO_SOLICITUD);
		
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug(" FIN Invocacion servicio de modificación y volcado de solicitud");
		}
		
		String numeroAsiento = Constantes.CADENA_VACIA;
		for (IContexto contextoActual : aContextoSalida) {
			if(ID_CTXTO_PROG_VOLCADO.equals(contextoActual.getNombre())
					&& Constantes.CTE_ERROR_HOST.equalsIgnoreCase(contextoActual.getString(CMPO_CTXTO_PROG_ERROR))){
				String[] cadena = null;
				
				if(0 != contextoActual.getString(CMPO_CTXTO_PROG_MSG_ERROR).trim().length() )
				{
					cadena = new String[]{": " + contextoActual.getString(CMPO_CTXTO_PROG_MSG_ERROR).trim()};
				}
				
				UtilidadesTramitacion.enviarCorreo(
						CodigosError.ERROR_ALTA_FORMALIZACION, 
						datosSolicitud,
						cadena);
				rollback(
						CodigosError.ERROR_ALTA_FORMALIZACION, 
						null, 
						cadena, 
						null);
			}
			else{
				numeroAsiento = contextoActual.getString(CMPO_CTXTO_PROG_NUM_ASIENTO);
			}
		}
		
		if (numeroAsiento.compareTo(Constantes.CADENA_VACIA)==0){
			String[] cadena = new String[]{": el numero de asiento no puede ser vacío"};
			rollback(
					CodigosError.ERROR_ALTA_FORMALIZACION, 
					null, 
					cadena, 
					null);
		}
		
		
		if(!UtilidadesComun.esPersonal(datosSolicitud)){
			//Llamar al cargo de la provision
			gpfc.cargoProvision(datosSolicitud);
		}
		
		//Si es ASF
		if (UtilidadesComun.esASF(datosSolicitud.getEntidad())){			
			//Si tiene deposito,se llama al ANPM_296 
			String deposito = datosSolicitud.getDeposito();
			if ((!Utilidades.isBlankOrNull(deposito)) && 
					(datosSolicitud.getDeposito().trim().compareTo("1") == 0)){
				IContexto[] ctxSacaDeposito = UtilidadesTramitacion.sacaDepositoCaja(nucExpediente,numeroAsiento);
				if (null!= ctxSacaDeposito){
					if (ctxSacaDeposito.length>0) {
						String mensaje = ctxSacaDeposito[0].getString(CTE_MENSAJE_ERROR_296);
						if (!Utilidades.isBlankOrNull(mensaje)){						
							String[] cadena = new String[]{": Error al obtener la saca del NUC " + nucExpediente + ".Error:" + mensaje};
							rollback(
									CodigosError.ERROR_ALTA_FORMALIZACION, 
									null, 
									cadena, 
									null);
						}
					}
				}
				else{
					String[] cadena = new String[]{": Error al obtener la saca del NUC " + nucExpediente};
					rollback(
							CodigosError.ERROR_ALTA_FORMALIZACION, 
							null, 
							cadena, 
							null);
				}
			}
			//en caso contrario, mostramos un error
			else{			
				String[] cadena = new String[]{": El expediente " + nucExpediente + " tiene que tener depósito." };
				rollback(
						CodigosError.ERROR_ALTA_FORMALIZACION, 
						null, 
						cadena, 
						null);
			}			
		}
			
		final List <IContexto> lstContextoSalida = new ArrayList<IContexto>(aContextoSalida.length);
		lstContextoSalida.addAll(Arrays.asList(aContextoSalida));
		
		// llamar al servicio de impresion de formalización		
		lstContextoSalida.addAll(Arrays.asList(imprimirFormulario(
				oficina, numero, 
				version, nucExpediente, aContextoSalida,datosSolicitud)));
		
		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN SNANPM255: Alta formalización.");
		}
		
//		rollback(
//				CodigosError.ERROR_ALTA_FORMALIZACION, 
//				null, 
//				null, 
//				null);
		
		return lstContextoSalida.toArray(new IContexto[lstContextoSalida.size()]);
	}

	/**
	 * 
	 * @return Contexto que se utiliza para la impresión, vacío si falla la impresión
	 */
//	private IContexto[] servicioImprimirFormulario(BigDecimal bidOficinaSolicitud,
//			BigDecimal bidNumeroSolicitud, BigDecimal bidVersionSolicitud,
//			BigDecimal bidNucExpediente)
//	{
//		
//		if (LOGGER.isInfoEnabled())
//		{
//			LOGGER.info("INICIO Consulta datos solicitud");
//		}
//		IDatosEntradaTx datosEntradaDatosSolicitud = 
//			getPrograma(ServicioNegocio.getContexto(),
//					ID_CUENTA_ANPM,
//					ID_CODOP_IMPRIMIR_FORM);
//		datosEntradaDatosSolicitud.addCampo(
//				CTE_POSICION_TIRA_OFICINA_SOLICITUD, bidOficinaSolicitud);
//		datosEntradaDatosSolicitud.addCampo(
//				CTE_POSICION_TIRA_NUMERO_SOLICITUD, bidNumeroSolicitud);
//		datosEntradaDatosSolicitud.addCampo(
//				CTE_POSICION_TIRA_VERSION_SOLICITUD, bidVersionSolicitud);
//		datosEntradaDatosSolicitud.addCampo(
//				CTE_POSICION_TIRA_NUC_EXPEDIENTE, bidNucExpediente);
//		
//		return invocarServicio(ServicioNegocio.getContexto(), datosEntradaDatosSolicitud);
//	}
	
	/**
	 * 
	 * @return Contexto que se utiliza para la impresión, vacío si falla la impresión
	 */
	private IContexto[] imprimirFormulario(BigDecimal bidOficinaSolicitud,
			BigDecimal bidNumeroSolicitud, BigDecimal bidVersionSolicitud,
			BigDecimal bidNucExpediente, IContexto [] aCtxtoPrograma,
			DatosSolicitudC datosSolicitud)
	{
		
		
		List<IContexto> listaContextoDatos = consultaDatosImpresion(
						bidOficinaSolicitud,
						bidNumeroSolicitud,
						bidVersionSolicitud,
						bidNucExpediente,
						aCtxtoPrograma);
		
		
		IContexto[] arrayContextoDatos = listaContextoDatos.toArray(new IContexto[listaContextoDatos.size()]);
		IContexto contextoDatosSolicitud = null;
		
		int iLength = arrayContextoDatos.length;
		for (int i = 0; i < iLength && contextoDatosSolicitud == null; i++)
		{
			if (ID_CTXTO_DATOS_SOLICITUD.equals(arrayContextoDatos[i].getNombre()))
			{
				contextoDatosSolicitud = arrayContextoDatos[i];
			}
		}		
		
		
		IContexto[] ctxsImpresion = ContextoImpresionFormalizado.rellenarDatosContexto(
				listaContextoDatos);
		
		boolean exito = true;
		RespuestaImpresion respuesta = null;
//		Propiedades prop = new Propiedades();
//        ConfiguracionImpresion configuracionImpresion = new ConfiguracionImpresion();	
//        configuracionImpresion.setCgsi4440(BigDecimal.ONE.toString()); //Número de Copias
//        configuracionImpresion.setCgsi4441("PIE ORIGINAL");
//	
//        es.caixagalicia.ifrt.impresion.Configuracion configuracion = new
//        es.caixagalicia.ifrt.impresion.Configuracion();
//        
//        configuracion.setImpresion(configuracionImpresion);
//        boolean exito =  ImpresionHelper.imprimir(ID_DOCUMENTO_IMPRESION, 
//        		Constantes.CTE_IMPRIMIR_DOCUMENTO, ctxsImpresion, prop, configuracion);
		
		Parametros parametros = new Parametros();
		
		parametros.getParametrosImpresion().setNumeroCopias("2");
		parametros.getParametrosImpresion().setTextoPieOriginal("CLIENTE");
		parametros.getParametrosImpresion().setTextoPieCopia_1("OFICINA");
		
		
		// Si el modo de alta es 3 crediventas solo se genera.
		// 2018-02-08 - Si es preconcedido de ASF solo se genera (no se imprime)
		if( (0 == datosSolicitud.getIndModoAlta().compareTo(new BigDecimal(3))) || 
				UtilidadesComun.esPreconcedidoASF(datosSolicitud.getTipoExpediente())) 
		{
        	respuesta = Documento.generarPDF(ID_DOCUMENTO_IMPRESION, ctxsImpresion);
        }
		else 
		{
        	respuesta = Documento.imprimir(ID_DOCUMENTO_IMPRESION, ctxsImpresion);
        }
        
        String codigoDocumento = UtilidadesImpresion.obtenerCodigoDocumento(UtilidadesImpresion.RECIBO_FORMALIZACION);
		
        if (Constantes.CTE_STRING_CERO.equals(respuesta.getCodigoError()) && !UtilidadesTramitacion.isBlankOrNull(codigoDocumento))
		{
			//Adjuntar al gestor documental 03-07-2013
//	        exito = UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion
//				(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, 
//					UtilidadesImpresion.COD_DOCUMENTO_GD_FORMALIZACION, ctxsImpresion);
        	
        	//Esta llamada NO incluye guardado del pdf en ANPMCFG_FICHERO_RUTAS_SALIDA
	        //respuesta =  UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, codigoDocumento, ctxsImpresion);
	        
        	//Esta llamada SI incluye guardado del pdf en ANPMCFG_FICHERO_RUTAS_SALIDA
	        //respuesta =  UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion2(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, codigoDocumento, ctxsImpresion, UtilidadesImpresion.RECIBO_FORMALIZACION, contextoDatosSolicitud, null, false);
	        //respuesta =  UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, codigoDocumento, ctxsImpresion, UtilidadesImpresion.RECIBO_FORMALIZACION, contextoDatosSolicitud, datosSolicitud);
        	respuesta =  UtilidadesImpresion.adjuntarDocumentoGestorDocumentacion(bidNucExpediente, "", ID_DOCUMENTO_IMPRESION, codigoDocumento, ctxsImpresion, UtilidadesImpresion.RECIBO_FORMALIZACION, contextoDatosSolicitud);
	        
	        if (Constantes.CTE_STRING_CERO.equals(respuesta.getCodigoError()))
	        {
	        	exito = true;
	        }
	        else
	        {
	        	exito = false;
	        }
        	
		}
		else
		{
			exito = false;
		}
	
		if(exito) 
		{
			if(LOGGER.isDebugEnabled()) {
				LOGGER.info("Adjuntado al gestor documental");
			}
			
		}
        if (!exito)
        {
        	ctxsImpresion = new IContexto[0];
        }
        return ctxsImpresion;
	}

	/**
	 * Consulta los datos necesario para la impresión del contexto
	 * @param bidOficinaSolicitud
	 * @param bidNumeroSolicitud
	 * @param bidVersionSolicitud
	 * @param bidNucExpediente
	 * @param aCtxtoPrograma 
	 * @return List con los contextos consultados
	 */
	private List<IContexto> consultaDatosImpresion(BigDecimal bidOficinaSolicitud,
			BigDecimal bidNumeroSolicitud, BigDecimal bidVersionSolicitud,
			BigDecimal bidNucExpediente, IContexto[] aCtxtoPrograma)
	{
		List <IContexto> lstCntxt = new ArrayList<IContexto	>(4);
		lstCntxt.addAll(Arrays.asList(aCtxtoPrograma));

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO consultaDatosImpresion.");
		}
		final GestionDatosSolicitud gds = new GestionDatosSolicitud();
		IContexto[] aCtxtDatosSolicitud = ContextosDatosSolicitudPrestamo.rellenarDatosContexto(
				gds.consultaSoloLecturaSolicitud(bidOficinaSolicitud, bidNumeroSolicitud, bidVersionSolicitud, bidNucExpediente), 
				BigDecimal.ZERO.intValue(),
				Constantes.CTE_STRING_EMPTY);
		final IContexto datosSolicitud = aCtxtDatosSolicitud[0];
		lstCntxt.addAll(Arrays.asList(aCtxtDatosSolicitud));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("consultaDatosImpresion datos solicitud consultados");
		}
		
		if (Constantes.CTE_LETRA_S.equals(datosSolicitud.getString(CMPO_CTXTO_SOL_CORRETAJE))){
			//Si la operacion es de e-notario, el campo del corretaje lo consulta en la AN40TB01
			BigDecimal medioFormalizacion = datosSolicitud.getBigDecimal(CMPO_CTXTO_MEDIO_FORMALIZACION);
			if (medioFormalizacion.compareTo(BigDecimal.ONE)==0){
				GestionDatosGeneralesEnotario gdge = new GestionDatosGeneralesEnotario();
				DatosgeneralesC datosGenerales = gdge.obtenerDatosGeneralesPorNucVersion(bidNucExpediente,bidVersionSolicitud);
				final IContexto contextoCorretaje = 
						ContextoFactory.getInstance().getContexto(ID_CTXTO_PROG_CORRETAJE);
				List<IContexto> listaContextoCorretaje = new ArrayList<IContexto>(0);
				contextoCorretaje.put(ANPMN073_IMP_CORRETAJE, datosGenerales.getImporteHonorarios());
				listaContextoCorretaje.add(contextoCorretaje);
				lstCntxt.addAll(listaContextoCorretaje);
			}
			else{
				lstCntxt.addAll(Arrays.asList(consultaCorretaje(datosSolicitud)));
			}
			if (LOGGER.isDebugEnabled())
			{
				LOGGER.debug("consultaDatosImpresion datos corretaje consultados");
			}
		}
		
		final GestionComisiones gc = new GestionComisiones();
		lstCntxt.addAll(Arrays.asList(ContextoComisiones.rellenarDatosContexto(
				gc.obtenerComisiones(
					bidOficinaSolicitud.intValue(), bidNumeroSolicitud.intValue(), 
					bidVersionSolicitud.intValue(), bidNucExpediente.intValue()), 
				BigDecimal.ZERO.intValue())));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("consultaDatosImpresion datos comisiones consultados");
		}
	
		lstCntxt.addAll(Arrays.asList(
				consultarDatosCuentas(
						bidOficinaSolicitud, bidNumeroSolicitud, 
						bidVersionSolicitud, bidNucExpediente)));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("consultaDatosImpresion datos cuentas consultados");
		}
		
		lstCntxt.addAll(Arrays.asList(consultarProductoSolicitud(datosSolicitud)));
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("consultaDatosImpresion datos subproducto consultados");
		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN consultaDatosImpresion.");
		}
         return lstCntxt;
	}
	
	/**
	 * 
	 * @param contextoDatosSolicitud
	 * @return Producto asociado a la solicitud
	 */
	private IContexto[] consultarProductoSolicitud(final IContexto contextoDatosSolicitud)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO Consulta producto solicitud");
		}
		IDatosEntradaTx datosEntradaDatosProducto = 
			getPrograma(ServicioNegocio.getContexto(),
					COD_APLIC_ANPM,
					ID_CODOP_DETALLE_PRODUCTO);
		datosEntradaDatosProducto.addCampo(
				CTE_POSICION_TIRA_ID_PRODUCTO, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_IDPRODUCTO));
		datosEntradaDatosProducto.addCampo(
				CTE_POSICION_TIRA_ID_SUBPRODUCTO, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_SUBPRODUCTO));
		datosEntradaDatosProducto.addCampo(
				CTE_POSICION_TIRA_COLECTIVO, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_COLECTIVO));
		datosEntradaDatosProducto.addCampo(
				CTE_POSICION_TIRA_ID_VERSION_GENERAL, contextoDatosSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION_GENERAL));
		datosEntradaDatosProducto.addCampo(//20151211:se añade este campo a la llamada del ANPM_048 con valor 9, para que devuelva la preformalización (optimización)
				CTE_POSICION_TIRA_PASO, CAMPO_PARA_PREFORMALIZACION);
		
		return invocarServicio(ServicioNegocio.getContexto(), datosEntradaDatosProducto);
	}
	
	/**
	 * 
	 * @param bidOficinaSolicitud
	 * @param bidNumeroSolicitud
	 * @param bidVersionSolicitud
	 * @param bidNucExpediente
	 * @return Consulta de los datos de las cuentas
	 */
	private IContexto[] consultarDatosCuentas(BigDecimal bidOficinaSolicitud,
			BigDecimal bidNumeroSolicitud, BigDecimal bidVersionSolicitud,
			BigDecimal bidNucExpediente)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO Consulta cuentas solicitud");
		}
		IDatosEntradaTx datosEntradaDatosCuentas = 
			getPrograma(ServicioNegocio.getContexto(),
					COD_APLIC_ANPM,
					CTE_COD_OP_SOL_DATOS_CUENTAS);
		datosEntradaDatosCuentas.addCampo(
				NOMBRE_CAMPO_OFICINA_SOLICITUD, bidOficinaSolicitud);
		datosEntradaDatosCuentas.addCampo(
				NOMBRE_CAMPO_NUMERO_SOLICITUD, bidNumeroSolicitud);
		datosEntradaDatosCuentas.addCampo(
				NOMBRE_CAMPO_VERSION_SOLICITUD, bidVersionSolicitud);
		datosEntradaDatosCuentas.addCampo(
				NOMBRE_CAMPO_NUC_EXPEDIENTE, bidNucExpediente);
		final IContexto [] aCuentas = invocarServicio(ServicioNegocio.getContexto(), datosEntradaDatosCuentas);
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN Consulta cuentas solicitud");
		}
		return aCuentas;
	}
	
	/**
	 * 
	 * @param contextoSolicitud
	 * @return Resulta de la consulta de corretaje
	 */
	private  IContexto[] consultaCorretaje(IContexto contextoSolicitud)
	{
		IContexto[] aContextoCorretaje = new IContexto[0];
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO: calcular corretaje de la solicitud");
		}

		final String strFechaConcesion = contextoSolicitud.getString(CMPO_CTXTO_SOL_FECHA);
		final String strFechaFormalizacion = contextoSolicitud.getString(CMPO_CTXTO_FECHA_FORMALIZACION);
		
		if (DateUtils.dateLowest().compareTo(DateUtils.parseDate(strFechaConcesion, DateUtils.FORMATO_FECHA_CORTO)) == 0)
		{
			rollback(CTE_MSG_ERROR_FECHA_CONCESION, null, null, null);
		}

		/* BigDecimal bidFechaConcesion = new BigDecimal(
				DateUtils.formatDate(
						DateUtils.parseDate(strFechaConcesion, DateUtils.FORMATO_FECHA_CORTO),
						"yyyyMMdd")
		);*/
		
		BigDecimal bidFechaFormalizacion = new BigDecimal(
				DateUtils.formatDate(
						DateUtils.parseDate(strFechaFormalizacion, DateUtils.FORMATO_FECHA_CORTO),
						"yyyyMMdd")
		);
		
		final String strDivisa = contextoSolicitud.getString(CMPO_CTXTO_SOL_DIVISA);
		final BigDecimal bidImporte = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_IMPORTE);
		final BigDecimal bidPlazo = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_PLAZO);

		final BigDecimal bidTipoGarantia = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_TIPO_GARANTIA);
		final BigDecimal bidGarantia;
		if (Constantes.CTE_EXPEDIENTE_EN_GARANTIA.equals(bidTipoGarantia)) 
		{
			bidGarantia = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_GARANTIA_CONTABLE);
		}
		else
		{
			bidGarantia = contextoSolicitud.getBigDecimal(CMPO_CTXTO_SOL_GARANTIA_OFICINA);
		}

		final IContexto contextoProgramaCorretaje = ContextoFactory.getInstance().getContexto(ID_CTXTO_PROG_CORRETAJE);
		contextoProgramaCorretaje.put(ANPMN073_DIVISA, strDivisa);
		contextoProgramaCorretaje.put(ANPMN073_IMP_CONCEDIDO, bidImporte);
		contextoProgramaCorretaje.put(ANPMN073_PLAZO_CONCEDIDO, bidPlazo);
		contextoProgramaCorretaje.put(ANPMN073_FECHA_CONCESION, bidFechaFormalizacion);
		contextoProgramaCorretaje.put(ANPMN073_GARANTIA, bidGarantia);
		contextoProgramaCorretaje.put(ANPMN073_IMP_CORRETAJE, BigDecimal.ZERO);
		contextoProgramaCorretaje.put(ANPMN073_COD_ERROR, StringUtils.EMPTY);
		contextoProgramaCorretaje.put(ANPMN073_MSG_ERROR_CORRETAJE, StringUtils.EMPTY);
		
		if(null != contextoSolicitud.getBigDecimal("ANPMN050010")
		&& null != contextoSolicitud.getBigDecimal("ANPMN050020")
		&& null != contextoSolicitud.getBigDecimal("ANPMN050030")
		&& null != contextoSolicitud.getBigDecimal("ANPMN050040"))
		{
			contextoProgramaCorretaje.put(ANPMN073_OFICINA, contextoSolicitud.getBigDecimal("ANPMN050010"));
			contextoProgramaCorretaje.put(ANPMN073_NUMERO, contextoSolicitud.getBigDecimal("ANPMN050020"));
			contextoProgramaCorretaje.put(ANPMN073_VERSION, contextoSolicitud.getBigDecimal("ANPMN050030"));
			contextoProgramaCorretaje.put(ANPMN073_NUC, contextoSolicitud.getBigDecimal("ANPMN050040"));
		}
		
		CtgFacade ctg = new CtgFacade();
		aContextoCorretaje = ctg.invocarProgramaCics(contextoProgramaCorretaje, ID_PROG_CORRETAJE);

		for (IContexto contextoActual : aContextoCorretaje) 
		{	
			if (ID_CTXTO_PROG_CORRETAJE.equals(contextoActual.getNombre()))
			{
				if (Constantes.CTE_ERROR_HOST.equals(contextoActual.getString(ANPMN073_COD_ERROR)))
				{
					/*if(LOGGER.isDebugEnabled()) {
						LOGGER.debug("Error al calcular el corretaje " + contextoActual.getString(ANPMN073_MSG_ERROR_CORRETAJE));
					}
					
					aContextoCorretaje = new IContexto[1];*/
					
					rollback(
							14168, 
							new String[]{"Error en corretaje"}, 
							new String[]{contextoActual.getString(ANPMN073_MSG_ERROR_CORRETAJE)}, 
							new String[]{"Póngase en contacto con el administrador"});
				}
			}
		}
		
//		if (!Constantes.CTE_DIVISA_EURO.equalsIgnoreCase(strDivisa)) 
//		{
		//25-01-2016: ahora el corretaje también se muestra para 5005 y no solo para divisa (se muestra en todos los casos).
		if(null != aContextoCorretaje
		&& null != aContextoCorretaje[0]
		&& null != aContextoCorretaje[0].getBigDecimal(ANPMN073_IMP_CORRETAJE)
		&& null != strDivisa
		&& null != strFechaConcesion)
		{
			BigDecimal corretaje = convertirAdivisaPrestamo(
														aContextoCorretaje[0].getBigDecimal(ANPMN073_IMP_CORRETAJE), 
														strDivisa, 
														strFechaConcesion);
			
			aContextoCorretaje[0].put(ANPMN073_IMP_CORRETAJE, null != corretaje ? corretaje : BigDecimal.ZERO);
		}
//		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN: calcular corretaje de la solicitud");
		}
		
		return aContextoCorretaje;
	}
	
	/**
	 * Se llama al servicio ITAL_302 que calcula el cambio de divisa
	 * @param importe
	 * @param divisaDestino
	 * @param fechaConcesion
	 * @return El importe recibido como parametro a la divisa que se recibe como
	 * parametro
	 */
	private  BigDecimal convertirAdivisaPrestamo(BigDecimal importe,
			String divisaDestino, String fechaConcesion)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO Consulta el cambio de divisa de corretaje");
		}
		BigDecimal resultado = importe;
		
		IDatosEntradaTx datosEntradaCambioDivisa = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),
				CODAP_ITAL, COOP_CAMBIO_DIVISA);
		
		datosEntradaCambioDivisa.addCampo(TIPO_OPERACION, VALOR_TIPO_OPERACION);
		datosEntradaCambioDivisa.addCampo(APLICACION, CUENTA_ANPM);
		datosEntradaCambioDivisa.addCampo(ACCESO, VALOR_TIPO_ACCESO);
		datosEntradaCambioDivisa.addCampo(DIVISA_COMPRA, Constantes.CTE_DIVISA_EURO.toUpperCase());
		datosEntradaCambioDivisa.addCampo(TIPO_DIVISA_COMPRA, VALOR_TIPO_DIVISA);
		datosEntradaCambioDivisa.addCampo(DIVISA_VENTA, divisaDestino);
		datosEntradaCambioDivisa.addCampo(TIPO_DIVISA_VENTA, VALOR_TIPO_DIVISA);
		datosEntradaCambioDivisa.addCampo(IMPORTE_DIVISA_COMPRA, importe);
		datosEntradaCambioDivisa.addCampo(IMPORTE_DIVISA_VENTA, BigDecimal.ZERO);
		datosEntradaCambioDivisa.addCampo(CLASE_CAMBIO, VALOR_CLASE_CAMBIO_OPERATIVO);
		datosEntradaCambioDivisa.addCampo(TIPO_CAMBIO, BigDecimal.ZERO);
		datosEntradaCambioDivisa.addCampo(FECHA_CAMBIO, 
				DateUtils.formatDate(DateUtils.parseDate(fechaConcesion, DateUtils.FORMATO_FECHA_CORTO),
						DateUtils.FORMATO_FECHA_AMERICANO));
		
		IContexto [] aDivisaConv = ServicioNegocio.invocarServicio(getContexto(), datosEntradaCambioDivisa);
		
		if (aDivisaConv.length != 0 && aDivisaConv[0].getNombre().equals(CTXTO_DIVISA_CONV) &&
				(Helper.isNullOrEmpty(aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_COD_ERROR)) ||
						BigDecimal.ZERO.equals(aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_COD_ERROR))) &&
				!Helper.isNullOrEmpty(aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_IMPORTE_VENTA)))
		{
			resultado = aDivisaConv[0].getBigDecimal(CTXTO_DIVISA_CONV_IMPORTE_VENTA);
		}
		else
		{
			rollback(CTE_MSG_ERROR_CONV_DIVISA, 
					null, 
					new String[] {aDivisaConv[0].getString(CTXTO_DIVISA_CONV_DESC_ERROR)},
					null);
		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO Consulta el cambio de divisa de corretaje");
		}
		return resultado;
	}

	/**
	 * Reserva memoria en el contexto para el registro que se pasa como parámetro
	 * @param contexto Contexto donde reservar memoria
	 * @param strCtxtoIdRegistro Id del registro a crear
	 * @param iRegistrosSize Número de registros a crear
	 */
	private void reservarMemoriaRegistro(IContexto contexto,
			String strCtxtoIdRegistro, int iRegistrosSize)
	{
		List <IRegistro> lstRegistros = new ArrayList<IRegistro>(iRegistrosSize);
		for (int i = 0; i < iRegistrosSize; i++)
		{
			lstRegistros.add(ContextoFactory.getInstance().getRegistro(contexto, strCtxtoIdRegistro));
		}
		contexto.put(strCtxtoIdRegistro, lstRegistros.toArray(new IRegistro[lstRegistros.size()]));
	}
	
	
	/**
	 * Invoca al servicio ANPM_411 para calcular el diferencial a aplicar para esta
	 * solicitud de préstamo concreta según la PD del cliente y según el rango en el que esté
	 * el valor del referencial.
	 * Para ello inserta dicha información en la tabla AN50TB01 (DifTramosReferenciaC).
	 * 
	 * @param nuc
	 */
	private static void invocarCalculoDiferencial(BigDecimal nuc)
	{
		IDatosEntradaTx datosEntradaSNCalcDif = null;
		
		datosEntradaSNCalcDif = ServicioNegocio.getPrograma(
			ServicioNegocio.getContexto(),
			CTE_SN_CALC_DIF_CC,
			CTE_SN_CALC_DIF_CO);
		
		datosEntradaSNCalcDif.addCampo(CTE_SN_CALC_DIF_ENT_NUC, nuc);
		
		ServicioNegocio.invocarServicio(
								ServicioNegocio.getContexto(),
								datosEntradaSNCalcDif);
	}
}