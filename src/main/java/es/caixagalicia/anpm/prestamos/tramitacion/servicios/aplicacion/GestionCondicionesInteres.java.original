/**
 * 
 */
package es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion;


import java.math.BigDecimal;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionEng;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionesC;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresKey;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatoEnRango.TablaAN07TB01;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatoEnRango.TablaAN08TB01;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.InformacionRiesgoOrigenVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.ResultadoCondicionesInteresVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.log.LogHelper;

/**
 * @author Mirian Álvarez
 *
 */
public class GestionCondicionesInteres
{
	private static final String CTE_JNDI_DATASOURCE = "conf/CXGDB2XA";
	
	private static final String CTE_PRECIO_TARIFA_MATRIZ = "ANPMN443010";
	private static final String CTE_PRECIO_TARIFA_MATRIZ_ORDEN_TRAMO = "ANPMN443011";
	private static final String CTE_PRECIO_TARIFA_MATRIZ_TIPO_INTERES = "ANPMN443012";
	//private static final String CTE_PRECIO_TARIFA_MATRIZ_VALOR_ESTANDAR = "ANPMN443014";
	private static final String CTE_PRECIO_TARIFA_MATRIZ_VALOR_DESDE = "ANPMN443015";
	private static final String CTE_PRECIO_TARIFA_MATRIZ_VALOR_HASTA = "ANPMN443016";
	private static final String CTE_PRECIO_TARIFA_MATRIZ_NIVEL = "ANPMN443017";
	//private static final String CTE_PRECIO_TARIFA_MATRIZ_TIPO_FLEX = "ANPMN443018";
	private static final String CTE_PRECIO_TARIFA_MATRIZ_IDENT_CONDICION = "ANPMN443019";

	private static final int CTE_TIPO_INTERES_FIJO = 0;
	private static final int CTE_TIPO_INTERES_VARIABLE = 1;
	private static final int CTE_TIPO_INTERES_VARIABLE_NO_REFERENCIADO = 2;
	
	
	
	/**
	 * Log de la clase.
	 */
	private final static LogHelper LOGGER = LogHelper.getLog(GestionCondicionesInteres.class);
		
	/**
	 * Constructor por defecto.
	 */
	public GestionCondicionesInteres()
	{
	}

	/**
	 * @param condicionesInteres
	 */
	public void guardarCondicionesInteres(CondicionesInteresC condicionesInteres)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("GestionCondicionesInteres.guardarCondicionesInteres() - Inicio");
		}
		
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);	
		
		dao.persist(condicionesInteres);			
		dao.flush();
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("GestionCondicionesInteres.guardarCondicionesInteres() - Fin");
		}
	}
	

	/**
	 * @param listaCondicionesInteres
	 * @return Lista de condiciones de interes
	 */
	public List<ResultadoCondicionesInteresVO> guardarListaCondicionesInteres(List<CondicionesInteresC> listaCondicionesInteres)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("GestionDestinosPrestamo.guardarListaDestinos() - Inicio");
		}
		
		List<ResultadoCondicionesInteresVO> resultado = new ArrayList<ResultadoCondicionesInteresVO>(listaCondicionesInteres.size());
		
		//1º Comprobamos si solo hemos recibido un tramo de interes, para esto los ordenes de tramo deberian ser todos iguales
		Boolean unTramoInteres = true;
		final int size = listaCondicionesInteres.size();
		for (int i = 1; i < size; i++)
		{
			final int ordenAnterior = listaCondicionesInteres.get(i - 1).getCondicionesInteresKey().getIntOrdenDelTramo();
			final int orden = listaCondicionesInteres.get(i).getCondicionesInteresKey().getIntOrdenDelTramo();
			
			if (ordenAnterior == orden)
			{
				unTramoInteres = true;
			}
			else
			{
				//Si hay algun orden de tramo diferente, sabemos que nos vienen varios tramos de interes
				unTramoInteres = false;
				break;
			}
		}
			
		//Borramos los tramos de interes recibidos
		if (unTramoInteres)
		{
			// 2016-11-03 - Añadir comprobacion sobre el tamaño de la lista
			if ((null != listaCondicionesInteres) && (0 < listaCondicionesInteres.size()))
			{
				CondicionesInteresC interes = listaCondicionesInteres.get(0);
				//Si estamos modificando un tramo de interes, borramos todos los intereses con diferentes prioridades para ese tramo
				this.borrarCondicionesInteres(interes.getCondicionesInteresKey().getIntOficinaSolicitud(), 
						interes.getCondicionesInteresKey().getIntVersionSolicitud(),
						interes.getCondicionesInteresKey().getIntOrdenDelTramo(), 
						interes.getCondicionesInteresKey().getIntNucExpediente());
			}
			else
			{
				ServicioNegocio.rollback(
						CodigosError.CTE_ERROR_CONDICIONES_INTERES,
						null,
						null,
						null);
			}
		}
		else
		{
			for (CondicionesInteresC interes : listaCondicionesInteres)
			{
			//Si estamos añadiendo tramos de interes, borramos todos los intereses asociados a ese expediente.
			this.borrarCondicionesInteres(interes.getCondicionesInteresKey().getIntOficinaSolicitud(), 
					interes.getCondicionesInteresKey().getIntVersionSolicitud(),
					interes.getCondicionesInteresKey().getIntNucExpediente());
			}
		}
		
		//Una vez se han borrado los tramos antiguos de la tabla, grabamos los nuevos tramos de interes
		for (CondicionesInteresC interes : listaCondicionesInteres)
		{
			this.guardarCondicionesInteres(interes);
			
			ResultadoCondicionesInteresVO interesVO = new ResultadoCondicionesInteresVO();
			interesVO.setCodError(CodigosError.NO_ERROR);
			interesVO.setDatos(interes);
			
			resultado.add(interesVO);
		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("GestionDestinosPrestamo.guardarListaDestinos() - Fin");
		}
		
		return resultado;
	}	
	

	/**
	 * @param oficinaSolicitud
	 * @param numeroSolicitud
	 * @param versionSolicitud
	 * @param nucExpediente
	 * @return Lista de condiciones de interes
	 */
	public List<CondicionesInteresC> obtenerCondicionesInteres(Integer oficinaSolicitud, Integer numeroSolicitud, 
				Integer versionSolicitud, Integer nucExpediente)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Inicio: Obtener condiciones de interés");
		}				
		
		List<CondicionesInteresC> condicionesInteres;
		
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);
		condicionesInteres = dao.buscarCondicionesInteres(oficinaSolicitud, versionSolicitud, nucExpediente);
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Fin: Obtener condiciones de interés");
		}
		
		return condicionesInteres;
	}
	
	/**
	 * @param oficinaSolicitud
	 * @param numeroSolicitud
	 * @param versionSolicitud
	 * @param orden
	 * @param nucExpediente
	 */
	public void borrarCondicionesInteres(Integer oficinaSolicitud,  
			Integer versionSolicitud, Integer orden, Integer nucExpediente)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Inicio: Borrar condiciones de interés");
		}				
		
		List<CondicionesInteresC> condicionesInteres;
		
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);
		condicionesInteres = dao.buscarCondicionesInteres(oficinaSolicitud, versionSolicitud,
				orden, nucExpediente);

		for (CondicionesInteresC interes : condicionesInteres)
		{
			interes.markForDelete();
			interes.persist();
		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Fin: Borrar condiciones de interés");
		}
	}
	
	/**
	 * @param oficinaSolicitud
	 * @param numeroSolicitud
	 * @param versionSolicitud
	 * @param nucExpediente
	 */
	public void borrarCondicionesInteres(Integer oficinaSolicitud,  
			Integer versionSolicitud, Integer nucExpediente)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Inicio: Borrar condiciones de interés");
		}				
		
		List<CondicionesInteresC> condicionesInteres;
		
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);
		condicionesInteres = dao.buscarCondicionesInteres(oficinaSolicitud, versionSolicitud, nucExpediente);

		for (CondicionesInteresC interes : condicionesInteres)
		{
			interes.markForDelete();
			interes.persist();
		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Fin: Borrar condiciones de interés");
		}
	}
	
	/**
	 * Método que recupera las condiciones de interés
	 * @param interesKey
	 * @return Condiciones de interes
	 */
	public CondicionesInteresC obtenerCondicionesInteres(CondicionesInteresKey interesKey)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Inicio: Obtener condiciones de interés");
		}				
		
		CondicionesInteresC condicionInteres;
		
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);
		condicionInteres = dao.buscarCondicionesInteres(interesKey);
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Fin: Obtener condiciones de interés");
		}
			
		return condicionInteres;
	}
	
	
	/**
	 * Método que genera una nueva versión de una solicitud existente
	 * @param condInteresOriginal
	 * @param solicitudNueva
	 * @param usuario
	 * @return Lista de intereses copiada
	 */
	public List<CondicionesInteresC> generarVersionDuplicadoIntereses(List<CondicionesInteresC> condInteresOriginal, 
			DatosSolicitudC solicitudNueva, String usuario)
	{
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Inicio: Generar version de interés");
		}		
		
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);
		
		List<CondicionesInteresC> condicionesInteres = new ArrayList<CondicionesInteresC>(Constantes.CTE_CERO);
		
		for (CondicionesInteresC condicionInt : condInteresOriginal)
		{
			// Se crea la nueva condicion de interes
			CondicionesInteresC newCondInteres = dao.createNewObject();
			newCondInteres.copiar(condicionInt);
			
			// Se le establace el timestamp y usuario
			newCondInteres.setTsFechaCreacion(DateUtils.toSQLTimestamp(DateUtils.dateNow()));
			newCondInteres.setStrUsuario(usuario);
			newCondInteres.getCondicionesInteresKey().setSolicitud(solicitudNueva);
			
			condicionesInteres.add(newCondInteres);
		}
		
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Fin: Generar versión de interés");
		}
		
		// se da de alta la nueva solicitud
		return condicionesInteres;
	}
	
	
	/**
	 * Método que rellena la lista de intereses de una solicitud (alta) con datos de catálogo.
	 * 
	 * @param datosSolicitud
	 * @param datosSubproducto
	 */
	public void altaInteresSolicitud(GestionDatosSolicitud gds, DatosSolicitudC datosSolicitud, IContexto[] datosSubproducto)
	{
		BigDecimal nuc = null;
		
		List<CondicionesInteresC> listaInteres = null;
		CondicionesInteresC interesPrincipal = null;
		CondicionesInteresC interesSustitutivo = null;
		CondicionesInteresKey interesKeyPrincipal = null;
		CondicionesInteresKey interesKeySustitutivo = null;
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);
		
		IContexto[] datosInteres = null;
		IContexto[] datosDiferencial = null;
		IContexto[] datosTipoReferencia = null;
		IContexto contextoDiferencialBuscadoPrincipal = null; //contexto ANPMN015 asociado al ANPMN014, lo hay si el tramo es variable.
		IContexto contextoTipoRefBuscadoPrincipal = null; //contexto ANPMN018 asociado al ANPMN015 principal.
		IContexto contextoDiferencialBuscadoSustitutivo = null; //contexto ANPMN015 asociado al ANPMN014, lo hay si el tramo es variable.
		BigDecimal nivelInteresCatalogo = null;
		
		datosInteres = UtilidadesTramitacion.getArrayContexto(Constantes.CTE_ANPMN014, datosSubproducto);

		nuc = datosSolicitud.getDatosSolicitudKey().getNucExpediente();
		
		datosDiferencial = UtilidadesTramitacion.getArrayContexto(Constantes.CTE_ANPMN015, datosSubproducto);
		datosTipoReferencia = UtilidadesTramitacion.getArrayContexto(Constantes.CTE_ANPMN018, datosSubproducto);
		
		listaInteres = datosSolicitud.getCondicionesInteres();
		
		/*De momento no tiene que tener intereses, si no no sería una alta*/
		if (! UtilidadesTramitacion.isBlankOrNull(listaInteres))
		{
			ServicioNegocio.rollback(
				CodigosError.CTE_ERROR_ALTA_INTERES_EXISTE,
				null,
				null,
				null);
		}
		
		
		/*Recorremos el array de interes, ANPMN014, por cada tramo y nivel: */
		for (IContexto contextoInteres : datosInteres)
		{
			/*Buscamos el contexto de diferencial asociado*/
			for (IContexto contextoDiferencial : datosDiferencial)
			{
				/*Miramos que coincidan el tramo y el nivel*/
				if ((0 == contextoInteres.getBigDecimal(Constantes.CTE_INTERES_PROP_ORDEN).compareTo(contextoDiferencial.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_ORDEN))) &&
					(0 == contextoInteres.getBigDecimal(Constantes.CTE_INTERES_PROP_NIVEL).compareTo(contextoDiferencial.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_NIVEL))))
				{
					/*Esto puede ocurrir por dos motivos, porque encontramos el interés principal o el sustitutivo*/
					if (0 == BigDecimal.ZERO.compareTo(contextoDiferencial.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_TIPO)))
					{
						contextoDiferencialBuscadoPrincipal = contextoDiferencial;
						/*Buscamos en los contextos de tipo referencia el contexto ANPMN018 asociado al contexto diferencial principal*/
						for (IContexto contextoTipoRef : datosTipoReferencia)
						{
							/*Si es igual el tipo referencia, orden, prioridad y tipo condicion
							 * No vamos a filtrar por producto porque en la llamada al servicio ANPM_167 que nos devuelve estos contextos ya le indicamos
							 *  el producto, y el subproducto, si es 0, significa que la información es válida para todos los subproductos del producto*/
							if ((0 == contextoDiferencialBuscadoPrincipal.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_TIPO_REF).compareTo(contextoTipoRef.getBigDecimal(Constantes.CTE_TIPO_REF_PROP_REFERENCIA))) &&
								(0 == contextoDiferencialBuscadoPrincipal.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_ORDEN).compareTo(contextoTipoRef.getBigDecimal(Constantes.CTE_TIPO_REF_PROP_ORDEN))) &&
								(0 == contextoDiferencialBuscadoPrincipal.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_PRIORIDAD).compareTo(contextoTipoRef.getBigDecimal(Constantes.CTE_TIPO_REF_PROP_PRIORIDAD))) &&
								(0 == contextoDiferencialBuscadoPrincipal.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_TIPO).compareTo(contextoTipoRef.getBigDecimal(Constantes.CTE_TIPO_REF_PROP_TIPO))))
							{
								contextoTipoRefBuscadoPrincipal = contextoTipoRef;
							}
						}
					}
					else
					{
						contextoDiferencialBuscadoSustitutivo = contextoDiferencial;
					}
				}
			}
		
			interesPrincipal = dao.createNewObject();
			interesKeyPrincipal = new CondicionesInteresKey();
			/*Guardamos orden del tramo*/
			interesKeyPrincipal.setIntOrdenDelTramo(new Integer(contextoInteres.getBigDecimal(Constantes.CTE_INTERES_PROP_ORDEN).intValue())); //mapeamos el orden
			/*Guardamos tipo de condicion: sabemos que en este caso es un tramo fijo, por lo tanto es el principal*/
			interesKeyPrincipal.setIntTipoCondicion(new Integer(Constantes.CTE_TIPO_CONDICION_INTERES_PRINCIPAL.intValue())); //mapeamos tipo condicion
			interesKeyPrincipal.setIntPrioridad(Constantes.CTE_INTEGER_CERO);
			
			/*Asociamos la llave */
			interesKeyPrincipal.setSolicitud(datosSolicitud);
			interesPrincipal.setCondicionesInteresKey(interesKeyPrincipal);
			
			/*Guardamos el tipo de interes*/
			interesPrincipal.setStrTipoDeInteres(contextoInteres.getString(Constantes.CTE_INTERES_PROP_TIPO));
			/*Gestion campañas*/
			interesPrincipal.setIntGestionCampanas(new Integer(contextoInteres.getBigDecimal(Constantes.CTE_INTERES_PROP_CAMPANIAS).intValue()));
			/*Nivel interés*/
			nivelInteresCatalogo = contextoInteres.getBigDecimal("ANPMN014050");
			
			interesPrincipal.setIntNivelPlazo(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelInteres(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelTipoReferencia(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelDif(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelDifMinimoMaximo(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelDifBonificado(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelPorDemoraSobreCapital(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelPorDemoraSobreInteres(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelNumPeriodosRevision(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelSueloInteresInicial(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelSuelo(new Integer(nivelInteresCatalogo.intValue()));
			interesPrincipal.setIntNivelTecho(new Integer(nivelInteresCatalogo.intValue()));
			
			
			//*** VALORACION ***				
			String indValoracion = contextoInteres.getString("ANPMN014100");
			if (indValoracion.equals("1") || indValoracion.equals("4")) {				
				interesPrincipal.setStrValoracionIVI(contextoInteres.getString("ANPMN014090"));
			}
			
			//*** PLAZO ***				
			String indPlazo = contextoInteres.getString("ANPMN014140");
			if (indPlazo.equals("1") || indPlazo.equals("4")) {
				interesPrincipal.setIntPlazo(contextoInteres.getBigDecimal("ANPMN014110").intValue());					
			}else if (indPlazo.equals("3")) {
				interesPrincipal.setIntPlazo(contextoInteres.getBigDecimal("ANPMN014130").intValue());	
			}				
			
			//*** INTERÉS ***				
			String indInteres = contextoInteres.getString("ANPMN014180");
			if (indInteres.equals("1") || indInteres.equals("4")) {				
				interesPrincipal.setIntInteres(contextoInteres.getBigDecimal("ANPMN014150"));					
			} else if (indInteres.equals("3")) {					
				interesPrincipal.setIntInteres(contextoInteres.getBigDecimal("ANPMN014170"));			
			}								
			
			interesPrincipal.setIntMaximoInteresInicial(contextoInteres.getBigDecimal("ANPMN014190"));
			
			//*** TOMA DE REFERENCIA ***				
			String indTomaReferencia = contextoInteres.getString("ANPMN014210");
			if (indTomaReferencia.equals("1") || indTomaReferencia.equals("4")) {				
				interesPrincipal.setIntTomaDeReferencia(contextoInteres.getBigDecimal("ANPMN014200").intValue());
			}
			
			String indTipoRef = contextoInteres.getString("ANPMN014270");
			if (indTipoRef.equals("1") || indTipoRef.equals("4")) {					
				interesPrincipal.setIntDifMinEntreTiposReferencia(contextoInteres.getBigDecimal("ANPMN014220"));
			}
			
			//*** TIPO DE INTERES DE DEMORA ***
			interesPrincipal.setIntTipoInteresDemora(contextoInteres.getBigDecimal("ANPMN014360").intValue());
			
			//*** PORCENTAJE SOBRE CAPITAL ***				
			String indPorcSobreCapital = contextoInteres.getString("ANPMN014380");
			if (indPorcSobreCapital.equals("1") || indPorcSobreCapital.equals("4")) {				
				interesPrincipal.setIntPorDemoraSobreCapital(contextoInteres.getBigDecimal("ANPMN014370"));				
			} else if (indPorcSobreCapital.equals("3")) {					
				interesPrincipal.setIntPorDemoraSobreCapital(contextoInteres.getBigDecimal("ANPMN014400"));
			}			
							
			//*** PORCENTAJE SOBRE INTERESES ***				
			String indSobreInteres = contextoInteres.getString("ANPMN014420");
			if (indSobreInteres.equals("1") || indSobreInteres.equals("4")) {				
				interesPrincipal.setIntPorDemoraSobreInteres(contextoInteres.getBigDecimal("ANPMN014410"));					
			} else if (indSobreInteres.equals("3")) {
				interesPrincipal.setIntPorDemoraSobreInteres(contextoInteres.getBigDecimal("ANPMN014440"));
			}			
							
			//*** NÚMERO PERIODO REVISION ***				
			String indNumPeriodoRevision = contextoInteres.getString("ANPMN014480");
			if (indNumPeriodoRevision.equals("1") || indNumPeriodoRevision.equals("4")) {				
				interesPrincipal.setIntNumPeriodosRevision(contextoInteres.getBigDecimal("ANPMN014450").intValue());					
			} else if (indNumPeriodoRevision.equals("3")) {							
				interesPrincipal.setIntNumPeriodosRevision(contextoInteres.getBigDecimal("ANPMN014470").intValue());
			}				
			
			//*** UNIDAD PERIODO REVISIÓN ***				
			String indUnidadPeriodoRevision = contextoInteres.getString("ANPMN014500");
			if (indUnidadPeriodoRevision.equals("1") || indUnidadPeriodoRevision.equals("4")) {				
				interesPrincipal.setStrUnidadPeriodosRevision(contextoInteres.getString("ANPMN014490"));					
			}
			
			//*** TIPO PERIODO REVISIÓN ***				
			String indTipoPeriodoRevision = contextoInteres.getString("ANPMN014520");
			if (indTipoPeriodoRevision.equals("1") || indTipoPeriodoRevision.equals("4")) {					
				interesPrincipal.setIntTipoPeriodosRevision(contextoInteres.getBigDecimal("ANPMN014510").intValue());					
			}
			
			//*** INDICADOR PERIODO MÍNIMO REVISIÓN ***
			interesPrincipal.setIntPeriodoMinimoRevision(contextoInteres.getBigDecimal("ANPMN014530").intValue());
								
			//*** PAGO ÚNICO VENCIMIENTO FINAL ***
			interesPrincipal.setStrPagoUnicoVencimientoFinal(contextoInteres.getBigDecimal("ANPMN014540").toString());
											
			//*** NUMERO PERIODOS PERIODICIDAD ***				
			String indNumPeriodosPeriodicidad = contextoInteres.getString("ANPMN014560");
			if (indNumPeriodosPeriodicidad.equals("1") || indNumPeriodosPeriodicidad.equals("4")) {				
				interesPrincipal.setIntPeriodicidadNumPeriodo(contextoInteres.getBigDecimal("ANPMN014550").intValue());					
			}				
			
			//*** UNIDAD PERIODO PERIODICIDAD ***				
			String indUnidadPeriodoPeriodicidad = contextoInteres.getString("ANPMN014580");
			if (indUnidadPeriodoPeriodicidad.equals("1") || indUnidadPeriodoPeriodicidad.equals("4")) {				
				interesPrincipal.setStrPeriodicidadUnidadPeriodo(contextoInteres.getString("ANPMN014570"));					
			}
			
			//*** TIPO PERIODO PERIODICIDAD ***				
			String indTipoPeriodoPeriodicidad = contextoInteres.getString("ANPMN014600");
			if (indTipoPeriodoPeriodicidad.equals("1") || indTipoPeriodoPeriodicidad.equals("4")) {				
				interesPrincipal.setIntPeriodicidadTipoPeriodo(contextoInteres.getBigDecimal("ANPMN014590").intValue());					
			}
			
			//*** INDICADOR PERIODO MÍNIMO LIQUIDACIÓN ***
			interesPrincipal.setIntIndPeriodoMinimoLiquidacion(contextoInteres.getBigDecimal("ANPMN014610").intValue());
			
			//*** NÚMERO PERIODO MÍNIMO LIQUIDACIÓN ***
			interesPrincipal.setIntNumPeriodoMinLiquidacion(contextoInteres.getBigDecimal("ANPMN014620").intValue());
			
			//*** UNIDAD PERIODO MÍNIMO LIQUIDACIÓN ***
			interesPrincipal.setStrUnidadPeriodoMinLiquidacion(contextoInteres.getString("ANPMN014630"));
			
			//*** FORZAR FIN TRAMO FECHA PAGO ***
			interesPrincipal.setIntForzarFinTramoFechaPago(contextoInteres.getBigDecimal("ANPMN014640").intValue());
			
			//*** COINCIDENCIA PLAZO REVISION CON FECHA DE PAGO ***
			interesPrincipal.setIntCoincidenciaPlazoRevisionConFechaPago(contextoInteres.getBigDecimal("ANPMN014660").intValue());
			
			//*** CONDICIONES PROMOTOR/ADQUIERIENTE ***
			interesPrincipal.setIntCondicionesDeAdquirenteOPromotor(contextoInteres.getBigDecimal("ANPMN014680").intValue());					
			
			//*** INDICADOR TIPO FLEXIBILIDAD ***
			interesPrincipal.setBidIndicadorFlexibilidad(contextoInteres.getBigDecimal(Constantes.CTE_INTERES_PROP_TIPO_FLEXIBILIDAD));

			
			
			/*Si existe el contexto de diferencial principal: recuperamos información de interés variable, el principal.*/
			if (null != contextoDiferencialBuscadoPrincipal)
			{
				/*Pillamos la prioridad del contexto de diferencial*/
				interesPrincipal.getCondicionesInteresKey().setIntPrioridad(new Integer(contextoDiferencialBuscadoPrincipal.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_PRIORIDAD).intValue()));

				
				//Seteamos los valores del contexto 15 - DIFERENCIALES						
				//*** TIPO DE CONDICION *** (parte de la clave )				
				interesPrincipal.getCondicionesInteresKey().setIntTipoCondicion(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015070").intValue());				
			
				//*** DIFERENCIAL ESTANDAR ***				
				String indDiferencialEstandar = contextoDiferencialBuscadoPrincipal.getString("ANPMN015120");
				if (indDiferencialEstandar.equals("1") || indDiferencialEstandar.equals("4")) {									
					interesPrincipal.setIntDif(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015090"));
				} else if (indDiferencialEstandar.equals("3")) {					
					interesPrincipal.setIntDif(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015110"));				
				}
			
				//*** DIFERENCIAL MIN MAX ESTANDAR ***				
				String indDiferencialMinMaxEstandar = contextoDiferencialBuscadoPrincipal.getString("ANPMN015160");
				if (indDiferencialMinMaxEstandar.equals("1") || indDiferencialMinMaxEstandar.equals("4")) {										
					interesPrincipal.setIntDifMinimoMaximo(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015130"));
				} else if (indDiferencialMinMaxEstandar.equals("3")) {					
					interesPrincipal.setIntDifMinimoMaximo(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015150"));				
				}								
				
				//*** DIFERENCIAL BONIFICADO ESTÁNDAR ***				
				String indDiferencialBonificadoEstandar = contextoDiferencialBuscadoPrincipal.getString("ANPMN015200");
				if (indDiferencialBonificadoEstandar.equals("1") || indDiferencialBonificadoEstandar.equals("4")) {									
					interesPrincipal.setIntDifBonificado(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015170"));
				} else if (indDiferencialBonificadoEstandar.equals("3")) {					
					interesPrincipal.setIntDifBonificado(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015190"));				
				}
				
				//*** TIPO DE REFERENCIA ***				
				interesPrincipal.setIntTipoReferencia(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015210").intValue());
				
				//*** INDICADOR SOBRE QUE APLICA EL SUELO ***							
				interesPrincipal.setIntSobreQueAplicaElSuelo(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015220").intValue());
										
				//*** SUELO ***				
				String indSuelo = contextoDiferencialBuscadoPrincipal.getString("ANPMN015260");
				if (indSuelo.equals("1") || indSuelo.equals("4")) {									
					interesPrincipal.setIntSuelo(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015230"));									
				} else if (indSuelo.equals("3")) {					
					interesPrincipal.setIntSuelo(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015250"));			
				}								
				
				//*** TECHO ***				
				String indTecho = contextoDiferencialBuscadoPrincipal.getString("ANPMN015300");
				if (indTecho.equals("1") || indTecho.equals("4")) {										
					interesPrincipal.setIntTecho(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015270"));
				} else if (indTecho.equals("3")) {					
					interesPrincipal.setIntTecho(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015290"));				
				}
				
				//*** APLICA SUELO AL INTERÉS INICIAL ***				
				interesPrincipal.setIntAplicaSueloInteresInicial(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015310").intValue());
																				
				//*** SUELO INTERÉS INICIAL ***				
				String indSueloInicial = contextoDiferencialBuscadoPrincipal.getString("ANPMN015350");
				if (indSueloInicial.equals("1") || indSueloInicial.equals("4")) {										
					interesPrincipal.setIntSueloInteresInicial(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015320"));
				} else if (indSueloInicial.equals("3")) {					
					interesPrincipal.setIntSueloInteresInicial(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015340"));				
				}		
				
				//*** PORCENTAJE MÍNIMO DE VARIACION ***				
				String indPorcentajeMinimoVariacion = contextoDiferencialBuscadoPrincipal.getString("ANPMN015370");
				if (indPorcentajeMinimoVariacion.equals("1") || indPorcentajeMinimoVariacion.equals("4"))
				{										
					interesPrincipal.setIntMinimoVariacion(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015360"));
				}
				
				//*** SOBRE QUE APLICA EL MÍNIMO DE VARIACIÓN ***								
				interesPrincipal.setIntIndMinimoVariacion(contextoDiferencialBuscadoPrincipal.getBigDecimal("ANPMN015380").intValue());
				
/*
			interesPrincipal.setIntTipoRedondeo(new Integer(contextoInteres.getBigDecimal(Constantes.).intValue()));
			interesPrincipal.setIntBaseRedondeo(new Integer(contextoInteres.getBigDecimal(Constantes.).intValue()));
			interesPrincipal.setIntPorRedondeo(contextoInteres.getBigDecimal(Constantes.));
			interesPrincipal.setIntOrdenAplicacion(new Integer(contextoInteres.getBigDecimal(Constantes.).intValue()));
			interesPrincipal.setDateFecha1();
			interesPrincipal.setDateFecha2();
			interesPrincipal.setBidImporte1();
			interesPrincipal.setBidImporte2();
			interesPrincipal.setBidIndicador1();
			interesPrincipal.setStrIndicador2();
*/
				
				/*Si existe el contexto de tipo ref asociado al contexto de interés variable principal*/
				if (null != contextoTipoRefBuscadoPrincipal)
				{
					interesPrincipal.setStrPeriodicidadPublicacion(contextoTipoRefBuscadoPrincipal.getString("ANPMN018070"));												
					interesPrincipal.setIntFechaAConsiderar(contextoTipoRefBuscadoPrincipal.getBigDecimal("ANPMN018080").intValue());												
					interesPrincipal.setIntPeriodosARestar(contextoTipoRefBuscadoPrincipal.getBigDecimal("ANPMN018090").intValue());												
					if (!UtilidadesTramitacion.isBlankOrNull(contextoTipoRefBuscadoPrincipal.getString("ANPMN018100"))) {
						interesPrincipal.setStrUnidadDelPeriodo(contextoTipoRefBuscadoPrincipal.getString("ANPMN018100"));
					}																	
					interesPrincipal.setStrEsEspecial(contextoTipoRefBuscadoPrincipal.getString("ANPMN018110"));	
					if (!UtilidadesTramitacion.isBlankOrNull(contextoTipoRefBuscadoPrincipal.getString("ANPMN018120"))) {
						interesPrincipal.setStrMonedaTipoReferencia(contextoTipoRefBuscadoPrincipal.getString("ANPMN018120"));
					}
																	
					interesPrincipal.setIntCoincidenciaPlazoRevisionConPlazoTipoReferencia(contextoTipoRefBuscadoPrincipal.getBigDecimal("ANPMN018130").intValue());												
					interesPrincipal.setStrTipoReferenciaPeriodoAnterior(contextoTipoRefBuscadoPrincipal.getString("ANPMN018140"));						
				}
				
			}
			
			interesPrincipal.setStrUsuario(ServicioNegocio.getContexto().getUsuario());
			interesPrincipal.setTsFechaCreacion(DateHelper.getInstance().askTimestampFromDB2());
			
			/*Si existe el contexto de diferencial sustitutivo: recuperamos información de interés variable, el sustitutivo.*/
			if (null != contextoDiferencialBuscadoSustitutivo)
			{
				interesSustitutivo = dao.createNewObject();
				interesSustitutivo.copiar(interesPrincipal);
				interesKeySustitutivo = interesSustitutivo.getCondicionesInteresKey();
				/*importante, copiar() tambien crea una instancia diferente de la llave, y le vuelca los mismos datos que la que recibe.*/
				//interesKeySustitutivo.setIntTipoCondicion(new Integer(Constantes.CTE_TIPO_CONDICION_INTERES_SUSTITUTITVO.intValue())); //mapeamos tipo condicion
				interesKeySustitutivo.setIntTipoCondicion(new Integer(contextoDiferencialBuscadoSustitutivo.getBigDecimal("ANPMN015070").intValue())); //mapeamos tipo condicion
				
				interesKeySustitutivo.setIntPrioridad(new Integer(contextoDiferencialBuscadoSustitutivo.getBigDecimal(Constantes.CTE_TECHOSUELODIF_PROP_PRIORIDAD).intValue()));

			}
			
			
			/*Si existe el contexto de diferencial sustitutivo pero no el principal: guardamos UN interés variable, el sustitutivo.*/
			/*Si existen los dos contextos de diferencial: guardamos DOS intereses variables: el principal y el sustitutivo.*/
			
			listaInteres.add(interesPrincipal);
			if (null != interesSustitutivo)
			{
				listaInteres.add(interesSustitutivo);
			}
			
			
			contextoDiferencialBuscadoSustitutivo = null;
			contextoDiferencialBuscadoPrincipal = null;
		}

		
		/**
		 * Comprobaciones de ilog, para consumidores y no consumidores
		 * CONSUMIDORES: Aunque el producto este parametrizado que aplica suelo no va aplicar, será 0
		 * NO CONSUMIDORES: Se genera un error para que el usuario cambie el valor del diferencial y ponga el valor del suelo
		 */
		if(UtilidadesTramitacion.esDivisa(nuc)) {
			if(UtilidadesTramitacion.esEntornoAbanca() && UtilidadesTramitacion.comprobarControlOperatoria(nuc,new BigDecimal(150003),false)) {
				listaInteres = UtilidadesTramitacion.procesaDatosReferenciaNegativaNoIlog(nuc,listaInteres);
			}
		}
		
		
		/*Asignamos la lista de intereses a la solicitud*/
		datosSolicitud.setCondicionesInteres(listaInteres);
		
		/*Persistimos*/
		//ResultadoDatosSolicitudVO resDatosSol = gds.updateSolicitud(datosSolicitud); //ESTO NO PERSISTE LOS INTERESES EN LA AN27TB01
		for (CondicionesInteresC condicionesInteres : listaInteres)
		{
			this.guardarCondicionesInteres(condicionesInteres);
		}
	}
	
	
	/**
	 * Modifica las condiciones de interes de una solicitud de prestamo.
	 * @param camposModificados
	 * @param datosSolicitud
	 */
	public void modificarInteresesSolicitud(CamposModifInteresSolicitudVO camposModificados, DatosSolicitudC datosSolicitud)
	{
		BigDecimal nuc = null;
		List<CondicionesInteresC> listaInteres = null;
		CondicionesInteresC interesFijo = null;
		CondicionesInteresC interesVariablePrincipal = null;
		CondicionesInteresC interesVariableSustitutivoModif = null;
		List<CondicionesInteresC> listaInteresVariableSustitutivos = new ArrayList<CondicionesInteresC>(1);
		
		/*Ahora voy a recuperar las filas de la tabla de interés que son susceptibles de ser actualizadas*/
		
		listaInteres = datosSolicitud.getCondicionesInteres();
		
		if ((Constantes.TIPO_INT_FIJO.equals(camposModificados.getTipoInteres())) ||
			(Constantes.TIPO_INT_FIJO_PENLZABLE.equals(camposModificados.getTipoInteres())) ||
			(Constantes.TIPO_INT_FIJO_REFERENCIADO.equals(camposModificados.getTipoInteres())))
		{
			camposModificados.setEsFijo(true);
		}
		else
		{
			camposModificados.setEsFijo(false);
		}
		
		for (CondicionesInteresC interes : listaInteres)
		{
			/*Miramos el tipo interes*/
	
			if ((Constantes.TIPO_INT_FIJO.equals(interes.getStrTipoDeInteres())) ||
				(Constantes.TIPO_INT_FIJO_PENLZABLE.equals(interes.getStrTipoDeInteres())) ||
				(Constantes.TIPO_INT_FIJO_REFERENCIADO.equals(interes.getStrTipoDeInteres())))
			{
				//tiene que coincidir también el tramo
				if (0 == camposModificados.getOrden().compareTo(new BigDecimal(interes.getCondicionesInteresKey().getIntOrdenDelTramo().intValue())))
				{
					interesFijo = interes;
				}
			}
			else
			{
				//tiene que coincidir también el tramo
				if (0 == camposModificados.getOrden().compareTo(new BigDecimal(interes.getCondicionesInteresKey().getIntOrdenDelTramo().intValue())))
				{
					//tramo variable: miramos el tipo condición
					if (0 == Constantes.TIPO_CONDICION_INTERES.compareTo(new BigDecimal(interes.getCondicionesInteresKey().getIntTipoCondicion().intValue())))
					{
						//interés variable principal.
						interesVariablePrincipal = interes;
					}
					else
					{
						//sustitutivo: si nos informan la prioridad pillamos el sustitutivo que tenga la misma, si no pillamos el primero.
						if (null != camposModificados.getPrioridad())
						{
							if (0 == camposModificados.getPrioridad().compareTo(new BigDecimal(interes.getCondicionesInteresKey().getIntPrioridad().intValue())))
							{
								interesVariableSustitutivoModif = interes;
							}
						}
						else
						{
							if (0 == BigDecimal.ONE.compareTo(new BigDecimal(interes.getCondicionesInteresKey().getIntPrioridad().intValue())))
							{
								interesVariableSustitutivoModif = interes;
							}
						}
						/*Añadimos el sustitutivo en la lista de sustitutivos*/
						listaInteresVariableSustitutivos.add(interes);
					}
				}
			}
		}
		
		/*Ahora comprobamos qué datos fueron modificados y despues los actualizamos en la AN27TB01.*/
		
		if (camposModificados.getEsFijo())
		{
			this.obtenerInfoCambiosFijo(camposModificados, interesFijo);
			this.modificarTramoInteresFijo(camposModificados, interesFijo);
		}
		else
		{
			this.obtenerInfoCambiosVariable(camposModificados, interesVariablePrincipal, listaInteresVariableSustitutivos, interesVariableSustitutivoModif);
			this.modificarTramoInteresVariable(camposModificados, interesVariablePrincipal, listaInteresVariableSustitutivos, interesVariableSustitutivoModif);
		}
		
		/**
		 * Comprobaciones de ilog, para consumidores y no consumidores
		 * CONSUMIDORES: Aunque el producto este parametrizado que aplica suelo no va aplicar, será 0
		 * NO CONSUMIDORES: Se genera un error para que el usuario cambie el valor del diferencial y ponga el valor del suelo
		 */
		if(UtilidadesTramitacion.esDivisa(nuc)) {
			if(UtilidadesTramitacion.esEntornoAbanca() && UtilidadesTramitacion.comprobarControlOperatoria(nuc,new BigDecimal(150003),false)) {
				listaInteres = UtilidadesTramitacion.procesaDatosReferenciaNegativaNoIlog(nuc,listaInteres);
			}
		}
		
		
		/*Persistimos*/
		//ResultadoDatosSolicitudVO resDatosSol = gds.updateSolicitud(datosSolicitud); //ESTO NO PERSISTE LOS INTERESES EN LA AN27TB01
		for (CondicionesInteresC condicionesInteres : listaInteres)
		{
			this.guardarCondicionesInteres(condicionesInteres);
		}
	}
	
	/**
	 * Método que actualiza los booleanos de cada campo en función de si hubo cambios o no.
	 * 
	 * @param camposModificados
	 * @param interesFijo
	 */
	private void obtenerInfoCambiosFijo(CamposModifInteresSolicitudVO camposModificados, CondicionesInteresC interesFijo)
	{
		/*Si está informado el plazo, campo común: si el tramo es fijo actualizamos el plazo del fijo, else: act. los tramos variables, principal y sustitutivos*/
		if (null != camposModificados.getPlazo())
		{
			if (0 != camposModificados.getPlazo().compareTo(new BigDecimal(interesFijo.getIntPlazo().intValue())))
			{
				camposModificados.setSeCambiaPlazo(true);
			}
		}
		
		if (null != camposModificados.getPorcDemoraSobreCapital())
		{
			if (0 != camposModificados.getPorcDemoraSobreCapital().compareTo(interesFijo.getIntPorDemoraSobreCapital()))
			{
				camposModificados.setSeCambiaPorcDemoraSobreCapital(true);
			}
		}
		if (null != camposModificados.getIndPagoUnicoVencFinal()) //string
		{
			if (! camposModificados.getIndPagoUnicoVencFinal().equals(interesFijo.getStrPagoUnicoVencimientoFinal()))
			{
				camposModificados.setSeCambiaIndPagoUnicoVencFinal(true);
			}
		}
		if (null != camposModificados.getNumPeriodosPeriodicidad())
		{
			if (0 != camposModificados.getNumPeriodosPeriodicidad().compareTo(new BigDecimal(interesFijo.getIntPeriodicidadNumPeriodo().intValue())))
			{
				camposModificados.setSeCambiaNumPeriodosPeriodicidad(true);
			}
		}
		if (null != camposModificados.getUnidadPeriodosPeriodicidad()) //string
		{
			if (! camposModificados.getUnidadPeriodosPeriodicidad().equals(interesFijo.getStrUnidadDelPeriodo()))
			{
				camposModificados.setSeCambiaUnidadPeriodosPeriodicidad(true);
			}
		}
		if (null != camposModificados.getTipoPeriodoPeriodicidad())
		{
			if (0 != camposModificados.getTipoPeriodoPeriodicidad().compareTo(new BigDecimal(interesFijo.getIntPeriodicidadTipoPeriodo().intValue())))
			{
				camposModificados.setSeCambiaTipoPeriodoPeriodicidad(true);
			}
		}
		if (null != camposModificados.getPorcInteres())
		{
			if (0 != camposModificados.getPorcInteres().compareTo(interesFijo.getIntInteres()))
			{
				camposModificados.setSeCambiaPorcInteres(true);
			}
		}
		if (null != camposModificados.getIndValoracionIBI()) //string
		{
			if (! camposModificados.getIndValoracionIBI().equals(interesFijo.getStrValoracionIVI()))
			{
				camposModificados.setSeCambiaIndValoracionIBI(true);
			}
		}
		if (null != camposModificados.getTipoReferencia())
		{
			if (0 != camposModificados.getTipoReferencia().compareTo(new BigDecimal(interesFijo.getIntTipoReferencia().intValue())))
			{
				camposModificados.setSeCambiaTipoReferencia(true);
			}
		}
		if (null != camposModificados.getDiferencialInteres())
		{
			if (0 != camposModificados.getDiferencialInteres().compareTo(interesFijo.getIntDif()))
			{
				camposModificados.setSeCambiaDiferencialInteres(true);
			}
		}
		if (null != camposModificados.getDiferencialAlternativo())
		{
			if (0 != camposModificados.getDiferencialAlternativo().compareTo(interesFijo.getIntDifMinimoMaximo()))
			{
				camposModificados.setSeCambiaDiferencialAlternativo(true);
			}
		}
		if (null != camposModificados.getIndGestionCampanhas())
		{
			if (0 != camposModificados.getIndGestionCampanhas().compareTo(new BigDecimal(interesFijo.getIntGestionCampanas().intValue())))
			{
				camposModificados.setSeCambiaIndGestionCampanhas(true);
			}
		}
		if (null != camposModificados.getNumPeriodosRevision())
		{
			if (0 != camposModificados.getNumPeriodosRevision().compareTo(new BigDecimal(interesFijo.getIntNumPeriodosRevision().intValue())))
			{
				camposModificados.setSeCambiaNumPeriodosRevision(true);
			}
		}
		if (null != camposModificados.getUnidadPeriodosRevision()) //string
		{
			if (! camposModificados.getUnidadPeriodosRevision().equals(interesFijo.getStrUnidadPeriodosRevision()))
			{
				camposModificados.setSeCambiaUnidadPeriodosRevision(true);
			}
		}
		if (null != camposModificados.getTipoPeriodosRevision())
		{
			if (0 != camposModificados.getTipoPeriodosRevision().compareTo(new BigDecimal(interesFijo.getIntTipoPeriodosRevision().intValue())))
			{
				camposModificados.setSeCambiaTipoPeriodosRevision(true);
			}
		}
		if (null != camposModificados.getPorcSuelo())
		{
			if (0 != camposModificados.getPorcSuelo().compareTo(interesFijo.getIntSuelo()))
			{
				camposModificados.setSeCambiaPorcSuelo(true);
			}
		}
		if (null != camposModificados.getPorcTecho())
		{
			if (0 != camposModificados.getPorcTecho().compareTo(interesFijo.getIntTecho()))
			{
				camposModificados.setSeCambiaPorcTecho(true);
			}
		}
		if (null != camposModificados.getIndAplicaSueloIntInicial())
		{
			if (0 != camposModificados.getIndAplicaSueloIntInicial().compareTo(new BigDecimal(interesFijo.getIntAplicaSueloInteresInicial().intValue())))
			{
				camposModificados.setSeCambiaIndAplicaSueloIntInicial(true);
			}
		}
		if (null != camposModificados.getPorcMinimoVariacion())
		{
			if (0 != camposModificados.getPorcMinimoVariacion().compareTo(interesFijo.getIntMinimoVariacion()))
			{
				camposModificados.setSeCambiaPorcMinimoVariacion(true);
			}
		}
		if (null != camposModificados.getIndSobreQueAplicaSuelo())
		{
			if (0 != camposModificados.getIndSobreQueAplicaSuelo().compareTo(new BigDecimal(interesFijo.getIntSobreQueAplicaElSuelo().intValue())))
			{
				camposModificados.setSeCambiaIndSobreQueAplicaSuelo(true);
			}
		}
		if (null != camposModificados.getPrioridad())
		{
			if (0 != camposModificados.getPrioridad().compareTo(new BigDecimal(interesFijo.getCondicionesInteresKey().getIntPrioridad().intValue())))
			{
				camposModificados.setSeCambiaPrioridad(true);
			}
		}
		

	}
	
	
	
	/**
	 * Método que actualiza los datos del tramo fijo de interés.
	 * 
	 * @param camposModificados
	 * @param interesFijo
	 */
	private void modificarTramoInteresFijo(CamposModifInteresSolicitudVO camposModificados, CondicionesInteresC interesFijo)
	{
		if (camposModificados.getSeCambiaPlazo())
		{
			interesFijo.setIntPlazo(new Integer(camposModificados.getPlazo().intValue()));
		}
		if (camposModificados.getSeCambiaPorcDemoraSobreCapital())
		{
			interesFijo.setIntPorDemoraSobreCapital(camposModificados.getPorcDemoraSobreCapital());
		}
		if (camposModificados.getSeCambiaIndPagoUnicoVencFinal()) //string
		{
			interesFijo.setStrPagoUnicoVencimientoFinal(camposModificados.getIndPagoUnicoVencFinal());
		}
		if (camposModificados.getSeCambiaNumPeriodosPeriodicidad())
		{
			interesFijo.setIntPeriodicidadNumPeriodo(new Integer(camposModificados.getNumPeriodosPeriodicidad().intValue()));
		}
		if (camposModificados.getSeCambiaUnidadPeriodosPeriodicidad()) //string
		{
			interesFijo.setStrUnidadDelPeriodo(camposModificados.getUnidadPeriodosPeriodicidad());
		}
		if (camposModificados.getSeCambiaTipoPeriodoPeriodicidad())
		{
			interesFijo.setIntPeriodicidadTipoPeriodo(new Integer(camposModificados.getTipoPeriodoPeriodicidad().intValue()));
		}
		if (camposModificados.getSeCambiaPorcInteres())
		{
			interesFijo.setIntInteres(camposModificados.getPorcInteres());
		}
		if (camposModificados.getSeCambiaIndValoracionIBI()) //string
		{
			interesFijo.setStrValoracionIVI(camposModificados.getIndValoracionIBI());
		}
		if (camposModificados.getSeCambiaTipoReferencia())
		{
			interesFijo.setIntTipoReferencia(new Integer(camposModificados.getTipoReferencia().intValue()));
		}
		if (camposModificados.getSeCambiaDiferencialInteres())
		{
			interesFijo.setIntDif(camposModificados.getDiferencialInteres());
		}
		if (camposModificados.getSeCambiaDiferencialAlternativo())
		{
			interesFijo.setIntDifMinimoMaximo(camposModificados.getDiferencialAlternativo());
		}
		if (camposModificados.getSeCambiaIndGestionCampanhas())
		{
			interesFijo.setIntGestionCampanas(new Integer(camposModificados.getIndGestionCampanhas().intValue()));
		}
		if (camposModificados.getSeCambiaNumPeriodosRevision())
		{
			interesFijo.setIntNumPeriodosRevision(new Integer(camposModificados.getNumPeriodosRevision().intValue()));
		}
		if (camposModificados.getSeCambiaUnidadPeriodosRevision()) //string
		{
			interesFijo.setStrUnidadPeriodosRevision(camposModificados.getUnidadPeriodosRevision());
		}
		if (camposModificados.getSeCambiaTipoPeriodosRevision())
		{
			interesFijo.setIntTipoPeriodosRevision(new Integer(camposModificados.getTipoPeriodosRevision().intValue()));
		}
		if (camposModificados.getSeCambiaPorcSuelo())
		{
			interesFijo.setIntSuelo(camposModificados.getPorcSuelo());
		}
		if (camposModificados.getSeCambiaPorcTecho())
		{
			interesFijo.setIntTecho(camposModificados.getPorcTecho());
		}
		if (camposModificados.getSeCambiaIndAplicaSueloIntInicial())
		{
			interesFijo.setIntAplicaSueloInteresInicial(new Integer(camposModificados.getIndAplicaSueloIntInicial().intValue()));
		}
		if (camposModificados.getSeCambiaPorcMinimoVariacion())
		{
			interesFijo.setIntMinimoVariacion(camposModificados.getPorcMinimoVariacion());
		}
		if (camposModificados.getSeCambiaIndSobreQueAplicaSuelo())
		{
			interesFijo.setIntSobreQueAplicaElSuelo(new Integer(camposModificados.getIndSobreQueAplicaSuelo().intValue()));
		}
		//la prioridad no se puede cambiar así: es un campo de la llave, habría que borrar la fila y crear otra.
/*
		if (camposModificados.getSeCambiaPrioridad())
		{
			interesFijo.getCondicionesInteresKey().setIntPrioridad(new Integer(camposModificados.getPrioridad().intValue()));
		}
*/
	}

	/**
	 * Método que actualiza los booleanos de cada campo en función de si hubo cambios o no.
	 * 
	 * @param camposModificados
	 * @param interesFijo
	 */
	private void obtenerInfoCambiosVariable(
		CamposModifInteresSolicitudVO camposModificados,
		CondicionesInteresC interesVariablePrincipal,
		List<CondicionesInteresC> listaInteresVariableSustitutivos,
		CondicionesInteresC interesVariableSustitutivoModif)
	{
		if (null != camposModificados.getPlazo())
		{
		/*Si está informado el plazo, campo común: si el tramo es fijo actualizamos el plazo del fijo, else: act. los tramos variables, principal y sustitutivos*/
		if (null != camposModificados.getPlazo())
		{
			if (0 != camposModificados.getPlazo().compareTo(new BigDecimal(interesVariablePrincipal.getIntPlazo().intValue())))
			{
				camposModificados.setSeCambiaPlazo(true);
			}
		}
		
		if (null != camposModificados.getPorcDemoraSobreCapital())
		{
			if (0 != camposModificados.getPorcDemoraSobreCapital().compareTo(interesVariablePrincipal.getIntPorDemoraSobreCapital()))
			{
				camposModificados.setSeCambiaPorcDemoraSobreCapital(true);
			}
		}
		if (null != camposModificados.getIndPagoUnicoVencFinal()) //string
		{
			if (! camposModificados.getIndPagoUnicoVencFinal().equals(interesVariablePrincipal.getStrPagoUnicoVencimientoFinal()))
			{
				camposModificados.setSeCambiaIndPagoUnicoVencFinal(true);
			}
		}
		if (null != camposModificados.getNumPeriodosPeriodicidad())
		{
			if (0 != camposModificados.getNumPeriodosPeriodicidad().compareTo(new BigDecimal(interesVariablePrincipal.getIntPeriodicidadNumPeriodo().intValue())))
			{
				camposModificados.setSeCambiaNumPeriodosPeriodicidad(true);
			}
		}
		if (null != camposModificados.getUnidadPeriodosPeriodicidad()) //string
		{
			if (! camposModificados.getUnidadPeriodosPeriodicidad().equals(interesVariablePrincipal.getStrUnidadDelPeriodo()))
			{
				camposModificados.setSeCambiaUnidadPeriodosPeriodicidad(true);
			}
		}
		if (null != camposModificados.getTipoPeriodoPeriodicidad())
		{
			if (0 != camposModificados.getTipoPeriodoPeriodicidad().compareTo(new BigDecimal(interesVariablePrincipal.getIntPeriodicidadTipoPeriodo().intValue())))
			{
				camposModificados.setSeCambiaTipoPeriodoPeriodicidad(true);
			}
		}
		if (null != camposModificados.getPorcInteres())
		{
			if (0 != camposModificados.getPorcInteres().compareTo(interesVariablePrincipal.getIntInteres()))
			{
				camposModificados.setSeCambiaPorcInteres(true);
			}
		}
		if (null != camposModificados.getIndValoracionIBI()) //string
		{
			if (! camposModificados.getIndValoracionIBI().equals(interesVariablePrincipal.getStrValoracionIVI()))
			{
				camposModificados.setSeCambiaIndValoracionIBI(true);
			}
		}
		if (null != camposModificados.getTipoReferencia())
		{
			if (0 != camposModificados.getTipoReferencia().compareTo(new BigDecimal(interesVariablePrincipal.getIntTipoReferencia().intValue())))
			{
				camposModificados.setSeCambiaTipoReferencia(true);
			}
		}
		if (null != camposModificados.getDiferencialInteres())
		{
			if (0 != camposModificados.getDiferencialInteres().compareTo(interesVariablePrincipal.getIntDif()))
			{
				camposModificados.setSeCambiaDiferencialInteres(true);
			}
		}
		if (null != camposModificados.getDiferencialAlternativo())
		{
			if (0 != camposModificados.getDiferencialAlternativo().compareTo(interesVariablePrincipal.getIntDifMinimoMaximo()))
			{
				camposModificados.setSeCambiaDiferencialAlternativo(true);
			}
		}
		if (null != camposModificados.getIndGestionCampanhas())
		{
			if (0 != camposModificados.getIndGestionCampanhas().compareTo(new BigDecimal(interesVariablePrincipal.getIntGestionCampanas().intValue())))
			{
				camposModificados.setSeCambiaIndGestionCampanhas(true);
			}
		}
		if (null != camposModificados.getNumPeriodosRevision())
		{
			if (0 != camposModificados.getNumPeriodosRevision().compareTo(new BigDecimal(interesVariablePrincipal.getIntNumPeriodosRevision().intValue())))
			{
				camposModificados.setSeCambiaNumPeriodosRevision(true);
			}
		}
		if (null != camposModificados.getUnidadPeriodosRevision()) //string
		{
			if (! camposModificados.getUnidadPeriodosRevision().equals(interesVariablePrincipal.getStrUnidadPeriodosRevision()))
			{
				camposModificados.setSeCambiaUnidadPeriodosRevision(true);
			}
		}
		if (null != camposModificados.getTipoPeriodosRevision())
		{
			if (0 != camposModificados.getTipoPeriodosRevision().compareTo(new BigDecimal(interesVariablePrincipal.getIntTipoPeriodosRevision().intValue())))
			{
				camposModificados.setSeCambiaTipoPeriodosRevision(true);
			}
		}
		if (null != camposModificados.getPorcSuelo())
		{
			if (0 != camposModificados.getPorcSuelo().compareTo(interesVariablePrincipal.getIntSuelo()))
			{
				camposModificados.setSeCambiaPorcSuelo(true);
			}
		}
		if (null != camposModificados.getPorcTecho())
		{
			if (0 != camposModificados.getPorcTecho().compareTo(interesVariablePrincipal.getIntTecho()))
			{
				camposModificados.setSeCambiaPorcTecho(true);
			}
		}
		if (null != camposModificados.getIndAplicaSueloIntInicial())
		{
			if (0 != camposModificados.getIndAplicaSueloIntInicial().compareTo(new BigDecimal(interesVariablePrincipal.getIntAplicaSueloInteresInicial().intValue())))
			{
				camposModificados.setSeCambiaIndAplicaSueloIntInicial(true);
			}
		}
		if (null != camposModificados.getPorcMinimoVariacion())
		{
			if (0 != camposModificados.getPorcMinimoVariacion().compareTo(interesVariablePrincipal.getIntMinimoVariacion()))
			{
				camposModificados.setSeCambiaPorcMinimoVariacion(true);
			}
		}
		if (null != camposModificados.getIndSobreQueAplicaSuelo())
		{
			if (0 != camposModificados.getIndSobreQueAplicaSuelo().compareTo(new BigDecimal(interesVariablePrincipal.getIntSobreQueAplicaElSuelo().intValue())))
			{
				camposModificados.setSeCambiaIndSobreQueAplicaSuelo(true);
			}
		}
		if (null != camposModificados.getPrioridad())
		{
			if (0 != camposModificados.getPrioridad().compareTo(new BigDecimal(interesVariablePrincipal.getCondicionesInteresKey().getIntPrioridad().intValue())))
			{
				camposModificados.setSeCambiaPrioridad(true);
			}
		}
		
		}
	}
	
	/**
	 * Modifica los datos de las tarifas introduciendo el id de relacion y el id de tarifa
	 * Solo se hace para el orden de tramo 1 y 2
	 * @param condicionesInteresC
	 * @param idTarifa
	 * @param idRelacionTramoUno
	 * @param idRelacionTramoDos
	 * @return
	 */
	public static List<CondicionesInteresC> modificaDatosTarifas(List<CondicionesInteresC> condicionesInteresC,
			BigDecimal idRelacionTramoUno,BigDecimal idRelacionTramoDos){
		//Recorremos la lista de condiciones de interes y si es tramo uno o tramo dos la modificamos
		for(CondicionesInteresC condicion:condicionesInteresC) {
			if(!UtilidadesTramitacion.isBlankOrNull(idRelacionTramoUno) && 
					condicion.getCondicionesInteresKey().getIntOrdenDelTramo().equals(Constantes.CTE_INT_UNO)) {
				condicion.setBidIdRelacion(idRelacionTramoUno);
			}
			if(!UtilidadesTramitacion.isBlankOrNull(idRelacionTramoDos) &&
					condicion.getCondicionesInteresKey().getIntOrdenDelTramo().equals(Constantes.CTE_INT_DOS)) {
				condicion.setBidIdRelacion(idRelacionTramoDos);
			}
		}
		
		return condicionesInteresC;
	}
	
	
	
	/**
	 * Método que actualiza los datos del tramo variable de interés. En función del campo modificado
	 * se actualizarán tambien los tramos sustitutivos.
	 * 
	 * @param camposModificados
	 * @param interesFijo
	 */
	private void modificarTramoInteresVariable(
		CamposModifInteresSolicitudVO camposModificados,
		CondicionesInteresC interesVariablePrincipal,
		List<CondicionesInteresC> listaInteresVariableSustitutivos,
		CondicionesInteresC interesVariableSustitutivoModif)
	{
		if (camposModificados.getSeCambiaPlazo())
		{
			interesVariablePrincipal.setIntPlazo(new Integer(camposModificados.getPlazo().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntPlazo(new Integer(camposModificados.getPlazo().intValue()));
			}
		}
		
		if (camposModificados.getSeCambiaPorcDemoraSobreCapital())
		{
			interesVariablePrincipal.setIntPorDemoraSobreCapital(camposModificados.getPorcDemoraSobreCapital());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntPorDemoraSobreCapital(camposModificados.getPorcDemoraSobreCapital());
			}
		}
		if (camposModificados.getSeCambiaIndPagoUnicoVencFinal()) //string
		{
			interesVariablePrincipal.setStrPagoUnicoVencimientoFinal(camposModificados.getIndPagoUnicoVencFinal());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setStrPagoUnicoVencimientoFinal(camposModificados.getIndPagoUnicoVencFinal());
			}
		}
		if (camposModificados.getSeCambiaNumPeriodosPeriodicidad())
		{
			interesVariablePrincipal.setIntPeriodicidadNumPeriodo(new Integer(camposModificados.getNumPeriodosPeriodicidad().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntPeriodicidadNumPeriodo(new Integer(camposModificados.getNumPeriodosPeriodicidad().intValue()));
			}
		}
		if (camposModificados.getSeCambiaUnidadPeriodosPeriodicidad()) //string
		{
			interesVariablePrincipal.setStrUnidadDelPeriodo(camposModificados.getUnidadPeriodosPeriodicidad());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setStrUnidadDelPeriodo(camposModificados.getUnidadPeriodosPeriodicidad());
			}
		}
		if (camposModificados.getSeCambiaTipoPeriodoPeriodicidad())
		{
			interesVariablePrincipal.setIntPeriodicidadTipoPeriodo(new Integer(camposModificados.getTipoPeriodoPeriodicidad().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntPeriodicidadTipoPeriodo(new Integer(camposModificados.getTipoPeriodoPeriodicidad().intValue()));
			}
		}
		if (camposModificados.getSeCambiaPorcInteres())
		{
			interesVariablePrincipal.setIntInteres(camposModificados.getPorcInteres());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntInteres(camposModificados.getPorcInteres());
			}
		}
		if (camposModificados.getSeCambiaIndValoracionIBI()) //string
		{
			interesVariablePrincipal.setStrValoracionIVI(camposModificados.getIndValoracionIBI());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setStrValoracionIVI(camposModificados.getIndValoracionIBI());
			}
		}
		if (camposModificados.getSeCambiaTipoReferencia())
		{
			interesVariablePrincipal.setIntTipoReferencia(new Integer(camposModificados.getTipoReferencia().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntTipoReferencia(new Integer(camposModificados.getTipoReferencia().intValue()));
			}
		}
		if (camposModificados.getSeCambiaDiferencialInteres())
		{
			interesVariablePrincipal.setIntDif(camposModificados.getDiferencialInteres());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntDif(camposModificados.getDiferencialInteres());
			}
		}
		if (camposModificados.getSeCambiaDiferencialAlternativo())
		{
			interesVariablePrincipal.setIntDifMinimoMaximo(camposModificados.getDiferencialAlternativo());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntDifMinimoMaximo(camposModificados.getDiferencialAlternativo());
			}
		}
		if (camposModificados.getSeCambiaIndGestionCampanhas())
		{
			interesVariablePrincipal.setIntGestionCampanas(new Integer(camposModificados.getIndGestionCampanhas().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntGestionCampanas(new Integer(camposModificados.getIndGestionCampanhas().intValue()));
			}
		}
		if (camposModificados.getSeCambiaNumPeriodosRevision())
		{
			interesVariablePrincipal.setIntNumPeriodosRevision(new Integer(camposModificados.getNumPeriodosRevision().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntNumPeriodosRevision(new Integer(camposModificados.getNumPeriodosRevision().intValue()));
			}
		}
		if (camposModificados.getSeCambiaUnidadPeriodosRevision()) //string
		{
			interesVariablePrincipal.setStrUnidadPeriodosRevision(camposModificados.getUnidadPeriodosRevision());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setStrUnidadPeriodosRevision(camposModificados.getUnidadPeriodosRevision());
			}
		}
		if (camposModificados.getSeCambiaTipoPeriodosRevision())
		{
			interesVariablePrincipal.setIntTipoPeriodosRevision(new Integer(camposModificados.getTipoPeriodosRevision().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntTipoPeriodosRevision(new Integer(camposModificados.getTipoPeriodosRevision().intValue()));
			}
		}
		if (camposModificados.getSeCambiaPorcSuelo())
		{
			interesVariablePrincipal.setIntSuelo(camposModificados.getPorcSuelo());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntSuelo(camposModificados.getPorcSuelo());
			}
		}
		if (camposModificados.getSeCambiaPorcTecho())
		{
			interesVariablePrincipal.setIntTecho(camposModificados.getPorcTecho());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntTecho(camposModificados.getPorcTecho());
			}
		}
		if (camposModificados.getSeCambiaIndAplicaSueloIntInicial())
		{
			interesVariablePrincipal.setIntAplicaSueloInteresInicial(new Integer(camposModificados.getIndAplicaSueloIntInicial().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntAplicaSueloInteresInicial(new Integer(camposModificados.getIndAplicaSueloIntInicial().intValue()));
			}
		}
		if (camposModificados.getSeCambiaPorcMinimoVariacion())
		{
			interesVariablePrincipal.setIntMinimoVariacion(camposModificados.getPorcMinimoVariacion());
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntMinimoVariacion(camposModificados.getPorcMinimoVariacion());
			}
		}
		if (camposModificados.getSeCambiaIndSobreQueAplicaSuelo())
		{
			interesVariablePrincipal.setIntSobreQueAplicaElSuelo(new Integer(camposModificados.getIndSobreQueAplicaSuelo().intValue()));
			for (CondicionesInteresC interes : listaInteresVariableSustitutivos)
			{
				interes.setIntSobreQueAplicaElSuelo(new Integer(camposModificados.getIndSobreQueAplicaSuelo().intValue()));
			}
		}
		//la prioridad no se puede cambiar así: es un campo de la llave, habría que borrar la fila y crear otra.
/*
		if (camposModificados.getSeCambiaPrioridad())
		{
			interesVariablePrincipal.getCondicionesInteresKey().setIntPrioridad(new Integer(camposModificados.getPrioridad().intValue()));
		}		
*/
	}
	
	
	/**
	 * Metodo que comprueba si los precios indicados en los tramos de interés están en rango de los precios de la tarifa de la solicitud. 
	 * 
	 * @param listaIntereses
	 * @param datosSolicitudC
	 */
	public static void comprobarDatoEnRangoTarifas(List<CondicionesInteresC> listaIntereses, DatosSolicitudC datosSolicitudC, BigDecimal idTarifa,String esBo)
	{
		BigDecimal codProducto = null;
		BigDecimal codSubproducto = null;
		BigDecimal versionGeneral = null;
		BigDecimal plazo = null;
		//BigDecimal centro = null;
		BigDecimal importe = null;
		BigDecimal nuc = null;
		BigDecimal indNovacionSinModalidad = null;
		
		IContexto[] arrayPreciosTarifa = null;
		IRegistro[] matrizPreciosTarifa = null;
		
		int ordenTramoInteres = Constantes.CTE_INT_CERO;
		int tipoCondicionTramoInteres = Constantes.CTE_INT_CERO;
		String tipoInteresInteres = null;
		BigDecimal tipoReferenciaInteres = null;
		BigDecimal interesFijo = null;
		BigDecimal interesFijoVarNoRef = null;
		BigDecimal diferencialInteres = null;
		
		int tipoInteres = -1; //0: Fijo, 1: Variable, 2: Variable no referenciado.
		
		BigDecimal valorDesdePrecio = null;
		BigDecimal valorHastaPrecio = null;
		
		String descripcionErrorFueraRangoTarifa = null;
		
		BigDecimal nivelInteres = null;
		Integer nivelInteresInt = null;
		
		int ordenTramoPrecio = Constantes.CTE_INT_CERO;
		String tipoInteresPrecio = null;
		String identificadorPrecio = null;
		
		
		indNovacionSinModalidad = datosSolicitudC.getIndNovacionSinModalidad();
		boolean esNovacionSinModalidad = false;
		if ((null != indNovacionSinModalidad) && (indNovacionSinModalidad.compareTo(BigDecimal.ONE) == 0))
		{
			esNovacionSinModalidad = true;
		}
		

		codProducto = datosSolicitudC.getProducto();
		codSubproducto = datosSolicitudC.getSubproducto();
		versionGeneral = datosSolicitudC.getVersionGeneral();		
		plazo = datosSolicitudC.getPlazoTotal();
		importe = datosSolicitudC.getImporteSolicitado();
		nuc = datosSolicitudC.getDatosSolicitudKey().getNucExpediente();
		//centro = datosSolicitudC.getDatosSolicitudKey().getOficinaSolicitud();
		//boolean perteneceSantiagoOMadrid = esCentroSantiagoOMadrid(centro); 
		
		
		/*Obtenemos los precios aplicables de la tarifa para este subproducto y este plazo llamando al ANPM_443.*/
		
		// 2018-02-14 - Si es una novacion sin modalidad, obtener los datos de la 5980
		// para hacer las validaciones, en lugar de los datos del producto de la solicitud.		
		if (esNovacionSinModalidad)
		{
			// Obtener datos de la 5980
			
			// Producto, subproducto y colectivo
			BigDecimal codProdNovacionSinModalidad = Constantes.CTE_PRODUCTO_NOVACION_SIN_MODALIDAD;
			BigDecimal codSubprodNovacionSinModalidad = Constantes.CTE_SUBPRODUCTO_NOVACION_SIN_MODALIDAD;
			BigDecimal colectivoNovacionSinModalidad = Constantes.CTE_COLECTIVO_NOVACION_SIN_MODALIDAD;
			
			// Version vigente
			Date fechaHoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());
			Time horaHoy = new Time(DateUtils.getSoloHorario(DateUtils.dateNow()).getTime());	
			VersionEng versionEng = new VersionEng();		
			VersionesC version = versionEng.obtenerVersionVigenteEnFecha(
					new Integer(codProdNovacionSinModalidad.intValue()), 
					new Integer(codSubprodNovacionSinModalidad.intValue()),  
					new Integer(colectivoNovacionSinModalidad.intValue()), 
					fechaHoy, horaHoy);
			BigDecimal versionGeneralNovacionSinModalidad = new BigDecimal(version.getVersionKey().getIdVersionGeneral().intValue());
			
			arrayPreciosTarifa = UtilidadesComun.obtencionDatosTarifa(codProdNovacionSinModalidad, 
					codSubprodNovacionSinModalidad, versionGeneralNovacionSinModalidad, plazo.toString(), 
					idTarifa, Constantes.CTE_ORIGEN_CONSULTA_TARIFA_SOLICITUD, importe, nuc,null,null);
		}
		else
		{
			arrayPreciosTarifa = UtilidadesComun.obtencionDatosTarifa(codProducto, codSubproducto,
				versionGeneral, plazo.toString(), idTarifa, Constantes.CTE_ORIGEN_CONSULTA_TARIFA_SOLICITUD, 
				importe, nuc,null,null);
		}
		
		
		// 2018-02-06 - Si el tipo de expediente se corresponde con una subrogacion interna 
		// (292, 260, 293) o una novacion (267), obtener los datos del riesgo origen
		InformacionRiesgoOrigenVO datosRiesgoOrigen = null;
		boolean esSubrogacionNovacion = false;
		BigDecimal tipoExpediente = datosSolicitudC.getTipoExpediente();
		
		esSubrogacionNovacion = (UtilidadesComun.esExpedienteSubrogacionAmpliacion(tipoExpediente) ||
				UtilidadesComun.esExpedienteNovacion(tipoExpediente));		
		
		if (esSubrogacionNovacion)
		{
			datosRiesgoOrigen = GestionInformacionRiesgoOrigen.obtieneInformacionRO(nuc, 
					tipoExpediente, codProducto, Constantes.CADENA_VACIA);
		}
		
		
		/*Recorremos la lista de intereses y buscamos el precio a aplicar en el array de precios de tarifa.*/
		
		if ((UtilidadesTramitacion.isBlankOrNull(arrayPreciosTarifa)) ||
			(UtilidadesTramitacion.isBlankOrNull(arrayPreciosTarifa[0].getRegistro(CTE_PRECIO_TARIFA_MATRIZ))))
		{
			ServicioNegocio.rollback(
				CodigosError.CTE_ERROR_NO_HAY_PRECIOS_TARIFA,
				null,
				new String[] {codProducto.toString(),
							codSubproducto.toString(),
							versionGeneral.toString(),
							plazo.toString(), idTarifa.toString(),
							Constantes.CTE_ORIGEN_CONSULTA_TARIFA_SOLICITUD.toString()},
				null
				);
		}
		matrizPreciosTarifa = arrayPreciosTarifa[0].getRegistro(CTE_PRECIO_TARIFA_MATRIZ);
		
		for (CondicionesInteresC condicionesInteres : listaIntereses)
		{
			ordenTramoInteres = condicionesInteres.getCondicionesInteresKey().getIntOrdenDelTramo().intValue();
			tipoCondicionTramoInteres = condicionesInteres.getCondicionesInteresKey().getIntTipoCondicion().intValue();
			tipoInteresInteres = condicionesInteres.getStrTipoDeInteres();
			tipoReferenciaInteres = new BigDecimal(condicionesInteres.getIntTipoReferencia());
			interesFijo = condicionesInteres.getIntInteres();
			interesFijoVarNoRef = condicionesInteres.getIntTecho();
			diferencialInteres = condicionesInteres.getIntDif();
			
			for (IRegistro precioTarifa : matrizPreciosTarifa)
			{
				tipoInteresPrecio = UtilidadesTramitacion.comprobarDatoNull(precioTarifa.getString(CTE_PRECIO_TARIFA_MATRIZ_TIPO_INTERES));
				ordenTramoPrecio = precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_ORDEN_TRAMO).intValue();
				identificadorPrecio = UtilidadesTramitacion.comprobarDatoNull(precioTarifa.getString(CTE_PRECIO_TARIFA_MATRIZ_IDENT_CONDICION));
				valorDesdePrecio = precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_VALOR_DESDE);
				valorHastaPrecio = precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_VALOR_HASTA);
				
				//filtramos por orden de tramo y tipo de interés (el char de 2. 00: fijo, 02: variable, 03: variable bonificable,...)
				if (((ordenTramoInteres == ordenTramoPrecio)) &&
					(tipoInteresInteres.equals(tipoInteresPrecio)))
				{
					//ahora miramos el tipo de condición, si es INT es un precio de interés fijo, si es DIF es un diferencial.
					if (Constantes.CTE_PRECIO_TARIFA_TIPO_FIJO.equals(identificadorPrecio))
					{
						tipoInteres = CTE_TIPO_INTERES_FIJO;
						
						// 2018-02-06 - Si es subrogacion interna o novacion, comparar con datos del riesgo origen:
						// - Si el valor en la nueva operacion es igual o mejor para el banco: no se genera autorizacion
						// - En caso contrario: comprobaciones como hasta ahora
						BigDecimal interesRiesgoOrigen = null;
						if (null != datosRiesgoOrigen)
						{
							interesRiesgoOrigen = GestionDatoEnRango.getDatoInteresRiesgoOrigen(
								TablaAN07TB01.INTERES, datosRiesgoOrigen, ordenTramoInteres);
						}
					
						if (esSubrogacionNovacion && GestionDatoEnRango.esIgualOMejorCondicionInteres(
								TablaAN07TB01.INTERES, interesFijo, interesRiesgoOrigen))
						{
							nivelInteres = new BigDecimal(Constantes.CTE_NIVEL_OFICINA);
						}
						else
						{
							//miramos si este tramo fijo está en el rango que estamos recorriendo.
							if (UtilidadesComun.datoEnRangoTarifa(interesFijo, valorDesdePrecio, valorHastaPrecio))
							{
								//si el nivel del rango actual es más pequeño del que tenemos pillamos el menor.
								//esto puede pasar cuando un valor está en más de un rango.
								if ((null == nivelInteres) ||
									(0 < nivelInteres.compareTo(precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_NIVEL))))
								{
									nivelInteres = precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_NIVEL);
									
									// Comprobamos que el nivel sea 30, 40 0 50 y además que pertenezca a la red de DTSantiago
									// Si es así, rebajamos el nivel.
	//								if (((0 == nivelInteres.compareTo(new BigDecimal(30))) ||
	//								    (0 == nivelInteres.compareTo(new BigDecimal(40))) ||
	//								    (0 == nivelInteres.compareTo(new BigDecimal(50)))) &&
	//									(perteneceSantiagoOMadrid))  
	//								{
	//									nivelInteres = conversionNivelAutorizacionDTSantiago(nivelInteres.intValue()); 
	//								}
									
								}
							}
						}
					}
					else if (Constantes.CTE_PRECIO_TARIFA_TIPO_VARIABLE.equals(identificadorPrecio))
					{
						/*si es un tramo variable pero el tipo de referencia es no referenciado, lo que tenemos que comprobar si está en rango
						es el interés fijo, pero en este caso está en el campo techo del interés, y realmente, aunque el precio tenga identificador "DIF",
						en realidad lo que se está guardando en este precio es el interés fijo de este tramo variable no referenciado.
						*/
						if (GestionConsultaDatosSolicitud.esTipoReferenciaNoReferenciado(tipoReferenciaInteres.toString()))
						{
							tipoInteres = CTE_TIPO_INTERES_VARIABLE_NO_REFERENCIADO;
							
							// 2018-02-06 - Si es subrogacion interna o novacion, comparar con datos del riesgo origen:
							// - Si el valor en la nueva operacion es igual o mejor para el banco: no se genera autorizacion
							// - En caso contrario: comprobaciones como hasta ahora
							BigDecimal techoRiesgoOrigen = null;
							if (null != datosRiesgoOrigen)
							{
								techoRiesgoOrigen = GestionDatoEnRango.getDatoDiferencialRiesgoOrigen(
									TablaAN08TB01.TECHO, datosRiesgoOrigen, ordenTramoInteres, tipoCondicionTramoInteres);
							}
						
							if (esSubrogacionNovacion && GestionDatoEnRango.esIgualOMejorDiferencialInteres(
									TablaAN08TB01.TECHO, interesFijoVarNoRef, techoRiesgoOrigen))
							{
								nivelInteres = new BigDecimal(Constantes.CTE_NIVEL_OFICINA);
							}
							else
							{
								//miramos si este tramo variable no referenciado está en el rango que estamos recorriendo.
								if (UtilidadesComun.datoEnRangoTarifa(interesFijoVarNoRef, valorDesdePrecio, valorHastaPrecio))
								{
									//si el nivel del rango actual es más pequeño del que tenemos pillamos el menor.
									//esto puede pasar cuando un valor está en más de un rango.
									if ((null == nivelInteres) ||
										(0 < nivelInteres.compareTo(precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_NIVEL))))
									{
										nivelInteres = precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_NIVEL);
										
										// Comprobamos que el nivel sea 30, 40 0 50 y además que pertenezca a la red de DTSantiago
										// Si es así, rebajamos el nivel.
	//									if (((0 == nivelInteres.compareTo(new BigDecimal(30))) ||
	//								    (0 == nivelInteres.compareTo(new BigDecimal(40))) ||
	//								    (0 == nivelInteres.compareTo(new BigDecimal(50)))) &&
	//									(perteneceSantiagoOMadrid))  
	//									{
	//										nivelInteres = conversionNivelAutorizacionDTSantiago(nivelInteres.intValue());
	//									}
									}
								}
							}
						}
						else
						{
							tipoInteres = CTE_TIPO_INTERES_VARIABLE;
							
							// 2018-02-06 - Si es subrogacion interna o novacion, comparar con datos del riesgo origen:
							// - Si el valor en la nueva operacion es igual o mejor para el banco: no se genera autorizacion
							// - En caso contrario: comprobaciones como hasta ahora
							BigDecimal diferencialRiesgoOrigen = null;
							if (null != datosRiesgoOrigen)
							{
								diferencialRiesgoOrigen = GestionDatoEnRango.getDatoDiferencialRiesgoOrigen(
									TablaAN08TB01.DIFERENCIAL, datosRiesgoOrigen, ordenTramoInteres, tipoCondicionTramoInteres);
							}
						
							if (esSubrogacionNovacion && GestionDatoEnRango.esIgualOMejorDiferencialInteres(
									TablaAN08TB01.DIFERENCIAL, diferencialInteres, diferencialRiesgoOrigen))
							{
								nivelInteres = new BigDecimal(Constantes.CTE_NIVEL_OFICINA);
							}
							else
							{
								//es un tramo variable normal.
								//miramos si este tramo variable normal está en el rango que estamos recorriendo.
								if (UtilidadesComun.datoEnRangoTarifa(diferencialInteres, valorDesdePrecio, valorHastaPrecio))
								{
									//si el nivel del rango actual es más pequeño del que tenemos pillamos el menor.
									//esto puede pasar cuando un valor está en más de un rango.
									if ((null == nivelInteres) ||
										(0 < nivelInteres.compareTo(precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_NIVEL))))
									{
										nivelInteres = precioTarifa.getBigDecimal(CTE_PRECIO_TARIFA_MATRIZ_NIVEL);
										
										// Comprobamos que el nivel sea 30, 40 0 50 y además que pertenezca a la red de DTSantiago
										// Si es así, rebajamos el nivel.
	//									if (((0 == nivelInteres.compareTo(new BigDecimal(30))) ||
	//								    (0 == nivelInteres.compareTo(new BigDecimal(40))) ||
	//								    (0 == nivelInteres.compareTo(new BigDecimal(50)))) &&
	//									(perteneceSantiagoOMadrid))  
	//									{
	//										nivelInteres = conversionNivelAutorizacionDTSantiago(nivelInteres.intValue());
	//									}
										
									}
								}
							}
						}
					}
				}
			}
			//finalizamos el bucle que recorre los precios PARA UNA CONDICION INTERÉS EN CONCRETO.
			/*aqui tenemos dos opciones:
			  - Que el dato de interés del tramo que estamos recorriendo esté en un nivel válido, es decir, que esté en un rango.
			  - Que no esté en un nivel, es decir, que no esté en ningún rango.
			 Si no está en ningún rango devolvemos un error.
			*/
			if (null == nivelInteres)
			{
				if(!UtilidadesTramitacion.isBlankOrNull(esBo) && esBo.equalsIgnoreCase(Constantes.CTE_SI_COMPROBACION_S)) {
					String nivelMaximoAutorizacion = UtilidadesTramitacion.obtenerValorParametroUnico(
			                "NIVELAUTRZ","NIVEL_BO");
					nivelInteres = new BigDecimal(nivelMaximoAutorizacion); 
				}
				else 
				{
					/*
					 * Mensajes de error cuando el precio introducido no está en rango:
					 *  - Cuando es un tramo fijo: El interés fijo introducido en el tramo {0} no está en rango.
					 *  - Cuando es un tramo variable normal: El diferencial introducido en el tramo {0} no está en rango.
					 *  - Cuando es un tramo variable no referenciado: El interés fijo introducido en el techo del tramo {0} no está en rango.
					 * 
					 * Descripción error CGDN: {0} tramo {1} no está en rango.
					 * 
					 * */
					if (CTE_TIPO_INTERES_FIJO == tipoInteres)
					{
						descripcionErrorFueraRangoTarifa = "El interés fijo introducido en el ";
					}
					else if (CTE_TIPO_INTERES_VARIABLE == tipoInteres)
					{
						descripcionErrorFueraRangoTarifa = "El diferencial introducido en el ";
					}
					else if (CTE_TIPO_INTERES_VARIABLE_NO_REFERENCIADO == tipoInteres)
					{
						descripcionErrorFueraRangoTarifa = "El interés fijo introducido en el techo del ";
					}
					ServicioNegocio.rollback(
						CodigosError.CTE_ERROR_PRECIO_TARIFA_FUERA_DE_RANGO,
						null,
						new String[] {descripcionErrorFueraRangoTarifa, condicionesInteres.getCondicionesInteresKey().getIntOrdenDelTramo().toString()},
						null);
				}
			}
			
			nivelInteresInt = new Integer(nivelInteres.intValue());
			
			//si no es nulo quiere decir que tenemos que actualizar el nivel correspondiente, que según el tipo de tramo será uno u otro.
			if (CTE_TIPO_INTERES_FIJO == tipoInteres)
			{
				//Actualizamos el nivel del interés fijo.
				condicionesInteres.setIntNivelInteres(nivelInteresInt);
			}
			else if (CTE_TIPO_INTERES_VARIABLE == tipoInteres)
			{
				//Actualizamos el nivel del diferencial.
				condicionesInteres.setIntNivelDif(nivelInteresInt);
			}
			else if (CTE_TIPO_INTERES_VARIABLE_NO_REFERENCIADO == tipoInteres)
			{
				//tramo variable no referenciado: actualizamos el nivel del techo.
				condicionesInteres.setIntNivelTecho(nivelInteresInt);
			}
			
			//finalmente reseteamos el nivel interés.
			nivelInteres = null;
		}
		//Las condiciones interés se persisten en el servicio principal, CondicionesInteresAltaSrv.
	}
		
	/**
	 * 
	 * Este método rebaja el nivel de autorización necesario para la red de Santiago
	 * 
	 * @param nivel
	 * @return nivel "rebajado"
	 * 
	 *  * 20161226: se comenta porque ahora se van a meter nuevas tarifas para toda España. Puede que en un futuro
	 * se vuelva sólo a implantar para Santiago y Madrid. 
	 * */
	
//	private static BigDecimal conversionNivelAutorizacionDTSantiago(Integer nivel)
//	{
//		
//		if ((nivel.intValue() == (Constantes.CTE_NIVEL_DIVISION) || (nivel.intValue() == (Constantes.CTE_NIVEL_DIR_GENERAL))))
//		{
//			nivel = Constantes.CTE_NIVEL_TERRITORIAL;
//		}
//		else if (nivel.intValue() == (Constantes.CTE_NIVEL_TERRITORIAL))
//		{
//			nivel = Constantes.CTE_NIVEL_ZONA;
//		}
//		
//		return new BigDecimal(nivel);
//	}
	
	
  /**
	 * Metodo que llama al servicio CGAL_307 (Consulta de centros). Si el centro a consutar pertenece a la red
	 * de DT Santiago, es decir, (campo CG057C051  (Codigo Comarca ) = 04), devuelve true.
	 * 
	 * @param nuc
	 * @return boolean (true = es oficina de la red de Santiago)
	 * 
	 * 
	 * 20161226: se comenta porque ahora se van a meter nuevas tarifas para toda España. Puede que en un futuro
	 * se vuelva sólo a implantar para Santiago y Madrid. 
	 * */
	
//	private static boolean esCentroSantiagoOMadrid(BigDecimal oficina)
//	{
//		boolean perteneceDTSantiago = false;
//		boolean pertenecePilotoMadrid = false;
//		boolean resultado = false;
//
//		 // invocación a CGAL_307 para saber si el centro es de la red de DTSantiago
//		 
//		 IDatosEntradaTx datosEntradaConsultaCentro = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),
//				Constantes.CTE_APLIC_CGAL, Constantes.CTE_CO_DATOS_CENTRO);
//			
//			datosEntradaConsultaCentro.addCampo(Constantes.CTE_CAMPO_CENTRO, oficina.toString());
//		
//			IContexto[] contextosCentro = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaCentro);
//
//			for (IContexto recupCodComarca : contextosCentro)
//			{
//				if (recupCodComarca.getString(Constantes.CTE_CAMPO_CGAL).equals(Constantes.CTE_CODIGO_COMARCA))
//				{
//					perteneceDTSantiago = true;
//				}
//				if (recupCodComarca.getString(Constantes.CTE_CAMPO_ZONA).equals(Constantes.CTE_CODIGO_ZONA_MADRID))
//				{
//					pertenecePilotoMadrid = true;
//				}
//			}
//		 
//
//		 if ((perteneceDTSantiago) || (pertenecePilotoMadrid))	// si es una de las dos comunidades devolvemos true.
//		 {
//			 resultado = true;
//		 }
//	
//		 return resultado;	
//	}
	
	
	public static List<CondicionesInteresC> buscarCondicionesInteres(Integer oficinaSolicitud,  
			Integer versionSolicitud, Integer nucExpediente){
		
		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("Inicio: Buscar condiciones de interés");
		}				
				
		CondicionesInteresEng dao = new CondicionesInteresEng(CTE_JNDI_DATASOURCE);
		List<CondicionesInteresC> lstCondicionesInteres = dao.buscarCondicionesInteres(oficinaSolicitud, versionSolicitud, nucExpediente);
		
		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("Fin: Buscar condiciones de interés");
		}
		
		return lstCondicionesInteres;
	}
}
