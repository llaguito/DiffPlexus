/**
 * Aplicacion de Activo
 * Novacaixagalicia © 2009-2010
 */
package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos;

import java.math.BigDecimal;
import java.util.List;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.comisiones.ComisionC;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.mensajes.Mensaje;
import es.caixagalicia.ifrt.core.ServicioNegocio;

/**
 * @author E800200 - Nacho Soto
 */
public final class ContextoComisiones {

    private static final String CTE_COMISIONES_ID_CTX = "ANPMN053";

    private static final String CTE_COMISIONES_OFICINA_SOLICITUD = "ANPMN053010";

    private static final String CTE_COMISIONES_NUMERO_SOLICITUD = "ANPMN053020";

    private static final String CTE_COMISIONES_VERSION_SOLICITUD = "ANPMN053030";

    private static final String CTE_COMISIONES_TIPO_COMISION = "ANPMN053040";

    private static final String CTE_COMISIONES_ORDEN = "ANPMN053050";

    private static final String CTE_COMISIONES_NUC_EXPEDIENTE = "ANPMN053060";

    private static final String CTE_COMISIONES_PORCENT_COMISION = "ANPMN053070";

    private static final String CTE_COMISIONES_NIVEL_PORCENT_COMISION = "ANPMN053080";

    private static final String CTE_COMISIONES_IMPORTE_MIN = "ANPMN053090";

    private static final String CTE_COMISIONES_NIVEL_IMPORTE_MIN = "ANPMN053100";

    private static final String CTE_COMISIONES_PLAZO = "ANPMN053110";

    private static final String CTE_COMISIONES_NIVEL_PLAZO = "ANPMN053120";

    private static final String CTE_COMISIONES_PORCENT_ADELANTO = "ANPMN053130";

    private static final String CTE_COMISIONES_NIVEL_PORCENT_ADELANTO = "ANPMN053140";

    private static final String CTE_COMISIONES_POSTPONER_PAGO = "ANPMN053150";

    private static final String CTE_COMISIONES_TIPO_PAGO = "ANPMN053160";

    private static final String CTE_COMISIONES_FECHA_PAGO = "ANPMN053170";

    private static final String CTE_COMISIONES_PLAZO_PAGO = "ANPMN053180";

    private static final String CTE_COMISIONES_UNIDAD_PLAZO_PAGO = "ANPMN053190";

    private static final String CTE_COMISIONES_PERIOD_NUM_PERIODOS_PAGO = "ANPMN053200";

    private static final String CTE_COMISIONES_PERIOD_UNIDAD_PERIODOS_PAGO = "ANPMN053210";

    private static final String CTE_COMISIONES_PERIOD_TIPO_PERIODO_PAGO = "ANPMN053220";

    private static final String CTE_COMISIONES_INDICADOR_CAPITALIZACION = "ANPMN053230";

    private static final String CTE_COMISIONES_CONDICIONES_PROMOTOR_ADQ = "ANPMN053240";

    private static final String CTE_COMISIONES_USUARIO = "ANPMN053250";

    // CONTEXTO DE ERROR, PARA RECOGER EXACTAMENTE EN LA VISTA PQ NO SE
    // HA PODIDO REALIZAR LO QUE SE QUERÍA
    private static final String CTE_ERROR_ID_CTX = "ANPMN004";

    private static final String CTE_ERROR_PROP_COD_ERROR = "ANPMN004010";

    private static final String CTE_ERROR_PROP_DESCRIPCION_ERROR = "ANPMN004020";

    /**
     * Constructor por defecto.
     */
    private ContextoComisiones() {
    }

    /**
     * @param comisiones. Comision que se devolverá como resultado
     * @return <code>IContexto[]</code>
     */
    public static IContexto[] rellenarDatosContexto(final ComisionC comisiones) {
        IContexto[] salida;
        salida = new IContexto[Constantes.CTE_UNO_INT.intValue()];
        IContexto datos = ContextoFactory.getInstance().getContexto(CTE_COMISIONES_ID_CTX);
        datos.put(CTE_COMISIONES_OFICINA_SOLICITUD, new BigDecimal(comisiones.getComisionesKey().getIntOficinaSolicitud()));
        datos.put(CTE_COMISIONES_NUMERO_SOLICITUD, new BigDecimal(comisiones.getComisionesKey().getIntNumeroSolicitud()));
        datos.put(CTE_COMISIONES_VERSION_SOLICITUD, new BigDecimal(comisiones.getComisionesKey().getIntVersionSolicitud().intValue()));
        datos.put(CTE_COMISIONES_TIPO_COMISION, comisiones.getComisionesKey().getStrTipoComision());
        datos.put(CTE_COMISIONES_ORDEN, new BigDecimal(comisiones.getComisionesKey().getIntOrden()));
        datos.put(CTE_COMISIONES_NUC_EXPEDIENTE, new BigDecimal(comisiones.getComisionesKey().getIntNucExpediente().intValue()));
        datos.put(CTE_COMISIONES_PORCENT_COMISION, comisiones.getBidNivelPorcentajeComision());
        datos.put(CTE_COMISIONES_NIVEL_PORCENT_COMISION, comisiones.getBidNivelPorcentajeComision());
        datos.put(CTE_COMISIONES_IMPORTE_MIN, comisiones.getBidImporteMinimo());
        datos.put(CTE_COMISIONES_NIVEL_IMPORTE_MIN, comisiones.getBidNivelImporteMinimo());
        datos.put(CTE_COMISIONES_PLAZO, comisiones.getBidPlazo());
        datos.put(CTE_COMISIONES_NIVEL_PLAZO, comisiones.getBidNivelPlazo());
        datos.put(CTE_COMISIONES_PORCENT_ADELANTO, comisiones.getBidPorcentajeAdelanto());
        datos.put(CTE_COMISIONES_NIVEL_PORCENT_ADELANTO, comisiones.getBidNivelPorcentajeAdelanto());
        datos.put(CTE_COMISIONES_POSTPONER_PAGO, comisiones.getBidPosponerPago());
        datos.put(CTE_COMISIONES_TIPO_PAGO, comisiones.getBidTipoPago());
        datos.put(CTE_COMISIONES_FECHA_PAGO, DateUtils.formatDate(comisiones.getDateFechaPago(), DateUtils.FORMATO_FECHA_CORTO));
        datos.put(CTE_COMISIONES_PLAZO_PAGO, comisiones.getBidPlazoPago());
        datos.put(CTE_COMISIONES_UNIDAD_PLAZO_PAGO, comisiones.getStrUnidadPlazoPago());
        datos.put(CTE_COMISIONES_PERIOD_NUM_PERIODOS_PAGO, comisiones.getBidPeriodicidadNumPeriodosPago());
        datos.put(CTE_COMISIONES_PERIOD_UNIDAD_PERIODOS_PAGO, comisiones.getStrPeriodicidadUnidadPeriodoPago());
        datos.put(CTE_COMISIONES_PERIOD_TIPO_PERIODO_PAGO, comisiones.getBidPeriodicidadTipoPeriodoPago());
        datos.put(CTE_COMISIONES_INDICADOR_CAPITALIZACION, comisiones.getBidIndCapitalizacionComDisponibilidad());
        datos.put(CTE_COMISIONES_CONDICIONES_PROMOTOR_ADQ, comisiones.getBidCondicionesDeAdquirenteOPromotor());
        datos.put(CTE_COMISIONES_USUARIO, comisiones.getStrUsuario());
        salida[Constantes.CTE_CERO.intValue()] = datos;
        return salida;
    }

    /**
     * @param comisiones
     * @param codError
     * @return
     */
    public static IContexto[] rellenarDatosContexto(final List<ComisionC> comisiones, Integer codError) {
        IContexto[] salida = null;
        if (comisiones != null && comisiones.size() > Constantes.CTE_CERO && codError.intValue() == Constantes.CTE_CERO.intValue()) {
            int i = Constantes.CTE_CERO;
            final int iSize = comisiones.size();
            salida = new IContexto[iSize];
            for (ComisionC comision : comisiones) {
                IContexto datos = ContextoFactory.getInstance().getContexto(CTE_COMISIONES_ID_CTX);
                datos.put(CTE_COMISIONES_OFICINA_SOLICITUD, new BigDecimal(comision.getComisionesKey().getIntOficinaSolicitud()));
                datos.put(CTE_COMISIONES_NUMERO_SOLICITUD, new BigDecimal(comision.getComisionesKey().getIntNumeroSolicitud()));
                datos.put(CTE_COMISIONES_VERSION_SOLICITUD, new BigDecimal(comision.getComisionesKey().getIntVersionSolicitud().intValue()));
                datos.put(CTE_COMISIONES_TIPO_COMISION, comision.getComisionesKey().getStrTipoComision());
                datos.put(CTE_COMISIONES_ORDEN, new BigDecimal(comision.getComisionesKey().getIntOrden()));
                datos.put(CTE_COMISIONES_NUC_EXPEDIENTE, new BigDecimal(comision.getComisionesKey().getIntNucExpediente().intValue()));
                datos.put(CTE_COMISIONES_PORCENT_COMISION, comision.getBidPorcentajeComision());
                datos.put(CTE_COMISIONES_NIVEL_PORCENT_COMISION, comision.getBidNivelPorcentajeComision());
                datos.put(CTE_COMISIONES_IMPORTE_MIN, comision.getBidImporteMinimo());
                datos.put(CTE_COMISIONES_NIVEL_IMPORTE_MIN, comision.getBidNivelImporteMinimo());
                datos.put(CTE_COMISIONES_PLAZO, comision.getBidPlazo());
                datos.put(CTE_COMISIONES_NIVEL_PLAZO, comision.getBidNivelPlazo());
                datos.put(CTE_COMISIONES_PORCENT_ADELANTO, comision.getBidPorcentajeAdelanto());
                datos.put(CTE_COMISIONES_NIVEL_PORCENT_ADELANTO, comision.getBidNivelPorcentajeAdelanto());
                datos.put(CTE_COMISIONES_POSTPONER_PAGO, comision.getBidPosponerPago());
                datos.put(CTE_COMISIONES_TIPO_PAGO, comision.getBidTipoPago());
                datos.put(CTE_COMISIONES_FECHA_PAGO, DateUtils.formatDate(comision.getDateFechaPago(), DateUtils.FORMATO_FECHA_CORTO));
                datos.put(CTE_COMISIONES_PLAZO_PAGO, comision.getBidPlazoPago());
                datos.put(CTE_COMISIONES_UNIDAD_PLAZO_PAGO, comision.getStrUnidadPlazoPago());
                datos.put(CTE_COMISIONES_PERIOD_NUM_PERIODOS_PAGO, comision.getBidPeriodicidadNumPeriodosPago());
                datos.put(CTE_COMISIONES_PERIOD_UNIDAD_PERIODOS_PAGO, comision.getStrPeriodicidadUnidadPeriodoPago());
                datos.put(CTE_COMISIONES_PERIOD_TIPO_PERIODO_PAGO, comision.getBidPeriodicidadTipoPeriodoPago());
                datos.put(CTE_COMISIONES_INDICADOR_CAPITALIZACION, comision.getBidIndCapitalizacionComDisponibilidad());
                datos.put(CTE_COMISIONES_CONDICIONES_PROMOTOR_ADQ, comision.getBidCondicionesDeAdquirenteOPromotor());
                datos.put(CTE_COMISIONES_USUARIO, comision.getStrUsuario());
                salida[i++] = datos;
            }
        } else {
            salida = new IContexto[1];
            IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ERROR_ID_CTX);
            datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(codError.intValue()));
            datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, new Mensaje(ServicioNegocio.getContexto(), ERROR_GUARDANDO_LISTA_COMISIONES_BD_1473088417).toString());
            salida[0] = datos;
        }
        return salida;
    }

    private static final String ERROR_GUARDANDO_LISTA_COMISIONES_BD_1473088417 = "ERROR_GUARDANDO_LISTA_COMISIONES_BD_1473088417";
}
