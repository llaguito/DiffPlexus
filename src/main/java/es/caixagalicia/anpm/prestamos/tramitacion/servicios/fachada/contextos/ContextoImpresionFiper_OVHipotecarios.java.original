package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import es.caixagalicia.anpm.prestamos.catalogo.persistencia.campanhas.CampanhaC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.clausulas.ParametrosC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.condCapital.ModalidadAmortizacionC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionCampanhas;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionClausulasRestringuidas;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionModalidadesAmortizacion;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.cuentas.DatosCuentasC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.diferencial.DifSegunPdClienteC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.gastosadic.GastosAdicionalesC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.gastosadic.GastosAdicionalesEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.ofertaVinculante.OfertaVinculanteC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.ofertaVinculante.OfertaVinculanteEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.ofertaVinculante.OfertaVinculanteKey;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.operatoriadocumentos.OperatoriaDocumentosOficinaC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionConsultaDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionConsultaTitularidad;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDiferencial;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionOperatoriaDocumentos;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionPreformalizacion;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionVersionBackOffice;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.CamposExtraOfertaVincVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.IConstantesSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.LengthConstants;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesImpresion;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.parametros.Configuracion;
import es.caixagalicia.ifrt.util.Helper;

/**
 * Contexto ANPMN103 que contiene los campos mapeados de la PMOS985
 * para la impresión de la FIPER 
 * @author G000895
 *
 */
public class ContextoImpresionFiper_OVHipotecarios{
	
	static BigDecimal cuotaInicial = null;		
	
	private static final String NOMBRE_CAMPO_OFICINA_SOLICITUD 	= "OFICINA_SOLICITUD"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_NUMERO_SOLICITUD	= "NUMERO_SOLICITUD";// OBLIGATORIO
	private static final String NOMBRE_CAMPO_VERSION_SOLICITUD 	= "VERSION_SOLICITUD"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_NUC_EXPEDIENTE 	= "NUC_EXPEDIENTE"; // OBLIGATORIO
	private static final String NOMBRE_CAMPO_PANTALLA_ORIGEN 	= "PANTALLA_ORIGEN";	
	private static final String NOMBRE_CAMPO_DIGITO_SOLICITUD 	= "DIGITO_SOLICITUD"; // OBLIGATORIO
	//private static final String NOMBRE_CAMPO_GUARDAR_IMPRESION 	= "GUARDAR_IMPRESION"; // OPCIONAL
	//private static final String NOMBRE_CAMPO_GUARDAR_COMO 		= "GUARDAR_COMO"; // OPCIONAL	
	//private static final String NOMBRE_CAMPO_SRV_SERVICIO_ORIGEN 	= "SERVICIO_ORIGEN";
	
	//private static final String RESTO_PERIODOS = "TIPO REF + MARGEN";

	private static final String CAMPO_CTXTO_SOL_DIGITO 			= "ANPMN050070";
	
	private static final Integer ID_CODOP_CONSULTA_AMORTIZACION = Integer.valueOf(266);
	
	private static final String MONEDA_EUROS = "EUR";
	
	public static final int	PASO_DOC_FIPER = 1;
	public static final int	PASO_DOC_OV_HIPOTECARIOS = 2;
	
	private static final String CONCEPTO_IMPUESTO_AJD = "005";
	
	private static final String CTE_PLANTILLA_ENVIO_CORREO_OVH = "ALERT13";
	
	/** Literales */
	private static final String ETIQUETA_SI = "S";
	private static final String ETIQUETA_NO = "N";
	//private static final int ETIQUETA_TIPO_REFERENCIA_LIBOR = 6; //(1-Euribor 12 meses, 2-ICO vivienda, 3-Euribor Mºvivienda, 4-TMPPHVCE, 5-Empleados, 6- LIBOR)
	
	/** Literales para la marca N/E */
	private static final String ETIQUETA_NOVA_GALICIA_BANCO = "N";
	
	private static final String ETIQUETA_PRESTAMO = "P";
	
	/** Literales para el tipo de prestamo */
	private static final String ETIQUETA_CAPITAL_CTES			= "capital constantes";
	private static final String ETIQUETA_CAPITAL_CREC 			= "capital crecientes";
	private static final String ETIQUETA_INTERES_DECREC 		= " y de intereses decrecientes";
	private static final String ETIQUETA_INTERES_DECREC_CERO 	= " a partir del ";
	private static final String ETIQUETA_INTERES_DECREC_MES 	= "º mes";
	
	/** Literales para el tipo de interés */
	private static final String ETIQUETA_INTERES_FIJO 			= "F";
	private static final String ETIQUETA_INTERES_VARIABLE 		= "V";
	private static final String ETIQUETA_INTERES_FIJO_TEXTO 	= "Fijo";
	private static final String ETIQUETA_INTERES_VARIABLE_TEXTO = "Variable";
	//private static final String ETIQUETA_INTERES_VARIABLE_LIMITADO = "Variable limitado";	
	//private static final String ETIQUETA_CLASE_INT_HIPOT_VAR_BONIF = "Fijo durante los 12 primeros meses, variable resto del plazo de duración.";
	
	/** Literales para el cuadro de amortizacion */
	private static final String ETIQUETA_TEXTO_ANHO ="Año";
	private static final String ETIQUETA_TEXTO_MES ="Mes";
		
	private static final int CTE_COD_ERROR_NO_HAY_DIFERENCIALES_AN83 = 99999;
	
	private static boolean esEntornoAbanca 	= UtilidadesTramitacion.esEntornoAbanca();
	private static boolean esEntornoEvo 	= UtilidadesTramitacion.esEntornoEvo();
	
	private static final String CTE_PARAM_CONF_APLICACION_CORREOOVH = "ANPM";
	private static final String CTE_PARAM_CONF_AGRUPACION_CORREOOVH	= "LLAMADAMETODO";
	private static final String CTE_PARAM_CONF_NOMBRE_CORREOOVH 	= "CORREOOVH";
	
	private static final BigDecimal CTE_ID_CONCEPTO_SEGURO_VIDA 						= new BigDecimal(9);
	private static final BigDecimal CTE_ID_CONCEPTO_SEGURO_PROTECCION_PAGOS_PRIMA_UNICA = new BigDecimal(16);
	private static final BigDecimal CTE_ID_CONCEPTO_RENOVACION_ANUAL_PAGOS_PROTEGIDOS 	= new BigDecimal(17);
	private static final BigDecimal CTE_ID_CONCEPTO_NOTARIA 							= new BigDecimal(18);
	private static final BigDecimal CTE_ID_CONCEPTO_SEGURO_VIDA_PRIMA_UNICA 			= new BigDecimal(14);
	private static final BigDecimal CTE_ID_CONCEPTO_RENOVACION_SEGURO_VIDA				= new BigDecimal(15);
	
	// IDs de los contextos que se esperan recibir	
	private static final String ID_CTX_DATOS_PRODUCTO			= "ANPMN001";
	private static final String ID_CTX_DATOS_SUBPRODUCTO 		= "ANPMN002";
	private static final String ID_CTX_CONDICIONES_CAPITALES	= "ANPMN051";
	private static final String ID_CTX_INTERESES 				= "ANPMN052";
	private static final String ID_CTX_COMISIONES 				= "ANPMN053";
	private static final String ID_CTX_TRATAMIENTOS_ADELANTOS 	= "ANPMN054";
	private static final String ID_CTX_CLIENTES 				= "MEFCN000";
	private static final String ID_CTX_PROGRAMA_AMORTIZACION	= "ANPMN075";
	
	//Contexto ANPMN50: datos solicitud
	private static final String ID_CTX_DATOS_SOLICITUD 			= "ANPMN050";	
	private static final String CTX_SOLICITUD_OFICINA 			= "ANPMN050010";
	private static final String CTX_SOLICITUD_NUMERO 			= "ANPMN050020";
	private static final String CTX_SOLICITUD_VERSION 			= "ANPMN050030";
	private static final String CTX_SOLICITUD_NUC				= "ANPMN050040";
	private static final String CTX_SOLICITUD_COD_PROD 			= "ANPMN050080";
	private static final String CTX_SOLICITUD_COD_SUBPROD 		= "ANPMN050090";	
	private static final String CTX_SOLICITUD_VERSION_GENERAL	= "ANPMN050100"; 
	private static final String CTX_SOLICITUD_ESPECIALIDAD		= "ANPMN050120";
	private static final String CTX_SOLICITUD_OFICINA_CONTABLE	= "ANPMN050170";
	private static final String CTX_SOLICITUD_PLAZO 			= "ANPMN050710";
	private static final String CTX_SOLICITUD_UNIDAD_PLAZO		= "ANPMN050730";	
	private static final String CTX_SOLICITUD_TARIFA			= "ANPMN050886"; 	
	private static final String CTX_SOLICITUD_FECHA_SOLIC 		= "ANPMN050915";
	private static final String CTX_SOLICITUD_SUBROGACION       = "ANPMN050380"; 
	private static final String CTX_SOLICITUD_IMP_COM_CANCELACION = "ANPMN050968";
	private static final String CTX_SOLICITUD_TIPO_EXPEDIENTE	= "ANPMN050270";
	
	//Contexto ANPMN049: datos solicitud 2
	private static final String ID_CTX_DATOS_SOLICITUD_2 		= "ANPMN049";	
	

	//Contexto ANPMN103:contexto para FIPER y OV para hipotecarios
	private static final String ID_CTX 							= "ANPMN103";
	private static final String ID_PROP_FECHA_DIA 				= "ANPMN103010";
	private static final String ID_PROP_FECHA_VALIDEZ_DOC 		= "ANPMN103020";
	private static final String ID_PROP_MARCA_NE 				= "ANPMN103030";
	private static final String ID_PROP_NUMERO_POLIZA 			= "ANPMN103040";
	private static final String ID_PROP_IMPORTE_PRESTAMO 		= "ANPMN103050";
	private static final String ID_PROP_IMPORTE_SOLICITADO 		= "ANPMN103051";
	private static final String ID_PROP_MONEDA_PRESTAMO 		= "ANPMN103060";
	private static final String ID_PROP_PLAZO 					= "ANPMN103070";
	private static final String ID_PROP_TIPO_PRESTAMO 			= "ANPMN103080";
	private static final String ID_PROP_CLASE_INTERES 			= "ANPMN103090";
	private static final String ID_PROP_FIJO_VBLE 				= "ANPMN103100";
	private static final String ID_PROP_IMPORTE_TOTAL 			= "ANPMN103110";
	private static final String ID_PROP_SUELO 					= "ANPMN103120";
	private static final String ID_PROP_TECHO 					= "ANPMN103130";
	private static final String ID_PROP_IND_SUELO_TECHO 		= "ANPMN103140";
	private static final String ID_PROP_TABLA_COBERTURAS 		= "ANPMN103150"; //PENDIENTE
	private static final String ID_PROP_PERIODICIDAD_REEMB 		= "ANPMN103160";
	private static final String ID_PROP_P_PRESTAMO 				= "ANPMN103170";
	private static final String ID_PROP_MODALIDAD_AMORTIZACION 	= "ANPMN103180";	
	private static final String ID_PROP_TAE 					= "ANPMN103190";
	private static final String ID_PROP_TIPO_INTERES 			= "ANPMN103200";
	private static final String ID_PROP_GASTOS_ESTUDIO 			= "ANPMN103210";
	private static final String ID_PROP_COMISION_APERTURA 		= "ANPMN103220";
	private static final String ID_PROP_REFERENCIA 				= "ANPMN103230";
	private static final String ID_PROP_DIFERENCIAL 			= "ANPMN103240";
	private static final String ID_PROP_MESES_INTERES_INICIAL 	= "ANPMN103250";
	private static final String ID_PROP_DESC_REFERENCIA 		= "ANPMN103260";
	private static final String ID_PROP_MIN_GASTOS_ESTUDIO 		= "ANPMN103270";
	private static final String ID_PROP_MIN_COMISION_APERTURA 	= "ANPMN103280";
	private static final String ID_PROP_PORCTJ_REF_ACTUAL 		= "ANPMN103290";
	private static final String ID_PROP_PORCTJ_GASTOS_ESTUDIO 	= "ANPMN103300";
	private static final String ID_PROP_PORCTJ_COMISION_APERTURA= "ANPMN103310";
	private static final String ID_PROP_TEXTO_TIPO_REFERENCIA 	= "ANPMN103320";
	private static final String ID_PROP_INTERES_DEMORA 			= "ANPMN103330";
	private static final String ID_PROP_NUMERO_PAGOS 			= "ANPMN103340";
	private static final String ID_PROP_HIPOTECA_BLINDADA 		= "ANPMN103350";
	private static final String ID_PROP_CARENCIA_MESES 			= "ANPMN103360";
	private static final String ID_PROP_CUOTA_INICIAL 			= "ANPMN103370";
	private static final String ID_PROP_VARIACION_REFERENCIA 	= "ANPMN103380";
	private static final String ID_PROP_MAXIMO_REFERENCIA 		= "ANPMN103390";
	private static final String ID_PROP_FECHA_MAXIMO 			= "ANPMN103400";
	private static final String ID_PROP_CUOTA_MAXIMA 			= "ANPMN103410";
	private static final String ID_PROP_MINIMO_REFERENCIA 		= "ANPMN103420";
	private static final String ID_PROP_CUOTA_MINIMA 			= "ANPMN103430";
	private static final String ID_PROP_FECHA_MINIMO 			= "ANPMN103440";
	private static final String ID_PROP_PERIODO_REV_INTER_TEXTO = "ANPMN103450";
	private static final String ID_PROP_IND_VARIAC_REF 			= "ANPMN103460";
	private static final String ID_PROP_PERIODO_REV_INTER 		= "ANPMN103470";
	private static final String ID_PROP_FECHA_CIERRE_INIC 		= "ANPMN103480";
	private static final String ID_PROP_MEDIA_REFERENCIA 		= "ANPMN103490";
	private static final String ID_PROP_CUOTA_MEDIA 			= "ANPMN103500";
	private static final String ID_PROP_CUOTA_SUELO 			= "ANPMN103510";
	private static final String ID_PROP_CUOTA_TECHO 			= "ANPMN103520";
	private static final String ID_PROP_FEC_CAMBIO_INTS			= "ANPMN103530";
	private static final String ID_PROP_IND_FECHA_CIERRE 		= "ANPMN103540";
	private static final String ID_PROP_CUOTA_FIN_CARENCIA 		= "ANPMN103550";
	private static final String ID_PROP_CUOTA_CTE 				= "ANPMN103560";
	private static final String ID_PROP_CAPITAL_APLAZADO 		= "ANPMN103570";
	private static final String ID_PROP_NUMERO_PAGOS_TOTAL	 	= "ANPMN103580";
	private static final String ID_PROP_NUMERO_ANHOS 			= "ANPMN103590";
	private static final String ID_PROP_TOTAL_CAPITAL 			= "ANPMN103600";
	private static final String ID_PROP_TOTAL_INTERES 			= "ANPMN103610";
	private static final String PORCENTAJE_AJD 					= "ANPMN103611";
	private static final String IDENTIFICADOR_TARIFA 			= "ANPMN103612";
	private static final String DESCRIPCION_TARIFA 				= "ANPMN103613";
	private static final String INTERESES_MAS_GASTOS 			= "ANPMN103614";
	private static final String IMPORTE_REEMBOL_EURO 			= "ANPMN103615";
	private static final String VALOR_INTERES_SEGUNDO_TRAMO 	= "ANPMN103616";
	private static final String CTE_DAT_INT_INICIAL_MAYOR_SUCESIVO = "ANPMN103617";
	private static final String ID_PROP_TOTAL_CUOTA 			= "ANPMN103620";
	private static final String IMPORTE_SEGURO_VIDA 			= "ANPMN103627";
	private static final String ID_PROP_MODALIDAD 				= "ANPMN103630";
	private static final String INDICADOR_PARRILLA 				= "ANPMN103637";
	private static final String IMP_SEGURO_PROTECCION_PAGOS_PRIMA_UNICA = "ANPMN103638";
	private static final String IMP_RENOVACION_ANUAL_PAGOS_PROTEGIDOS = "ANPMN103639";
	private static final String ID_PROP_MODELO_POLIZA 			= "ANPMN103640";
	private static final String ID_PROP_COMUNIDAD_BIENES 		= "ANPMN103649";
	private static final String ID_PROP_VERSION_POLIZA 			= "ANPMN103650";
	/** MATRIZ PRODUCTOS */
	//private static final String ID_REG_PRODUCTO = "ANPMN103850";  //PENDIENTE
	//private static final String ID_PROP_DESC_PRODUCTO = "ANPMN103851"; //PENDIENTE
	//private static final String ID_PROP_OBLIGATORIO = "ANPMN103852"; //PENDIENTE
	private static final String ID_PROP_APLICA_MEDIDA_SOLCHAGA	= "ANPMN103659";
	private static final String ID_PROP_NUMERO_PRODUCTOS 		= "ANPMN103660";
	private static final String ID_PROP_IND_CAPITAL_NEGATIVO 	= "ANPMN103669";
	private static final String ID_PROP_DESC_MODALIDAD 			= "ANPMN103670";
	private static final String ID_PROP_SUBROGACION 			= "ANPMN103680";
	private static final String ID_PROP_AMORT_PARCIAL_MENOR_5 	= "ANPMN103690";
	private static final String ID_PROP_PORCENTAJE 				= "ANPMN103981";
	private static final String ID_PROP_IMPORTE_MINIMO 			= "ANPMN103982";
	private static final String ID_PROP_AMORT_PARCIAL_MAYOR_5 	= "ANPMN103700";
	private static final String ID_PROP_NO_SUBROGATORIO_MENOR_5 = "ANPMN103710";
	private static final String ID_PROP_NO_SUBROGATORIO_MAYOR_5 = "ANPMN103720";
	private static final String ID_PROP_SUBROGATORIO_MENOR_5 	= "ANPMN103730";
	private static final String ID_PROP_SUBROGATORIO_MAYOR_5 	= "ANPMN103740";
	private static final String ID_PROP_IND_AMORT_ANTICIPADA 	= "ANPMN103750";
	private static final String ID_PROP_IMP_MIN_ADELANT 		= "ANPMN103760";
	private static final String ID_PROP_IND_UNA_O_MAS_CUOTAS 	= "ANPMN103770";
	private static final String VALOR_INTERES_TERCER_TRAMO 		= "ANPMN103776";	
	private static final String COLECTIVO	 					= "ANPMN103777";
	private static final String NUMERO_DE_TRAMOS 				= "ANPMN103778";	
	private static final String ID_PROP_COMIS_MOD_CONTR 		= "ANPMN103780";
	private static final String CONTINENTE 						= "ANPMN103779";
	private static final String CONTENIDO 						= "ANPMN103781";
	private static final String IND_PRINCIPAL_DISTINTO_SALDO 	= "ANPMN103782";
	private static final String RESPONSABILIDAD_HIPOTECARIA 	= "ANPMN103783";
	private static final String IMPORTE_REGISTRAL 				= "ANPMN103784";
	private static final String ID_PROP_IMPORTE_AMPLIADO 		= "ANPMN103785";
	private static final String INDICADOR_DEPOSITO		 		= "ANPMN103786";
	private static final String IMPORTE_NOTARIA 				= "ANPMN103787";
	private static final String IMPORTE_SEGURO_VIDA_PRIMA_UNICA = "ANPMN103788";
	private static final String IMPORTE_RENOVACION_SEGURO_VIDA 	= "ANPMN103789";


	private static final String ID_PROP_COMIS_NOVACION 			= "ANPMN103790";
	private static final String ID_PROP_COMIS_RECLAMACION 		= "ANPMN103800";
	private static final String ID_PROP_GASTOS_NOTARIA 			= "ANPMN103810"; //PENDIENTE
	private static final String ID_PROP_GASTOS_REGISTRO 		= "ANPMN103820"; //PENDIENTE
	private static final String ID_PROP_GASTOS_SEGUROS 			= "ANPMN103830"; //PENDIENTE
	private static final String ID_PROP_GASTOS_GESTION 			= "ANPMN103840"; //PENDIENTE
	private static final String ID_REG_AMORTIZACIONES 			= "ANPMN103860";
	private static final String ID_PROP_CAPITAL 				= "ANPMN103861";
	private static final String ID_PROP_INTERES 				= "ANPMN103862";
	private static final String ID_PROP_CUOTA 					= "ANPMN103863";
	private static final String ID_PROP_CAPITAL_PENDIENTE 		= "ANPMN103864";
	private static final String ID_PROP_NUMERO_MES 				= "ANPMN103865";
	private static final String ID_PROP_TEXTO_PERIODO			= "ANPMN103866";
	/** MATRIZ SUBTOTALES ANHO */
	private static final String ID_REG_SUBTOTALES_ANHO 			= "ANPMN103870";
	private static final String ID_PROP_SUBTOTALES_CAPITAL 		= "ANPMN103871";
	private static final String ID_PROP_SUBTOTALES_INTERES 		= "ANPMN103872";
	private static final String ID_PROP_SUBTOTALES_CUOTA 		= "ANPMN103873";
	private static final String ID_PROP_SUBTOTALES_NUMERO_ANHO 	= "ANPMN103874";
	private static final String ID_PROP_SUBTOTALES_TEXTO_ANHO 	= "ANPMN103875";
	private static final String ID_PROP_SUBTOTALES_CAPITAL_PDTE = "ANPMN103876";
	/** MATRIZ TITULARES */
	private static final String ID_REG_TITULARES 				= "ANPMN103880";
	private static final String ID_PROP_NOMBRE_TITULAR 			= "ANPMN103881";
	private static final String ID_PROP_DOC_TITULAR 			= "ANPMN103882";
	/** MATRIZ FIADORES */
	private static final String ID_REG_FIADORES 				= "ANPMN103890";
	private static final String ID_PROP_NOMBRE_FIADOR 			= "ANPMN103891";
	private static final String ID_PROP_DOC_FIADOR 				= "ANPMN103892";
	private static final String ID_DIF_RANGO_PRIMERO 			= "ANPMN103910";
	private static final String ID_DIF_RANGO_SEGUNDO 			= "ANPMN103911";
	private static final String ID_DIF_RANGO_TERCERO 			= "ANPMN103912";
	private static final String ID_DIF_RANGO_CUARTO 			= "ANPMN103913";
	private static final String ID_DIF_BONIF_RANGO_PRIMERO 		= "ANPMN103920";
	private static final String ID_DIF_BONIF_RANGO_SEGUNDO 		= "ANPMN103921";
	private static final String ID_DIF_BONIF_RANGO_TERCERO 		= "ANPMN103922";
	private static final String ID_DIF_BONIF_RANGO_CUARTO 		= "ANPMN103923";
	private static final String ID_TAE_BONIFICADA 				= "ANPMN103940";
	//private static final String ID_DESCR_PRODUCTO 			= "ANPMN103941"; //se elimina porque ya existe, es el ANPMN103670
	private static final String ID_COD_SUBPRODUCTO 				= "ANPMN103942";
	private static final String ID_DESCR_SUBPRODUCTO 			= "ANPMN103943";
	private static final String ID_IND_TIENE_APLAZ 				= "ANPMN103944";
	private static final String ID_INCR_DURANTE_APLAZ 			= "ANPMN103945";
	private static final String ID_MATRIZ_GASTOS_ADIC 			= "ANPMN103950";
	private static final String ID_MATRIZ_GASTOS_ADIC_ID_CONCEPTO = "ANPMN103951";
	private static final String ID_MATRIZ_GASTOS_ADIC_DESCR_CONCEPTO= "ANPMN103952";
	private static final String ID_MATRIZ_GASTOS_ADIC_IMP_CONCEPTO 	= "ANPMN103953";
	private static final String CAMPO_CTXTO_SOL_CLIENTE_CARTERIZADO = "ANPMN103960";	
	private static final String CAMPO_CTXTO_SOL_FECHA_FORMALIZACION = "ANPMN103970";
	private static final String CAMPO_CTX_SOL_CONSUMIDOR_SN 	= "ANPMN103980";
	private static final String ID_PROP_NUC_EXP				= "ANPMN103799";
	
	//Log de la clase.
	private static final LogHelper LOGGER = LogHelper.getLog(ContextoImpresionFiper_OVHipotecarios.class);
	
	
	private ContextoImpresionFiper_OVHipotecarios(){
		super();
	}
	
	/**
	 * 
	 * @param aContextoSalida Recibe un array de contextos con los datos de la solicitud, comisiones, 
	 * @param paso Indica el tipo de documento a imprimir
	 * @param modelo Indica el modelo de documento que se pretende imprimir
	 * @return contexto de impresión
	 */
	public static IContexto[] rellenarDatosContexto(IContexto [] aContextos, int paso, Integer modelo){
		
		BigDecimal oficinaTramitadora = null;
		//OperatoriaDocumentosOficinaC operatoriaDocumento = null;
		//BigDecimal plazoFechaValidezFiper = null;
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarDatosContexto");	
		}
		
		IContexto[] aContextoSalida = new IContexto[1];
		
		IContexto contextoImpresion = ContextoFactory.getInstance().getContexto(ID_CTX);
		
		final IContexto ctxtoSolicitud = UtilidadesTramitacion.getContexto(aContextos, ID_CTX_DATOS_SOLICITUD);
		final IContexto ctxtoSolicitud2 = UtilidadesTramitacion.getContexto(aContextos, ID_CTX_DATOS_SOLICITUD_2);
		final IContexto ctxtoProducto = UtilidadesTramitacion.getContexto(aContextos, ID_CTX_DATOS_PRODUCTO);
		final IContexto ctxtoSubproducto = UtilidadesTramitacion.getContexto(aContextos, ID_CTX_DATOS_SUBPRODUCTO);
		
		/*20150701*/
		final IContexto ctxtoPrograma = UtilidadesTramitacion.getContexto(aContextos, ID_CTX_PROGRAMA_AMORTIZACION);
		final IContexto aCtxtoTratamientoAdelantos = UtilidadesTramitacion.getContexto(aContextos, ID_CTX_TRATAMIENTOS_ADELANTOS);
		
		/*20150804 Obtenemos la oficina contable para buscar en la operatoria de documentos para la FIPER, si existe pillamos el plazo.
		 * La fecha de validez de la FIPER serán el día de hoy sumado al plazo en días hábiles.
		 * */
		oficinaTramitadora = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA_CONTABLE);
		String fechaMaximaValidez = null;
		GestionOperatoriaDocumentos.obtenerOperatoriaActual(Constantes.CTE_TIPO_DOCUMENTO_FIPER, oficinaTramitadora);
		
		final  IContexto[] aCtxtoIntereses = getArrayContexto(ID_CTX_INTERESES, aContextos);	
		final boolean bolPrestamoFijo = isPrestamoFijo(aCtxtoIntereses);
		String consumidor = new String();
		if(UtilidadesTramitacion.esDivisaPorEspecialidad(ctxtoSolicitud.getString(CTX_SOLICITUD_ESPECIALIDAD))) {
			if(esEntornoAbanca && UtilidadesTramitacion.comprobarControlOperatoria(ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUC),new BigDecimal(150003),false)) {
				//consumidor = UtilidadesImpresion.esConsumidor(ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud));
				consumidor = UtilidadesTramitacion.esConsumidorNoIlog(ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUC));
			}
		}
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoSolicitud");	
		}
		
		if(UtilidadesTramitacion.isBlankOrNull(modelo)){
			ServicioNegocio.rollback(CodigosError.ERROR_IMPRESION_MODELO_DOC.intValue(), null, null, null);
		}
		else{
			contextoImpresion.put(ID_PROP_NUMERO_POLIZA, ""+modelo.intValue());
		}
		
		final BigDecimal bidNucExp = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUC);
		if (null != bidNucExp)
		{
			contextoImpresion.put(ID_PROP_NUC_EXP, bidNucExp);
		}		
		
		Date hoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());
		contextoImpresion.put(ID_PROP_FECHA_DIA, DateUtils.formatDate(hoy, DateUtils.FORMATO_FECHA_CORTO));
		
		fechaMaximaValidez = obtenerFechaMaximaValidez(paso, ctxtoSolicitud);
		
		contextoImpresion.put(ID_PROP_FECHA_VALIDEZ_DOC, fechaMaximaValidez);
		

		
		contextoImpresion.put(ID_PROP_MARCA_NE, ETIQUETA_NOVA_GALICIA_BANCO);
//		contextoImpresion.put(ID_PROP_TEXTO_TIPO_REFERENCIA, new BigDecimal(ETIQUETA_TIPO_REFERENCIA_LIBOR));
//		contextoImpresion.put(ID_PROP_HIPOTECA_BLINDADA, ETIQUETA_NO);
		contextoImpresion.put(ID_PROP_IND_VARIAC_REF, ETIQUETA_SI);
		
		rellenarImpresionConCntxtoSolicitud(ctxtoSolicitud, ctxtoProducto, ctxtoSubproducto, contextoImpresion);
		if (esEntornoAbanca){
			rellenarImpresionConGastosAdicionales(ctxtoSolicitud, contextoImpresion);
		}
		
		//en las subrogaciones de otra entidad al importe de la comisión de apertura 
		//se le suma el importe de los gastos de cancelación de la otra entidad 
		BigDecimal bidImpComCancelacion = BigDecimal.ZERO;
		
		if (0 == Constantes.CTE_SUBROGACION_OTRA_ENTIDAD.compareTo(ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_SUBROGACION)))
		{
			bidImpComCancelacion = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_IMP_COM_CANCELACION);
		}
		BigDecimal tipoExpediente = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_TIPO_EXPEDIENTE);
		
		rellenarImpresionConCntxtoComisiones(getArrayContexto(ID_CTX_COMISIONES, aContextos), contextoImpresion, bidImpComCancelacion,tipoExpediente);  
		
		rellenarImpresionConCntxtoClientesTitulares(getArrayContexto(ID_CTX_CLIENTES, aContextos), contextoImpresion, Boolean.FALSE);
		rellenarImpresionConCntxtoClientesAvalistas(getArrayContexto(ID_CTX_CLIENTES, aContextos), contextoImpresion);
		rellenarImpresionConCntxtoInteres(aCtxtoIntereses, contextoImpresion, bolPrestamoFijo, ctxtoSolicitud);
		
		UtilidadesImpresion.rellenarPlazosSegundoTramo(
													contextoImpresion, 
													aCtxtoIntereses,
													"ANPMN103774",
													"ANPMN103775");
		
		
		//20150930 Se guarda la cuota del segundo tramo ANTES de totalizar la matriz de pagos en el contexto de impresión porque tambien
		//sobreescribe la matriz de pagos del contexto original ANPMN075.
		/* 6. La primera cuota del segundo tramo de interés. Hay que añadir un campo con el valor de la primera cuota de interés del segundo tramo. 
		 * 
		 * Para ello tenemos que obtener el plazo del primer tramo de interés  (campo ANPMN103250) y del contexto ANPMN075 coger el campo ANPMN075144
		 * del elemento de la matriz de la posición del plazo del interés inicial +1
		 *  
		 * Es decir si tenemos un préstamo con 12 meses de periodo inicial, tenemos que coger la cuota del interés del periodo 13.
		 */

		BigDecimal numeroTramos = BigDecimal.ZERO;
		
		if(null != aCtxtoIntereses){
			for(IContexto interes : aCtxtoIntereses){
				if(0 > numeroTramos.compareTo(interes.getBigDecimal("ANPMN052040"))){
					numeroTramos = interes.getBigDecimal("ANPMN052040");
				}
			}
			
			contextoImpresion.put(NUMERO_DE_TRAMOS, numeroTramos);
		}
		
		// 2017-02-15- Rellenar interes segundo tramo solo si hay segundo tramo
		if ((null != aCtxtoIntereses) && (aCtxtoIntereses.length > 1)){
			BigDecimal primerPlazo = contextoImpresion.getBigDecimal("ANPMN103250"); //  lo que nos dará el tramo --> meses interes inicial
			
			//Como en el primer pago del primer plazo se divide en dos (en algunos casos), se ha decidido sumar una posición al valor a recuperar 
			//ya que si el primer pago se desdobla, hace falta la posición que le sumamos; en caso de que no se desdoble el siguiente valor 
			//(Ej.: en caso de ser un plazo de 12 meses debería recuperar el mes 13 -> la posición 14 tendría un valor que también nos valdría)
			BigDecimal primerPlazoPosicion = primerPlazo.add(new BigDecimal(1));
			IRegistro[] matrizPagos =  ctxtoPrograma.getRegistro("ANPMN075140");
			// en este caso ya no se le suma la posición para que apunte al resgistro siguiente porque la matriz comienza en 0
			BigDecimal cuotaSegundoTramo = matrizPagos[primerPlazoPosicion.intValue()].getBigDecimal("ANPMN075145"); // 201501001 cambio de campo a mostrar
			contextoImpresion.put(VALOR_INTERES_SEGUNDO_TRAMO, cuotaSegundoTramo);
			
			// En el caso en que exista el tercer tramo también se informa de la 3ª cuota
			BigDecimal segundoPlazo = contextoImpresion.getBigDecimal("ANPMN103775");
			if(3 == numeroTramos.intValue()
			&& null != segundoPlazo
			&& matrizPagos.length - 1 > segundoPlazo.intValue())
			{
				BigDecimal cuotaTercerTramo = matrizPagos[segundoPlazo.intValue()].getBigDecimal("ANPMN075145");
				contextoImpresion.put(VALOR_INTERES_TERCER_TRAMO, cuotaTercerTramo);
			}
		}
		
		if(null != ctxtoSolicitud.getBigDecimal("ANPMN050893")){
			contextoImpresion.put(COLECTIVO, ctxtoSolicitud.getBigDecimal("ANPMN050893"));
		}
		
		if(null != ctxtoSolicitud.getBigDecimal("ANPMN050924") && null != ctxtoSolicitud.getBigDecimal("ANPMN050934")){
			contextoImpresion.put(CONTINENTE, ctxtoSolicitud.getBigDecimal("ANPMN050924"));
			contextoImpresion.put(CONTENIDO, ctxtoSolicitud.getBigDecimal("ANPMN050934"));
		}
		
		contextoImpresion.put(IND_PRINCIPAL_DISTINTO_SALDO, Constantes.NO);
		
		BigDecimal importeRegistral = BigDecimal.ZERO;
		importeRegistral = UtilidadesImpresion.obtenerImporteRegistral(ctxtoSolicitud,ctxtoSolicitud2);
		contextoImpresion.put(IMPORTE_REGISTRAL,importeRegistral);
		
		
		String deposito = ctxtoSolicitud.getString("ANPMN050740");
		if (deposito.compareTo("0")==0){
			contextoImpresion.put(INDICADOR_DEPOSITO, Constantes.NO);
		}
		else{
			contextoImpresion.put(INDICADOR_DEPOSITO, Constantes.SI);
		}
			
		/*20140616 CAMBIO PROVISIONAL*/
		/*Rellena el contexto ANPMN103 con datos del contexto del cuadro amortización ANPMN075*/
		rellenarImpresionConCntxtoPrograma(
						ctxtoPrograma,
						ctxtoSolicitud, 
						contextoImpresion, 
						!bolPrestamoFijo);
		
		/*Segunda llamada al servicio de cuadro amortizacion, ANPM_266 -> ANPMR203 -> ANPMR003*/
		/*20150407 Tambien se llama si estamos en EVO*/
		if((UtilidadesTramitacion.esBonificable(aCtxtoIntereses)) || (esEntornoEvo)){
			rellenarImpresionConTaeBonificada(contextoImpresion, ctxtoSolicitud);
		}
		
		
		// La llamada a esta función debe ir después de la llamada a rellenarImpresionConCntxtoPrograma para poder recuperar algunos
		// de los datos calculados en el método anterior
		rellenarImpresionConCntxtoCondicionesCapital(
						UtilidadesTramitacion.getContexto(aContextos, ID_CTX_CONDICIONES_CAPITALES), 
						contextoImpresion,
						!bolPrestamoFijo);
		
		if (null != UtilidadesTramitacion.getContexto(aContextos, ID_CTX_TRATAMIENTOS_ADELANTOS)){
			rellenarImpresionConCntxtoAdelantos(UtilidadesTramitacion.getContexto(aContextos, ID_CTX_TRATAMIENTOS_ADELANTOS), contextoImpresion);
		}
		/**
		 * Comprobamos si es consumidor o no consumidor y le enviamos los correspondientes datos
		 */
		rellenarImpresionConsumidorNoConsumidor(contextoImpresion, consumidor);
		
		/*Si estamos en entorno EVO y el codigo producto es 5990*/
		if ((esEntornoEvo) &&
			(Constantes.CTE_COD_PROD_HIPOT_INTEL_EVO.equals(ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_COD_PROD)))){
			//BigDecimal interesInicial = contextoImpresion.getBigDecimal(ID_PROP_TIPO_INTERES);
			
			contextoImpresion = obtenerDiferenciales(contextoImpresion, ctxtoSolicitud);
		}	
		
		//20150929 Llamada al método que rellena el contexto de impresión de la FIPER con datos de tarifa, entre otros.
		modificaParametrosFiper(aContextos, contextoImpresion);

		//Despues de rellenar los campos de interes se rellena el campo de interes mayor en periodo sucesivo
		rellenarImpresionInteresInicialMayorSucesivo(contextoImpresion);
		
		// 2016-05-20 - Rellenar importe seguro de vida
		// 2016-06-09 - Rellenar importe seguro proteccion pagos prima unica
		//              e importe renovacion anual pagos protegidos
		//rellenarImpresionConImporteSeguroVida(contextoImpresion, ctxtoSolicitud);
		rellenarImpresionConImportesGastos(contextoImpresion, ctxtoSolicitud);
		
		// 2016-06-03 - Rellenar indicador parrilla 
		rellenarImpresionConIndicadorParrilla(aCtxtoIntereses, contextoImpresion, ctxtoSolicitud);
		
		//2016-06-30 - Rellenar comnuidad de bienes
		rellenarImpresionComBienes(contextoImpresion, ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUC));
		
		// 2016-07-21 - Rellenar aplica medida Solchaga e indicador capital negativo.
		String medidaSolchaga = UtilidadesImpresion.obtenerMedidaSolchaga(ctxtoSolicitud);
		contextoImpresion.put(ID_PROP_APLICA_MEDIDA_SOLCHAGA, medidaSolchaga);
		
		// 2017-02-07 - Rellenar indicadores:
		// - Indicador bonificada (S/N)
		// - Indicador tipo amortización anticipada (0: recálculo, 1: plazo (últimas cuotas), 
		//   2: plazo (próximos vencimientos))
		rellenarIndicadorBonificada(aCtxtoIntereses, contextoImpresion);
		rellenarIndicadorTipoAmortizacionAnticipada(aCtxtoTratamientoAdelantos, contextoImpresion);
		
		rellenarIndicadorConsumidor(contextoImpresion, ctxtoSolicitud);
		
		String indCapitalNegativo = UtilidadesImpresion.obtenerIndCapitalNegativo(ctxtoSolicitud);
		contextoImpresion.put(ID_PROP_IND_CAPITAL_NEGATIVO, indCapitalNegativo);
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarDatosContexto");	
		}
		aContextoSalida[0] = contextoImpresion;
		return aContextoSalida;
	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro.
	 * @param contextoDatosSolicitud
	 * @param contextoImpresion
	 * @param tipoDoc Paso que configura datos genericos para todos los impresos
	 */
	private static void rellenarImpresionConCntxtoSolicitud(final IContexto contextoDatosSolicitud, final IContexto ctxtoProducto,
		final IContexto ctxtoSubproducto, final IContexto contextoImpresion){
		
		final String strSolPropImporteTotal 		= "ANPMN050630";
		final String strSolPropMonedaImporteTotal 	= "ANPMN050640";
		final String strSolPropPlazoTotal		 	= "ANPMN050710";
		final String strSolPropPlazoCarencia 		= "ANPMN050650";
		final String strSolPropSector 				= "ANPMN050190";
		final String strSolPropHipotecaVivienda 	= "ANPMN050480";
		final String strSolPropCodProducto 			= "ANPMN050080";
		final String strSolPropCodSubproducto 		= "ANPMN050090";	
		final String strSolPropTipoCarCapDurAmort 	= "ANPMN050820";	
		final String strSolPropTipoCarIntDurAmort 	= "ANPMN050830";
		final String strSolFechaFormalizacion 		= "ANPMN050920";
		final String strSolPropImporteAmpliado		= "ANPMN050969";
		
		BigDecimal tipoCarCapDurAmort = null;
		BigDecimal tipoCarIntDurAmort = null;
			
		final String strProdPropDescrProd 		= "ANPMN001030";
		final String strProdPropDescrSubprod 	= "ANPMN002040";
		
		final String importeSolicitado = "ANPMN050580";
		
		rellenarImpresionConCntxtoSubTotalesAnho(contextoDatosSolicitud, contextoImpresion);
		
		//Distinto tipo de dato PENDIENTE
//		contextoImpresion.put(ID_PROP_TOTAL_CAPITAL, bidImporteToStr(
//						contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal),
//						contextoDatosSolicitud.getString(strSolPropMonedaImporteTotal),
//						Boolean.TRUE));
		
		// Mapeos comunes a los tres impresos
		contextoImpresion.put(ID_PROP_MONEDA_PRESTAMO, 
				contextoDatosSolicitud.getString(strSolPropMonedaImporteTotal));
		contextoImpresion.put(ID_PROP_IMPORTE_PRESTAMO, 
				contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal));
		contextoImpresion.put(ID_PROP_IMPORTE_SOLICITADO, 
				contextoDatosSolicitud.getBigDecimal(importeSolicitado));
		contextoImpresion.put(ID_PROP_IMPORTE_TOTAL,
				contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal));
		contextoImpresion.put(ID_PROP_PLAZO, 
				contextoDatosSolicitud.getBigDecimal(strSolPropPlazoTotal));
		contextoImpresion.put(ID_PROP_CARENCIA_MESES, contextoDatosSolicitud.getBigDecimal(strSolPropPlazoCarencia));
		contextoImpresion.put(ID_PROP_P_PRESTAMO, ETIQUETA_PRESTAMO);
		
		contextoImpresion.put(ID_PROP_IMPORTE_AMPLIADO, 
				contextoDatosSolicitud.getBigDecimal(strSolPropImporteAmpliado));
		
		contextoImpresion.put(ID_PROP_MODALIDAD, contextoDatosSolicitud.getBigDecimal(strSolPropCodProducto).toString());
		contextoImpresion.put(ID_PROP_DESC_MODALIDAD, UtilidadesTramitacion.truncar(
			ctxtoProducto.getString(strProdPropDescrProd),
			30));
			//truncar a 30
		//contextoImpresion.put(ID_COD_PRODUCTO, contextoDatosSolicitud.getBigDecimal(strSolPropCodProducto));
		//contextoImpresion.put(ID_DESCR_PRODUCTO, UtilidadesTramitacion.comprobarDatoNull(ctxtoProducto.getString(strProdPropDescrProd)).trim());
		
		contextoImpresion.put(ID_COD_SUBPRODUCTO, contextoDatosSolicitud.getBigDecimal(strSolPropCodSubproducto));
		contextoImpresion.put(ID_DESCR_SUBPRODUCTO, UtilidadesTramitacion.comprobarDatoNull(ctxtoSubproducto.getString(strProdPropDescrSubprod)).trim());
		/*
		 * private static final String ID_IND_TIENE_APLAZ = 	"ANPMN103944";
	private static final String ID_INCR_DURANTE_APLAZ = "ANPMN103945";
	private static final String ID_MATRIZ_GASTOS_ADIC = "ANPMN103950";
	private static final String ID_MATRIZ_GASTOS_ADIC_ID_CONCEPTO = "ANPMN103951";
	private static final String ID_MATRIZ_GASTOS_ADIC_DESCR_CONCEPTO = "ANPMN103952";
	private static final String ID_MATRIZ_GASTOS_ADIC_IMP_CONCEPTO = "ANPMN103953";
*/
/*
ID_IND_TIENE_APLAZ = (if (AN250820 == 0 AND AN250830 == 0) THEN ID_IND_TIENE_APLAZ = "S" else "N")

AN25TB01 EQUIV ANPMN050

ID_INCR_DURANTE_APLAZ = 1 a cañon.

*/
		tipoCarCapDurAmort = contextoDatosSolicitud.getBigDecimal(strSolPropTipoCarCapDurAmort);
		tipoCarIntDurAmort = contextoDatosSolicitud.getBigDecimal(strSolPropTipoCarIntDurAmort);
		
		if ((BigDecimal.ZERO.equals(tipoCarCapDurAmort)) &&(BigDecimal.ZERO.equals(tipoCarIntDurAmort))){
			contextoImpresion.put(ID_IND_TIENE_APLAZ, Constantes.CTE_STR_N);
		}
		else{
			contextoImpresion.put(ID_IND_TIENE_APLAZ, Constantes.CTE_STR_S);
		}
		contextoImpresion.put(ID_INCR_DURANTE_APLAZ, BigDecimal.ONE);
		
		
		//Si prestatario es persona física
		if (0 == (BigDecimal.TEN.compareTo(contextoDatosSolicitud.getBigDecimal(strSolPropSector)))){
			//Si es hipoteca vivienda
			if (0 == (BigDecimal.ONE.compareTo(contextoDatosSolicitud.getBigDecimal(strSolPropHipotecaVivienda)))){
				contextoImpresion.put(ID_PROP_IND_AMORT_ANTICIPADA, "1");
			}
			else{
				contextoImpresion.put(ID_PROP_IND_AMORT_ANTICIPADA, "2");
			}
		}
		
		//Rellenar cliente carpetizado
		contextoImpresion.put(CAMPO_CTXTO_SOL_CLIENTE_CARTERIZADO, consultaCarpetizacion(contextoDatosSolicitud.getBigDecimal(CTX_SOLICITUD_NUC)));
				
		//Rellenar fecha de formalizacion
		contextoImpresion.put(CAMPO_CTXTO_SOL_FECHA_FORMALIZACION, contextoDatosSolicitud.getString(strSolFechaFormalizacion));
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoSolicitud");	
		}
	}
	
	/**
	 * Rellena el contexto de impresión con los datos de los subtotales del año
	 * @param lstContextoSubTotales
	 * @param contextoImpresion
	 */
	private static void rellenarImpresionConCntxtoSubTotalesAnho(
			final IContexto contextoDatosSolicitud, final IContexto contextoImpresion){
		final String strSolPropImporteTotal = "ANPMN050630";
		
		List<IRegistro> lstRegistroSubTotales = new ArrayList<IRegistro>(0);
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoSubTotalesAnho");	
		}
		
		IRegistro subtotal = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_SUBTOTALES_ANHO);
		subtotal.put(ID_PROP_SUBTOTALES_INTERES, contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal));
	
		lstRegistroSubTotales.add(subtotal);
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoSubTotalesAnho");	
		}
	}
	
	/**
	 * Rellena el contexto consumidor si o no
	 * @param contextoImpresion
	 * @param consumidorSN
	 */
	private static void rellenarImpresionConsumidorNoConsumidor(IContexto contextoImpresion,String consumidorSN) {
		contextoImpresion.put(CAMPO_CTX_SOL_CONSUMIDOR_SN, consumidorSN);
	}

	
	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoCondicionesCapital
	 * @param contextoImpresion Contexto que se mandará a impresión
	 * @param isPrestamoVariable True si es variable, false en otro caso
	 * @param paso
	 */
	private static void rellenarImpresionConCntxtoCondicionesCapital(
			final IContexto contextoCondicionesCapital, final IContexto contextoImpresion,
			final Boolean isPrestamoVariable){
		
		final String strCondPropMDA 				= "ANPMN051090";
		final String strCondPropIntNumPeriodos 		= "ANPMN051150";
		final String strCondPropImportePagoAplazado = "ANPMN051130";
				
		if (null != contextoCondicionesCapital){
			if(LOGGER.isDebugEnabled()){
				LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoCondicionesCapital");	
			}
			final ModalidadAmortizacionC modalidadFip = new ModalidadAmortizacionC();
			modalidadFip.setMDA(contextoCondicionesCapital.getBigDecimal(strCondPropMDA).intValue());
			final String strModalidadFip = GestionModalidadesAmortizacion.obtenerDescripcionModalidadAmortizacion(modalidadFip);
			contextoImpresion.put(ID_PROP_MODALIDAD_AMORTIZACION, strModalidadFip);
			String textoTipoPrestamo = "";
			
			switch(modalidadFip.getMDA()) {
				case 1: 
					textoTipoPrestamo = ETIQUETA_CAPITAL_CTES;
					break;
				case 2:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 11:
				case 12:
				case 15:
					textoTipoPrestamo = ETIQUETA_CAPITAL_CREC;
					break;
			}
			textoTipoPrestamo = textoTipoPrestamo.concat(ETIQUETA_INTERES_DECREC);
			if (null != contextoImpresion && BigDecimal.ZERO.equals(contextoImpresion.getBigDecimal(ID_PROP_TIPO_INTERES))){
				textoTipoPrestamo = textoTipoPrestamo.concat(ETIQUETA_INTERES_DECREC_CERO);
				BigDecimal numMeses = contextoImpresion.getBigDecimal(ID_PROP_MESES_INTERES_INICIAL);
				textoTipoPrestamo = textoTipoPrestamo.concat(UtilidadesTramitacion.bigDecimalToString(numMeses.add(BigDecimal.ONE), 2, 0, false));
				textoTipoPrestamo = textoTipoPrestamo.concat(ETIQUETA_INTERES_DECREC_MES);
			}
			contextoImpresion.put(ID_PROP_TIPO_PRESTAMO, textoTipoPrestamo);
			
			if(Constantes.CTE_DOS == (contextoCondicionesCapital.getBigDecimal(strCondPropMDA)).intValue()
					|| Constantes.CTE_ONCE == (contextoCondicionesCapital.getBigDecimal(strCondPropMDA)).intValue()) {
				contextoImpresion.put(ID_PROP_CUOTA_CTE, ETIQUETA_SI);
			}
			else{
				contextoImpresion.put(ID_PROP_CUOTA_CTE, ETIQUETA_NO);
			}
			
			if (Constantes.CTE_ONCE == (contextoCondicionesCapital.getBigDecimal(strCondPropMDA)).intValue()) {
				contextoImpresion.put(ID_PROP_HIPOTECA_BLINDADA, ETIQUETA_SI);
			}
			else{
				contextoImpresion.put(ID_PROP_HIPOTECA_BLINDADA, ETIQUETA_NO);
			}
			
			contextoImpresion.put(ID_PROP_CAPITAL_APLAZADO, contextoCondicionesCapital.getBigDecimal(strCondPropImportePagoAplazado));

			int periodicidad = contextoCondicionesCapital.getBigDecimal(strCondPropIntNumPeriodos).intValueExact();
			String descripcionPeriodicidad = "";
			descripcionPeriodicidad = obtenerDescripcionPeriodicidad(periodicidad);
			contextoImpresion.put(ID_PROP_PERIODICIDAD_REEMB, descripcionPeriodicidad);
						
			if(LOGGER.isDebugEnabled()){
				LOGGER.debug("FIN ContextoImpresionFormalizacion rellenarImpresionConCntxtoCondicionesCapital");	
			}
		}
	}

	/**
	 * Devuelve la descripción del código de periodicidad que se le pasa como parámetro
	 * parámetro
	 * @param periodicidad
	 */
	private static String obtenerDescripcionPeriodicidad(int periodicidad){
		String texto = "";
		switch (periodicidad){
			case 01:
				texto = "Mensuales";
				break;
			case 03:
				texto = "Trimestrales";
				break;
			case 06:
				texto = "Semestrales";
				break;
			case 12:
				texto = "Anuales";
				break;
			case 24:
				texto = "Bianuales";
				break;
			case 36:
				texto = "Trianuales";
				break;
			case 60:
				texto = "Quinquenales";
				break;
			default:
				texto ="";
				break;
		}
		return texto;
	}
	
	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoComisiones
	 * @param contextoImpresion Contexto que se mandará a impresión
	 * @param tipoDoc 
	 */
	private static void rellenarImpresionConCntxtoComisiones(
			final IContexto[] aContextoComisiones, final IContexto contextoImpresion, final BigDecimal bidImpComCancelacion,
			final BigDecimal bidTipoExpediente){
		
		final String strComPropIntTipoComision 		= "ANPMN053040";
		final String strComPropPorcComision 		= "ANPMN053070";
		final String strComPropImpMinimoComision 	= "ANPMN053090";
		final String strComPropOrden 				= "ANPMN053050";
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoComisiones");	
		}
		
		final BigDecimal bidImpTotal = contextoImpresion.getBigDecimal(ID_PROP_IMPORTE_PRESTAMO);
		final BigDecimal bidImporteAmpliado = contextoImpresion.getBigDecimal(ID_PROP_IMPORTE_AMPLIADO);
		BigDecimal bidSumaImpCom = BigDecimal.ZERO;
		
		//Inicializacion comisiones
		contextoImpresion.put(ID_PROP_COMIS_MOD_CONTR, Constantes.CTE_STRING_CERO);
		contextoImpresion.put(ID_PROP_COMIS_RECLAMACION, Constantes.CTE_STRING_CERO);
		contextoImpresion.put(ID_PROP_AMORT_PARCIAL_MENOR_5, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false));
		contextoImpresion.put(ID_PROP_AMORT_PARCIAL_MAYOR_5, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false));
		contextoImpresion.put(ID_PROP_NO_SUBROGATORIO_MENOR_5, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false));
		contextoImpresion.put(ID_PROP_NO_SUBROGATORIO_MAYOR_5, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false));
		contextoImpresion.put(ID_PROP_SUBROGATORIO_MENOR_5, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false));
		contextoImpresion.put(ID_PROP_SUBROGATORIO_MAYOR_5, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false));
		contextoImpresion.put(ID_PROP_PORCTJ_COMISION_APERTURA, Constantes.CTE_STRING_CERO);
		contextoImpresion.put(ID_PROP_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 17, 2, false));
		contextoImpresion.put(ID_PROP_MIN_COMISION_APERTURA, Constantes.CTE_STRING_CERO);
		contextoImpresion.put(ID_PROP_PORCTJ_GASTOS_ESTUDIO, Constantes.CTE_STRING_CERO);
		contextoImpresion.put(ID_PROP_GASTOS_ESTUDIO, UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 17, 2, false));
		contextoImpresion.put(ID_PROP_MIN_GASTOS_ESTUDIO, Constantes.CTE_STRING_CERO);
			
		BigDecimal impMinComisionApertura = BigDecimal.ZERO;
		BigDecimal comisionApertura = BigDecimal.ZERO;
		BigDecimal impMinGastosEstudio = BigDecimal.ZERO;
		BigDecimal comisionGastosEstudio = BigDecimal.ZERO;
				
		for (IContexto contextoComisiones : aContextoComisiones){
			
			if (Constantes.TIPO_COMISION_MODIF_COND.equals(contextoComisiones.getString(strComPropIntTipoComision))
					&& Constantes.CTE_STRING_CERO.equals(contextoImpresion.getString(ID_PROP_COMIS_MOD_CONTR))){
				contextoImpresion.put(ID_PROP_COMIS_MOD_CONTR, 
						UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 3, 4, false));
			}
			else if (Constantes.TIPO_COMISION_RIESGO_INTERES.equals(contextoComisiones.getString(strComPropIntTipoComision))){
				contextoImpresion.put(ID_PROP_IMPORTE_MINIMO, contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
				contextoImpresion.put(ID_PROP_PORCENTAJE,contextoComisiones.getBigDecimal(strComPropPorcComision));
				
			}
			else if(Constantes.TIPO_COMISION_RECLAMACION_DEUDA.equals(contextoComisiones.getString(strComPropIntTipoComision))
					&& UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false).equals(contextoImpresion.getString(ID_PROP_COMIS_RECLAMACION))){
				contextoImpresion.put(ID_PROP_COMIS_RECLAMACION, 
						UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 3, 4, false));
			}
			else if (Constantes.TIPO_COMISION_ADELANTO.equals(contextoComisiones.getString(strComPropIntTipoComision))
					|| Constantes.TIPO_COMISION_DESIST_PARCIAL.equals(contextoComisiones.getString(strComPropIntTipoComision))){
				if (UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false).equals(contextoImpresion.getString(ID_PROP_AMORT_PARCIAL_MENOR_5))
						&& BigDecimal.ONE.equals(contextoComisiones.getBigDecimal(strComPropOrden))){
					contextoImpresion.put(ID_PROP_AMORT_PARCIAL_MENOR_5,
						UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
								3, LengthConstants.LENGTH_0004, false));
				}
				if (UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false).equals(contextoImpresion.getString(ID_PROP_AMORT_PARCIAL_MAYOR_5))
						&& new BigDecimal(2).equals(contextoComisiones.getBigDecimal(strComPropOrden))){
						contextoImpresion.put(ID_PROP_AMORT_PARCIAL_MAYOR_5,
						UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
								3, LengthConstants.LENGTH_0004, false));
				}
			}
			else if (Constantes.TIPO_COMISION_CANCELACION.equals(contextoComisiones.getString(strComPropIntTipoComision))
					|| Constantes.TIPO_COMISION_DESIST_TOTAL.equals(contextoComisiones.getString(strComPropIntTipoComision))){
				if (BigDecimal.ONE.equals(contextoComisiones.getBigDecimal(strComPropOrden))
						&& UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false).equals(contextoImpresion.getString(ID_PROP_NO_SUBROGATORIO_MENOR_5))) {
					contextoImpresion.put(ID_PROP_NO_SUBROGATORIO_MENOR_5,
						UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
								3, LengthConstants.LENGTH_0004, false));
				}

				if (new BigDecimal(2).equals(contextoComisiones.getBigDecimal(strComPropOrden))
						&& UtilidadesTramitacion.bigDecimalToString(BigDecimal.ZERO, 3, LengthConstants.LENGTH_0004, false).equals(contextoImpresion.getString(ID_PROP_NO_SUBROGATORIO_MAYOR_5))){
					contextoImpresion.put(ID_PROP_NO_SUBROGATORIO_MAYOR_5,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
									3, LengthConstants.LENGTH_0004, false));
				}
			}
			else if (Constantes.TIPO_COMISION_AMORT_SUPERIOR_A.equals(contextoComisiones.getString(strComPropIntTipoComision))){
				if (BigDecimal.ONE.equals(contextoComisiones.getBigDecimal(strComPropOrden)))
				{
					contextoImpresion.put(ID_PROP_SUBROGATORIO_MENOR_5,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
									3, LengthConstants.LENGTH_0004, false));
				}
				if (new BigDecimal(2).equals(contextoComisiones.getBigDecimal(strComPropOrden)))
				{
					contextoImpresion.put(ID_PROP_SUBROGATORIO_MAYOR_5,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
									3, LengthConstants.LENGTH_0004, false));
				}
			}
			else if (Constantes.TIPO_COMISION_APERTURA.equals(contextoComisiones.getString(strComPropIntTipoComision))){
				if (Constantes.CTE_STRING_CERO.equals(contextoImpresion.getString(ID_PROP_PORCTJ_COMISION_APERTURA))){
					contextoImpresion.put(ID_PROP_PORCTJ_COMISION_APERTURA,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, 4, false));
				}
				
				if (Constantes.CTE_STRING_CERO.equals(contextoImpresion.getString(ID_PROP_MIN_COMISION_APERTURA))) {
					contextoImpresion.put(ID_PROP_MIN_COMISION_APERTURA, 
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 17, 2, false));
				}
				
				if (UtilidadesComun.esExpedienteAmpliacion(bidTipoExpediente)){
					impMinComisionApertura = contextoComisiones.getBigDecimal(strComPropImpMinimoComision);
					comisionApertura = contextoComisiones.getBigDecimal(strComPropPorcComision);
					//Lo calculo al final porque necesitamos saber el % gastos de estudio para calcularla
				}
				else{
					BigDecimal bidImpCom = bidImpTotal.multiply(
							contextoComisiones.getBigDecimal(strComPropPorcComision));
					if (bidImpCom.compareTo(BigDecimal.ZERO) != 0){
						bidImpCom = bidImpCom.divide(BigDecimal.valueOf(100L));
					}
					if (bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0){
						bidSumaImpCom = bidSumaImpCom.add(bidImpCom);
					}
					else{
						bidSumaImpCom = bidSumaImpCom.add(contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
					}
						
					if(bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0) {
						if (0 < bidImpComCancelacion.compareTo(BigDecimal.ZERO))
						{
							contextoImpresion.put(ID_PROP_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString((bidImpCom.add(bidImpComCancelacion).setScale(2, RoundingMode.HALF_UP)), 17, 2, false));
						}
						else
						{
							contextoImpresion.put(ID_PROP_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString(bidImpCom.setScale(2, RoundingMode.HALF_UP), 17, 2, false));
						}
					}else {
						contextoImpresion.put(ID_PROP_COMISION_APERTURA,
								"mín " + UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision).add(bidImpComCancelacion), 17, 2, false));
					}
				}
			}
			else if (Constantes.TIPO_COMISION_ESTUDIO.equals(contextoComisiones.getString(strComPropIntTipoComision))){
				if (Constantes.CTE_STRING_CERO.equals(contextoImpresion.getString(ID_PROP_PORCTJ_GASTOS_ESTUDIO))){
					contextoImpresion.put(ID_PROP_PORCTJ_GASTOS_ESTUDIO,
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, 4, false));
				}
				if (Constantes.CTE_STRING_CERO.equals(contextoImpresion.getString(ID_PROP_MIN_GASTOS_ESTUDIO))){
					contextoImpresion.put(ID_PROP_MIN_GASTOS_ESTUDIO, 
							UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 17, 2, false));
				}
				
				if (UtilidadesComun.esExpedienteAmpliacion(bidTipoExpediente)){
					comisionGastosEstudio = contextoComisiones.getBigDecimal(strComPropPorcComision);
					impMinGastosEstudio = contextoComisiones.getBigDecimal(strComPropImpMinimoComision);
					contextoImpresion.put(ID_PROP_GASTOS_ESTUDIO, UtilidadesTramitacion.bigDecimalToString(
							BigDecimal.ZERO, 17, 2, false));
				}
				else{
					BigDecimal bidImpCom = bidImpTotal.multiply(
							contextoComisiones.getBigDecimal(strComPropPorcComision));
					if (bidImpCom.compareTo(BigDecimal.ZERO) != 0){
						bidImpCom = bidImpCom.divide(BigDecimal.valueOf(100L));
					}
					if (bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0){
						bidSumaImpCom = bidSumaImpCom.add(bidImpCom);
					}
					else{
						bidSumaImpCom = bidSumaImpCom.add(contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
					}
					
					// 2016-11-3 : El campo ANPMN103690 sólo se debe rellenar cuando sea el tramo 2
					if (Constantes.CTE_VALOR_INDICADOR_DOS.equals (strComPropOrden)){
						contextoImpresion.put(ID_PROP_AMORT_PARCIAL_MENOR_5,
								UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision),
										3, LengthConstants.LENGTH_0004, false));
					}
					
					if(bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0) {
						contextoImpresion.put(ID_PROP_GASTOS_ESTUDIO, UtilidadesTramitacion.bigDecimalToString(
								bidImpCom, 17, 2, false));					
					}else {
						contextoImpresion.put(ID_PROP_GASTOS_ESTUDIO,
						"mín " + UtilidadesTramitacion.bigDecimalToString(
								contextoComisiones.getBigDecimal(strComPropImpMinimoComision), 17, 2, false));
					}
				}				
			}
				
		}
		//Si es expediente de Ampliacion (292)
		//Imp.comision apertura = (importe solicitado * %comision gastos estudio) + (importe ampliado * %comisión apertura)
		if (UtilidadesComun.esExpedienteAmpliacion(bidTipoExpediente)){
			
			
			BigDecimal bidImpCom = BigDecimal.ZERO;
			
			BigDecimal bidComisionNovacion = bidImpTotal.multiply(
					comisionGastosEstudio);
			if (bidComisionNovacion.compareTo(BigDecimal.ZERO) != 0){
				bidComisionNovacion = bidComisionNovacion.divide(BigDecimal.valueOf(100L));
			}
			
			if (bidComisionNovacion.compareTo(impMinGastosEstudio) > 0){
				bidSumaImpCom = bidSumaImpCom.add(bidComisionNovacion);
				bidImpCom = bidComisionNovacion;
			}
			else{
				bidSumaImpCom = bidSumaImpCom.add(impMinGastosEstudio);
				bidImpCom = impMinGastosEstudio;
			}
			
			BigDecimal bidComisionAmpliacion = bidImporteAmpliado.multiply(
					comisionApertura);
			if (bidComisionAmpliacion.compareTo(BigDecimal.ZERO) != 0){
				bidComisionAmpliacion = bidComisionAmpliacion.divide(BigDecimal.valueOf(100L));
			}
			
			if (bidComisionAmpliacion.compareTo(impMinComisionApertura) > 0){
				bidSumaImpCom = bidSumaImpCom.add(bidComisionAmpliacion);
				bidImpCom = bidImpCom.add(bidComisionAmpliacion);
			}
			else{
				bidSumaImpCom = bidSumaImpCom.add(impMinComisionApertura);
				bidImpCom = bidImpCom.add(impMinComisionApertura);
			}
									
			contextoImpresion.put(ID_PROP_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString(bidImpCom, 17, 2, false));		
		}
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoComisiones");	
		}
	}
	
	/**
	 * Rellena el contexto de impresión con los datos de los clientes titulares de la solicitud
	 * @param lstContextoClientes
	 * @param contextoImpresion
	 * @param filtroTitular si True se crean solo registro para los titulares, en otro caso se almacenan todos
	 */
	private static void rellenarImpresionConCntxtoClientesTitulares(
			final IContexto[] lstContextoClientes, final IContexto contextoImpresion, 
			final Boolean filtroTitular){
		
		final String strPropRelacionTitular = "MEFCN000040";
		
		List<IRegistro> lstRegistroClientes = new ArrayList<IRegistro>(0);
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoClientesTitulares");	
		}
		for (IContexto contextoCliente : lstContextoClientes){
			if (Constantes.CTE_RELACION_TITULAR.equalsIgnoreCase(contextoCliente.getString(strPropRelacionTitular))){
				lstRegistroClientes.add(crearRegistroCliente(contextoCliente, contextoImpresion, filtroTitular));
			}
		}
		if (!lstRegistroClientes.isEmpty()) {
			contextoImpresion.put(ID_REG_TITULARES, lstRegistroClientes.toArray(new IRegistro[lstRegistroClientes.size()]));
		}
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoClientesTitulares");	
		}
	}
	
	/**
	 * Rellena el contexto de impresión con los datos de los clientes titulares de la solicitud
	 * @param lstContextoClientes
	 * @param contextoImpresion
	 * @param filtroTitular si True se crean solo registro para los titulares, en otro caso se almacenan todos
	 */
	private static void rellenarImpresionConCntxtoClientesAvalistas(
			final IContexto[] lstContextoClientes, final IContexto contextoImpresion){
		
		final String strPropRelacionTitular = "MEFCN000040";
		
		List<IRegistro> lstRegistroClientes = new ArrayList<IRegistro>(0);
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoClientesAvalistas");	
		}
		for (IContexto contextoCliente : lstContextoClientes){
			if (Constantes.CTE_RELACION_AVALISTA.equalsIgnoreCase(contextoCliente.getString(strPropRelacionTitular))){
				lstRegistroClientes.add(crearRegistroCliente(contextoCliente, contextoImpresion, Boolean.FALSE));
			}
		}
		if (!lstRegistroClientes.isEmpty()) {
			contextoImpresion.put(ID_REG_FIADORES, lstRegistroClientes.toArray(new IRegistro[lstRegistroClientes.size()]));
		}
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoClientesTitulares");	
		}
	}
	
	/**
	 * Se crea un registro con los clientes
	 * @param contextoCliente
	 * @param contextoImpresion
	 * @param filtroTitular si True se guardan sólo los titulares
	 * @return
	 */
	private static IRegistro crearRegistroCliente(IContexto contextoCliente, IContexto contextoImpresion, Boolean filtroTitular){
		
		final String strCliStrNombre 		= "MEFCN000240";
		final String strCliStrNIF 			= "MEFCN000160";
		final String strCliStrApellidoUno 	= "MEFCN000250";
		final String strCliStrApellidoDos 	= "MEFCN000260";
		final String strCliRelacion 		= "MEFCN000040";
		
		IRegistro cliente = null;
		if (!filtroTitular || Constantes.CTE_RELACION_TITULAR.equals(contextoCliente.getString(strCliRelacion).trim())){
			if(LOGGER.isDebugEnabled()){
				LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios crearRegistroCliente");	
			}
			if (Constantes.CTE_RELACION_TITULAR.equals(contextoCliente.getString(strCliRelacion).trim())){
				cliente = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_TITULARES);
				cliente.put(ID_PROP_NOMBRE_TITULAR, contextoCliente.getString(strCliStrNombre).trim().concat(" ").
						concat(contextoCliente.getString(strCliStrApellidoUno).trim().concat(" ").
						concat(contextoCliente.getString(strCliStrApellidoDos).trim())));
				cliente.put(ID_PROP_DOC_TITULAR, contextoCliente.getString(strCliStrNIF));
			}
			else if (Constantes.CTE_RELACION_AVALISTA.equals(contextoCliente.getString(strCliRelacion).trim())){
				cliente = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_FIADORES);
				cliente.put(ID_PROP_NOMBRE_FIADOR, contextoCliente.getString(strCliStrNombre).trim().concat(" ").
						concat(contextoCliente.getString(strCliStrApellidoUno).trim().concat(" ").
						concat(contextoCliente.getString(strCliStrApellidoDos).trim())));
				cliente.put(ID_PROP_DOC_FIADOR, contextoCliente.getString(strCliStrNIF));
			}
		}
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios crearRegistroCliente");	
		}
		return cliente;
	}
	
	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro. 
	 * 
	 * @param contextoInteres
	 * @param contextoImpresion Contexto que se mandará a impresión
	 * @param bolPrestamoFijo True si el prestamo es fijo, false en otro caso
	 * @param tipoDoc 
	 */
	private static void rellenarImpresionConCntxtoInteres(
			final IContexto[] aContextoInteres, final IContexto contextoImpresion,
			final Boolean bolPrestamoFijo, final IContexto contextoSolicitud){
		
		final String strIntPropTipoCondicion 		= "ANPMN052050";
		final String strIntPropTipoInteres 			= "ANPMN052080";
		final String strIntPropPlazoTramoInteres 	= "ANPMN052110";
		final String strIntPropTipoReferencia 		= "ANPMN052160";
		final String strIntPropPorcDemora 			= "ANPMN052340";
		final String strIntNumPeriodoIntRev 		= "ANPMN052380";
		final String strIntPropStrUnidadPeriodoRev 	= "ANPMN052400";
		final String strPropDirefencial 			= "ANPMN052270";
		final String strSuelo 						= "ANPMN052550";
        final String strSueloInteresInicial 		= "ANPMN052530";		
		final String strAplicaSueloAInteresInicial 	= "ANPMN052520";
		final String strSobreQueAplicaSuelo 		= "ANPMN052590";
		final String strTecho 						= "ANPMN052570";
		final String strOrden 						= "ANPMN052040";
		final String strInteres 					= "ANPMN052130";
		final String strIndicadorFlexibilidad 		= "ANPMN052690";
		final String CTE_PROP_PERIODICIDAD_UNIDAD_PERIODO = "ANPMN052440";
		
		final String campoEspecialidadSolic = "ANPMN050120";
		
		final String ID_INFO_TRAMOS_INTERES = "ANPMN103990";
	
		final String ID_INFO_TRAMOS_INTERES_ORDEN_TRAMO = "ANPMN103991";
		final String ID_INFO_TRAMOS_INTERES_TIPO_INTERES = "ANPMN103992";
		final String ID_INFO_TRAMOS_INTERES_DIFERENCIAL = "ANPMN103993";
		final String ID_INFO_TRAMOS_INTERES_TIPO_REFERENCIA = "ANPMN103994";
		final String ID_INFO_TRAMOS_INTERES_INTERES = "ANPMN103995";
		final String ID_INFO_TRAMOS_INTERES_PLAZO = "ANPMN103996";
		final String ID_INFO_TRAMOS_INTERES_UNIDAD_PLAZO = "ANPMN103997";
		final String ID_INFO_TRAMOS_INTERES_INDICADOR_FLEXIBILIDAD = "ANPMN103998";
		
		IRegistro regInfoTramos = null;
		
		IRegistro[] matrizInfoTramos = null;
		List<IRegistro> listaMtzInfoTramos = new ArrayList<IRegistro>(1);
	
		String especialidadSolic = null;
		//BigDecimal codProducto = null;
		/*Campos de la matriz de info tramos de interes del contexto de impresión ANPMN103*/
		BigDecimal idOrden = null;
		String tipoInteres = null;
		BigDecimal idDiferencial = null;
		BigDecimal idTipoReferencia = null;
		BigDecimal idInteres = null;
		BigDecimal idPlazo = null;
		String unidadPlazo = null;
		BigDecimal indicadorFlexibilidad = null;
					
		especialidadSolic = contextoSolicitud.getString(campoEspecialidadSolic);
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoInteres");	
		}
		
		for (IContexto contextoInteres : aContextoInteres){	
			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(contextoInteres.getBigDecimal(strIntPropTipoCondicion))){
				IContexto ultimoTramoVariable = getUltimoTramoVariable(aContextoInteres);
				if((null != ultimoTramoVariable) &&
					GestionConsultaDatosSolicitud.esTipoReferenciaNoReferenciado(ultimoTramoVariable.getBigDecimal(strIntPropTipoReferencia).toString())){
					contextoImpresion.put(ID_PROP_FIJO_VBLE, ETIQUETA_INTERES_FIJO);
					contextoImpresion.put(ID_PROP_CLASE_INTERES, ETIQUETA_INTERES_FIJO_TEXTO);
					
					//Debe ser el primer tramo
					if(0 == BigDecimal.ONE.compareTo(contextoInteres.getBigDecimal(strOrden))) {
						contextoImpresion.put(ID_PROP_MESES_INTERES_INICIAL, contextoInteres.getBigDecimal(strIntPropPlazoTramoInteres));
					}
					
					
				}else {
					if (Constantes.TIPO_INT_VARIABLE.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteres.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres))){
						contextoImpresion.put(ID_PROP_FIJO_VBLE, ETIQUETA_INTERES_VARIABLE);
						contextoImpresion.put(ID_PROP_CLASE_INTERES, ETIQUETA_INTERES_VARIABLE_TEXTO);
						/**
					 	* 	Se modifica para que cuando es variable meta en el campo numero de meses interes inicial el numero de periodos revision
					 	*/
						//Debe ser el primer tramo
						if(BigDecimal.ONE.equals(contextoInteres.getBigDecimal(strOrden))) {
							contextoImpresion.put(ID_PROP_MESES_INTERES_INICIAL, contextoInteres.getBigDecimal(strIntNumPeriodoIntRev));
						}
						//contextoImpresion.put(ID_PROP_TIPO_INTERES, ETIQUETA_INTERES_VARIABLE_TEXTO);
					}
					else if (Constantes.TIPO_INT_FIJO.equals(contextoInteres.getString(strIntPropTipoInteres))){
						//18-Marzo-2015,se informa el tipo fijo con la etiqueta de fijo
						contextoImpresion.put(ID_PROP_FIJO_VBLE, ETIQUETA_INTERES_FIJO);
						contextoImpresion.put(ID_PROP_CLASE_INTERES, ETIQUETA_INTERES_FIJO_TEXTO);
						contextoImpresion.put(ID_PROP_MESES_INTERES_INICIAL, contextoInteres.getBigDecimal(strIntPropPlazoTramoInteres));
					}
					else{
						contextoImpresion.put(ID_PROP_FIJO_VBLE, ETIQUETA_INTERES_FIJO);
						contextoImpresion.put(ID_PROP_CLASE_INTERES, ETIQUETA_INTERES_FIJO_TEXTO);
					}
				}
				
				if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getBigDecimal(ID_PROP_INTERES_DEMORA))){
					contextoImpresion.put(ID_PROP_INTERES_DEMORA, 
						contextoInteres.getBigDecimal(strIntPropPorcDemora));
				}
				
				if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_REFERENCIA))){
					contextoImpresion.put(ID_PROP_REFERENCIA, contextoInteres.getBigDecimal(strIntPropTipoReferencia).toString());
					//contextoImpresion.put(ID_PROP_TEXTO_TIPO_REFERENCIA, new BigDecimal(ETIQUETA_TIPO_REFERENCIA_LIBOR));
					BigDecimal referencia = UtilidadesTramitacion.obtenerReferencia(
							strIntPropTipoReferencia, contextoInteres);
					
					contextoImpresion.put(ID_PROP_TEXTO_TIPO_REFERENCIA, referencia);
				}
				
				
				if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_DESC_REFERENCIA))){
					contextoImpresion.put(ID_PROP_DESC_REFERENCIA, 
						getStrDescrTipoReferencia(contextoInteres.getBigDecimal(strIntPropTipoReferencia)));
				}
							
				
				//Suelo y techo
				contextoImpresion.put(ID_PROP_IND_SUELO_TECHO, ETIQUETA_NO);
				
				if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strAplicaSueloAInteresInicial))) {
					contextoImpresion.put(ID_PROP_SUELO, contextoInteres.getBigDecimal(strSueloInteresInicial));
					contextoImpresion.put(ID_PROP_IND_SUELO_TECHO, ETIQUETA_SI);
				}else if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
					contextoImpresion.put(ID_PROP_SUELO, contextoInteres.getBigDecimal(strSuelo));
					contextoImpresion.put(ID_PROP_IND_SUELO_TECHO, ETIQUETA_SI);
				}
				
				if(!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
					contextoImpresion.put(ID_PROP_TECHO, contextoInteres.getBigDecimal(strTecho));
					contextoImpresion.put(ID_PROP_IND_SUELO_TECHO, ETIQUETA_SI);
				}
				
				/*Recuperamos los datos del tramo de interes de la tabla*/
				idOrden = contextoInteres.getBigDecimal(strOrden);
				tipoInteres = contextoInteres.getString(strIntPropTipoInteres);
				idDiferencial = contextoInteres.getBigDecimal(strPropDirefencial);
				idTipoReferencia = contextoInteres.getBigDecimal(strIntPropTipoReferencia);
				/*20151005 El interés que guardamos en la matriz de interés lo obtenemos del campo interés o del campo techo del contexto de interés en función de 
				 * una serie de condiciones:
				 *  - Si el tramo es fijo, pillamos el interés del campo interés.
				 *  - Si el tramo es variable y tipo de referencia no referenciado, pillamos el interés del campo techo.
				 *  - Si el tramo es variable y tipo de referencia "normal", pillamos el interés del campo interés, va a ser cero porque en ese caso no aplica,
				 *  el interés a aplicar es el diferencial más el valor actual del tipo de referencia.
				 * 
				 * */
				if ((IConstantesSolicitud.CTE_TIPO_INTERES_FIJO.equals(tipoInteres)) ||
					(IConstantesSolicitud.CTE_TIPO_INTERES_FIJO_PENALIZABLE.equals(tipoInteres)) ||
					(IConstantesSolicitud.CTE_TIPO_INTERES_FIJO_REFERENCIADO.equals(tipoInteres))){
					idInteres = contextoInteres.getBigDecimal(strInteres);
				}
				else{
					if (Utilidades.esTipoReferenciaNoReferenciado(idTipoReferencia.toString())){
						idInteres = contextoInteres.getBigDecimal(strTecho);
					}
					else{
						idInteres = contextoInteres.getBigDecimal(strInteres);
					}
				}
								
				indicadorFlexibilidad = contextoInteres.getBigDecimal(strIndicadorFlexibilidad);
				idPlazo = contextoInteres.getBigDecimal(strIntPropPlazoTramoInteres);
				unidadPlazo = contextoInteres.getString(CTE_PROP_PERIODICIDAD_UNIDAD_PERIODO);
				/*Creamos el registro de la información de tramos de interés */
				regInfoTramos = ContextoFactory.getInstance().getRegistro(
					contextoImpresion, ID_INFO_TRAMOS_INTERES);
					
				/*Asignamos los datos DEL TRAMO DE INTERES*/
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_ORDEN_TRAMO, idOrden);
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_TIPO_INTERES, tipoInteres);
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_DIFERENCIAL, idDiferencial);
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_TIPO_REFERENCIA, idTipoReferencia);
				//regInfoTramos.put(ID_INFO_TRAMOS_INTERES_INTERES, idInteres);
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_INTERES, idInteres.setScale(4, RoundingMode.HALF_UP));
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_PLAZO, idPlazo);
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_UNIDAD_PLAZO, unidadPlazo);
				regInfoTramos.put(ID_INFO_TRAMOS_INTERES_INDICADOR_FLEXIBILIDAD, indicadorFlexibilidad);
				
				listaMtzInfoTramos.add(regInfoTramos);
			
				matrizInfoTramos = listaMtzInfoTramos.toArray(
				new IRegistro[listaMtzInfoTramos.size()]);
			/* Asignamos la matriz de gastos adicionales al campo ANPMN103950 del contexto de impresión */
			
			contextoImpresion.put(ID_INFO_TRAMOS_INTERES, matrizInfoTramos);

			/*20140910 EDIT V360144 vamos a machacar el valor del literal "clase interés", ANPPMN103090, de tal forma que:
			 * Para la FIPER tenemos otro cambio que hacer, en el campo ANPMN103090 le tenemos que pasar
			 *  para el caso de Hipoteca Abanca Fijo durante los 12 primeros meses, variable resto del plazo de duración. 
			 * 
			 * Este cambio sólo lo tendríamos que hacer en el caso de ABANCA y de que
			 *  la especialidad de la solicitud sea diferente de Divisa, este dato
			 *   lo tienes en el contexto 50 campo ANPMN050120.
			 * 
			 * 2016-11-08: se cambian las condiciones para sobre-escribir el ID_PROP_CLASE_INTERES:
			 * Ahora con la inclusión del 5046 se mira que el segundo tramo sea variable. En ese caso
			 * se sobre-escribe. Si el segundo tramo es fijo, no se sobreescribe.			 * 
			 * 
			 * */
			if ((esEntornoAbanca) &&
				(! Constantes.CTE_ESPECIALIDAD_DIVISA.equals(especialidadSolic) &&
				(0 != BigDecimal.ONE.compareTo(contextoInteres.getBigDecimal(strOrden))))&&
				(null != ultimoTramoVariable)){
				
				StringBuilder stb = new StringBuilder(1);				
				stb = stb.append("Fijo durante los ");
				
				if (null != contextoImpresion.getBigDecimal(ID_PROP_MESES_INTERES_INICIAL)){
					stb = stb.append(contextoImpresion.getBigDecimal(ID_PROP_MESES_INTERES_INICIAL).toString());
				}
				else{
					stb = stb.append("0");
				}
				
				stb = stb.append(" primeros meses, variable resto del plazo de duración.");
				
				contextoImpresion.put(ID_PROP_CLASE_INTERES, stb.toString());
			}
			
			}
		}
		
		
		/*EDIT V360144 20140630 */
		/*Si estamos en EVO y el producto es el 5990 (Hipoteca Inteligente EVO)
		 * entonces tomamos el diferencial que se imprime en la FIPER y la OV Hipotecaria,
		 * ANPMN103240, del segundo tramo variable en vez del primero.
		 * */
		
		/*
		if ((esEntornoEvo) &&
			(Constantes.CTE_COD_PROD_HIPOT_INTEL_EVO.equals(
					ctxSolicitud.getBigDecimal(strCtxSolicitudCodProducto))))
		*/
		
		/*Rosa 20140701: Si existen dos tramos variables se toma el 
		 * diferencial del segundo tramo.*/
		final IContexto contextoInteresUltimoVariableA = getUltimoTramoVariable(aContextoInteres);
		if (!bolPrestamoFijo && 
				null != contextoInteresUltimoVariableA &&
				UtilidadesTramitacion.isBlankOrNull(contextoInteresUltimoVariableA.getString(ID_PROP_PERIODO_REV_INTER_TEXTO)) &&
				(Constantes.TIPO_INT_VARIABLE.equals(contextoInteresUltimoVariableA.getString(strIntPropTipoInteres)) ||
				Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteresUltimoVariableA.getString(strIntPropTipoInteres)) ||
				Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteresUltimoVariableA.getString(strIntPropTipoInteres)) ||
				Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteresUltimoVariableA.getString(strIntPropTipoInteres)))){
			contextoImpresion.put(ID_PROP_DIFERENCIAL, contextoInteresUltimoVariableA.getBigDecimal(strPropDirefencial));
			contextoImpresion.put(ID_PROP_PERIODO_REV_INTER_TEXTO,
					getDescPeriodoRevision(
							null,
							contextoInteresUltimoVariableA.getBigDecimal(strIntNumPeriodoIntRev),
							contextoInteresUltimoVariableA.getString(strIntPropStrUnidadPeriodoRev),
							Boolean.FALSE));
			contextoImpresion.put(ID_PROP_PERIODO_REV_INTER, contextoInteresUltimoVariableA.getBigDecimal(strIntNumPeriodoIntRev));
		}
		/*FIN EDIT V360144 20140630 */
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoInteres");	
		}
		
		
	}
	
	/**
	 * Comprueba si el interés inicial es mayor que el de los periodos sucesivos
	 * Si lo es rellena el campo con del contexto de impresion con S, sino con N
	 * @param contextoImpresion
	 */
	private static void rellenarImpresionInteresInicialMayorSucesivo(final IContexto contextoImpresion) {
			BigDecimal interesInicial = contextoImpresion.getBigDecimal(ID_PROP_TIPO_INTERES);
			BigDecimal diferencial    = contextoImpresion.getBigDecimal(ID_PROP_DIFERENCIAL);
			BigDecimal tipoReferencia = contextoImpresion.getBigDecimal(ID_PROP_PORCTJ_REF_ACTUAL);

			if(!UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getBigDecimal(ID_PROP_TIPO_INTERES)) &&
					!UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getBigDecimal(ID_PROP_DIFERENCIAL)) &&
					!UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getBigDecimal(ID_PROP_PORCTJ_REF_ACTUAL))) {
				
				if( -1 == interesInicial.compareTo(diferencial.add(tipoReferencia))) {
					//Entonces S
					contextoImpresion.put(CTE_DAT_INT_INICIAL_MAYOR_SUCESIVO, Constantes.CTE_STR_S);
				}else{
					//Entonces N
					contextoImpresion.put(CTE_DAT_INT_INICIAL_MAYOR_SUCESIVO, Constantes.CTE_STR_N);
				}
			}
	}

	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param contextoAdelantos
	 * @param contextoImpresion Contexto que se mandará a impresión
	 */
	private static void rellenarImpresionConCntxtoAdelantos(
			final IContexto contextoAdelantos, final IContexto contextoImpresion){
		final String strAdltoPropImporteMinimo = "ANPMN054090";
		final String strAdltoPropCtrlCuotasCompletas = "ANPMN054120";
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarDatosContextoAdelantos");	
		}
		
		contextoImpresion.put(ID_PROP_IMP_MIN_ADELANT, contextoAdelantos.getBigDecimal(strAdltoPropImporteMinimo));
		if (BigDecimal.ZERO == contextoAdelantos.getBigDecimal(strAdltoPropCtrlCuotasCompletas)) {
			contextoImpresion.put(ID_PROP_IND_UNA_O_MAS_CUOTAS, ETIQUETA_NO);
		}
		else{
			contextoImpresion.put(ID_PROP_IND_UNA_O_MAS_CUOTAS, ETIQUETA_SI);
		}
		
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarDatosContextoAdelantos");	
		}
	}
	
	/**
	 * Rellena el contexto de impresion a partir del contexto que se pasa como primer
	 * parámetro
	 * @param ctxtPrograma
	 * @param ctxtSolicitud
	 * @param cntxtoImpresion
	 * @param tipoDoc Identificador del documento que se va a imprimir
	 * @param bolPrestamoVariable True si el prestamo es variable, false en otro caso
	 * 
	 * @return PROVISIONAL BIG DECIMAL CUOTA INICIAL.
	 */
	private static void rellenarImpresionConCntxtoPrograma(final IContexto ctxtPrograma, 
			final IContexto ctxtSolicitud, final IContexto ctxtImpresion, final Boolean bolPrestamoVariable){
		
		final String strCtxtoCmpoFechaSol = "ANPMN050915";
		final String plazoSolicitud = "ANPMN050710";
		final String strCtxtoRegMatrizPago = "ANPMN075140";
		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoImpCuota = "ANPMN075145";
		final String strCtxtoCmpoPorcTae = "ANPMN075150";
		final String strCtxtoCmpoInicioPlazo = "ANPMN075200";
		final String strCtxtoCmpoImpInteres = "ANPMN075390";
		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		
		final String strCtxtoCmpoInteresMinimoRef = "ANPMN075410";
		final String strCtxtoCmpoFechaMinimoReferencia = "ANPMN075420";
		final String strCtxtoCmpoInteresMaximoReferencia = "ANPMN075430";
		final String strCtxtoCmpoFechaMaximoReferencia = "ANPMN075440";
		final String strCtxtoCmpoInteresMedioReferencia = "ANPMN075450";
		final String strCtxtoCmpoCuotaSuelo = "ANPMN075460";
		final String strCtxtoCmpoCuotaTecho = "ANPMN075470";
		final String strCtxtoCmpoCuotaMinima = "ANPMN075480";
		final String strCtxtoCmpoCuotaMaxima = "ANPMN075490";
		final String strCtxtoCmpoCuotaMedia = "ANPMN075500";
		final String strCtxtoCmpoVariacionReferencia = "ANPMN075510";
		final String strCtxtoCmpoPctjReferenciaActual = "ANPMN075520";
		
		final String strCtxtoCmpoPlazoCarencia = "ANPMN050650";
		
		//Variables para el calculo del importe total a reembolsar
		BigDecimal importeTotal = BigDecimal.ZERO;
		BigDecimal minComisionEstudio, minComisionApertura, comisionEstudio, comisionApertura;
				
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoPrograma");	
		}
		if (ctxtPrograma != null){
			final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
			int iNumEntregas = 0;
			//int iNumEntregasCarenciaTotal = 0;
			//int iNumPagos = 0;
			String strFechaPrimVencInt = null;
			
			BigDecimal totalImpInteres = BigDecimal.ZERO;
			BigDecimal plazoCarencia = ctxtSolicitud.getBigDecimal(strCtxtoCmpoPlazoCarencia);
			
			
			// Cambio: antes se calculaba el numero total de pagos recorriendo la matriz de pagos. Ahora se calcula
			// obteniendo el plazo de la solicitud y restandole el plazo de carencia("ANPMN050650")
			BigDecimal plazoCarenciaTotalCalculado = (ctxtSolicitud.getBigDecimal(plazoSolicitud)).subtract(plazoCarencia);	
			// Mapeos comunes
			for (IRegistro registroActual : aRegPagos){
				//Calculamos la cuota con amortizacion (cuota fin carencia)
				//Si la cuota de capital amortizado del primer registro es cero entonces buscamos 
				//la primera cuota que tiene capital amortizado que no sea igual a cero
				if (null != plazoCarencia && 1 == plazoCarencia.compareTo(BigDecimal.ZERO)
						&& null ==ctxtImpresion.getBigDecimal(ID_PROP_CUOTA_FIN_CARENCIA)){
					if (0 != BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital))) {
						ctxtImpresion.put(ID_PROP_CUOTA_FIN_CARENCIA, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCuota));
					}
				}
								
				if (0 != BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital))){
					iNumEntregas++;
				}
				
				// Además de incrementar el contador cuando el capital es distinto de 0, también lo aumentamos cuando los intereses
				// son distintos de cero
//				if ((0 != BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital))) ||
//					(0 != BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres))))
//				{
//					iNumEntregasCarenciaTotal++;
//				}
				if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0){
					//iNumPagos++;
					totalImpInteres = totalImpInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					if (strFechaPrimVencInt == null){
						//31-01-2013 Corregido: strFechaPrimVencInt = fecha de la primera revisión:
						//strFechaPrimVencInt es la fecha del primer cambio de interés en lugar de la fecha de primer pago de interés 
						//que es lo que se estaba asignando en el código que aparece comentado 
						//strFechaPrimVencInt = registroActual.getString(strCtxtoCmpoRegPagoFchPago);
						strFechaPrimVencInt = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
					}
				}
			}
			
			List<IRegistro> lstRegistroSubtotalesAnho = new ArrayList<IRegistro>(0);
			IRegistro subTotal = null;
			
			subTotal = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_SUBTOTALES_ANHO);
			subTotal.put(ID_PROP_SUBTOTALES_CAPITAL, totalImpInteres);
			lstRegistroSubtotalesAnho.add(subTotal);
			
			ctxtImpresion.put(ID_PROP_NUMERO_PAGOS, new BigDecimal(iNumEntregas));
			 			
			ctxtImpresion.put(ID_PROP_NUMERO_PAGOS_TOTAL, plazoCarenciaTotalCalculado);
			
			ctxtImpresion.put(ID_PROP_TAE, (ctxtPrograma.getBigDecimal(strCtxtoCmpoPorcTae)));
			
			ctxtImpresion.put(ID_PROP_MINIMO_REFERENCIA, (ctxtPrograma.getBigDecimal(strCtxtoCmpoInteresMinimoRef)));
			ctxtImpresion.put(ID_PROP_FECHA_MINIMO, (DateUtils.cambiaFormatoFecha(ctxtPrograma.getString(strCtxtoCmpoFechaMinimoReferencia), DateUtils.FORMATO_FECHA_CORTO, DateUtils.FORMATO_FECHA_MES_ANHO)));
			ctxtImpresion.put(ID_PROP_MAXIMO_REFERENCIA, (ctxtPrograma.getBigDecimal(strCtxtoCmpoInteresMaximoReferencia)));
			ctxtImpresion.put(ID_PROP_FECHA_MAXIMO, (DateUtils.cambiaFormatoFecha(ctxtPrograma.getString(strCtxtoCmpoFechaMaximoReferencia), DateUtils.FORMATO_FECHA_CORTO, DateUtils.FORMATO_FECHA_MES_ANHO)));
			
			ctxtImpresion.put(ID_PROP_MEDIA_REFERENCIA, (ctxtPrograma.getBigDecimal(strCtxtoCmpoInteresMedioReferencia)));
			ctxtImpresion.put(ID_PROP_CUOTA_SUELO, (ctxtPrograma.getBigDecimal(strCtxtoCmpoCuotaSuelo)));
			ctxtImpresion.put(ID_PROP_CUOTA_TECHO, (ctxtPrograma.getBigDecimal(strCtxtoCmpoCuotaTecho)));
			ctxtImpresion.put(ID_PROP_CUOTA_MINIMA, (ctxtPrograma.getBigDecimal(strCtxtoCmpoCuotaMinima)));
			ctxtImpresion.put(ID_PROP_CUOTA_MAXIMA, (ctxtPrograma.getBigDecimal(strCtxtoCmpoCuotaMaxima)));
			ctxtImpresion.put(ID_PROP_CUOTA_MEDIA, (ctxtPrograma.getBigDecimal(strCtxtoCmpoCuotaMedia)));
			ctxtImpresion.put(ID_PROP_VARIACION_REFERENCIA, (ctxtPrograma.getBigDecimal(strCtxtoCmpoVariacionReferencia)));
			ctxtImpresion.put(ID_PROP_PORCTJ_REF_ACTUAL, (ctxtPrograma.getBigDecimal(strCtxtoCmpoPctjReferenciaActual)));
			
			
			if (bolPrestamoVariable){
				String strFechaSolicitud = ctxtSolicitud.getString(strCtxtoCmpoFechaSol);
				
				Date hoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());
				Date fechaCambioInteres = null;
				String fechaCambioInteresStr = null;
				
				// Se le pasa siempre un '1' a la función tras indicarse el problema por correo
				BigDecimal numMeses = getNumeroMeses(strFechaSolicitud, strFechaPrimVencInt, Integer.valueOf(1)); 
				fechaCambioInteres = DateHelper.getInstance().getCalendario().sumarMeses(hoy, numMeses.intValue());
				fechaCambioInteresStr = DateHelper.getInstance().formatearFecha(
					DateHelper.FORMATO_DD_MM_YYYY_GUION, fechaCambioInteres);
//				ctxtImpresion.put(ID_PROP_MESES_INTERES_INICIAL, numMeses);
				//ctxtImpresion.put(ID_PROP_FEC_CAMBIO_INTS, String.valueOf(numMeses.add(BigDecimal.ONE)));
				ctxtImpresion.put(ID_PROP_FEC_CAMBIO_INTS, fechaCambioInteresStr);
				//ctxtImpresion.put(ID_PROP_FECHA_CIERRE_INIC, String.valueOf(numMeses));
			}
			
			//25102016: el campo ANPMN103200 se tiene que rellenar siempre. Esto se hace para el producto 5046, que es un hipotecario fijo.
			//Interes inicial
			ctxtImpresion.put(ID_PROP_TIPO_INTERES,	ctxtPrograma.getBigDecimal(strCtxtoCmpoImpInteres)); // ANPMN75390
			
			if (0 != aRegPagos.length){
				IRegistro primeraEntrega = null;
				IRegistro ultimaEntrega = null;
				//IRegistro primerPago = null;
				IRegistro ultimoPago = null;
				for (IRegistro registroActual : aRegPagos){
					if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0)
					{
						primeraEntrega = registroActual;
						break;
					}
				}
				for (IRegistro registroActual : aRegPagos){
					if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0)
					{
						//primerPago = registroActual;
						break;
					}
				}
				for (int i= aRegPagos.length - 1; i >= 0 && ultimaEntrega == null; i--){
					if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0)
					{
						ultimaEntrega = aRegPagos[i];
					}
				}
				for (int i= aRegPagos.length - 1; i >= 0 && ultimoPago == null; i--){
					if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0)
					{
						ultimoPago = aRegPagos[i];
					}
				}
				
				
				if (null != ultimaEntrega){
					// 23-07-2012. Incorporación del importe de la última entrega para mostrarlo en la póliza.
					ctxtImpresion.put(ID_PROP_CUOTA_INICIAL, 
							UtilidadesTramitacion.bigDecimalToString(
									ultimaEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital), 13, 2, Boolean.FALSE));
					/*El campo ID_PROP_CUOTA_INICIAL (ANPMN103370) no se está imprimiendo ni
					 * en la FIPER ni en la OV Hipotecaria.*/
					//cuotaInicial = ultimaEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital);
				}
				
				if (null != primeraEntrega){
					//cuotaInicial = primeraEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCuota);
					//Se modifica para que la primera cuota sea solo el importe de capital sin interes
					cuotaInicial = primeraEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital);
				}
				
				Date fechaInicioPlazo = DateUtils.parseDate(ctxtPrograma.getString(strCtxtoCmpoInicioPlazo), DateUtils.FORMATO_FECHA_CORTO);
				
				//Numero de años desde ID_PROP_FECHA_INICIO_COMPUTO hasta ID_PROP_FECHA_ULTIMO_PAGO_AMORTIZ
				ctxtImpresion.put(ID_PROP_NUMERO_ANHOS, new BigDecimal(
						DateUtils.getDifference( 
						DateUtils.parseDate(ultimaEntrega.getString(strCtxtoCmpoRegPagoFchPago), 
						DateUtils.FORMATO_FECHA_CORTO), 
						fechaInicioPlazo, DateUtils.YEAR, DateUtils.ROUND)));
				
				rellenaCuadroAmortizacionTotalizado(ctxtPrograma, ctxtImpresion, bolPrestamoVariable);
			}
			
			//Calculamos el importe total a reembolsar = importe total + intereses + com. estudio + com. apertura
			minComisionEstudio =  UtilidadesTramitacion.stringToBigDecimal(ctxtImpresion.getString(ID_PROP_MIN_GASTOS_ESTUDIO), Locale.getDefault());
			minComisionApertura = UtilidadesTramitacion.stringToBigDecimal(ctxtImpresion.getString(ID_PROP_MIN_COMISION_APERTURA), Locale.getDefault());
			comisionEstudio = UtilidadesTramitacion.stringToBigDecimal(ctxtImpresion.getString(ID_PROP_GASTOS_ESTUDIO), Locale.getDefault());
			comisionApertura = UtilidadesTramitacion.stringToBigDecimal(ctxtImpresion.getString(ID_PROP_COMISION_APERTURA), Locale.getDefault());
			
			if (Constantes.CTE_UNO_INT == minComisionEstudio.compareTo(comisionEstudio)){
				comisionEstudio = minComisionEstudio;
			}
			if (Constantes.CTE_UNO_INT == minComisionApertura.compareTo(comisionApertura)) {
				comisionApertura = minComisionApertura;
			}
			
			importeTotal = ctxtImpresion.getBigDecimal(ID_PROP_IMPORTE_TOTAL).add(ctxtImpresion.getBigDecimal(ID_PROP_TOTAL_INTERES))
							.add(comisionEstudio).add(comisionApertura);
			
			ctxtImpresion.put(ID_PROP_IMPORTE_TOTAL, importeTotal);
		}
		if(LOGGER.isDebugEnabled())
		{
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios rellenarImpresionConCntxtoPrograma");	
		}
	}
	
	/**
	 * Rellena el registro de matriz de pagos para la FIPER, totalizando a partir del segundo año
	 * Se considera el primer año, desde la fecha del primer pago hasta el 31 de diciembre de ese año.
	 * Se totalizan los pagos por año a partir del segundo (teniendo como referencia el 31 de diciembre del año en cuestión)
	 * @param ctxtPrograma
	 * @param ctxtImpresion
	 * @param isPrestamoVariable
	 */
	private static void rellenaCuadroAmortizacionTotalizado(final IContexto ctxtPrograma,
			final IContexto ctxtImpresion, final Boolean isPrestamoVariable){
		
		final String strCtxtoRegNumCuotas = "ANPMN075080";
		final String strCtxtoRegNumRegistros = "ANPMN075320"; //en este campo en realidad se almacena el tamaño 
															//de la matriz de pagos.
		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		final int pagosCount = ctxtPrograma.getBigDecimal(strCtxtoRegNumCuotas).intValue();
		final int numRegistros = ctxtPrograma.getBigDecimal(strCtxtoRegNumRegistros).intValue();
		final String fechaSiguienteRevision = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
		
		if (0 != pagosCount){
			final String strCtxtoRegMatrizPago = "ANPMN075140";
			final String strCtxtoCmpoRegNumVencimiento = "ANPMN075141";
			final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
			final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
			final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
			final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
			final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
			
			BigDecimal bgPago = BigDecimal.ZERO;
			BigDecimal bgInteres = BigDecimal.ZERO;
			BigDecimal bgPagosTotal = BigDecimal.ZERO;
			BigDecimal bgPagosNoVen = BigDecimal.ZERO;

			final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
			final List <IRegistro> lstRegPagos = new ArrayList<IRegistro>(pagosCount);
			final List <IRegistro> lstRegPagosAnuales = new ArrayList<IRegistro>(pagosCount);
			
			List<IRegistro> lRegPagosMensual = new ArrayList<IRegistro>();
			List<IRegistro> lRegPagosAnual = new ArrayList<IRegistro>();
			int i = 0;
			int iMes= 1;
			int countAnho = 0; //Contador para la numeración de los años en los registros totalizados por año

			// 02-04-2014 se modifica el cuadro de amortización de manera que se imprimen los 12 primeros meses
			// aunque no se correspondan con el año natural y a partir del siguiente se muestra por años, siendo
			//el primer año la suma de los 12 meses anteriores
			
/*			Date fechaAnoProximo = calcularFechaFinAnho(strCtxtoCmpoRegPagoFchPago, aRegPagos, i);
			ctxtImpresion.put(ID_PROP_FECHA_CIERRE_INIC, fechaSiguienteRevision);
			ctxtImpresion.put(ID_PROP_FEC_CAMBIO_INTS, DateUtils.formatDate(
					(DateUtils.addDays(DateUtils.parseDate(fechaSiguienteRevision, DateUtils.FORMATO_FECHA_CORTO), 1)),DateUtils.FORMATO_FECHA_CORTO));
			
			//Desde la fecha del primer pago hasta el 31 de diciembre de ese año los pagos se imprimen tal como llegan
			while(i < pagosCount) {
				final IRegistro registroActual = aRegPagos[i];
				final Date dateFechaPago = DateUtils.parseDate(
							registroActual.getString(strCtxtoCmpoRegPagoFchPago), 
							DateUtils.FORMATO_FECHA_CORTO);
				//Si la fecha de pago es menor o igual que la de fin de año, insertamos el registro en la matriz de pagos mensuales
				if (DateUtils.isDateLessEqual(dateFechaPago, fechaAnoProximo)) {
					lRegPagosMensual.add(aRegPagos[i]);
					if (isPrestamoVariable) {
						IRegistro regPago = crearRegistroPago(ctxtImpresion, registroActual,i+1);
						lstRegPagos.add(regPago);
					}
					else {
						IRegistro regPago = crearRegistroPago(ctxtImpresion, registroActual,i+1);
						lstRegPagos.add(regPago);
					}
					i++;
				}
				else {
					break;
				}
			}
			
			//Calculamos la fecha de fin de año para el siguiente pago
			fechaAnoProximo = calcularFechaFinAnho(strCtxtoCmpoRegPagoFchPago, aRegPagos, i);
			
			//A partir del segundo año se calcula el sumatorio de los pagos de todo el año y se imprime el total por año
			//Calculamos los totales y los insertamos en lRegPagosAnual
			while (i < pagosCount) {
				final IRegistro registroActual = aRegPagos[i];
				final Date dateFechaPago = DateUtils.parseDate(
							registroActual.getString(strCtxtoCmpoRegPagoFchPago), 
							DateUtils.FORMATO_FECHA_CORTO);
				//Si la fecha de pago es menor o igual que la fecha de fin de año, sumamos los datos de ese año
				if (DateUtils.isDateLessEqual(dateFechaPago, fechaAnoProximo)) {
					bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
					bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
					//Capital pendiente por año = capital pendiente del ultimo mes de ese año
					bgPagosNoVen = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
					i++;
				}else {
					countAnho++;
					anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago,
							strCtxtoCmpoRegPagoImpInteres,
							strCtxtoCmpoRegPagoImpCapital,
							strCtxtoCmpoRegPagoImpTotal,
							strCtxtoCmpoRegPagoImpCapitalPdte, bgPago,
							bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos,
							lRegPagosAnual, i,countAnho);
					
					bgPago = BigDecimal.ZERO;
					bgInteres = BigDecimal.ZERO;
					bgPagosTotal = BigDecimal.ZERO;
					bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
					bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
					
					fechaAnoProximo = calcularFechaFinAnho(strCtxtoCmpoRegPagoFchPago, aRegPagos, i);
					i++;
				}
			}*/
			
					
			if(	!UtilidadesTramitacion.isBlankOrNull(ctxtImpresion.getString(ID_PROP_MONEDA_PRESTAMO)) &&
					!ctxtImpresion.getString(ID_PROP_MONEDA_PRESTAMO).equals(MONEDA_EUROS)) {
				
					ctxtImpresion.put(ID_PROP_FECHA_CIERRE_INIC, fechaSiguienteRevision);
			}
					
			//if (null == ctxtImpresion.getBigDecimal(ID_PROP_MESES_INTERES_INICIAL)
			//		|| 0 == BigDecimal.ZERO.compareTo(ctxtImpresion.getBigDecimal(ID_PROP_MESES_INTERES_INICIAL)))
			//{
				//ctxtImpresion.put(ID_PROP_FECHA_CIERRE_INIC, fechaSiguienteRevision);
			//}
			if (!UtilidadesTramitacion.isEmptyOrNullString(ctxtImpresion.getString(ID_PROP_FECHA_CIERRE_INIC))){
				ctxtImpresion.put(ID_PROP_FEC_CAMBIO_INTS, DateUtils.formatDate(
					(DateUtils.addDays(DateUtils.parseDate(fechaSiguienteRevision, DateUtils.FORMATO_FECHA_CORTO), 1)),DateUtils.FORMATO_FECHA_CORTO));
			}
			
			//Desde la fecha del primer pago hasta el duodécimo se imprimen tal como llegan
			//y se suman los totales para visualizarlos en el Año 1 (Año 1 no tiene por qué coincidir con año natural)
			
			/*20150305 Si el primer vencimiento llega desdoblado los dos primeros registros que se envian al documento
			 * pertenecen al primer mes.
			 * 
			 * Si el segundo registro tiene el mismo número de vencimiento y fecha que el primero y además
			 * el capital del primero es 0 entonces el primer vencimiento viene desdoblado
			 * 
			 * */
			if ((0 == aRegPagos[0].getBigDecimal(strCtxtoCmpoRegNumVencimiento).compareTo(aRegPagos[1].getBigDecimal(strCtxtoCmpoRegNumVencimiento))) &&
				(aRegPagos[0].getString(strCtxtoCmpoRegPagoFchPago).equals(aRegPagos[1].getString(strCtxtoCmpoRegPagoFchPago))) &&
				(0 == BigDecimal.ZERO.compareTo(aRegPagos[0].getBigDecimal(strCtxtoCmpoRegPagoImpCapital)))){
				IRegistro regPago = crearRegistroPago(ctxtImpresion, aRegPagos[i], iMes); //i==0, registro 0
				lstRegPagos.add(regPago);
				bgPago = bgPago.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
				bgInteres = bgInteres.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
				bgPagosTotal = bgPagosTotal.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
				i++;
				//NO INCREMENTAMOS MES
				regPago = crearRegistroPago(ctxtImpresion, aRegPagos[i], iMes); //i==1, registro 1
				lstRegPagos.add(regPago);
				bgPago = bgPago.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
				bgInteres = bgInteres.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
				bgPagosTotal = bgPagosTotal.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
				i++;
				iMes++;
				//a partir de aqui comienza el mes 2 en el registro 2 comenzando en 0
			}
						
			while(i < pagosCount && iMes <= Constantes.MESES_ANHO) {
				final IRegistro registroActual = aRegPagos[i];
				
				lRegPagosMensual.add(aRegPagos[i]);
				if (isPrestamoVariable) {
					IRegistro regPago = crearRegistroPago(ctxtImpresion, registroActual, iMes);
					lstRegPagos.add(regPago);
				}
				else {
					IRegistro regPago = crearRegistroPago(ctxtImpresion, registroActual, iMes);
					lstRegPagos.add(regPago);
				}
				
				//Sumamos los totales
				bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
				bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
				bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
				//Capital pendiente por año = capital pendiente del ultimo mes de ese año
				bgPagosNoVen = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
				
				i++;
				iMes++;
			}
			
			//Añadimos los totales del Año 1
			countAnho++;
			anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago,
					strCtxtoCmpoRegPagoImpInteres,
					strCtxtoCmpoRegPagoImpCapital,
					strCtxtoCmpoRegPagoImpTotal,
					strCtxtoCmpoRegPagoImpCapitalPdte, bgPago,
					bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos,
					lRegPagosAnual, i,countAnho);
					
			bgPago = BigDecimal.ZERO;
			bgInteres = BigDecimal.ZERO;
			bgPagosTotal = BigDecimal.ZERO;
			iMes = 1;
			
			//A partir del Año 2 se calcula el sumatorio de los pagos de los siguientes 12 meses y 
			//se imprime el total por año
			//Calculamos los totales y los insertamos en lRegPagosAnual
			//while (i < pagosCount) {
			while (i < numRegistros) {
				final IRegistro registroActual = aRegPagos[i];
				if (iMes <= 12) {
					bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
					bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
					//Capital pendiente por año = capital pendiente del ultimo mes de ese año
					bgPagosNoVen = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
					i++;
					iMes++;
				}else {
					countAnho++;
					anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago,
							strCtxtoCmpoRegPagoImpInteres,
							strCtxtoCmpoRegPagoImpCapital,
							strCtxtoCmpoRegPagoImpTotal,
							strCtxtoCmpoRegPagoImpCapitalPdte, bgPago,
							bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos,
							lRegPagosAnual, i,countAnho);
					
					bgPago = BigDecimal.ZERO;
					bgInteres = BigDecimal.ZERO;
					bgPagosTotal = BigDecimal.ZERO;
					//bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
					//bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					//bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
					
					//i++;
					iMes =1;
				}
			}
				
			countAnho++;
			anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago,
					strCtxtoCmpoRegPagoImpInteres,
					strCtxtoCmpoRegPagoImpCapital, strCtxtoCmpoRegPagoImpTotal,
					strCtxtoCmpoRegPagoImpCapitalPdte, bgPago, bgInteres,
					bgPagosTotal, bgPagosNoVen, aRegPagos, lRegPagosAnual, i, countAnho);
			

			//Recorremos los pagos anuales (lRegPagosAnual) y mandamos a imprimir cada uno de sus registros
			if (isPrestamoVariable){
//				Si es un prestamo variable se copian primero todos los registros de pago de capital
//				Despues se copian todos los registros que tengan importe de interes filtrado por 
//				la fecha que viene por programa
				for (int j = 0; j < lRegPagosAnual.size(); j++)
				{
					final IRegistro registroActual = lRegPagosAnual.get(j);
					
					IRegistro regPago = crearRegistroPagoAnual(ctxtImpresion, registroActual); 
					lstRegPagosAnuales.add(regPago);
				}
			}
			else{
//				Si es un prestamo fijo se copian todos los registros que llegan desde programa
				for (int j=0; j < lRegPagosAnual.size(); j++)
				{
					IRegistro regPago = crearRegistroPagoAnual(ctxtImpresion, lRegPagosAnual.get(j)); 
					lstRegPagosAnuales.add(regPago);
				}
			}

			if (!lstRegPagos.isEmpty()){
				ctxtImpresion.put(ID_REG_AMORTIZACIONES, lstRegPagos.toArray(new IRegistro[lstRegPagos.size()]));
			}
			
			//Calculamos los totales para cuotas, capital e intereses
			if (!lstRegPagosAnuales.isEmpty()){
				ctxtImpresion.put(ID_REG_SUBTOTALES_ANHO, lstRegPagosAnuales.toArray(new IRegistro[lstRegPagosAnuales.size()]));
				
				BigDecimal capitalTotal = BigDecimal.ZERO;
				BigDecimal interesTotal = BigDecimal.ZERO;
				BigDecimal importesCuotaTotal = BigDecimal.ZERO;
				
				for (IRegistro regPago : lstRegPagosAnuales){
					capitalTotal = capitalTotal.add(regPago.getBigDecimal(ID_PROP_SUBTOTALES_CAPITAL));
					interesTotal = interesTotal.add(regPago.getBigDecimal(ID_PROP_SUBTOTALES_INTERES));
					importesCuotaTotal = importesCuotaTotal.add(regPago.getBigDecimal(ID_PROP_SUBTOTALES_CUOTA));
				}
				
//				//Capital amortizado = subTotales capital año + cuotas primeros meses
//				//Interes total = subtotales interés + cuotas primeros meses
//				//Cuota total = subtotales cuotas + cuotas primeros meses
//				if (!lstRegPagos.isEmpty()) {
//					for (IRegistro regPagoMensual : lstRegPagos)
//					{
//						capitalTotal = capitalTotal.add(regPagoMensual.getBigDecimal(ID_PROP_CAPITAL));
//						interesTotal = interesTotal.add(regPagoMensual.getBigDecimal(ID_PROP_INTERES));
//						importesCuotaTotal = importesCuotaTotal.add(regPagoMensual.getBigDecimal(ID_PROP_CUOTA));
//					}
//				}
				
				ctxtImpresion.put(ID_PROP_TOTAL_CAPITAL, capitalTotal);
				ctxtImpresion.put(ID_PROP_TOTAL_INTERES, interesTotal);
				ctxtImpresion.put(ID_PROP_TOTAL_CUOTA, importesCuotaTotal);
			}
		}
	}
	
	/**
	 * Crea un registro con los cómputos anuales de amortización y lo inserta en la lista de pagos
	 * @param strCtxtoCmpoRegPagoFchPago
	 * @param strCtxtoCmpoRegPagoImpInteres
	 * @param strCtxtoCmpoRegPagoImpCapital
	 * @param strCtxtoCmpoRegPagoImpTotal
	 * @param strCtxtoCmpoRegPagoImpCapitalPdte
	 * @param bgPago
	 * @param bgInteres
	 * @param bgPagosTotal
	 * @param bgPagosNoVen
	 * @param lRegPagos
	 * @param lRegPagosAnual
	 * @param indice
	 */
	private static void anhadirRegistroAnual(final String strCtxtoCmpoRegPagoFchPago,final String strCtxtoCmpoRegPagoImpInteres,
			final String strCtxtoCmpoRegPagoImpCapital,final String strCtxtoCmpoRegPagoImpTotal,final String strCtxtoCmpoRegPagoImpCapitalPdte, BigDecimal bgPago,
			BigDecimal bgInteres, BigDecimal bgPagosTotal,BigDecimal bgPagosNoVen, final IRegistro[] lRegPagos,List<IRegistro> lRegPagosAnual, int indice, int numAnho){
		
		IRegistro registroTotales;
		final IRegistro registroAnterior = lRegPagos[indice-1];
		registroTotales = registroAnterior;
		registroTotales.put(strCtxtoCmpoRegPagoFchPago, String.valueOf(numAnho));
		registroTotales.put(strCtxtoCmpoRegPagoImpCapital, bgPago);
		registroTotales.put(strCtxtoCmpoRegPagoImpInteres, bgInteres);
		registroTotales.put(strCtxtoCmpoRegPagoImpTotal, bgPagosTotal);
		registroTotales.put(strCtxtoCmpoRegPagoImpCapitalPdte, bgPagosNoVen);
		lRegPagosAnual.add(registroTotales);
	}
	
	/**
	 * 
	 * @param ctxtImpresion
	 * @param registroActual
	 * @param numeroMes
	 * @return Un resgistro para la matriz de pagos a partir del registro del programa ANPMR203
	 *  que se pasa como parámetro
	 */
	private static IRegistro crearRegistroPago(final IContexto ctxtImpresion, final IRegistro registroActual, int numeroMes){
		//final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoCuota = "ANPMN075145";
		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
		
		final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_AMORTIZACIONES);
		regPago.put(ID_PROP_TEXTO_PERIODO, ETIQUETA_TEXTO_MES);
		//regPago.put(ID_PROP_NUMERO_MES, UtilidadesTramitacion.stringToBigDecimal(registroActual.getString(strCtxtoCmpoRegPagoFchPago), Locale.getDefault()));
		regPago.put(ID_PROP_NUMERO_MES, new BigDecimal(numeroMes));
		regPago.put(ID_PROP_CAPITAL, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
		regPago.put(ID_PROP_CAPITAL_PENDIENTE, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte));
		//cuota = strCtxtoCmpoRegPagoImpCapital + strCtxtoCmpoRegPagoImpInteres
		regPago.put(ID_PROP_CUOTA, registroActual.getBigDecimal(strCtxtoCmpoRegPagoCuota));
		regPago.put(ID_PROP_INTERES, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));

		return regPago;
	}
	
	/**
	 * 
	 * @param ctxtImpresion
	 * @param registroActual
	 * @param ocultarImporte Si True introduce una máscara en el campo importe de interés y el importe toal
	 * @return Un resgistro para la matriz de pagos a partir del registro del programa ANPMR203
	 *  que se pasa como parámetro
	 */
	private static IRegistro crearRegistroPagoAnual(final IContexto ctxtImpresion, final IRegistro registroActual){
		final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
		BigDecimal totalPagosCuota = BigDecimal.ZERO;
		
		final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_SUBTOTALES_ANHO);
		regPago.put(ID_PROP_SUBTOTALES_TEXTO_ANHO, ETIQUETA_TEXTO_ANHO);
		regPago.put(ID_PROP_SUBTOTALES_NUMERO_ANHO, UtilidadesTramitacion.stringToBigDecimal(registroActual.getString(strCtxtoCmpoRegPagoFchPago), Locale.getDefault()));
		regPago.put(ID_PROP_SUBTOTALES_CAPITAL, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
		regPago.put(ID_PROP_SUBTOTALES_CAPITAL_PDTE, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte));
		totalPagosCuota = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital).add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
		regPago.put(ID_PROP_SUBTOTALES_CUOTA, totalPagosCuota);
		regPago.put(ID_PROP_SUBTOTALES_INTERES, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
		
		return regPago;
	}
	
//	/**
//	 * Nos devuelve la fecha del último día del año con respecto a la fecha del pago que se le pasa en el registro
//	 * @param strCtxtoCmpoRegPagoFchPago
//	 * @param aRegPagos
//	 * @param indice
//	 * @return Fecha del último día del año
//	 */
//	private static Date calcularFechaFinAnho(
//			final String strCtxtoCmpoRegPagoFchPago,
//			final IRegistro[] aRegPagos, int indice)
//	{
//		final int diciembre = 11; //Enero = 0
//		IRegistro primerRegistro = aRegPagos[indice];
//		Date dateFechaPrimerPago = DateUtils.parseDate(
//					primerRegistro.getString(strCtxtoCmpoRegPagoFchPago), 
//					DateUtils.FORMATO_FECHA_CORTO);
//		
//		Calendar cal = Calendar.getInstance();
//		cal.setTime(dateFechaPrimerPago);
//		int anho = cal.get(Calendar.YEAR);
//		Date fechaAnoProximo = DateUtils.dateLastDay(diciembre, anho);
//		return fechaAnoProximo;
//	}
	
	/**
	 * @param strFechaSolicitud
	 * @param strFechaPrimVencInt
	 * @param iNumPagos
	 * @return Número de meses al igual que se calcula en el programa PITAR200 
	 */
	private static BigDecimal getNumeroMeses(final String strFechaSolicitud,
			final String strFechaPrimVencInt, final int iNumPagos){
		final Calendar fsCalendar = Calendar.getInstance();
		fsCalendar.setTime(DateUtils.parseDate(strFechaSolicitud, DateUtils.FORMATO_FECHA_CORTO));
		final Calendar fvCalendar = Calendar.getInstance();
		fvCalendar.setTime(DateUtils.parseDate(strFechaPrimVencInt, DateUtils.FORMATO_FECHA_CORTO));
		/*
//		Se le resta doce para tener solo en cuenta la diferencia en meses
//		P=((año(FI)-año(FS)*12 -12 + NV_duracion
		int iMeses = (fvCalendar.get(Calendar.YEAR) - fsCalendar.get(Calendar.YEAR))*12 - 12 + iNumPagos;
//		P=P+(12-MESES(FS)+ meses(FI)
		iMeses += 12-(fsCalendar.get(Calendar.MONTH)+ 1) + (fvCalendar.get(Calendar.MONTH) + 1);
//		P=p/NV_duracion
		if (iMeses != 0)
		{
			iMeses = iMeses / iNumPagos;
		}
		return new BigDecimal(iMeses);*/
		
//		(NV_FECHA_I,NV_FECHA_F, NV_DURACION)
//		PARCIAL = ((AAAA_F - AAAA_I) * 12) - 12 + NV_DURACION;
//		PARCIAL = PARCIAL + (12 - MM_I) + MM_F;
//		PARCIAL = PARCIAL / NV_DURACION;
		
//		Se le resta doce para tener solo en cuenta la diferencia en meses
//		P=((año(FI)-año(FS)*12 -12 + NV_duracion
		int iMeses = (fvCalendar.get(Calendar.YEAR) - fsCalendar.get(Calendar.YEAR))*12 - 12 + iNumPagos;
//		P=P+(12-MESES(FS)+ meses(FI)
		iMeses = iMeses + (12-(fsCalendar.get(Calendar.MONTH)+ 1)) + (fvCalendar.get(Calendar.MONTH) + 1);
//		P=p/NV_duracion
		if (iMeses != 0){
			iMeses = iMeses / iNumPagos;
		}
		return new BigDecimal(iMeses);
	}
	
	/**
	 * 
	 * @param idContexto nombre del contexto a buscar
	 * @param aContextos
	 * @return Retorna un array de contextos que coincidan con el nombre que se pasa como parametro
	 */
	private static IContexto[] getArrayContexto(String idContexto, IContexto[] aContextos){
		List<IContexto> lstContexto = new ArrayList<IContexto>(0);
		for (IContexto contexto : aContextos){
			if (idContexto.equals(contexto.getNombre())){
				lstContexto.add(contexto);
			}
		}
		return lstContexto.toArray(new IContexto[0]);
	}
	
	/**
	 * Para saber si  un préstamo es de interés fijo o variable hay que mirar
	 * el tipo de interés en la tabla AN27TB01,  es decir si existe alguna fila 
	 * con (AN270050=0 AND AN270080 IN (02,03,04,05) )
	 * @param aCtxtoIntereses
	 * @return True si el presatamo es fijo, False en otro caso
	 */
	private static boolean isPrestamoFijo(final IContexto[] aCtxtoIntereses){		
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";

		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios isPrestamoFijo");	
		}
		boolean prestamoFijo = Boolean.TRUE;
		final int aLenght = aCtxtoIntereses.length;
		for (int i=0; i < aLenght && prestamoFijo; i++){
			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion))){
				if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres))){
					prestamoFijo = false;
				}
			}
		}
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios isPrestamoFijo");	
		}
		return prestamoFijo;
	}
	
	/**
	 * Accede a la tabla CG32TB01 para obtener la descripción donde CG320010 = 'IBI' ahora 'IBN' (29/10/2013)
	 * y el CG320020=bidTipoReferencia
	 * @param bidTipoReferencia
	 * @return Descripción del tipo de referencia
	 */
	private static String getStrDescrTipoReferencia(BigDecimal bidTipoReferencia){
		final GestionClausulasRestringuidas gcr = new GestionClausulasRestringuidas();
		final ParametrosC descripcion = gcr.obtenerTipoRefBusquedaProducto(bidTipoReferencia.intValue());
		String strDescripcion = Constantes.CTE_STRING_EMPTY;
		if (descripcion != null){
			strDescripcion = descripcion.getCG320030().trim();
		}
		return strDescripcion;
	}
	
	// 08-08-2012 se obtiene el primer tramo variable de interes para obtener de este tramo
	// los datos necesarios del tramo variable, Diferencial, periodicidad de revisión....
	private static IContexto getUltimoTramoVariable(final IContexto[] aCtxtoIntereses) {
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";
		IContexto ctxInteres = null;

		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO ContextoImpresionFiper_OVHipotecarios getPrimerVariable");	
		}
		boolean prestamoFijo = Boolean.TRUE;
		final int aLenght = aCtxtoIntereses.length;
		for (int i=0; i < aLenght && prestamoFijo; i++){
			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion))){
				if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)))
				{
					//return aCtxtoIntereses[i];
					ctxInteres = aCtxtoIntereses[i];
				}
			}
		}
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios getPrimerVariable");	
		}
		return ctxInteres;
	}
	
	
	/**
	 * Devuelve el interés principal y variable (contexto ANPMN052) del segundo tramo.
	 * @param aCtxtoIntereses
	 * @return
	private static IContexto getSegundoTramoVariable(final IContexto[] aCtxtoIntereses)
	{
		final String strIntPropOrden = "ANPMN052040";
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoInteres = "ANPMN052080";
		
		for (IContexto contexto : aCtxtoIntereses)
		{
			if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(contexto.getBigDecimal(strIntPropTipoCondicion)))
			{
				if ((Constantes.TIPO_INT_VARIABLE.equals(contexto.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_BONIF.equals(contexto.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_PENAL.equals(contexto.getString(strIntPropTipoInteres)) ||
						Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contexto.getString(strIntPropTipoInteres))) &&
					(Constantes.CTE_DOS.intValue() == contexto.getBigDecimal(strIntPropOrden).intValue()))
				{
					return contexto;
				}
			}
		}
		return null;
	}
	 */
	
	
	/**
	 * @param bidPagoUnico
	 * @param bidNumPeriodos
	 * @param strUnidadPeriodos
	 * @param tipoDoc Tipo de documento que estamos imprimiendo
	 * @param reducido Si True se redice el texto para la casilla
	 * @return Literal en base al numero de periodo y a la unidad de peridod
	 */
	private static String getDescPeriodoRevision(final String bidPagoUnico, 
			final BigDecimal bidNumPeriodos, 
			final String strUnidadPeriodos, 
			final boolean reducido){
		StringBuilder sbPeriodicidad = new StringBuilder(45);
		
		if (null != bidPagoUnico && Constantes.CTE_UNO.equals(bidPagoUnico)){
			sbPeriodicidad.append(Constantes.CTE_PERIODO_FINAL);
		}
		else{
			if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(strUnidadPeriodos)){
				if (BigDecimal.ONE.equals(bidNumPeriodos)) {
					sbPeriodicidad.append(Constantes.CTE_PERIODO_MES);
				}
				else if (Constantes.CTE_BID_TRES.equals(bidNumPeriodos)){
					sbPeriodicidad.append(Constantes.CTE_PERIODO_TRIMESTRE);
				}
				else if (Constantes.CTE_BID_SEIS.equals(bidNumPeriodos)){
					sbPeriodicidad.append(Constantes.CTE_PERIODO_SEMESTRE);
				}
				else if (Constantes.CTE_BID_DOCE.equals(bidNumPeriodos)){
					sbPeriodicidad.append(Constantes.CTE_PERIODO_ANIO);
				}
			}
		}
		
		return sbPeriodicidad.toString();
	}
	
	/** Almacena en BD (tabla AN37TB01) los datos relativos a una Oferta Vinculante para Hipotecarios */
	public static void guardarContextoOVHipotecarios(IContexto contextoFiperOV, DatosSolicitudC solicitudActual,IContexto[] lstContextosImprimir,
			java.sql.Date fechaUltimaEntrega,BigDecimal ultimaCuota,java.sql.Date fechaPrimeraEntrega,java.sql.Date fechaPrimerPago){
		
		OfertaVinculanteEng engOfertaV = new OfertaVinculanteEng();
		OfertaVinculanteC ofertaV = engOfertaV.createNewObject();
		
		OfertaVinculanteC versionAnterior = null;
		String indEnvioCorreoDatosIncorrectos = null;
		String fechaPrimeraEntregaVersionAnterior = null; //formato DB2
		String fechaPrimeraEntregaVersionActual = null; //formato DB2

		String fechaUltimaEntregaVersionAnterior = null; //formato DB2
		String fechaUltimaEntregaVersionActual = null; //formato DB2
		BigDecimal plazoVersionAnterior = null;
		BigDecimal plazoVersionActual = null;
		
		//IContexto ctxtDatosSolicitud = UtilidadesTramitacion.getContexto(lstContextosImprimir, ID_CTXTO_DATOS_SOLICITUD);
		
		asignarDatosOVHipotecarios(contextoFiperOV, ofertaV, solicitudActual, lstContextosImprimir,
			fechaUltimaEntrega,
			ultimaCuota,
			fechaPrimeraEntrega,
			fechaPrimerPago);
		
		/*20151026 Comprobaremos si existe versión anterior de oferta vinculante: si existe, entonces
		 * si vemos que tiene el mismo plazo, misma fecha inicial de entrega y DISTINTA fecha final de entrega
		 * enviamos correo, siempre y cuando esté habilitado el parámetro.*/
		indEnvioCorreoDatosIncorrectos = UtilidadesTramitacion.comprobarDatoNull(
			Configuracion.getInstance().getValor(
				CTE_PARAM_CONF_APLICACION_CORREOOVH,
				CTE_PARAM_CONF_AGRUPACION_CORREOOVH,
				CTE_PARAM_CONF_NOMBRE_CORREOOVH));
		if (Constantes.CTE_STR_S.equals(indEnvioCorreoDatosIncorrectos)){			
			versionAnterior = GestionPreformalizacion.obtenerVersionAnterior(solicitudActual);
			
			if (null != versionAnterior){
				plazoVersionAnterior = versionAnterior.getBidPlazo();
				plazoVersionActual = ofertaV.getBidPlazo();
				fechaPrimeraEntregaVersionAnterior = DateHelper.sqlDateToString(versionAnterior.getDateFechaPrimeraEntrega(), DateHelper.FORMATO_DB2_DATE);
				fechaPrimeraEntregaVersionActual = DateHelper.sqlDateToString(ofertaV.getDateFechaPrimeraEntrega(), DateHelper.FORMATO_DB2_DATE);
				fechaUltimaEntregaVersionAnterior = DateHelper.sqlDateToString(versionAnterior.getDateFechaUltimaEntrega(), DateHelper.FORMATO_DB2_DATE);
				fechaUltimaEntregaVersionActual = DateHelper.sqlDateToString(ofertaV.getDateFechaUltimaEntrega(), DateHelper.FORMATO_DB2_DATE);
				
				/*Si el plazo es el mismo, la fecha prevista de firma tambien y la fecha de última entrega cambia enviamos correo*/
				
				if ((0 == plazoVersionAnterior.compareTo(plazoVersionActual)) &&
					(0 == fechaPrimeraEntregaVersionAnterior.compareTo(fechaPrimeraEntregaVersionActual)) &&
					(0 != fechaUltimaEntregaVersionAnterior.compareTo(fechaUltimaEntregaVersionActual))){
					enviarCorreoOfertaVinculanteErronea(CTE_PLANTILLA_ENVIO_CORREO_OVH, solicitudActual.getDatosSolicitudKey().getNucExpediente());
				}
				
			}
		}
		
		ofertaV.persist();
		
	}
	
	/** Asigna los datos contenidos en el contexto de la OV para Hipotecarios a un objeto de tipo OfertaVinculanteC */
	private static void asignarDatosOVHipotecarios(IContexto contextoFiperOV, OfertaVinculanteC ofertaV,
			DatosSolicitudC solicitudActual,
			IContexto[] lstContextosImprimir,
			java.sql.Date fechaUltimaEntrega,
			BigDecimal ultimaCuota,
			java.sql.Date fechaPrimeraEntrega,
			java.sql.Date fechaPrimerPago){
		CamposExtraOfertaVincVO camposExtraOfertaVincVO = new CamposExtraOfertaVincVO();
		
		OfertaVinculanteKey ofKey = new OfertaVinculanteKey();

		ofKey.setBidOficina(solicitudActual.getDatosSolicitudKey().getOficinaSolicitud());
		ofKey.setBidNumero(solicitudActual.getDatosSolicitudKey().getNumSolicitud());
		ofKey.setBidVersion(solicitudActual.getDatosSolicitudKey().getVersionSolicitud());
		ofKey.setBidNuc(solicitudActual.getDatosSolicitudKey().getNucExpediente());
		ofertaV.setOfertaVinculanteKey(ofKey);
		
		camposExtraOfertaVincVO = obtenerCamposExtraOfertaVinculante(
			lstContextosImprimir, 
			contextoFiperOV,
			/*20150209*/
			fechaPrimeraEntrega,
			fechaPrimerPago);
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_FECHA_DIA)))
			ofertaV.setDateFechaDia(DateUtils.toSQLDate(DateUtils.parseDate(contextoFiperOV.getString(ID_PROP_FECHA_DIA), 
						DateUtils.FORMATO_FECHA_CORTO)));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_FECHA_VALIDEZ_DOC)))
			ofertaV.setDateValidezDoc(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoFiperOV.getString(ID_PROP_FECHA_VALIDEZ_DOC),DateUtils.FORMATO_FECHA_CORTO)));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_MARCA_NE)))
			ofertaV.setStrMarca(contextoFiperOV.getString(ID_PROP_MARCA_NE));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_NUMERO_POLIZA)))
			ofertaV.setStrNumPoliza(contextoFiperOV.getString(ID_PROP_NUMERO_POLIZA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_IMPORTE_PRESTAMO)))
			ofertaV.setBidImportePrestamo(contextoFiperOV.getBigDecimal(ID_PROP_IMPORTE_PRESTAMO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_MONEDA_PRESTAMO)))
			ofertaV.setStrMonedaPrestamo(contextoFiperOV.getString(ID_PROP_MONEDA_PRESTAMO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_PLAZO)))
			ofertaV.setBidPlazo(contextoFiperOV.getBigDecimal(ID_PROP_PLAZO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_TIPO_PRESTAMO)))
			ofertaV.setStrTipoPrestamo(UtilidadesTramitacion.truncar(contextoFiperOV.getString(ID_PROP_TIPO_PRESTAMO), 50));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_CLASE_INTERES)))
			ofertaV.setStrClaseInteres(UtilidadesTramitacion.truncar(
				contextoFiperOV.getString(ID_PROP_CLASE_INTERES),
				25));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_FIJO_VBLE)))
			ofertaV.setStrFijoVble(contextoFiperOV.getString(ID_PROP_FIJO_VBLE));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_IMPORTE_TOTAL)))
			ofertaV.setBidImporteTotal(contextoFiperOV.getBigDecimal(ID_PROP_IMPORTE_TOTAL));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_SUELO)))
			ofertaV.setBidSuelo(contextoFiperOV.getBigDecimal(ID_PROP_SUELO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_TECHO)))
			ofertaV.setBidTecho(contextoFiperOV.getBigDecimal(ID_PROP_TECHO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_IND_SUELO_TECHO)))
			ofertaV.setStrIndSueloTecho(contextoFiperOV.getString(ID_PROP_IND_SUELO_TECHO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_TABLA_COBERTURAS)))
			ofertaV.setStrTablaCoberturas(contextoFiperOV.getString(ID_PROP_TABLA_COBERTURAS));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_PERIODICIDAD_REEMB)))
			ofertaV.setStrPeriodicidadReemb(contextoFiperOV.getString(ID_PROP_PERIODICIDAD_REEMB));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_P_PRESTAMO)))
			ofertaV.setStrP_Prestamo(contextoFiperOV.getString(ID_PROP_P_PRESTAMO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_MODALIDAD_AMORTIZACION)))
			ofertaV.setStrModalidadAmortizacion(contextoFiperOV.getString(ID_PROP_MODALIDAD_AMORTIZACION));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_TAE)))
			ofertaV.setStrTae(UtilidadesTramitacion.bigDecimalToString(
					contextoFiperOV.getBigDecimal(ID_PROP_TAE),3,4,false));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_TIPO_INTERES)))
			ofertaV.setBidTipoInteres(contextoFiperOV.getBigDecimal(ID_PROP_TIPO_INTERES));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_GASTOS_ESTUDIO)))
			ofertaV.setStrGastosEstudio(contextoFiperOV.getString(ID_PROP_GASTOS_ESTUDIO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_COMISION_APERTURA)))
			ofertaV.setStrComisionApertura(contextoFiperOV.getString(ID_PROP_COMISION_APERTURA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_REFERENCIA)))
			ofertaV.setStrReferencia(contextoFiperOV.getString(ID_PROP_REFERENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_DIFERENCIAL)))
			ofertaV.setBidDiferencial(contextoFiperOV.getBigDecimal(ID_PROP_DIFERENCIAL));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_MESES_INTERES_INICIAL)))
			ofertaV.setBidMesesInteresInicial(contextoFiperOV.getBigDecimal(ID_PROP_MESES_INTERES_INICIAL));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_DESC_REFERENCIA)))
			ofertaV.setStrDescReferencia(contextoFiperOV.getString(ID_PROP_DESC_REFERENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_MIN_GASTOS_ESTUDIO)))
			ofertaV.setStrMinGastosEstudio(contextoFiperOV.getString(ID_PROP_MIN_GASTOS_ESTUDIO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_MIN_COMISION_APERTURA)))
			ofertaV.setStrMinComisionApertura(contextoFiperOV.getString(ID_PROP_MIN_COMISION_APERTURA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_PORCTJ_REF_ACTUAL)))
			ofertaV.setBidPorctjRefActual(contextoFiperOV.getBigDecimal(ID_PROP_PORCTJ_REF_ACTUAL));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_PORCTJ_GASTOS_ESTUDIO)))
			ofertaV.setStrPorctjGastosEstudio(contextoFiperOV.getString(ID_PROP_PORCTJ_GASTOS_ESTUDIO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_PORCTJ_COMISION_APERTURA)))
			ofertaV.setStrPorctjComisionApertura(contextoFiperOV.getString(ID_PROP_PORCTJ_COMISION_APERTURA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_TEXTO_TIPO_REFERENCIA)))
			ofertaV.setBidTextoTipoReferencia(contextoFiperOV.getBigDecimal(ID_PROP_TEXTO_TIPO_REFERENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_INTERES_DEMORA)))
			ofertaV.setBidInteresDemora(contextoFiperOV.getBigDecimal(ID_PROP_INTERES_DEMORA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_NUMERO_PAGOS)))
			ofertaV.setBidNumeroPagos(contextoFiperOV.getBigDecimal(ID_PROP_NUMERO_PAGOS));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_HIPOTECA_BLINDADA)))
			ofertaV.setStrHipotecaBlindada(contextoFiperOV.getString(ID_PROP_HIPOTECA_BLINDADA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CARENCIA_MESES)))
			ofertaV.setBidCarenciaMeses(contextoFiperOV.getBigDecimal(ID_PROP_CARENCIA_MESES));
		
		/*
		 * 20140616 CAMBIO PROVISIONAL BIG DECIMAL CUOTA INICIAL
		 * 
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_CUOTA_INICIAL)))
			ofertaV.setStrCuotaInicial(new BigDecimal(contextoFiperOV.getString(ID_PROP_CUOTA_INICIAL).replaceFirst(",",".")));
		*/
		if (!UtilidadesTramitacion.isBlankOrNull(cuotaInicial))
			ofertaV.setStrCuotaInicial(cuotaInicial);
		
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_VARIACION_REFERENCIA)))
			ofertaV.setBidVariacionReferencia(contextoFiperOV.getBigDecimal(ID_PROP_VARIACION_REFERENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_MAXIMO_REFERENCIA)))
			ofertaV.setBidMaximoReferencia(contextoFiperOV.getBigDecimal(ID_PROP_MAXIMO_REFERENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_FECHA_MAXIMO)))
			ofertaV.setStrFechaMaximo(contextoFiperOV.getString(ID_PROP_FECHA_MAXIMO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_MAXIMA)))
			ofertaV.setBidCuotaMaxima(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_MAXIMA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_MINIMO_REFERENCIA)))
			ofertaV.setBidMinimoReferencia(contextoFiperOV.getBigDecimal(ID_PROP_MINIMO_REFERENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_MINIMA)))
			ofertaV.setBidCuotaMinima(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_MINIMA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_FECHA_MINIMO)))
			ofertaV.setStrFechaMinimo(contextoFiperOV.getString(ID_PROP_FECHA_MINIMO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_PERIODO_REV_INTER_TEXTO)))
			ofertaV.setStrPeriodoRevInterTexto(contextoFiperOV.getString(ID_PROP_PERIODO_REV_INTER_TEXTO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_IND_VARIAC_REF)))
			ofertaV.setStrIndVariacRef(contextoFiperOV.getString(ID_PROP_IND_VARIAC_REF));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_PERIODO_REV_INTER)))
			ofertaV.setBidPeriodoRevInter(contextoFiperOV.getBigDecimal(ID_PROP_PERIODO_REV_INTER));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_FECHA_CIERRE_INIC)))
			ofertaV.setDateFechaCierreInic(DateUtils.toSQLDate(DateUtils.parseDate(
					contextoFiperOV.getString(ID_PROP_FECHA_CIERRE_INIC),DateUtils.FORMATO_FECHA_CORTO)));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_MEDIA_REFERENCIA)))
			ofertaV.setBidMediaReferencia(contextoFiperOV.getBigDecimal(ID_PROP_MEDIA_REFERENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_MEDIA)))
			ofertaV.setBidCuotaMedia(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_MEDIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_SUELO)))
			ofertaV.setBidCuotaSuelo(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_SUELO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_TECHO)))
			ofertaV.setBidCuotaTecho(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_TECHO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_IND_FECHA_CIERRE)))
			ofertaV.setStrIndFechaCierre(contextoFiperOV.getString(ID_PROP_IND_FECHA_CIERRE));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_FIN_CARENCIA)))
			ofertaV.setBidCuotaFinCarencia(contextoFiperOV.getBigDecimal(ID_PROP_CUOTA_FIN_CARENCIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_CUOTA_CTE)))
			ofertaV.setStrCuotaConstante(contextoFiperOV.getString(ID_PROP_CUOTA_CTE));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_CAPITAL_APLAZADO)))
			ofertaV.setBidCapitalAplazado(contextoFiperOV.getBigDecimal(ID_PROP_CAPITAL_APLAZADO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_MODALIDAD)))
			ofertaV.setBidModalidad(UtilidadesTramitacion.stringToBigDecimal(
					contextoFiperOV.getString(ID_PROP_MODALIDAD), Locale.getDefault()));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_MODELO_POLIZA)))
			ofertaV.setStrModeloPoliza(contextoFiperOV.getString(ID_PROP_MODELO_POLIZA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_VERSION_POLIZA)))
			ofertaV.setStrVersionPoliza(contextoFiperOV.getString(ID_PROP_VERSION_POLIZA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_NUMERO_PRODUCTOS)))
			ofertaV.setBidNumeroProductos(contextoFiperOV.getBigDecimal(ID_PROP_NUMERO_PRODUCTOS));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_DESC_MODALIDAD)))
			ofertaV.setStrDescModalidad(contextoFiperOV.getString(ID_PROP_DESC_MODALIDAD));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_SUBROGACION)))
			ofertaV.setStrSubrogacion(contextoFiperOV.getString(ID_PROP_SUBROGACION));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_AMORT_PARCIAL_MENOR_5)))
			ofertaV.setStrAmortParcialMenor5(contextoFiperOV.getString(ID_PROP_AMORT_PARCIAL_MENOR_5));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_AMORT_PARCIAL_MAYOR_5)))
			ofertaV.setStrAmortParcialMayor5(contextoFiperOV.getString(ID_PROP_AMORT_PARCIAL_MAYOR_5));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_NO_SUBROGATORIO_MENOR_5)))
			ofertaV.setStrNoSubrogatorioMenor5(contextoFiperOV.getString(ID_PROP_NO_SUBROGATORIO_MENOR_5));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_NO_SUBROGATORIO_MAYOR_5)))
			ofertaV.setStrNoSubrogatorioMayor5(contextoFiperOV.getString(ID_PROP_NO_SUBROGATORIO_MAYOR_5));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_SUBROGATORIO_MENOR_5)))
			ofertaV.setStrSubrogatorioMenor5(contextoFiperOV.getString(ID_PROP_SUBROGATORIO_MENOR_5));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_SUBROGATORIO_MAYOR_5)))
			ofertaV.setStrSubrogatorioMayor5(contextoFiperOV.getString(ID_PROP_SUBROGATORIO_MAYOR_5));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_IND_AMORT_ANTICIPADA)))
			ofertaV.setStrIndAmortAnticipada(contextoFiperOV.getString(ID_PROP_IND_AMORT_ANTICIPADA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_IMP_MIN_ADELANT)))
			ofertaV.setBidImpMinAdelant(contextoFiperOV.getBigDecimal(ID_PROP_IMP_MIN_ADELANT));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_IND_UNA_O_MAS_CUOTAS)))
			ofertaV.setStrIndUnaOMasCuotas(contextoFiperOV.getString(ID_PROP_IND_UNA_O_MAS_CUOTAS));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_COMIS_MOD_CONTR)))
			ofertaV.setStrComisModContr(contextoFiperOV.getString(ID_PROP_COMIS_MOD_CONTR));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_COMIS_NOVACION)))
			ofertaV.setStrComisNovacion(contextoFiperOV.getString(ID_PROP_COMIS_NOVACION));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getString(ID_PROP_COMIS_RECLAMACION)))
			ofertaV.setStrComisReclamacion(contextoFiperOV.getString(ID_PROP_COMIS_RECLAMACION));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_NOTARIA)))
			ofertaV.setBidGastosNotaria(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_NOTARIA));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_REGISTRO)))
			ofertaV.setBidGastosRegistro(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_REGISTRO));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_SEGUROS)))
			ofertaV.setBidGastoSeguros(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_SEGUROS));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_GESTION)))
			ofertaV.setBidGastosGestion(contextoFiperOV.getBigDecimal(ID_PROP_GASTOS_GESTION));
		
		if (!UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(ID_PROP_TIPO_INTERES)))
			ofertaV.setStrInteresInicial(contextoFiperOV.getBigDecimal(ID_PROP_TIPO_INTERES).toString());

		if (! UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaCambioInteres())){
			ofertaV.setDateFecCambioInst(camposExtraOfertaVincVO.getFechaCambioInteres());
		}
				
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getListarDiligencia())){
			ofertaV.setStrListarDiligencia(camposExtraOfertaVincVO.getListarDiligencia());
		}
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getNombreOficina())){
			ofertaV.setStrNombreOficina(camposExtraOfertaVincVO.getNombreOficina());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getNumeroPrestamo())){
			ofertaV.setStrNumeroPrestamo(camposExtraOfertaVincVO.getNumeroPrestamo());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getLugarFecha())){
			ofertaV.setStrLugarFecha(camposExtraOfertaVincVO.getLugarFecha());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getCapitalLetra())){
			ofertaV.setStrCapitalLetra(camposExtraOfertaVincVO.getCapitalLetra());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaInicioPlazo())){
			ofertaV.setDateFechaInicioPlazo(camposExtraOfertaVincVO.getFechaInicioPlazo());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaPrimeraEntrega())){
			ofertaV.setDateFechaPrimeraEntrega(camposExtraOfertaVincVO.getFechaPrimeraEntrega());
		}
			
		/*CAMBIO PROOVISIONAL FECHA ULTIMA ENTREGA 20140616*/	
		if (!UtilidadesTramitacion.isBlankOrNull(fechaUltimaEntrega)){
			ofertaV.setDateFechaUltimaEntrega(fechaUltimaEntrega);
		}
				
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getSucesivasEntregas())){
			ofertaV.setStrSucesivasEntregas(camposExtraOfertaVincVO.getSucesivasEntregas());
		}

		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaFinPeriodoDisp())){
			ofertaV.setDateFechaFinPeriodoDisp(camposExtraOfertaVincVO.getFechaFinPeriodoDisp());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getMarcaPrimeraEntrega())){
			ofertaV.setStrMarcaPrimeraEntrega(camposExtraOfertaVincVO.getMarcaPrimeraEntrega());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getSucesivosPagos())){
			ofertaV.setStrSucesivosPagos(camposExtraOfertaVincVO.getSucesivosPagos());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getMarcaInteresInicial())){
			ofertaV.setStrMarcaInteresInicial(camposExtraOfertaVincVO.getMarcaInteresInicial());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getNumeroPagosInteres())){
			ofertaV.setStrNumeroPagosInteres(camposExtraOfertaVincVO.getNumeroPagosInteres());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaPrimerPagoInteres())){
			ofertaV.setDateFechaPrimerPagoInteres(camposExtraOfertaVincVO.getFechaPrimerPagoInteres());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getSucesivosPagosInteres())){
			ofertaV.setStrSucesivosPagosInteres(camposExtraOfertaVincVO.getSucesivosPagosInteres());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getDiasLiquidacion())){
			ofertaV.setStrDiasLiquidacion(camposExtraOfertaVincVO.getDiasLiquidacion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getMargenMaxRef())){
			ofertaV.setBidMargenMaxRef(camposExtraOfertaVincVO.getMargenMaxRef());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getTipoRefSustit())){
			ofertaV.setStrTipoRefSustit(camposExtraOfertaVincVO.getTipoRefSustit());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getMargen())){
			ofertaV.setBidMargen(camposExtraOfertaVincVO.getMargen());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getPeriodicidadRevision())){
			ofertaV.setStrPeriodicidadRevision(camposExtraOfertaVincVO.getPeriodicidadRevision());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getCuentaAsociada())){
			ofertaV.setStrCuentaAsociada(camposExtraOfertaVincVO.getCuentaAsociada());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getOficinaCuentaAsociada())){
			ofertaV.setStrOficinaCuentaAsociada(camposExtraOfertaVincVO.getOficinaCuentaAsociada());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getPorctjCapitalInicioAnho())){
			ofertaV.setStrPorctjCapitalInicioAnho(camposExtraOfertaVincVO.getPorctjCapitalInicioAnho());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getPorctjComicionModificacion())){
			ofertaV.setStrPorctjComicionModificacion(camposExtraOfertaVincVO.getPorctjComicionModificacion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getCorretaje())){
			ofertaV.setBidCorretaje(camposExtraOfertaVincVO.getCorretaje());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getNumLineasObservacion())){
			ofertaV.setBidNumLineasObservacion(camposExtraOfertaVincVO.getNumLineasObservacion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getPrestamoHipotecario())){
			ofertaV.setStrPrestamoHipotecario(camposExtraOfertaVincVO.getPrestamoHipotecario());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaPrimeraDisposicion())){
			ofertaV.setDateFechaPrimeraDisposicion(camposExtraOfertaVincVO.getFechaPrimeraDisposicion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getSucesivasDisposiciones())){
			ofertaV.setStrSucesivasDisposiciones(camposExtraOfertaVincVO.getSucesivasDisposiciones());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaUltimaDisposicion())){
			ofertaV.setStrFechaUltimaDisposicion(camposExtraOfertaVincVO.getFechaUltimaDisposicion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getImporteDisposiciones())){
			ofertaV.setBidImporteDisposiciones(camposExtraOfertaVincVO.getImporteDisposiciones());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaPrimeraLiquidacion())){
			ofertaV.setDateFechaPrimeraLiquidacion(camposExtraOfertaVincVO.getFechaPrimeraLiquidacion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getImporteCuotaPactada())){
			ofertaV.setBidImporteCuotaPactada(camposExtraOfertaVincVO.getImporteCuotaPactada());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(ultimaCuota)){
			ofertaV.setBidImporteUltimaCuota(ultimaCuota);
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getFechaUltimaEntregaPrimerPeriodo())){
			ofertaV.setDateFechaUltimaEntregaPrimerPeriodo(camposExtraOfertaVincVO.getFechaUltimaEntregaPrimerPeriodo());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getImpTotalInteresesCapitalizados())){
			ofertaV.setBidImpTotalInteresesCapitalizados(camposExtraOfertaVincVO.getImpTotalInteresesCapitalizados());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getDescripcionObjPignord())){
			ofertaV.setStrDescripcionObjPignord(camposExtraOfertaVincVO.getDescripcionObjPignord());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getImporteTasacion())){
			ofertaV.setBidImporteTasacion(camposExtraOfertaVincVO.getImporteTasacion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getPorctjGastosSeguro())){
			ofertaV.setBidPorctjGastosSeguro(camposExtraOfertaVincVO.getPorctjGastosSeguro());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getPorctjComisionSbTasacion())){
			ofertaV.setBidPorctjComisionSbTasacion(camposExtraOfertaVincVO.getPorctjComisionSbTasacion());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getAlojamiento())){
			ofertaV.setBidAlojamiento(camposExtraOfertaVincVO.getAlojamiento());
		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(camposExtraOfertaVincVO.getTotalComsPagadasFechaFormalizacion())){
			ofertaV.setStrTotalComsPagadasFechaFormalizacion(camposExtraOfertaVincVO.getTotalComsPagadasFechaFormalizacion());
		}
		
		if (null != camposExtraOfertaVincVO.getCuotaEPC()){
			ofertaV.setCuotaEPC(camposExtraOfertaVincVO.getCuotaEPC());
		}
		if (null != camposExtraOfertaVincVO.getTimestamp()){
			ofertaV.setTimestamp(camposExtraOfertaVincVO.getTimestamp());
		}
		
		if (null != camposExtraOfertaVincVO.getTaeBonificada()){
			ofertaV.setTaeBonificada(camposExtraOfertaVincVO.getTaeBonificada());
		}	
		if (! UtilidadesTramitacion.isBlankOrNull(contextoFiperOV.getBigDecimal(VALOR_INTERES_SEGUNDO_TRAMO))){
			ofertaV.setCuotaEPCSegundoTramo(contextoFiperOV.getBigDecimal(VALOR_INTERES_SEGUNDO_TRAMO));
		}	
	}
	

	/**
	 * Recupera los diferenciales a aplicar según la PD del cliente partiendo de:
	 *  - Codigo producto: obtenido del campo  ANPMN050080.
	 *  - Codigo subproducto: obtenido del campo ANPMN050090.
	 *  - Fecha solicitud: obtenido del campo ANPMN050915.
	 *  A partir de ahi, para cada una de las "reglas de cálculo" del diferencial
	 *  a aplicar lo calculamos, el diferencial y el diferencial bonificado,
	 *   obteniendo previamente el diferencial inicial del campo ANPMN103240.
	 *   Posteriormente se añaden al contexto ANPMN103 y se devuelve.
	 *  
	 *  El contexto con los datos de la solicitud es el ANPMN050, y es rellenado
	 *  por el servicio de negocio DatosSolicitudLstSrv, (CO ANPM_150).
	 *  
	 * @param ctxImpresion
	 * @param ctxSolicitud
	 * @return
	 */
	private static IContexto obtenerDiferenciales(IContexto ctxImpresion, IContexto ctxSolicitud){
		
		BigDecimal diferencialInicial = null;
		BigDecimal codigoProducto = null;
		BigDecimal codigoSubproducto = null;
		String fechaSolicitudStr = null;
		java.sql.Date fechaSolicitud = null;
		List<DifSegunPdClienteC> listaDifSegunPdCliente = null;
		DifSegunPdClienteC difSegunPdCliente = null;
		
		diferencialInicial = ctxImpresion.getBigDecimal(ID_PROP_DIFERENCIAL);
		codigoProducto = ctxSolicitud.getBigDecimal(CTX_SOLICITUD_COD_PROD);
		codigoSubproducto = ctxSolicitud.getBigDecimal(CTX_SOLICITUD_COD_SUBPROD);
		fechaSolicitudStr = ctxSolicitud.getString(CTX_SOLICITUD_FECHA_SOLIC);
		
		fechaSolicitud = DateHelper.stringASqlDate(fechaSolicitudStr, DateHelper.FORMATO_DD_MM_YYYY_GUION);
		
		listaDifSegunPdCliente = GestionDiferencial.obtenerDiferencialVigente(
			codigoProducto, codigoSubproducto, fechaSolicitud);
		
		if (UtilidadesTramitacion.isBlankOrNull(listaDifSegunPdCliente)){
			ServicioNegocio.rollback(CTE_COD_ERROR_NO_HAY_DIFERENCIALES_AN83, null, null, null);
		}
		
		/*Campos individuales, rellenamos de uno en uno por rangos*/
		/*Recuperamos el primer rango*/
		if (Constantes.CTE_UNO_INT.intValue() <= listaDifSegunPdCliente.size()){
			difSegunPdCliente = listaDifSegunPdCliente.get(Constantes.CTE_CERO.intValue());
			ctxImpresion.put(ID_DIF_RANGO_PRIMERO, 
				GestionDiferencial.calcularDiferencial(difSegunPdCliente, diferencialInicial));
			ctxImpresion.put(ID_DIF_BONIF_RANGO_PRIMERO, 
				GestionDiferencial.calcularDiferencialBonificado(difSegunPdCliente, diferencialInicial));
		}
		/*Recuperamos el segundo rango*/
		if (Constantes.CTE_DOS.intValue() <= listaDifSegunPdCliente.size()){
			difSegunPdCliente = listaDifSegunPdCliente.get(Constantes.CTE_UNO_INT.intValue());
			ctxImpresion.put(ID_DIF_RANGO_SEGUNDO, 
				GestionDiferencial.calcularDiferencial(difSegunPdCliente, diferencialInicial));
			ctxImpresion.put(ID_DIF_BONIF_RANGO_SEGUNDO, 
				GestionDiferencial.calcularDiferencialBonificado(difSegunPdCliente, diferencialInicial));
		}
		/*Recuperamos el tercer rango*/
		if (Constantes.CTE_TRES.intValue() <= listaDifSegunPdCliente.size()){
			difSegunPdCliente = listaDifSegunPdCliente.get(Constantes.CTE_DOS.intValue());
			ctxImpresion.put(ID_DIF_RANGO_TERCERO, 
				GestionDiferencial.calcularDiferencial(difSegunPdCliente, diferencialInicial));
			ctxImpresion.put(ID_DIF_BONIF_RANGO_TERCERO, 
				GestionDiferencial.calcularDiferencialBonificado(difSegunPdCliente, diferencialInicial));
		}
		/*Recuperamos el cuarto rango*/
		if (Constantes.CTE_CUATRO.intValue() <= listaDifSegunPdCliente.size()){
			difSegunPdCliente = listaDifSegunPdCliente.get(Constantes.CTE_TRES.intValue());
			ctxImpresion.put(ID_DIF_RANGO_CUARTO, 
				GestionDiferencial.calcularDiferencial(difSegunPdCliente, diferencialInicial));
			ctxImpresion.put(ID_DIF_BONIF_RANGO_CUARTO, 
				GestionDiferencial.calcularDiferencialBonificado(difSegunPdCliente, diferencialInicial));
		}
		
		return ctxImpresion;
	}
	
	private static CamposExtraOfertaVincVO obtenerCamposExtraOfertaVinculante(final IContexto[] lstContextosImprimir, 
		IContexto contextoImprimir,java.sql.Date fechaPrimeraEntrega,java.sql.Date fechaPrimerPago){
		
		CamposExtraOfertaVincVO camposExtraOfertaVincVO = new CamposExtraOfertaVincVO();
		
		BigDecimal cuotaEPC = null;
		Timestamp timestamp = null;
		int indiceBusqSegEntrega = 0; //necesito un int para obtener de la matriz ANPMN075140 la segunda entrega.
		
		BigDecimal taeBonificada = null;
		
		final String strCtxtoPrograma = "ANPMN075";
		final String strCtxtoCondicionesCapitalPrestamo = "ANPMN051";
		final String strCtxtoInteres = "ANPMN052";

		final String strCtxtoCuentasPrestamo = "ANPMN072";
		
		BigDecimal numVencimientoAnterior = BigDecimal.ZERO;
		
		IContexto ctxtPrograma = UtilidadesTramitacion.getContexto(lstContextosImprimir, strCtxtoPrograma);
		IContexto ctxtDatosSolicitud = UtilidadesTramitacion.getContexto(lstContextosImprimir, ID_CTX_DATOS_SOLICITUD);
		final IContexto[] aCtxtoIntereses = getArrayContexto(strCtxtoInteres, lstContextosImprimir);
		
		IContexto contextoCondicionesCapital = UtilidadesTramitacion.getContexto(lstContextosImprimir, strCtxtoCondicionesCapitalPrestamo);
		
		//ctxtPrograma : ANPMN075 : amortizacion, sale de la ANPM_266
		//ctxtDatosSolicitud : ANPMN050 , sale de la ANPM_150
		
		final String strCtxtoRegMatrizPago = "ANPMN075140";
		final String strCtxtoCmpoRegNumVencimiento = "ANPMN075141";
		//final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
		final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
		final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
		final String strCtxtoCmpoRegPagoImpCuota = "ANPMN075145";
		final String strCtxtoCmpoInicioPlazo = "ANPMN075200";
		final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
		
		final String strCtxtoCmpoFecLimDisponer = "ANPMN075530";
		String fechaLimDisponerStr = null;
		java.sql.Date fechaLimDisponer = null;
	
		//ctxCondicionesCapital : ANPMN051
		final String strCondPropIntNumPeriodos = "ANPMN051150";
		final String strCondPropStrUnidadPeriodo = "ANPMN051160";
		final String strCondPropIntTipoPeriodo = "ANPMN051170";
		final String strCondPropPagoUnico = "ANPMN051180";
		
		final String strSolPropNumeroSolicitud = "ANPMN050020";
		final String strSolPropOficinaSolicitud = "ANPMN050010";
		final String strSolPropDigitoSolicitud = "ANPMN050070";
		final String strSolPropImporteTotal = "ANPMN050630";
		final String strSolPropMonedaImporteTotal = "ANPMN050640";
		
		//ctxInteres : ANPMN052
		final String strIntPropTipoCondicion = "ANPMN052050";
		final String strIntPropTipoReferencia = "ANPMN052160";
		final String strPropDirefencial = "ANPMN052270";
		final String strIntNumPeriodoIntRev = "ANPMN052380";
		final String strIntPropStrUnidadPeriodoRev = "ANPMN052400";
		final String strIntPropIntTipoPeriodo = "ANPMN052450";
			
		final String strCtaBidEntidad = "ANPMN072110";
		final String strCtaBidOficina = "ANPMN072120";
		final String strCtaBidNumeroCuenta = "ANPMN072140";
		final String strCtaBidCuentaContable = "ANPMN072130";
		final String strCtaBidDigitoCuenta = "ANPMN072150";
		final String strCtaStringTipoCuenta = "ANPMN072100";
		final String strCtaBidPrioridad = "ANPMN072210";
				
		IRegistro ultimaEntrega = null;
		IRegistro segundaEntrega = null;
		IRegistro ultimoPago = null;
		
		//AN370840
		//listarDiligencia : pendiente:
		//	private static final String ID_PROP_LISTAR_DILIGENCIA = "ANPMN100011"; // PENDIENTE

		//AN370850
		camposExtraOfertaVincVO.setNombreOficina(UtilidadesTramitacion.getNombreOficina(
			ctxtDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud)));
		
		//AN370860
		camposExtraOfertaVincVO.setNumeroPrestamo(
				getNumPrestamo(ctxtDatosSolicitud, strSolPropOficinaSolicitud, strSolPropNumeroSolicitud, strSolPropDigitoSolicitud));

		//AN370870
		camposExtraOfertaVincVO.setLugarFecha(getLugaryFecha(ctxtDatosSolicitud));
		
		//AN370880
		camposExtraOfertaVincVO.setCapitalLetra(bidImporteToStr(
			ctxtDatosSolicitud.getBigDecimal(strSolPropImporteTotal),
			ctxtDatosSolicitud.getString(strSolPropMonedaImporteTotal),
			Boolean.TRUE));
		
		//AN370890
		camposExtraOfertaVincVO.setFechaInicioPlazo(
				DateHelper.stringASqlDate(ctxtPrograma.getString(strCtxtoCmpoInicioPlazo), DateUtils.FORMATO_FECHA_CORTO));

		//AN370900
		//FechaPrimeraEntrega, abajo
		
		//AN370910
		camposExtraOfertaVincVO.setSucesivasEntregas(getDescPeriodoRevision(
			contextoCondicionesCapital.getString(strCondPropPagoUnico),
			contextoCondicionesCapital.getBigDecimal(strCondPropIntNumPeriodos), 
			contextoCondicionesCapital.getString(strCondPropStrUnidadPeriodo),  
			contextoCondicionesCapital.getBigDecimal(strCondPropIntTipoPeriodo),
			//paso,
			Boolean.FALSE));

		//AN370920
		//FechaUltimaEntrega, abajo
		
		//AN370930
		//dateFechaFinPeriodoDisp : pendiente, tampoco se está informando en ContextoImpresionFormalizacion, ANPMN100.
		fechaLimDisponerStr = ctxtPrograma.getString(strCtxtoCmpoFecLimDisponer);
		if (! StringUtils.isBlank(fechaLimDisponerStr)){
			fechaLimDisponer = DateHelper.stringASqlDate(fechaLimDisponerStr, DateHelper.FORMATO_YYYY_MM_DD_GUION);
		}
		else{
			fechaLimDisponer = DateHelper.stringASqlDate(DateUtils.CTE_DATELOWESTONLYDAY, DateHelper.FORMATO_YYYY_MM_DD_GUION);
		}
		camposExtraOfertaVincVO.setFechaFinPeriodoDisp(fechaLimDisponer);
		
		
		/*Se almacenan los campos que vienen como parámetros del método.*/
		camposExtraOfertaVincVO.setFechaPrimerPagoInteres(fechaPrimerPago);
		camposExtraOfertaVincVO.setFechaPrimeraEntrega(fechaPrimeraEntrega);
		
		/*Si estamos en EVO obtenemos la tae bonificada, para ello invocamos por segunda vez el CO ANPM_266,
		 *  pasándole un 5 en tipo de operación. */
		//if (esEntornoEvo)
		//{
		taeBonificada = contextoImprimir.getBigDecimal(ID_TAE_BONIFICADA);
		camposExtraOfertaVincVO.setTaeBonificada(taeBonificada);
		//}
		
		if (ctxtPrograma != null){
			final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
			//int iNumEntregas = 0;
			int iNumPagos = 0;
			String strFechaPrimVencInt = null;
			
			BigDecimal totalImpInteres = BigDecimal.ZERO;
			
			// Mapeos comunes
			for (IRegistro registroActual : aRegPagos){
				/*if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0)
				{
					iNumEntregas++;
				}*/
				if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0){
					/*20150305 Se corrige la forma de obtener el número de pagos de interés debido al desdoble del primer vencimiento.
					 * Se consideran pagos diferentes aquellos que vengan en dos registros diferentes con los importes de interés distintos
					 * de cero PERO ADEMÁS tienen que tener el número de vencimiento diferente.
					 * */
					if (0 != numVencimientoAnterior.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegNumVencimiento)))
					{
						iNumPagos++;
					}
					numVencimientoAnterior = registroActual.getBigDecimal(strCtxtoCmpoRegNumVencimiento);
					
					totalImpInteres = totalImpInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
					if (strFechaPrimVencInt == null){
						//31-01-2013 Corregido: strFechaPrimVencInt = fecha de la primera revisión:
						//strFechaPrimVencInt es la fecha del primer cambio de interés en lugar de la fecha de primer pago de interés 
						//que es lo que se estaba asignando en el código que aparece comentado 
						//strFechaPrimVencInt = registroActual.getString(strCtxtoCmpoRegPagoFchPago);
						strFechaPrimVencInt = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
					}
				}
			}
			//AN370980
			camposExtraOfertaVincVO.setNumeroPagosInteres(String.valueOf(iNumPagos));
		
			//AN370570
			final String fechaSiguienteRevisionStr = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
				
			java.sql.Date fechaCambioInteres = DateHelper.stringASqlDate(
				fechaSiguienteRevisionStr,
				DateHelper.FORMATO_DD_MM_YYYY_GUION);
	
			camposExtraOfertaVincVO.setFechaCambioInteres(fechaCambioInteres);
				
			indiceBusqSegEntrega = 0;
			for (IRegistro registroActual : aRegPagos){
				if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0){
					if (1 == indiceBusqSegEntrega) { //segunda entrega
						segundaEntrega = registroActual;
						break;
					}
					indiceBusqSegEntrega++;
				}
			}
			for (int i= aRegPagos.length - 1; i >= 0 && ultimaEntrega == null; i--){
				if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0){
					ultimaEntrega = aRegPagos[i];
				}
			}
			for (int i= aRegPagos.length - 1; i >= 0 && ultimoPago == null; i--){
				if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0){
					ultimoPago = aRegPagos[i];
				}
			}

			if (null != segundaEntrega){
				cuotaEPC = segundaEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCuota);
				camposExtraOfertaVincVO.setCuotaEPC(cuotaEPC);
			}
			
			timestamp = DateHelper.getInstance().askTimestampFromDB2();
			camposExtraOfertaVincVO.setTimestamp(timestamp);
			
/*
				if (null != primeraEntrega)
				{
					20150209 Cuando llegamos aquí ya ha sido totalizada la matriz de pagos, de tal forma que en
					 * los vencimientos correspondientes se está sobreescribiendo la información por años.
					 * Pillaremos la fecha de primera entrega del parámetro de entrada de esta función.
					primeraEntregaStr = primeraEntrega.getString(strCtxtoCmpoRegPagoFchPago);
					primeraEntregaDate = DateHelper.stringASqlDate(primeraEntregaStr, DateHelper.FORMATO_DD_MM_YYYY_GUION);
		//AN370900
					camposExtraOfertaVincVO.setFechaPrimeraEntrega(primeraEntregaDate);
				}
*/
		
/*
				if (null != ultimaEntrega)
				{
				 COMENTADO A LA ESPERA DE SOLUCIONARLO, EN LA FECHA ULTIMA ENTREGA
				 * DEVUELVE UN "12"
					ultimaEntregaStr = ultimaEntrega.getString(strCtxtoCmpoRegPagoFchPago);
					ultimaEntregaDate = DateHelper.stringASqlDate(ultimaEntregaStr, DateHelper.FORMATO_DD_MM_YYYY_GUION);
		//AN370920
					camposExtraOfertaVincVO.setFechaUltimaEntrega(ultimaEntregaDate); 
					
		//AN371190
					//EDIT 20140623: está bien esta asignación, pero antes hay que corregir 
					//una sobreescritura previa, mientras tanto se obtiene la ultima cuota
					//de otra forma.
					camposExtraOfertaVincVO.setImporteUltimaCuota(
						ultimaEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCuota));
				}
*/
		}
		
		//intereses : ANPMN052
		
		for (IContexto ctxInteres : aCtxtoIntereses){
			if (Constantes.INTERES_NIVEL_SUSTITUTIVO.equals(ctxInteres.getBigDecimal(strIntPropTipoCondicion))){
				if (! UtilidadesTramitacion.isBlankOrNull(ctxInteres.getBigDecimal(strIntPropTipoReferencia))){
					//AN371030
					camposExtraOfertaVincVO.setTipoRefSustit(ctxInteres.getBigDecimal(strIntPropTipoReferencia).toString());
					//AN371040
					//ID_PROP_MARGEN_PRINCIPAL
					camposExtraOfertaVincVO.setMargen(ctxInteres.getBigDecimal(strPropDirefencial));
					//AN371050
					//ID_PROP_PERIODICIDAD_REVISION
					camposExtraOfertaVincVO.setPeriodicidadRevision(
							getDescPeriodoRevision(
						null,
						ctxInteres.getBigDecimal(strIntNumPeriodoIntRev),
						ctxInteres.getString(strIntPropStrUnidadPeriodoRev),
						ctxInteres.getBigDecimal(strIntPropIntTipoPeriodo),
						//paso,
						Boolean.FALSE));
				}
			}
		}
		
		//cuentas : ANPMN072
		IContexto[] arrayCtxCuentas = getArrayContexto(strCtxtoCuentasPrestamo, lstContextosImprimir);
		
		for (IContexto contextoCuenta : arrayCtxCuentas){
			if (Constantes.CTE_PRIORIDAD_CUENTA_UNO.equals(contextoCuenta.getBigDecimal(strCtaBidPrioridad))){
				final BigDecimal bidEntidad = contextoCuenta.getBigDecimal(strCtaBidEntidad); 
				final BigDecimal bidOficina = contextoCuenta.getBigDecimal(strCtaBidOficina);
				final BigDecimal bidNumeroCuenta = contextoCuenta.getBigDecimal(strCtaBidNumeroCuenta);
				final BigDecimal bidCuentaContable = contextoCuenta.getBigDecimal(strCtaBidCuentaContable);
				final BigDecimal bidDigitoCuenta = contextoCuenta.getBigDecimal(strCtaBidDigitoCuenta);
				if (Constantes.CTE_TIPO_CUENTA_ABONO.equals(contextoCuenta.getString(strCtaStringTipoCuenta))){
		//AN371060
					//ID_PROP_CUENTA_ASOCIADA
/*
					camposExtraOfertaVincVO.setCuentaAsociada(
							DatosCuentasC.getCuentaFormateadaCCC(bidEntidad, bidOficina,
									bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
*/
					camposExtraOfertaVincVO.setCuentaAsociada(
							DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina,
									bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
					//contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA, getNombreOficina(bidOficina));
				}
				else{
/*
					camposExtraOfertaVincVO.setCuentaAsociada(
							DatosCuentasC.getCuentaFormateadaCCC(bidEntidad, bidOficina,
									bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
*/
					camposExtraOfertaVincVO.setCuentaAsociada(
							DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina,
									bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
					//contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA, getNombreOficina(bidOficina));
				}			
			}
		}
			
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN ContextoImpresionFiper_OVHipotecarios obtenerCamposExtraOfertaVinculante");	
		}
		
		return camposExtraOfertaVincVO;
	}
	
	/**
	 * Consulta si el cliente esta o no carpetizado llamando al servicio de negocio ANPM_401
	 * @param contextoDatosSolicitud
	 * @return indicador de cliente carpetizado S/N
	 */
	public static String consultaCarpetizacion(final IContexto contextoDatosSolicitud) {
		
		final int iANPM = 507;
		final int iConsultaSolicitud = 401;
		final String DATO_ENTRADA_NUC = "NUC";
		final String DATO_ENTRADA_IND_CUADRO_AMORT = "IND_CUADRO_AMORT";
		final String IND_CUADRO_AMORT = "N";
		final String strCtxtoNuc = "ANPMN050040";
		final String ctxtSolicitud = "ANPMN301";
		final String ctxtSolicitudIndicadorCarpetizado = "ANPMN301227";
				
		final IDatosEntradaTx datosEntradaConsultaSolicitud = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),iANPM, iConsultaSolicitud);
		datosEntradaConsultaSolicitud.addCampo(DATO_ENTRADA_NUC, contextoDatosSolicitud.getBigDecimal(strCtxtoNuc));
		datosEntradaConsultaSolicitud.addCampo(DATO_ENTRADA_IND_CUADRO_AMORT, IND_CUADRO_AMORT);
		
		String indicadorClienteCarpetizado = Constantes.CTE_STRING_EMPTY;
		
		IContexto[] contextosSolicitud = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaSolicitud);
		for(IContexto contextoSolicitud: contextosSolicitud) {
			if(ctxtSolicitud.equals(contextoSolicitud.getNombre())) {
				indicadorClienteCarpetizado = contextoSolicitud.getString(ctxtSolicitudIndicadorCarpetizado);
			}
		}
		
		return indicadorClienteCarpetizado;
	}
	
	/**
	 * Consulta si el primer titular del préstamo está carpetizado como Banca Privada / Premium o no.
	 * 
	 * @param nuc
	 * @return
	 */
	public static String consultaCarpetizacion(BigDecimal nuc){
		String indicadorClienteCarpetizado = StringUtils.EMPTY;
		BigDecimal idCliente = null;
		
		idCliente = UtilidadesTramitacion.obtenerNumeroClientePrimerTitular(nuc);

		indicadorClienteCarpetizado = UtilidadesTramitacion.obtenerIndClienteCartBPrivadaOBPremium(idCliente);
		
		return indicadorClienteCarpetizado;
	}
	
	/**
	 * @param contextoDatosSolicitud
	 * @return String con la concatenacion del lugar y la fecha de formalizacion
	 * de la solicitud en letra
	 */
	private static String getLugaryFecha(final IContexto contextoDatosSolicitud){
		final String strCtxtoLocalidad = "ANPMN050999";
		final String strCtxtoFechaFormalizacion = "ANPMN050920";
		
		final SimpleDateFormat sdf = new SimpleDateFormat("MMMM", Locale.getDefault());
		final Calendar calendar = Calendar.getInstance();
		calendar.setTime(DateUtils.parseDate(
				contextoDatosSolicitud.getString(strCtxtoFechaFormalizacion), DateUtils.FORMATO_FECHA_CORTO));
		
		StringBuilder sb = new StringBuilder(150);
		sb.append(contextoDatosSolicitud.getString(strCtxtoLocalidad).trim());
		sb.append(Constantes.CTE_STRING_COMA);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(calendar.get(Calendar.DAY_OF_MONTH));
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(Constantes.CTE_STRING_DE);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(sdf.format(calendar.getTime()).toUpperCase());
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(Constantes.CTE_STRING_DE);
		sb.append(Constantes.CTE_STRING_BLANK);
		sb.append(calendar.get(Calendar.YEAR));
		return sb.toString();
	}
	
	/**
	 * @param bidPagoUnico
	 * @param bidNumPeriodos
	 * @param strUnidadPeriodos
	 * @param paso Tipo de documento que estamos imprimiendo
	 * @param reducido Si True se redice el texto para la casilla
	 * @return Literal en base al numero de periodo y a la unidad de peridod
	 */
	private static String getDescPeriodoRevision(final String bidPagoUnico, final BigDecimal bidNumPeriodos, 
			final String strUnidadPeriodos, final BigDecimal bidTipoPeriodo,final boolean reducido){
		
		StringBuilder sbPeriodicidad = new StringBuilder(45);
		
		if (null != bidPagoUnico && Constantes.CTE_UNO.equals(bidPagoUnico)){
			sbPeriodicidad.append(Constantes.CTE_PERIODO_FINAL);
		}
		else{
			if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(strUnidadPeriodos)){
				if (BigDecimal.ONE.equals(bidNumPeriodos)) {
					sbPeriodicidad.append(Constantes.CTE_PERIODO_MES);
				}
				else if (Constantes.CTE_BID_TRES.equals(bidNumPeriodos)){
					sbPeriodicidad.append(Constantes.CTE_PERIODO_TRIMESTRE);
				}
				else if (Constantes.CTE_BID_SEIS.equals(bidNumPeriodos)){
					sbPeriodicidad.append(Constantes.CTE_PERIODO_SEMESTRE);
				}
				else if (Constantes.CTE_BID_DOCE.equals(bidNumPeriodos)){
					sbPeriodicidad.append(Constantes.CTE_PERIODO_ANIO);
				}
				
				if (BigDecimal.ONE.equals(bidTipoPeriodo)){
					sbPeriodicidad.append(Constantes.CTE_STRING_BLANK);
					if (BigDecimal.ONE.equals(bidNumPeriodos)){			
						if (reducido){
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL_RED);
						}
						else{
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL);
						}
					}
					else{
						sbPeriodicidad.append(Constantes.CTE_PERIODO_VENCIDO);
					}
				}
				else if (Constantes.CTE_BID_DOS.equals(bidTipoPeriodo)){
					sbPeriodicidad.append(Constantes.CTE_STRING_BLANK);
					if (BigDecimal.valueOf(12).equals(bidNumPeriodos)){				
						sbPeriodicidad.append(Constantes.CTE_PERIODO_NATURAL);
					}
					else{
						if (reducido){
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL_RED);
						}
						else{
							sbPeriodicidad.append(Constantes.CTE_PERIODO_CALENDARIO_OFICIAL);
						}
					}
				}
			}
		}
		
		return sbPeriodicidad.toString();
	}
	
	/**
	 * 
	 * @param contextoDatosSolicitud
	 * @param strSolPropMonedaImporteTotal
	 * @param strSolPropOficinaSolicitud
	 * @param strSolPropNumeroSolicitud
	 * @param strSolPropDigitoSolicitud
	 * @return Devuelve el numero de prestamo a partir de los datos de solicitud: 
	 * MMM-OOOO-SSSSSS-D
	 */
	private static String getNumPrestamo(IContexto contextoDatosSolicitud,String strSolPropOficinaSolicitud,
			String strSolPropNumeroSolicitud, String strSolPropDigitoSolicitud){
		
		final StringBuilder strbNumPrstamo = new StringBuilder(13);
		strbNumPrstamo.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud).toString(), LengthConstants.LENGTH_0004, '0'));
		strbNumPrstamo.append(Constantes.CTE_STRING_GUION + Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud).toString(), 6, '0'));
		strbNumPrstamo.append(Constantes.CTE_STRING_GUION + Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropDigitoSolicitud).toString(), 1, '0'));
		return strbNumPrstamo.toString();
	}
	
	
	/**
	 * Usa el servicio 100-601 para transformar un importe en letra
	 * @param cantidad
	 * @param moneda
	 * @param conParentesis
	 * @return Retorna en letra el valor cantidad pasado como parámetro
	 */
	private static String bidImporteToStr(final BigDecimal cantidad, final String moneda, final Boolean conParentesis){
		final int iCGAL = 100;
		final int iCodop = 601;
		final String strCampoEntradaCantidad = "CANTIDAD";
		final String strCampoSalidaLetra = "CGALN027010";
		
		final IDatosEntradaTx datosEntrada = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), iCGAL, iCodop);
		datosEntrada.addCampo(strCampoEntradaCantidad, cantidad);
		final IContexto []aContextoSalida = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntrada);
		String strLetra = Constantes.CTE_STRING_EMPTY;
		if (aContextoSalida.length > 0){
			strLetra = aContextoSalida[0].getString(strCampoSalidaLetra);
			String strDescDivisa = Constantes.CTE_STRING_EMPTY;
			if (!UtilidadesTramitacion.isBlankOrNull(moneda)){
				strDescDivisa = getDescripcionDivisa(moneda);
			}
			if (conParentesis){
				strLetra = Constantes.CTE_LETRA_PARENT_AB + strLetra.trim() + Constantes.CTE_STRING_BLANK + strDescDivisa + Constantes.CTE_LETRA_PARENT_CI;
			}
		}
		return strLetra;
	}
	
	/**
	 * Hace uso del servicio 100-301 para obtener la descripción de la divisa
	 * @param divisa
	 * @return descripcion de la divisa
	 */
	private static String getDescripcionDivisa(final String divisa) {
		// Constantes para invocación del servicio de consulta de divisas ITAL_600
		final Integer CTE_CUENTA_CONTABLE_CONSULTA_DIVISAS = Integer.valueOf("100");
		final Integer CTE_CODIGO_OPERACION_CONSULTA_DIVISAS = Integer.valueOf("301");
		final String  CTE_OPCONDIV_CAMPO_COD_CONTROL = "COD_CONTROL";
		final String  CTE_OPCONDIV_VALOR_COD_CONTROL = "D";
		final String  CTE_OPCONDIV_CAMPO_DEVOLVER_DIVISA = "DIVISA";
//		Contexto de salida
		final String strCtxtoDetalleDivisa = "CG041CON";
		final String strDivStrNombreCompletoDivisa = "CG041C0040";
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("INICIO Consulta descripcion divisa");
		}
		
		// Consulta de divisa
		IDatosEntradaTx datosEntradaConsultaDivisaSrv = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), 
				CTE_CUENTA_CONTABLE_CONSULTA_DIVISAS, CTE_CODIGO_OPERACION_CONSULTA_DIVISAS);
		datosEntradaConsultaDivisaSrv.addCampo(CTE_OPCONDIV_CAMPO_COD_CONTROL, 
				CTE_OPCONDIV_VALOR_COD_CONTROL);
		datosEntradaConsultaDivisaSrv.addCampo(CTE_OPCONDIV_CAMPO_DEVOLVER_DIVISA,
				divisa);
		
		IContexto[] aContextoDetalleDivisa = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaDivisaSrv);
		String descripcionDivisa = Constantes.CTE_STRING_EMPTY;
		for (IContexto contextoDivisa : aContextoDetalleDivisa){
			if (strCtxtoDetalleDivisa.equals(contextoDivisa.getNombre())){
				descripcionDivisa = contextoDivisa.getString(strDivStrNombreCompletoDivisa).trim();
			}
		}
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug("FIN Consulta descripcion divisa");
		}
		return descripcionDivisa;
	}

	private static void rellenarImpresionConTaeBonificada(IContexto contextoImprimir,
		IContexto ctxtoSolicitud){
		
		BigDecimal taeBonificada = null;
		IContexto[] resultadoConsultaAmortizacion = null;
		BigDecimal bidOficinaSolicitud = null;
		BigDecimal bidNumeroSolicitud = null;
		BigDecimal bidVersionSolicitud = null;
		BigDecimal bidDigitoSolicitud = null;
		BigDecimal bidNucExpediente = null;
		GestionDatosSolicitud gds = new GestionDatosSolicitud();
		
		bidOficinaSolicitud = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA);
		bidNumeroSolicitud = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUMERO);
		bidVersionSolicitud = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_VERSION);
		bidNucExpediente = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUC);
		bidDigitoSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_DIGITO);
		
		final IDatosEntradaTx datosEntradaConsultaAmortizacion = 
			ServicioNegocio.getPrograma(ServicioNegocio.getContexto(),
					Constantes.ID_CUENTA_ANPM,
					ID_CODOP_CONSULTA_AMORTIZACION);
		
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_OFICINA_SOLICITUD, bidOficinaSolicitud);
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_NUMERO_SOLICITUD, bidNumeroSolicitud);
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_VERSION_SOLICITUD, bidVersionSolicitud);
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_NUC_EXPEDIENTE, bidNucExpediente);
		
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_DIGITO_SOLICITUD, bidDigitoSolicitud);
		
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_PANTALLA_ORIGEN, Constantes.CTE_STR_5); //tipo operación = "5"
/* CAMPO OPTATIVO
		datosEntradaConsultaAmortizacion.addCampo(
				NOMBRE_CAMPO_SRV_SERVICIO_ORIGEN, BigDecimal.ZERO);
*/
		resultadoConsultaAmortizacion = ServicioNegocio.invocarServicio(
			ServicioNegocio.getContexto(), datosEntradaConsultaAmortizacion);
		
		if (UtilidadesTramitacion.isBlankOrNull(resultadoConsultaAmortizacion)){
			ServicioNegocio.rollback(
				CodigosError.CTE_ERROR_NO_CTX_ANPMN075_TAE_BONIF,
				null, null, null);
		}
		taeBonificada = resultadoConsultaAmortizacion[0].getBigDecimal("ANPMN075150");
		
		contextoImprimir.put(ID_TAE_BONIFICADA, taeBonificada);
		
		/*Se actualiza la tae bonificada en datos solicitud, AN25TB01*/
		gds.actualizarTaeBonificada(bidOficinaSolicitud, bidNumeroSolicitud,
			bidVersionSolicitud, bidNucExpediente, taeBonificada);
		
	}
	
	private static void rellenarImpresionConGastosAdicionales(
		IContexto ctxtoSolicitud, IContexto contextoImpresion){
		BigDecimal oficina = null;
		BigDecimal numeroSol = null;
		BigDecimal version = null;
		BigDecimal nuc = null;
		GastosAdicionalesEng gastosAdicionalesDao = new GastosAdicionalesEng();
		List<GastosAdicionalesC> listaGastosAdic = null;
		
		IRegistro[] matrizGastosAdic = null;
		List<IRegistro> listaMtzGastosAdic = new ArrayList<IRegistro>(1);
		
		IRegistro regGastosAdic = null;	
		
		/*Campos de la matriz de gastos adicionales del contexto de impresión ANPMN103*/
		BigDecimal idConcepto = null;
		String descrConcepto = null;
		BigDecimal importeConcepto = null;
		String unidadPlazoSolic = null;	
		
		MathContext mc = new MathContext(17, RoundingMode.HALF_UP);
		
		/*Importe total contexto impresión FIPER ANPMN103110*/
		BigDecimal importeTotal = null;
		BigDecimal plazoSolicitud = null;
		BigDecimal plazoAnosSolicitud = null;
		MathContext mathContext = new MathContext(17, RoundingMode.HALF_UP);
		String indAplicaTaeNormal = null;
		
		oficina = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA);
		numeroSol = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUMERO);
		version = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_VERSION);
		nuc = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUC);
		plazoSolicitud = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_PLAZO);
		unidadPlazoSolic = ctxtoSolicitud.getString(CTX_SOLICITUD_UNIDAD_PLAZO);
			
		/*Obtenemos los gastos adicionales de la AN44TB01, si los hay*/
		listaGastosAdic = gastosAdicionalesDao.obtenerGastosAdic(
			oficina, numeroSol, version, nuc);
		
		if (! UtilidadesTramitacion.isBlankOrNull(listaGastosAdic)){
			/*Vamos a actualizar el importe total para ABANCA sumándole los gastos adicionales*/
			importeTotal = contextoImpresion.getBigDecimal(ID_PROP_IMPORTE_TOTAL);
			
			for (GastosAdicionalesC gastosAdicC : listaGastosAdic){
				/*Recuperamos los datos del gasto adicional de la tabla*/
				idConcepto = gastosAdicC.getId().getIdConcepto();
				descrConcepto = gastosAdicC.getDescripcionConcepto().trim();
				importeConcepto = gastosAdicC.getImporte();
				indAplicaTaeNormal = gastosAdicC.getAplicaTAENormal();
				
				//20151003 Sólo enviamos los gastos adicionales en la matriz para aquellos gastos que aplican en el cálculo de la TAE normal.
				//si aplica para la tae normal.
				if (Constantes.CTE_STR_1.equals(indAplicaTaeNormal)){
					/*Creamos el registro de gastos adicionales*/
					regGastosAdic = ContextoFactory.getInstance().getRegistro(
						contextoImpresion, ID_MATRIZ_GASTOS_ADIC);
					
					
					/*Asignamos los datos del gasto adicional al registro*/
					regGastosAdic.put(ID_MATRIZ_GASTOS_ADIC_ID_CONCEPTO, idConcepto);
					regGastosAdic.put(ID_MATRIZ_GASTOS_ADIC_DESCR_CONCEPTO, descrConcepto);
					regGastosAdic.put(ID_MATRIZ_GASTOS_ADIC_IMP_CONCEPTO, importeConcepto);
					
	
					/*Actualizamos el importe total de la impresión sólo para ABANCA: si es el gasto
					 * "seguro del hogar", id concepto = 6, entonces multiplicamos el gasto por PLAZO/NUM_PERIODO, siendo
					 * PLAZO = AN25710 = ANPMN050710 y NUM_PERIODO = AN440090 = gastosAdicC.getNumPeriodicidad()
					 * EDIT: Finalmente, cuando id concepto = 6:
					 *  importe a sumar al importe total = gasto adicional seguro hogar * (plazo/12)
					 *  siendo (plazo/12) el número de años de vida del préstamo, al estar el plazo en meses.
					 * 
					 * */
					if (esEntornoAbanca){
						if (0 == Constantes.CTE_BID_6.compareTo(gastosAdicC.getId().getIdConcepto())){
							//si la periodicidad del préstamo es anual
							if (Constantes.CTE_UNIDAD_PERIODO_ANO.equals(unidadPlazoSolic)){
								//en este caso el importe a guardar
								plazoAnosSolicitud = plazoSolicitud;
							}
							else if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(unidadPlazoSolic)){
								plazoAnosSolicitud = plazoSolicitud.divide(Constantes.CTE_BID_12, mc);
							}
							else{
								ServicioNegocio.rollback(
									CodigosError.CTE_ERROR_SOLIC_PERIODICIDAD_NO_VALIDA,
									null, 
									new String[] {nuc.toString(), unidadPlazoSolic},
									null);
							}
							//plazoAnosSolicitud = plazoSolicitud.divide(gastosAdicC.getNumPeriodicidad(), mathContext);
							importeTotal = importeTotal.add(
								gastosAdicC.getImporte().multiply(
									plazoAnosSolicitud,
									mathContext));
						}else if(0 == Constantes.CTE_BID_7.compareTo(gastosAdicC.getId().getIdConcepto())) {
							//si la periodicidad del préstamo es anual
							if (Constantes.CTE_UNIDAD_PERIODO_ANO.equals(unidadPlazoSolic)){
								//en este caso el importe a guardar
								plazoAnosSolicitud = plazoSolicitud;
							}
							else if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(unidadPlazoSolic)){
								plazoAnosSolicitud = plazoSolicitud.divide(Constantes.CTE_BID_12, mc);
							}
							else{
								ServicioNegocio.rollback(
									CodigosError.CTE_ERROR_SOLIC_PERIODICIDAD_NO_VALIDA,
									null, 
									new String[] {nuc.toString(), unidadPlazoSolic},
									null);
							}
							//plazoAnosSolicitud = plazoSolicitud.divide(gastosAdicC.getNumPeriodicidad(), mathContext);
							importeTotal = importeTotal.add(
								gastosAdicC.getImporte().multiply(
									plazoAnosSolicitud.subtract(BigDecimal.ONE),
									mathContext));
						}
						else{
							importeTotal = importeTotal.add(gastosAdicC.getImporte());
						}
					}
					/*Añadimos el registro a la lista de registros de datos adicionales*/
					listaMtzGastosAdic.add(regGastosAdic);
				}
			}
			contextoImpresion.put(ID_PROP_IMPORTE_TOTAL, importeTotal);
			matrizGastosAdic = listaMtzGastosAdic.toArray(
				new IRegistro[listaMtzGastosAdic.size()]);
			/*Asignamos la matriz de gastos adicionales al campo ANPMN103950 del contexto
			 *  de impresión*/
			
			contextoImpresion.put(ID_MATRIZ_GASTOS_ADIC, matrizGastosAdic);
			
		}
	}

	
	private static void modificaParametrosFiper(IContexto[] lstCtxImprimir, IContexto contextoImpresion){
		
		MathContext mc = new MathContext(17, RoundingMode.HALF_UP);
		IContexto ctxtoSolicitud = null;
		IContexto[] arrayGastosAdicionales = null; //array de gastos adicionales, CPSIN001
		String descrTarifa = null;
		
		ctxtoSolicitud = UtilidadesTramitacion.getContexto(lstCtxImprimir, ID_CTX_DATOS_SOLICITUD); // "ANPMN050";
		arrayGastosAdicionales = UtilidadesTramitacion.getContextos(lstCtxImprimir, "CPSIN001");
		
		//1. Añadir el campo de porcentaje de aplicación para AJD, es el campo AN440110 cuando el concepto es el 005-Impuesto AJD.		
		for (IContexto ctxGastosAdicionales : arrayGastosAdicionales){
			if (CONCEPTO_IMPUESTO_AJD.equals(UtilidadesTramitacion.comprobarDatoNull(ctxGastosAdicionales.getString("CPSIN001010")))){
				BigDecimal porcentaje = ctxGastosAdicionales.getBigDecimal("CPSIN001080"); //porcentaje gasto adicional.
				contextoImpresion.put(PORCENTAJE_AJD, porcentaje);
				
				contextoImpresion.put(RESPONSABILIDAD_HIPOTECARIA, ctxGastosAdicionales.getBigDecimal("CPSIN001050"));
			}
		}

		//2. Identificador de la tarifa - Campo AN251590 
		
		BigDecimal idTarifa = ctxtoSolicitud.getBigDecimal("ANPMN050886"); 
		BigDecimal producto = ctxtoSolicitud.getBigDecimal("ANPMN050080");
		BigDecimal subProducto = ctxtoSolicitud.getBigDecimal("ANPMN050090");
		
		/* ###############################################################
		 *  20151022 IMPORTANTISIMO, QUITAR ISTO CANDO ACABE A FEIRA:
		 *  - Se a solicitude ten tarifa Sima (7), chantamos a tarifa Idealista no contexto de impresión da FIPER (6).
		 * 
		 * */
		if (0 == Constantes.CTE_ID_TARIFA_SIMA.compareTo(idTarifa)){
			idTarifa = Constantes.CTE_ID_TARIFA_IDEALISTA;
		}
		/*#########################################*/
		
		contextoImpresion.put(IDENTIFICADOR_TARIFA, idTarifa);

	    //3. Descripcion de la tarifa, hay que llamar al servicio anpm_458 que según un id_tarifa te devuelve la descripción
		//20151003 Sólo si la tarifa es distinta de cero.
		if (0 != BigDecimal.ZERO.compareTo(idTarifa)){
			// Llamada al método ANPM_458 (ConsultaDescripcionTarifaSrv)
			//descrTarifa = UtilidadesTramitacion.obtenerDescripcionTarifa(idTarifa);
			descrTarifa = UtilidadesTramitacion.obtenerDescripcionTarifa(producto, 
					subProducto, idTarifa);
			descrTarifa = UtilidadesTramitacion.comprobarDatoNull(descrTarifa);

		}
		
		if (!UtilidadesTramitacion.isBlankOrNull(descrTarifa)){
			contextoImpresion.put(DESCRIPCION_TARIFA, descrTarifa);
		}
		
		/* 4. Total intereses + total gastos  en este campo tenemos que sumar el importe intereses + el importe de gastos. 
		 * Estos campos ya los estamos calculando para obtener el importe total a reembolsar (ANPMN103110)
		 */
		
		//recorremos la matriz de gastos
		
		BigDecimal importeTotal = contextoImpresion.getBigDecimal("ANPMN103110");
		BigDecimal importePrestamo = contextoImpresion.getBigDecimal("ANPMN103050");
		
		BigDecimal interesesMasGastos = importeTotal.subtract(importePrestamo, mc);
		contextoImpresion.put(INTERESES_MAS_GASTOS, interesesMasGastos);
			
		/* 5. Por cada euro del importe del préstamo, el importe que va a reembolsar, 
		 * es decir el importe total a reembolsar/importe del préstamo (campos  ANPMN103110/ ANPMN103050)
		 */
		
		BigDecimal reembolso = importeTotal.divide(importePrestamo, mc);
		contextoImpresion.put(IMPORTE_REEMBOL_EURO , reembolso);
		
	}

	public static void enviarCorreoOfertaVinculanteErronea(String codigoPlantilla, BigDecimal nuc) {

		List<String> listaDestinatarios = new ArrayList<String>();
		String asunto = new String();
		String autor = new String();
		String remitenteNombre = new String();


		listaDestinatarios = UtilidadesTramitacion.obtenerListaValoresParametro(
				Constantes.CTE_AGRUP_MAIL_COMPROBACIONES, Constantes.CTE_AGRUP_MAIL_COMPROBACIONES_PARAM_DESTINOS);
		asunto = UtilidadesTramitacion.obtenerValorParametroUnico(
				Constantes.CTE_AGRUP_MAIL_COMPROBACIONES, Constantes.CTE_AGRUP_MAIL_COMPROBACIONES_PARAM_ASUNTO);
		autor = UtilidadesTramitacion.obtenerValorParametroUnico(
				Constantes.CTE_AGRUP_MAIL_COMPROBACIONES, Constantes.CTE_AGRUP_MAIL_COMPROBACIONES_PARAM_AUTOR);

		if (UtilidadesTramitacion.isBlankOrNull(listaDestinatarios)){
			ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_NO_SE_ENCUENTRA_PARAMETRO,
					null,
					new String[] {Constantes.CTE_AGRUP_MAIL_COMPROBACIONES,
							Constantes.CTE_AGRUP_MAIL_COMPROBACIONES_PARAM_DESTINOS},
							null);
		}
		else if (StringUtils.isBlank(asunto)) {
			ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_NO_SE_ENCUENTRA_PARAMETRO,
					null,
					new String[] {Constantes.CTE_AGRUP_MAIL_COMPROBACIONES,
							Constantes.CTE_AGRUP_MAIL_COMPROBACIONES_PARAM_ASUNTO},
							null);
		}
		else if (StringUtils.isBlank(autor)) {
			ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_NO_SE_ENCUENTRA_PARAMETRO,
					null,
					new String[] {Constantes.CTE_AGRUP_MAIL_COMPROBACIONES,
							Constantes.CTE_AGRUP_MAIL_COMPROBACIONES_PARAM_AUTOR},
							null);
		}
		Map<String, Object> model = new HashMap<String, Object>(1);
		/*Parametrizamos el nuc en la plantilla*/
		if(!UtilidadesTramitacion.isBlankOrNull(nuc)) {
			model.put("PARAM_1", nuc.toString());
		}else {
			model.put("PARAM_1",new String("0"));
		}
		
		UtilidadesTramitacion.enviarCorreo(
				listaDestinatarios.toArray(new String[listaDestinatarios.size()]),
				asunto,
				autor,
				remitenteNombre,
				codigoPlantilla,
				model);
	}

	public static String obtenerFechaMaximaValidez(int paso, IContexto ctxtoSolicitud){
		OperatoriaDocumentosOficinaC operatoriaDocumento = null;
		String fechaMaximaValidez = null;
		BigDecimal plazoFechaValidezFiper = null;
		Date hoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());
		BigDecimal oficinaTramitadora = null;
		
		oficinaTramitadora = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA_CONTABLE);
		switch(paso)
		{
			case PASO_DOC_FIPER:
				/*Rosa 12022015: "*Se cambia la fecha de validez de la fiper*/
				//contextoImpresion.put(ID_PROP_FECHA_VALIDEZ_DOC,  DateUtils.formatDate(DateUtils.addDays(hoy, 5), DateUtils.FORMATO_FECHA_CORTO));
				if (esEntornoEvo){
					fechaMaximaValidez = DateUtils.calcularDiasHabiles(hoy, new BigDecimal(5), ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA));
				}
				else if (esEntornoAbanca){
					operatoriaDocumento = GestionOperatoriaDocumentos.obtenerOperatoriaActual(Constantes.CTE_TIPO_DOCUMENTO_FIPER, oficinaTramitadora);
					/*20150804 Si existe operatoria para la fiper y la oficina tramitadora, sumamos el plazo que nos venga en la operatoria*/
					if (null != operatoriaDocumento){
						plazoFechaValidezFiper = operatoriaDocumento.getId().getPlazo();
						/*Obtenemos el día hábil por el centro tramitador*/
						fechaMaximaValidez = DateUtils.calcularDiasHabiles(hoy, plazoFechaValidezFiper, oficinaTramitadora);
					}
					else{
						/*Obtenemos el día hábil por el centro de la solicitud*/
						plazoFechaValidezFiper = new BigDecimal(7);
						fechaMaximaValidez = DateUtils.calcularDiasHabiles(hoy, plazoFechaValidezFiper, ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA));
					}
				}
				break;
			case PASO_DOC_OV_HIPOTECARIOS:{
				fechaMaximaValidez = DateUtils.calcularDiasHabiles(hoy, new BigDecimal(14), ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA));
			}
				break;
		}
		return fechaMaximaValidez;
	}	
	
	
//	/**
//	 * Rellena el contexto de impresion ANPMN103 con el importe del seguro de vida.
//	 * 
//	 * @param contextoImprimir contexto de impresion ANPMN103.
//	 * @param ctxtoSolicitud contexto con los datos de la solicutud.
//	 */
//	private static void rellenarImpresionConImporteSeguroVida(IContexto contextoImprimir,
//			IContexto ctxtoSolicitud)
//	{
//		
//		// Inicializaciones
//		BigDecimal importeSeguroVida = null;
//		GastosAdicionalesEng gastosAdicionalesEng = new GastosAdicionalesEng();
//		
//		// Obtener datos de solicitud
//		BigDecimal oficina = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_OFICINA);
//		BigDecimal numeroSol = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUMERO);
//		BigDecimal version = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION);
//		BigDecimal nuc = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC);
//		BigDecimal concepto = CTE_ID_CONCEPTO_SEGURO_VIDA;
//
//		// Leer gastos adicionales
//		GastosAdicionalesC gastoAdicional = gastosAdicionalesEng.obtenerGastoAdicional(
//				oficina, numeroSol, version, nuc, concepto);
//		
//		// Rellenar contexto impresion con importe seguro vida
//		if (null != gastoAdicional)
//		{
//			// Obtener importe del seguro de vida
//			importeSeguroVida = gastoAdicional.getImporte();
//			
//			// Rellenar contexto impresion
//			contextoImprimir.put(IMPORTE_SEGURO_VIDA, importeSeguroVida);
//		}
//		
//	}
	
	
	/**
	 * Rellena el contexto de impresion ANPMN103 con los siguientes importes:
	 * <ul>
	 * <li>Seguro de vida</li>
	 * <li>Seguro proteccion pagos prima unica</li>
	 * <li>Renovacion anual pagos protegidos</li>
	 * </ul>
	 * 
	 * @param contextoImprimir contexto de impresion ANPMN103.
	 * @param ctxtoSolicitud contexto con los datos de la solicitud.
	 */
	private static void rellenarImpresionConImportesGastos(IContexto contextoImprimir,
			IContexto ctxtoSolicitud){
		
		// Inicializaciones
		List<BigDecimal> idConceptos = new ArrayList<BigDecimal>();
		GastosAdicionalesEng gastosAdicionalesEng = new GastosAdicionalesEng();
		
		// Obtener datos de solicitud
		BigDecimal oficina = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_OFICINA);
		BigDecimal numeroSol = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUMERO);
		BigDecimal version = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_VERSION);
		BigDecimal nuc = ctxtoSolicitud.getBigDecimal(CTX_SOLICITUD_NUC);
		
		idConceptos.add(CTE_ID_CONCEPTO_SEGURO_VIDA);
		idConceptos.add(CTE_ID_CONCEPTO_SEGURO_PROTECCION_PAGOS_PRIMA_UNICA);
		idConceptos.add(CTE_ID_CONCEPTO_RENOVACION_ANUAL_PAGOS_PROTEGIDOS);
		idConceptos.add(CTE_ID_CONCEPTO_NOTARIA);
		idConceptos.add(CTE_ID_CONCEPTO_SEGURO_VIDA_PRIMA_UNICA);
		idConceptos.add(CTE_ID_CONCEPTO_RENOVACION_SEGURO_VIDA);

		// Leer gastos adicionales
		List<GastosAdicionalesC> gastosAdicionales = gastosAdicionalesEng.obtenerGastosAdicionales(
				oficina, numeroSol, version, nuc, idConceptos);
		
		// Rellenar contexto impresion con importes leidos de la AN44TB01
		if ((null != gastosAdicionales) && (0 < gastosAdicionales.size())){	
			for (GastosAdicionalesC gasto : gastosAdicionales){
				// Importe seguro de vida
				if (gasto.getId().getIdConcepto().equals(CTE_ID_CONCEPTO_SEGURO_VIDA)){
					contextoImprimir.put(IMPORTE_SEGURO_VIDA, gasto.getImporte());
				}
				
				// Importe seguro proteccion pagos prima unica
				if (gasto.getId().getIdConcepto().equals(CTE_ID_CONCEPTO_SEGURO_PROTECCION_PAGOS_PRIMA_UNICA)){
					contextoImprimir.put(IMP_SEGURO_PROTECCION_PAGOS_PRIMA_UNICA, gasto.getImporte());
				}			
				// Importe seguro renovacion anual pagos protegidos
				if (gasto.getId().getIdConcepto().equals(CTE_ID_CONCEPTO_RENOVACION_ANUAL_PAGOS_PROTEGIDOS)){
					contextoImprimir.put(IMP_RENOVACION_ANUAL_PAGOS_PROTEGIDOS, gasto.getImporte());
				}		
				// Importe notaria
				if (gasto.getId().getIdConcepto().equals(CTE_ID_CONCEPTO_NOTARIA)){
					if (0 != gasto.getImporte().compareTo(BigDecimal.ZERO))
					{
						contextoImprimir.put(IMPORTE_NOTARIA, gasto.getImporte());
					}
				}
				// Importe seguro de vida prima unica
				if (gasto.getId().getIdConcepto().equals(CTE_ID_CONCEPTO_SEGURO_VIDA_PRIMA_UNICA)){
					if (0 != gasto.getImporte().compareTo(BigDecimal.ZERO))
					{
						contextoImprimir.put(IMPORTE_SEGURO_VIDA_PRIMA_UNICA, gasto.getImporte());
					}
				}
				// Importe renovacion seguro vida
				if (gasto.getId().getIdConcepto().equals(CTE_ID_CONCEPTO_RENOVACION_SEGURO_VIDA)){
					if (0 != gasto.getImporte().compareTo(BigDecimal.ZERO))
					{
						contextoImprimir.put(IMPORTE_RENOVACION_SEGURO_VIDA, gasto.getImporte());
					}
				}
			}
		}
	}	
	
	
	/**
	 *  Rellena el contexto de impresion ANPMN103 con el indicador de parrilla
	 * 
	 * @param contextoImprimir contexto de impresion ANPMN103.
	 * @param ctxtoSolicitud contexto con los datos de la solicitud.
	 * 
	 */
	public static void rellenarImpresionConIndicadorParrilla(IContexto[] aCtxtoIntereses, IContexto contextoImprimir,IContexto ctxSolicitud){
		
		String indParrilla = null;
		CampanhaC campanha = null;
		
		BigDecimal codProducto = ctxSolicitud.getBigDecimal(CTX_SOLICITUD_COD_PROD); 
		BigDecimal codSubproducto = ctxSolicitud.getBigDecimal(CTX_SOLICITUD_COD_SUBPROD);
		BigDecimal idTarifa = ctxSolicitud.getBigDecimal(CTX_SOLICITUD_TARIFA);
		BigDecimal versionGeneral = ctxSolicitud.getBigDecimal(CTX_SOLICITUD_VERSION_GENERAL);
		BigDecimal nuc = ctxSolicitud.getBigDecimal(CTX_SOLICITUD_NUC);
		BigDecimal plazo = null;
		BigDecimal orden = null;
		
		for(IContexto buscado : aCtxtoIntereses ){ // contexto 52 - > tabla 27
			if ( (0 == (BigDecimal.ONE).compareTo(buscado.getBigDecimal("ANPMN052040"))) &&
				 (0 == (BigDecimal.ZERO).compareTo(buscado.getBigDecimal("ANPMN052050")))){
				plazo = buscado.getBigDecimal("ANPMN052110");	
				orden = buscado.getBigDecimal("ANPMN052040"); 
			}
		}
		
		GestionVersionBackOffice recuperarDatos = new GestionVersionBackOffice(); 
		boolean noModificado = recuperarDatos.busquedaModificacion("AN270110", nuc, orden);
		
		if (noModificado){
			campanha = GestionCampanhas.obtenerCampanha(codProducto, codSubproducto, idTarifa, versionGeneral); 
		}
		else{
			campanha = GestionCampanhas.obtenerCampanhaPorPlazo(codProducto, codSubproducto, idTarifa, plazo);
		}
			
		if (null != campanha){
			indParrilla = campanha.getParrillaInd();
		}
		
		// Rellenar contexto impresion
		contextoImprimir.put(INDICADOR_PARRILLA, indParrilla);
	}
	
	/**
	 * Método que rellena el campo de comunidad de bienes en el contexto de impresión
	 * a partir del nuc del expediente
	 * 
	 * @param contextoImpresion
	 * @param nucExpediente
	 */
	private static void rellenarImpresionComBienes(final IContexto contextoImpresion,
			final BigDecimal nucExpediente){
		IContexto[] contextoClientes = new IContexto[0];
		//se obtienen los clientes de un expediente
		contextoClientes = GestionConsultaTitularidad.consultarClientesPorContrato(nucExpediente);
		String campoNumCliente = "FC722C0040";
		String campoDeclarable = "FC01C0188";
		//De manera inicial se setea a cero comunidad de bienes
		BigDecimal esComBienes = BigDecimal.ZERO;
		
		for (IContexto iContexto : contextoClientes){
			IContexto[] salidaConsultaDatosCliente = GestionConsultaTitularidad.
			consultarClientePorClave(iContexto.getBigDecimal(campoNumCliente));
			for (IContexto iContextoCli : salidaConsultaDatosCliente) 
			{
				//Cuando el campo declarable es 4, sí es comunidad de bienes y se setea a 1
				if(iContextoCli.getString(campoDeclarable).equals("4")) 
				{
					esComBienes = BigDecimal.ONE;
					break;
				}
			}
			
			//Si ya se ha seteado a 1 la comunidad de bienes se sale del bucle "padre"
			if(0 == BigDecimal.ONE.compareTo(esComBienes)) 
			{
				break;
			}
		}
		
		contextoImpresion.put(ID_PROP_COMUNIDAD_BIENES, esComBienes);
	}
	
	/**
	 * Método que rellena el indicador bonificada para ANPM (campo ANPMN103771) a partir 
	 * de los contextos de interés. El indicador se rellena de la siguiente manera:
	 * <ul>
	 * <li>Si la solicitud tiene algún tramo de interés de tipo 03 ó 05:  indicador = S</li>
	 * <li>En caso contrario: indicador = N</li>
	 * </ul>
	 * 
	 * @param aCtxtoIntereses contextos de interés de la solicitud.
	 * @param contextoImpresion contexto de impresión.
	 */
	private static void rellenarIndicadorBonificada(IContexto[] aCtxtoIntereses, IContexto contextoImpresion){
		// Inicializaciones
		String indicadorBonificada = Constantes.NO;
		String tipoInteres = null;
		BigDecimal tipoCondicion = null;
		
		// Recorrer contextos interes
		if (null != aCtxtoIntereses){
			for (IContexto ctxInteres : aCtxtoIntereses){
				tipoInteres = ctxInteres.getString("ANPMN052080");
				tipoCondicion = ctxInteres.getBigDecimal("ANPMN052050");
				
				if(null != tipoCondicion && 0 == BigDecimal.ZERO.compareTo(tipoCondicion)){
					if(tipoInteres.equals(Constantes.TIPO_INT_VAR_BONIF) 
							|| tipoInteres.equals(Constantes.TIPO_INT_VAR_DIF_BONIF)){
						indicadorBonificada = Constantes.SI;
						break;
					}
				}
			}
		}
		
		// Rellenar indicador bonificada (ANPMN103771)
		contextoImpresion.put("ANPMN103771", indicadorBonificada);
	}
	
	
	/**
	 * Método que rellena el indicador de tipo de amortización anticipada para ANPM (campo 
	 * ANPMN103772). El indicador se rellena con el 
	 * 
	 * @param aCtxtoTratamientoAdelantos 
	 * @param contextoImpresion
	 */
	private static void rellenarIndicadorTipoAmortizacionAnticipada(IContexto aCtxtoTratamientoAdelantos, 
			IContexto contextoImpresion){
		// Inicializaciones
		BigDecimal indicadorTipoAmortizacionAnticipada = null;
		
		// Leer campo del contexto de amortización anticipada
		if (null != aCtxtoTratamientoAdelantos){
			indicadorTipoAmortizacionAnticipada = aCtxtoTratamientoAdelantos.getBigDecimal("ANPMN054070");
		}		
		// Rellenar campo del contexto (ANPMN103772)
		if (null != indicadorTipoAmortizacionAnticipada){
			contextoImpresion.put("ANPMN103772", indicadorTipoAmortizacionAnticipada.toString());
		}
	}

	
	/**
	 * Método que rellena el indicador de si es consumidor o no
	 * 
	 * @param aCtxtoTratamientoAdelantos
	 * @param contextoImpresion
	 */
	private static void rellenarIndicadorConsumidor(IContexto contextoImpresion, IContexto ctxtoSolicitud) {
		
		// Llamada al ANPM_481 para saber si es consumidor o no
		IDatosEntradaTx entrada = ServicioNegocio.getPrograma(
															ServicioNegocio.getContexto(), 
															507, 
															481);
		
		entrada.addCampo("NUC", ctxtoSolicitud.getBigDecimal("ANPMN050040"));
		
		IContexto[] salida = ServicioNegocio.invocarServicio(
															ServicioNegocio.getContexto(), 
															entrada);
		
		BigDecimal consumidor = BigDecimal.ZERO;
		
		if(null != salida  && 0 < salida.length){
			consumidor = salida[0].getBigDecimal("ANPMN481010");
		}
		
		// Se informa el campo con la respuesta del ANPM_481
		contextoImpresion.put("ANPMN103773", consumidor);
	}
	

}
