package es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion;

import java.math.BigDecimal;

import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DatosSolicitudVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.IConstantesSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;

public class GestionErrorConsultaDatosSolicitud
{
	public static DatosSolicitudVO rellenarErrorParametroNoExiste(
		DatosSolicitudVO datosSolicitudVO, String clave, String codigoEnTabla)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_PARAMETROS_NO_EXISTE);
		textoErrorStb = textoErrorStb.append("El parámetro con clave ");
		textoErrorStb = textoErrorStb.append(clave);
		textoErrorStb = textoErrorStb.append(" y código dentro de tabla ");
		textoErrorStb = textoErrorStb.append(codigoEnTabla);
		textoErrorStb = textoErrorStb.append(" no existe.");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		
		return datosSolicitudVO;
	}
	
	public static DatosSolicitudVO rellenarErrorComisionNoExiste(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficina, BigDecimal numeroSolicitud,
		Integer versionSolicitud, Integer ordenTramo, BigDecimal nuc,
		String tipoComision)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_COMISION_NO_EXISTE);
		textoErrorStb = textoErrorStb.append("La comision con oficina ");
		textoErrorStb = textoErrorStb.append(oficina.toString());
		textoErrorStb = textoErrorStb.append(", número de solicitud ");
		textoErrorStb = textoErrorStb.append(numeroSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", versión de solicitud ");
		textoErrorStb = textoErrorStb.append(versionSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", orden de tramo ");
		textoErrorStb = textoErrorStb.append(ordenTramo);
		textoErrorStb = textoErrorStb.append(" y nuc");
		textoErrorStb = textoErrorStb.append(nuc.toString());
		textoErrorStb = textoErrorStb.append(" no existe.");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		return datosSolicitudVO;
	}
	
	
	public static DatosSolicitudVO rellenarErrorCondicionInteresNoExiste(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficina, BigDecimal numeroSolicitud,
		BigDecimal versionSolicitud, BigDecimal nuc)
	{
		StringBuilder textoErrorStb = new StringBuilder();
		
		textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_CONDICIONES_INTERES_NO_EXISTE);
		textoErrorStb = textoErrorStb.append("Las condiciones interés con oficina ");
		textoErrorStb = textoErrorStb.append(oficina.toString());
		textoErrorStb = textoErrorStb.append(", número de solicitud ");
		textoErrorStb = textoErrorStb.append(numeroSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", versión solicitud ");
		textoErrorStb = textoErrorStb.append(versionSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", nuc expediente ");
		textoErrorStb = textoErrorStb.append(nuc.toString());
		textoErrorStb = textoErrorStb.append(" no existe.");
		
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		return datosSolicitudVO;
	}
	
	public static DatosSolicitudVO rellenarErrorCondicionInteresPrimerTramoNoExiste(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficina, BigDecimal numeroSolicitud,
		BigDecimal versionSolicitud, BigDecimal nuc,
		Integer tipoCondicion, BigDecimal tramo)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_COND_INTERESES_NO_EXISTE);
		textoErrorStb = textoErrorStb.append("El primer tramo de condiciones interes con oficina ");
		textoErrorStb = textoErrorStb.append(oficina.toString());
		textoErrorStb = textoErrorStb.append(", número de solicitud ");
		textoErrorStb = textoErrorStb.append(numeroSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", versión de solicitud ");
		textoErrorStb = textoErrorStb.append(versionSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", nuc");
		textoErrorStb = textoErrorStb.append(nuc.toString());
		textoErrorStb = textoErrorStb.append(", tipo condicion");
		textoErrorStb = textoErrorStb.append(tipoCondicion.toString());
		textoErrorStb = textoErrorStb.append(" y tramo");
		textoErrorStb = textoErrorStb.append(tramo.toString());
		textoErrorStb = textoErrorStb.append(" no existe.");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		return datosSolicitudVO;
	}
	public static DatosSolicitudVO rellenarErrorCondicionInteresFijoNoExiste(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficina, BigDecimal numeroSolicitud,
		BigDecimal versionSolicitud, BigDecimal nuc,
		Integer tipoCondicion)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_COND_INTERESES_FIJOS_NO_EXISTEN);
		textoErrorStb = textoErrorStb.append("No existen intereses de tipo fijo (AN270080 IN ('00','01','06')) con oficina ");
		textoErrorStb = textoErrorStb.append(oficina.toString());
		textoErrorStb = textoErrorStb.append(", número de solicitud ");
		textoErrorStb = textoErrorStb.append(numeroSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", versión de solicitud ");
		textoErrorStb = textoErrorStb.append(versionSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", nuc ");
		textoErrorStb = textoErrorStb.append(nuc.toString());
		textoErrorStb = textoErrorStb.append(", tipo condicion ");
		textoErrorStb = textoErrorStb.append(tipoCondicion.toString());
		textoErrorStb = textoErrorStb.append(" .");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		return datosSolicitudVO;
	}
	
	public static DatosSolicitudVO rellenarErrorCondicionInteresSustitutivoNoExiste(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficina, BigDecimal numeroSolicitud,
		BigDecimal versionSolicitud, BigDecimal nuc,
		Integer tipoCondicion)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_COND_INTERESES_FIJOS_NO_EXISTEN);
		textoErrorStb = textoErrorStb.append("No existen intereses sustitutivos con oficina ");
		textoErrorStb = textoErrorStb.append(oficina.toString());
		textoErrorStb = textoErrorStb.append(", número de solicitud ");
		textoErrorStb = textoErrorStb.append(numeroSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", versión de solicitud ");
		textoErrorStb = textoErrorStb.append(versionSolicitud.toString());
		textoErrorStb = textoErrorStb.append(", nuc ");
		textoErrorStb = textoErrorStb.append(nuc.toString());
		textoErrorStb = textoErrorStb.append(", tipo condicion");
		textoErrorStb = textoErrorStb.append(tipoCondicion.toString());
		textoErrorStb = textoErrorStb.append(".");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		return datosSolicitudVO;
	}
	
	public static DatosSolicitudVO rellenarErrorCondicionCapitalNoExiste(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficinaSolicitud, BigDecimal numeroSolicitud,
		BigDecimal versionSolicitud, BigDecimal nucExpediente, BigDecimal tramo)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_CONDICION_CAPITAL_NO_EXISTE);
		textoErrorStb = textoErrorStb.append("La condición capital con oficina ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(oficinaSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", número solicitud ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(numeroSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", versión solicitud ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(versionSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", nuc expediente ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(nucExpediente).toString());
		textoErrorStb = textoErrorStb.append(", y tramo ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(tramo).toString());
		textoErrorStb = textoErrorStb.append(" no existe.");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		
		return datosSolicitudVO;
	}
	
	public static DatosSolicitudVO rellenarErrorPeriodicidadNoEsValida(
			DatosSolicitudVO datosSolicitudVO, String periodicidadUnidadPeriodo,
			Integer periodicidadNumPeriodos, Integer tipoPeriodos)
	{
		
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_PERIODICIDAD_NO_ES_VALIDA);
		textoErrorStb = textoErrorStb.append("La periodicidad con unidad periodo ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(periodicidadUnidadPeriodo));
		textoErrorStb = textoErrorStb.append(", numero periodos ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(periodicidadNumPeriodos).toString());
		textoErrorStb = textoErrorStb.append("y tipo periodo ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(tipoPeriodos).toString());
		textoErrorStb = textoErrorStb.append(" no es válida.");
		
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		return datosSolicitudVO;
	}
	
	public static DatosSolicitudVO rellenarErrorAdelantosNoExisten(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficinaSolicitud, BigDecimal numeroSolicitud,
		BigDecimal versionSolicitud, BigDecimal nucExpediente)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_DATOS_ADELANTOS_NO_EXISTEN);
		textoErrorStb = textoErrorStb.append("Los adelantos con oficina ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(oficinaSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", número solicitud ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(numeroSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", versión solicitud ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(versionSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", nuc expediente ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(nucExpediente).toString());
		textoErrorStb = textoErrorStb.append(" no existen.");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		
		return datosSolicitudVO;
	}
	
	public static DatosSolicitudVO rellenarErrorAdelantosIncorrectos(
		DatosSolicitudVO datosSolicitudVO, BigDecimal oficinaSolicitud, BigDecimal numeroSolicitud,
		BigDecimal versionSolicitud, BigDecimal nucExpediente)
	{
		StringBuilder textoErrorStb = new StringBuilder(IConstantesSolicitud.CTE_TAM_INICIAL_ARRAYS);
		datosSolicitudVO.setIndicadorError(IConstantesSolicitud.CTE_IND_ERROR_NK);
		datosSolicitudVO.setCodigoError(IConstantesSolicitud.CTE_CODIGO_ERROR_DATOS_ADELANTOS_INCORRECTOS);
		textoErrorStb = textoErrorStb.append("Los adelantos con oficina ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(oficinaSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", número solicitud ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(numeroSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", versión solicitud ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(versionSolicitud).toString());
		textoErrorStb = textoErrorStb.append(", nuc expediente ");
		textoErrorStb = textoErrorStb.append(UtilidadesTramitacion.comprobarDatoNull(nucExpediente).toString());
		textoErrorStb = textoErrorStb.append(" tienen valores incorrectos.");
		datosSolicitudVO.setTextoError(textoErrorStb.toString());
		
		return datosSolicitudVO;
	}
}
