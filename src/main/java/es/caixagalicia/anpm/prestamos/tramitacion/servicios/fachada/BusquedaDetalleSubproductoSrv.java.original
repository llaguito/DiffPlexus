/**
 * Aplicacion de Activo
 * Novacaixagalicia © 2009-2010
 * 
 * 
 */

package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada;

import java.math.BigDecimal;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionEng;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionesC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionParametro;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.colectivos.persistencia.colectivo.ColectivosLineasColecC;
import es.caixagalicia.anpm.prestamos.colectivos.servicios.aplicacion.GestionColecLineasColectivos;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.backOffice.ModificacionesBackOfficeC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudEng;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionSubproducto;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionVersionBackOffice;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos.ContextoDatosAdicionalesMulticredito;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.util.Helper;

/**
 * Servicio para la obtener el detalle de un subproducto. Copia de ObtenerDatosVersionGeneralSrv, se le añade 
 * el filtro de colectivo
 * 
 * CO: ANPM_167
 * 
 * @author F001288
 * @author F001297
 * @author G000857
 *
 */
public class BusquedaDetalleSubproductoSrv extends ServicioNegocio
{	
	/*
	 * Campos de entrada
	 */
	private static final String CTE_TIRA_ID_PRODUCTO 			= "CODIGOPRODUCTO"; // Obligatorio
	private static final String CTE_TIRA_ID_SUBPRODUCTO 		= "CODIGOSUBPRODUCTO"; // Obligatorio
	
	// Linea colectivo
	private static final String CTE_TIRA_COLECTIVO 				= "COLECTIVO"; // Obligatorio
	
	private static final String CTE_TIRA_ID_VERSION_GENERAL 	= "VERSIONGENERAL"; // Obligatorio
	private static final String CTE_TIRA_IND_FILTRAR_NIVEL	 	= "IND_FILTRARNIVEL"; // Optativo
	//Nuevos parametros para BO
	private static final String CTE_TIRA_IND_BO					= "MARCA_BO"; //Optativo
	private static final String CTE_TIRA_NUC					= "NUC_EXPEDIENTE";//Optativo
	private static final String CTE_TIRA_PASO					= "PASO";//Optativo
	private static final String CTE_MODIFICACION_EVO			= "MODIFICACION_EVO"; //Optativo
	
	//Nuevos parámetros hipoteca flexible
	private static final String CTE_ID_TARIFA			= "ID_TARIFA"; //Optativo
	private static final String CTE_PLAZO			= "PLAZO"; //Optativo
	private static final String CTE_ORIGEN			= "ORIGEN"; //Optativo
	private static final String CTE_PARAM_NUC = "NUC";
	
	// Codigo colectivo (campo de entrada al servicio, campo de entrada al ANPM_048)
	private static final String CTE_CODIGO_COLECTIVO 			= "COD_COLECTIVO"; // Optativo
	private static final String CTE_ENTRADA_NOVACION_SIN_MODALIDAD = "NOVACION_SIN_MODALIDAD";
																				   
	
	/*
	 * Constantes para invocar servicio de negocio de detalle de catálogo ANPM_048
	 */
	private static final int CTE_PARAM_COD_PRODUCTO = 0;
	private static final int CTE_PARAM_COD_SUBPRODUCTO = 1;
	private static final int CTE_PARAM_COD_COLECTIVO = 2;
	private static final int CTE_PARAM_VERSION_GENERAL = 3;
	private static final int CTE_PARAM_PASO = 4;
	private static final int CTE_PARAM_ID_TARIFA = 5;
	private static final int CTE_PARAM_PLAZO = 6;
	private static final int CTE_PARAM_ORIGEN = 7;
	private static final int CTE_PARAM_NOVACION_SIN_MODALIDAD = 11;
	private static final String CTE_PARAMETRO_P_PRICING = "P_PRICING";
	
	final GestionDatosSolicitud gs = new GestionDatosSolicitud();
	/*
	 * Constante comparacion si es BO
	 */
	private static final String esBO = "S";

	public BusquedaDetalleSubproductoSrv()
	{
		super();
	}
	
	/**
	 * Metodo ejecutar
	 * @param contexto
	 * @param datosEntrada
	 * @return <code>IContexto[]</code>
	 */
	@Override
	public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada)
	{

		contexto.setDiarioElectronico(new DiarioElectronico(
				Constantes.CTE_OPERACION_CO,
				Integer.valueOf(0),
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Constantes.CTE_STRING_EMPTY,
                Constantes.CTE_STRING_EMPTY,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Integer.valueOf(0)));

		BigDecimal bidIdProducto = datosEntrada.getDecimal(CTE_TIRA_ID_PRODUCTO); // OBLIGATORIO
		BigDecimal bidIdSubProducto = datosEntrada.getDecimal(CTE_TIRA_ID_SUBPRODUCTO); // OBLIGATORIO
		BigDecimal bidColectivo = datosEntrada.getDecimal(CTE_TIRA_COLECTIVO); 		
		BigDecimal bidIdVersionGeneral = datosEntrada.getDecimal(CTE_TIRA_ID_VERSION_GENERAL); // OBLIGATORIO
		String strIndFiltrarNivel = datosEntrada.getString(CTE_TIRA_IND_FILTRAR_NIVEL);
		//Datos de entrada de la modificacion BO
		String bidBO = datosEntrada.getString(CTE_TIRA_IND_BO);
		BigDecimal bidNUC = datosEntrada.getDecimal(CTE_TIRA_NUC);
		BigDecimal bidPaso = datosEntrada.getDecimal(CTE_TIRA_PASO);
		/*BEGIN 20140515*/
		String indModificacionEvo = datosEntrada.getString(CTE_MODIFICACION_EVO);
		/*END 20140515*/
		
		//Datos de entrada de la hipoteca flexible
		BigDecimal idTarifa = datosEntrada.getDecimal(CTE_ID_TARIFA); // OPTATIVO
		String plazo = datosEntrada.getString(CTE_PLAZO); // OPTATIVO
		BigDecimal origen = datosEntrada.getDecimal(CTE_ORIGEN); // OPTATIVO
		
		// 2016-08-09 - Anhadir codigo de colectivo a la entrada
		BigDecimal codigoColectivo = datosEntrada.getDecimal(CTE_CODIGO_COLECTIVO);
		
		String novacionSinModalidad = datosEntrada.getString(CTE_ENTRADA_NOVACION_SIN_MODALIDAD);
		
		if (Utilidades.isBlankOrNull(novacionSinModalidad)){
			novacionSinModalidad = Constantes.NO;
		}	
		
		//Si no es novacionSinModalidad, producto y subproductos son obligatorios
		if (novacionSinModalidad.equals(Constantes.NO)){
			if(Utilidades.isBlankOrNull(bidIdProducto)){
				ServicioNegocio.rollback(12708, null, new String[] {"CODIGOPRODUCTO"}, null);
			}
			
			if(Utilidades.isBlankOrNull(bidIdSubProducto)){
				ServicioNegocio.rollback(12708, null, new String[] {"CODIGOSUBPRODUCTO"}, null);
			}
			
			if(Utilidades.isBlankOrNull(bidColectivo)){
				ServicioNegocio.rollback(12708, null, new String[] {"COLECTIVO"}, null);
			}
			
			if(Utilidades.isBlankOrNull(bidIdVersionGeneral)){
				ServicioNegocio.rollback(12708, null, new String[] {"VERSIONGENERAL"}, null);
			}
		}
		else{
			bidIdProducto = BigDecimal.ZERO;
			bidIdSubProducto = BigDecimal.ONE;
			bidColectivo = BigDecimal.ZERO;

			// Version vigente
			Date fechaHoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());
			Time horaHoy = new Time(DateUtils.getSoloHorario(DateUtils.dateNow()).getTime());	
			VersionEng versionEng = new VersionEng();		
			final VersionesC version = versionEng.obtenerVersionVigenteEnFecha(bidIdProducto.intValue(), bidIdSubProducto.intValue(),  bidColectivo.intValue(), fechaHoy, horaHoy);			
			
			if (null != version)
			{
				bidIdVersionGeneral = new BigDecimal(version.getVersionKey().getIdVersionGeneral());
			}
			else
			{
				bidIdVersionGeneral = BigDecimal.ONE;
			}
		}
		
		BigDecimal idTarifaAplicar = null;
		//TarifaVO tarifaAplicar = null;
		
		if (null == bidPaso)
		{
			bidPaso = BigDecimal.ZERO;
		}

		/*BEGIN 20140515*/
		if (StringUtils.isBlank(indModificacionEvo))
		{
			indModificacionEvo = Constantes.NO;
		}
		/*END 20140515*/
		
		
		final boolean indFiltrarNivel = Constantes.SI.equalsIgnoreCase(strIndFiltrarNivel);
		
		
		// Invocamos el servicio de búsqueda de detalle de catálogo
		IDatosEntradaTx entradaDetalleCatalogo = getPrograma(contexto, Constantes.CTE_SN_DETALLE_SUBPROD_CC, Constantes.CTE_SN_DETALLE_SUBPROD_CO);
		entradaDetalleCatalogo.addCampo(CTE_PARAM_COD_PRODUCTO, bidIdProducto);
		entradaDetalleCatalogo.addCampo(CTE_PARAM_COD_SUBPRODUCTO, bidIdSubProducto);
		entradaDetalleCatalogo.addCampo(CTE_PARAM_COD_COLECTIVO, bidColectivo);
		entradaDetalleCatalogo.addCampo(CTE_PARAM_VERSION_GENERAL, bidIdVersionGeneral);
		entradaDetalleCatalogo.addCampo(CTE_PARAM_PASO, bidPaso);
		entradaDetalleCatalogo.addCampo(CTE_PARAM_NOVACION_SIN_MODALIDAD, novacionSinModalidad);
		
		if(!Helper.isNullOrEmpty(idTarifa))
		{
			idTarifaAplicar = idTarifa;
		}
		/*
		else
		{
			if (esAltaInteresSolicTarifa(bidNUC))
			{
				//20150915 Si no viene informado el id tarifa lo recuperamos
				tarifaAplicar = UtilidadesTramitacion.obtenerTarifaMaximaPrioridad(bidNUC);
				if (null != tarifaAplicar)
				{
					idTarifaAplicar = tarifaAplicar.getIdTarifa();
				}
				else
				{
					ServicioNegocio.rollback(
						CodigosError.CTE_ERROR_CONSULTA_DATOS_SUBPROD_FALTA_TARIFA,
						null,
						null,
						null);
				}
			}
		}
		 */
		if(!Helper.isNullOrEmpty(idTarifaAplicar)) 
		{
			entradaDetalleCatalogo.addCampo(CTE_PARAM_ID_TARIFA, idTarifaAplicar);
		}
			
		if(!Helper.isNullOrEmpty(plazo)) 
		{
			entradaDetalleCatalogo.addCampo(CTE_PARAM_PLAZO, plazo);
		}
		if(!Helper.isNullOrEmpty(origen)) 
		{
			entradaDetalleCatalogo.addCampo(CTE_PARAM_ORIGEN, origen);
		}
		/*20150916 Añadimos el nuc*/
		if(!Helper.isNullOrEmpty(bidNUC)) 
		{
			entradaDetalleCatalogo.addCampo(CTE_PARAM_NUC, bidNUC);
		}
		
		if(!Helper.isNullOrEmpty(codigoColectivo)) 
		{
			entradaDetalleCatalogo.addCampo(CTE_CODIGO_COLECTIVO, codigoColectivo);
		}
		
			        
		IContexto[] salidaDetalleCatalogo =  invocarServicio(contexto, entradaDetalleCatalogo);
		
		/*BEGIN 20140515: Se añade en el código lo siguiente: 
		 * 	Si el producto enviado en el campo de entrada es un producto "Hipoteca Inteligente EVO" y 
		 * el servicio está en modificación (campo de entrada MODIFICACION_EVO = "S"), entonces se
		 * modifican los indicadores tipo de referencia (ANPMN014270) y los indicadores diferencial (ANPMN015120) del
		 * array de contextos que nos devuelve la invocación al SN ANPMN_048.
		 */
		if ((Constantes.SI.equals(indModificacionEvo)) &&
			(GestionParametro.esProductoHipotecaEvo(CTE_PARAMETRO_P_PRICING, bidIdProducto.toString())))
		{
			salidaDetalleCatalogo = GestionSubproducto.modificarIndicadoresPricingHipotIntelEvo(salidaDetalleCatalogo);
		}
		
		boolean esRefaccionario = false;
		// se comprueba si los datos de la solicitud coinciden con la agrupación de educredito
		// si resultado es true, es que coinciden y se encamina por oficina
		// si resultado es false, no coinciden y se deja que continue la ejecución
		if(null != bidColectivo && 0 != bidColectivo.compareTo(BigDecimal.ZERO)){

			ColectivosLineasColecC colectivosLineasColecC = null;

			if (null != codigoColectivo)
			{
				colectivosLineasColecC = GestionColecLineasColectivos.obtenerColectivoPorColectivoYLinea(
						codigoColectivo, bidColectivo);
			}
			else
			{
				colectivosLineasColecC = GestionColecLineasColectivos.obtenerColectivoPorLineaColec(bidColectivo);
			}



			if (null != colectivosLineasColecC)
			{
				DatosSolicitudC solicitud = new GestionDatosSolicitud().getUltimaVersion(bidNUC);


				// Si la solicitud es refacionaria
				if(null != solicitud)
				{
					esRefaccionario = UtilidadesTramitacion.esRefaccionario(
							solicitud.getRefaccionario(), 
							solicitud.getProducto(), 
							solicitud.getLineaColectivo(), 
							solicitud.getIdColectivo());

					if(esRefaccionario)
					{
						salidaDetalleCatalogo = GestionSubproducto.modificarIndicadoresDeposito(salidaDetalleCatalogo);
					}
				}
			}
		}else{
			if(null != bidNUC){

				esRefaccionario = UtilidadesTramitacion.esRefaccionario(bidNUC);

				if(esRefaccionario)
				{
					salidaDetalleCatalogo = GestionSubproducto.modificarIndicadoresDeposito(salidaDetalleCatalogo);
				}
			}
		}

		
		
		
		String versionActual = contexto.getVersionActual();
		BigDecimal versionActualBid = new BigDecimal(versionActual);
		
		/*END 20140515*/
		
		/**
		 * Si lleva informado el nuc y el paso desde el que se llama es el paso numero 3
		 */
		if(0 == bidPaso.compareTo(new BigDecimal(3))) 
		{
			UtilidadesTramitacion.esCorrectaDemoraModificarValoresDetalleCatalogo(bidNUC, salidaDetalleCatalogo);
		}
	
		
		if(!UtilidadesTramitacion.isBlankOrNull(bidNUC)) 
		{
			//Recuperamos los datos de la solicitud
			//Comprobar la version del codigo de operacion
			if(0 >= new BigDecimal(2).compareTo(versionActualBid)) 
			{
				//Comprobar si va por solicitud contrato
				boolean vaPorSolicitudContrato = UtilidadesTramitacion.esMulticredito48H(bidIdProducto.toString(),bidIdSubProducto.toString());
				//Comprobar es un producto de concesionarios
				boolean esProductoConcesionarios = UtilidadesComun.esProductoConcesionarios(bidIdProducto.toString(), bidIdSubProducto.toString());
				//Comprobar si es un cliente apto
				boolean esClienteApto = GestionSubproducto.consultarAptitudCliente(bidNUC);
				//Contexto para los datos adicionales
				IContexto datosAdicionalesMulticredito = null;
				
				if(!UtilidadesTramitacion.isBlankOrNull(vaPorSolicitudContrato) && !UtilidadesTramitacion.isBlankOrNull(esClienteApto)) 
				{
					//Rellenamos con los datos del multicredito
					datosAdicionalesMulticredito = ContextoDatosAdicionalesMulticredito.rellenarContextoDatosAdicionales(vaPorSolicitudContrato, esClienteApto,esProductoConcesionarios);
			
					List<IContexto> listaAuxiliar = new ArrayList<IContexto>();
					for(IContexto ctxt:salidaDetalleCatalogo) 
					{
						listaAuxiliar.add(ctxt);
					}
					listaAuxiliar.add(datosAdicionalesMulticredito);
				
					salidaDetalleCatalogo = listaAuxiliar.toArray(new IContexto[listaAuxiliar.size()]);
					
					//Comprobamos si va por solicitud contrato y si el cliente no es apto modificamos los indicadores
					if(vaPorSolicitudContrato) 
					{
						//Invocar a la modificación del detalle del catalogo
						GestionSubproducto.modificarIndicadoresMulticredito(salidaDetalleCatalogo,esClienteApto);
					}
				}else if(!UtilidadesTramitacion.isBlankOrNull(esProductoConcesionarios) && esProductoConcesionarios) {
					//Rellenamos con los datos del multicredito
					datosAdicionalesMulticredito = ContextoDatosAdicionalesMulticredito.rellenarContextoDatosAdicionales(vaPorSolicitudContrato, esClienteApto,esProductoConcesionarios);
			
					List<IContexto> listaAuxiliar = new ArrayList<IContexto>();
					for(IContexto ctxt:salidaDetalleCatalogo) {
						listaAuxiliar.add(ctxt);
					}
					listaAuxiliar.add(datosAdicionalesMulticredito);
				
					salidaDetalleCatalogo = listaAuxiliar.toArray(new IContexto[listaAuxiliar.size()]);
				}
				
			}
					
		}
		
		if (Constantes.CTE_CERO < salidaDetalleCatalogo.length && indFiltrarNivel)
		{
			salidaDetalleCatalogo = GestionSubproducto.filtrarNivelOficina(salidaDetalleCatalogo);
		}
		
		// Si el paso es 2,3 ó 4
		if (bidPaso.equals(Constantes.CTE_UNO) || 
				bidPaso.equals(Constantes.CTE_DOS) || 
				bidPaso.equals(Constantes.CTE_TRES))
		{
			/** 
			 *  Invocar funcion de iLog
			 *  
			 *  Recorrer detalle de catalogo para comprobar los cambios de ilog
			 */
			//SalidaReglasNegocioSolicitudCTO salidaILog = ReglasNegocioSolicitudSrv.calcularDetalle(bidNUC, bidPaso);
		
			//salidaDetalleCatalogo = GestionSubproducto.modificarDetalleCatalogo(salidaDetalleCatalogo, salidaILog, bidPaso);
		}
			
		/*
		 * Se comprueba si han cambiado los datos de la solicitud (producto, subproducto o versión)
		 * En dicho caso, se ponen como no activas las otras versiones de la solicitud
		 */
		if (comprobarCambios(bidNUC,bidIdProducto,bidIdSubProducto,bidIdVersionGeneral)){

			this.modificarIndicadorBloqueoBO (bidNUC);
		}

		
		//Si desde NSDK enviamos un uno modifica los indicadores
		//Viene en los parametros de entrada
		if(bidBO != null) 
		{
			if(esBO.equals(bidBO.toString())) 
			{
			//Llamada a la funcion que modifica los valores de los indicadores
			salidaDetalleCatalogo = GestionSubproducto.modificarIndicadoresBO(salidaDetalleCatalogo);
			}
			else
			{
				//Si viene vacio BO y viene el nuc es un acceso desde oficina
				//Estandar
				if(null!=bidNUC)
				{
					//Podria ser modificacion de oficina despues de la de BO
					List<ModificacionesBackOfficeC> listaModificacionesBO = GestionSubproducto.recuperarDatosModificadosPorBO(bidNUC);
					if(null!=listaModificacionesBO && listaModificacionesBO.size()>0) 
					{
						salidaDetalleCatalogo = GestionSubproducto.gestionarIndicadoresModificadosBO(salidaDetalleCatalogo,listaModificacionesBO);
					}
				}
			}
		}
		
		UtilidadesTramitacion.modificaIndicadorDiferimiento(salidaDetalleCatalogo);
		
		
		// 2016-05-20 - Recalcular Diferencial min. max. estandar:
		// - Si el tipo de interes es bonificado (tiene campanhas), se recalcula el
		//   Diferencial min. max. estandar como Diferencial estandar - Bonificacion maxima:
		//
		//	 Si ANPMN014070 = 03 --> ANPMN015130 = ANPMN015090 - ANPMN439110
		//
		// - La bonificacion maxima se obtiene de la llamada al PL/I ANPMR208.		
		if(0 == bidPaso.compareTo(new BigDecimal(3))) 
		{
			GestionSubproducto.recalcularDiferencialMinMaxEstandar(bidIdProducto, bidIdSubProducto, 
					idTarifaAplicar, bidNUC, bidIdVersionGeneral, salidaDetalleCatalogo);
		}
				
		
		// Devolver contextos de salida
		return salidaDetalleCatalogo;
	}
	
	/**
	 * Método que nos comprueba si el nuc recibido está en un alta de interés durante la tramitación.
	 * 
	 * @param nuc
	 * @return
	private static boolean esAltaInteresSolicTarifa(BigDecimal nuc)
	{
		GestionDatosSolicitud gds = new GestionDatosSolicitud();
		DatosSolicitudC datosSolicitud = null;
		List<CondicionesInteresC> listaInteres = null;
		boolean esAlta = false;
		
		datosSolicitud = gds.getUltimaVersion(nuc);
		
		if (null != datosSolicitud)
		{
			//IMPORTANTE, FALTA VER CÁNDO APLICA TARIFA, NON ME VALE O ID TARIFA DA AN25TB01
			//OPCION: APLANTILLAR CAMPO DA AN02TB01 DE SE APLCIA TARIFA A NIVEL DE SUBPRODUCTO
			//if (datosSolicitud.get)
			{
				if (0 == BigDecimal.ZERO.compareTo(datosSolicitud.getDatosSolicitudKey().getNumSolicitud()))
				{
					listaInteres = datosSolicitud.getCondicionesInteres();
					if (UtilidadesTramitacion.isBlankOrNull(listaInteres))
					{
						esAlta = true;
					}
				}
			}
		}
		
		return esAlta;
	}
	 */
	
	
	/**
	 * Método que modifica el campo "Activo" a "N" en la tabla AN35TB01 de las versiones anteriores
	 * @param solicitud
	 */
	public void modificarIndicadorBloqueoBO (BigDecimal pOficinaSolicitud, BigDecimal pNucExpediente, BigDecimal version){
		List<ModificacionesBackOfficeC> listaModificacionesDesactivarBO = GestionVersionBackOffice.buscarModificacionesDesactivar(pOficinaSolicitud, pNucExpediente, version);
		if(null != listaModificacionesDesactivarBO && listaModificacionesDesactivarBO.size()>0){
			
			for(ModificacionesBackOfficeC modificacion:listaModificacionesDesactivarBO){
				//Debemos considerar como valido para activo el espacio vacio por las operaciones en vuelo
				if(modificacion.getActivo().trim().equals("S") || modificacion.getActivo().trim().equals("")){
					modificacion.setActivo("N");
				}
			}
		}
	}
	
	/**
	 * Método que modifica el campo "Activo" a "N" en la tabla AN35TB01 de las versiones anteriores
	 * @param solicitud
	 */
	public void modificarIndicadorBloqueoBO (BigDecimal pNucExpediente){
		
		DatosSolicitudEng d = new DatosSolicitudEng();
		DatosSolicitudC datosC = new DatosSolicitudC();
		
		datosC=d.getUltimaVersionCompleta(pNucExpediente);
		
		List<ModificacionesBackOfficeC> listaModificacionesDesactivarBO = GestionVersionBackOffice.buscarModificacionesDesactivar(datosC.getDatosSolicitudKey().getOficinaSolicitud(), 
				pNucExpediente, datosC.getDatosSolicitudKey().getVersionSolicitud());
		
		if(null != listaModificacionesDesactivarBO && listaModificacionesDesactivarBO.size()>0){
			
			for(ModificacionesBackOfficeC modificacion:listaModificacionesDesactivarBO){
				//Debemos considerar como valido para activo el espacio vacio por las operaciones en vuelo
				if(modificacion.getActivo().trim().equals("S") || modificacion.getActivo().trim().equals("")){
					modificacion.setActivo("N");
				}
			}
		}
	}
	

	/**
	 * Método que comprueba si se ha cambiado el producto, subproducto o versión de una 
	 * solicitud respecto a la última versión completa
	 * @param nuc
	 * @param bidIdProducto
	 * @param bidIdSubProducto
	 * @param bidIdVersionGeneral
	 * @return
	 */
	
	public boolean comprobarCambios(BigDecimal nuc, BigDecimal bidIdProducto,BigDecimal bidIdSubProducto,BigDecimal bidIdVersionGeneral){
		
		DatosSolicitudC solicitudUltVersionCompleta = gs.getUltimaVersionCompleta(nuc);
		
		if (solicitudUltVersionCompleta != null){
		
			if (0 != bidIdProducto.compareTo(solicitudUltVersionCompleta.getProducto()) ||
					0 != bidIdSubProducto.compareTo(solicitudUltVersionCompleta.getSubproducto()) ||
						0 != bidIdVersionGeneral.compareTo(solicitudUltVersionCompleta.getVersionGeneral())){
						return true;
			}
		}
		
		return false;
	}	
	
	
}
