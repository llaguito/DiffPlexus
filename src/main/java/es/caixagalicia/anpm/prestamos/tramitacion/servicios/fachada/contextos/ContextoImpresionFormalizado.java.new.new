/**
 */
package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.LengthConstants;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.ElementoContextoInvalidoException;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.util.Helper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

/**
 * @author F001443
 */
public final class ContextoImpresionFormalizado {

    // 2014-02-20 - G000895
    // Se sustituye el contexto ANPMN102 por el CGALN117 debido a una modificación hecha en la impresión del recibo
    // "Este impreso lo utilizan varias aplicaciones (creditos, y alguna otra) y se pasó a un proyecto de impresos comunes"
    // private static final String CTE_ID_CONTEXTO = "ANPMN102";
    private static final String CTE_ID_CONTEXTO = "CGALN117";

    // private static final String CTE_PROP_COD_MODELO = "ANPMN102005";
    private static final String CTE_PROP_COD_MODELO = "CGALN117005";

    // private static final String CTE_PROP_FECHA_CONTABLE = "ANPMN102010";
    private static final String CTE_PROP_FECHA_CONTABLE = "CGALN117010";

    // private static final String CTE_PROP_FECHA_VALOR = "ANPMN102020";
    private static final String CTE_PROP_FECHA_VALOR = "CGALN117020";

    // private static final String CTE_PROP_MONEDA = "ANPMN102030";
    private static final String CTE_PROP_MONEDA = "CGALN117030";

    // private static final String CTE_PROP_NUMERO_AVAL = "ANPMN102040";
    private static final String CTE_PROP_NUMERO_AVAL = "CGALN117040";

    // private static final String CTE_PROP_CONCEPTO = "ANPMN102050";
    private static final String CTE_PROP_CONCEPTO = "CGALN117050";

    // private static final String CTE_PROP_IMPORTE_PRESTAMO = "ANPMN102060";
    private static final String CTE_PROP_IMPORTE_PRESTAMO = "CGALN117060";

    // private static final String CTE_PROP_CONCEPTO_DOS = "ANPMN102065";
    private static final String CTE_PROP_CONCEPTO_DOS = "CGALN117065";

    // private static final String CTE_PROP_IMPORTE_DOS = "ANPMN102067";
    // private static final String CTE_REG_TITULAR = "ANPMN102070";
    private static final String CTE_REG_TITULAR = "CGALN117070";

    // private static final String CTE_PROP_LINEA_TITULAR = "ANPMN102080";
    private static final String CTE_PROP_LINEA_TITULAR = "CGALN117080";

    // private static final String CTE_REG_IMPORTES = "ANPMN102090";
    private static final String CTE_REG_IMPORTES = "CGALN117090";

    // private static final String CTE_PROP_IMP_CONCEPTO = "ANPMN102100";
    private static final String CTE_PROP_IMP_CONCEPTO = "CGALN117100";

    // private static final String CTE_PROP_IMP_PORC = "ANPMN102110";
    private static final String CTE_PROP_IMP_PORC = "CGALN117110";

    // private static final String CTE_PROP_IMP_VALOR = "ANPMN102120";
    private static final String CTE_PROP_IMP_VALOR = "CGALN117120";

    // private static final String CTE_PROP_TOTAL_IMP = "ANPMN102130";
    private static final String CTE_PROP_TOTAL_IMP = "CGALN117130";

    // private static final String CTE_PROP_CUENTA_ASOCIADA = "ANPMN102140";
    private static final String CTE_PROP_CUENTA_ASOCIADA = "CGALN117140";

    // private static final String CTE_PROP_INDICADOR_ABONO = "ANPMN102145";
    private static final String CTE_PROP_INDICADOR_ABONO = "CGALN117145";

    // private static final String CTE_PROP_INDICADOR_ADEUDO = "ANPMN102147";
    private static final String CTE_PROP_INDICADOR_ADEUDO = "CGALN117147";

    // private static final String CTE_PROP_PIE = "ANPMN102150";
    // $NON-NL-1$
    private static final String CTE_CONCEPTO_CORRETAJE = "GASTOS_CORRETAJE_776804576";

    // $NON-NL-1$
    private static final String CTE_CONCEPTO_APERTURA = "COMISI_N_APERTURA_1008812563";

    // $NON-NL-1$
    private static final String CTE_CONCEPTO_ESTUDIO = "GASTOS_ESTUDIO_1488416570";

    private static final String CTE_VALOR_INDICADOR = "X";

    private static final String CTE_VALOR_COD_MODELO = "20088";

    private static final LogHelper LOGGER = LogHelper.getLog(ContextoImpresionFormalizado.class);

    /**
     * Constructor por defecto.
     */
    private ContextoImpresionFormalizado() {
    }

    /**
     * @return Lista  de contexto ANPMN102 -> CGALN117
     */
    public static IContexto[] rellenarDatosContexto(final List<IContexto> listContextos) {
        final String strCtxtoSolicitud = "ANPMN050";
        final String strCtxtoCuentasPrestamo = "ANPMN072";
        final String strCtxtoClientes = "ANPMN074";
        final String strCtxtoSubProducto = "ANPMN002";
        final String strCtxtoComisiones = "ANPMN053";
        final String strCtxtoPRogramaCorretaje = "ANPMN073";
        IContexto ctxImpresion = ContextoFactory.getInstance().getContexto(CTE_ID_CONTEXTO);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("INICIO Creando contexto de impresión");
        }
        final IContexto ctxtSolicitud = getPrimerContexto(strCtxtoSolicitud, listContextos);
        ctxImpresion.put(CTE_PROP_COD_MODELO, CTE_VALOR_COD_MODELO);
        rellenarImpresionConCntxtoSolicitud(ctxtSolicitud, ctxImpresion);
        rellenarImpresionConCntxtoCuentas(getLstContexto(strCtxtoCuentasPrestamo, listContextos), ctxImpresion);
        rellenarImpresionConCntxtoClientesTitulares(getPrimerContexto(strCtxtoClientes, listContextos), ctxImpresion);
        rellenarImpresionConCntxtoSubProducto(getPrimerContexto(strCtxtoSubProducto, listContextos), ctxImpresion);
        rellenarImpresionConCntxtoComisiones(getLstContexto(strCtxtoComisiones, listContextos), ctxtSolicitud, ctxImpresion);
        rellenarImpresionConCntxtoCorretaje(getPrimerContexto(strCtxtoPRogramaCorretaje, listContextos), ctxImpresion);
        ctxImpresion.put(CTE_PROP_INDICADOR_ABONO, CTE_VALOR_INDICADOR);
        ctxImpresion.put(CTE_PROP_INDICADOR_ADEUDO, CTE_VALOR_INDICADOR);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("FIN Creando contexto de impresión");
        }
        return new IContexto[] { ctxImpresion };
    }

    /**
     * @param idContexto nombre del contexto a buscar
     * @param lstContextos
     * @return Retorna el primero contexto que encuentre en la lista que se pasa como parametro
     */
    private static IContexto getPrimerContexto(String idContexto, List<IContexto> lstContextos) {
        IContexto contextoSalida = null;
        for (IContexto contexto : lstContextos) {
            if (idContexto.equals(contexto.getNombre())) {
                contextoSalida = contexto;
                break;
            }
        }
        return contextoSalida;
    }

    /**
     * @param idContexto nombre del contexto a buscar
     * @param lstContextos
     * @return Retorna una lista de contextos que coincidan con el nombre que se pasa como parametro
     */
    private static List<IContexto> getLstContexto(String idContexto, List<IContexto> lstContextos) {
        List<IContexto> lstContexto = new ArrayList<IContexto>(0);
        for (IContexto contexto : lstContextos) {
            if (idContexto.equals(contexto.getNombre())) {
                lstContexto.add(contexto);
            }
        }
        return lstContexto;
    }

    /**
     * @param aContextoCuenta
     * @param ctxImpresion
     */
    private static void rellenarImpresionConCntxtoCuentas(List<IContexto> aContextoCuenta, IContexto ctxImpresion) {
        final String strCtaBidEntidad = "ANPMN072110";
        final String strCtaBidOficina = "ANPMN072120";
        final String strCtaBidCuentaContable = "ANPMN072130";
        final String strCtaBidNumeroCuenta = "ANPMN072140";
        final String strCtaBidDigitoCuenta = "ANPMN072150";
        final String strCtaStringTipoCuenta = "ANPMN072100";
        final String strCtaStringCuenta = "ANPMN072180";
        final String strCtaBidPrioridad = "ANPMN072210";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("INICIO ContextoImpresionFormalizacion rellenarImpresionContextoCuentas");
        }
        for (IContexto contextoCuenta : aContextoCuenta) {
            if (Constantes.CTE_PRIORIDAD_CUENTA_UNO.equals(contextoCuenta.getBigDecimal(strCtaBidPrioridad))) {
                final BigDecimal bidEntidad = contextoCuenta.getBigDecimal(strCtaBidEntidad);
                final BigDecimal bidOficina = contextoCuenta.getBigDecimal(strCtaBidOficina);
                final BigDecimal bidCuentaContable = contextoCuenta.getBigDecimal(strCtaBidCuentaContable);
                final BigDecimal bidNumeroCuenta = contextoCuenta.getBigDecimal(strCtaBidNumeroCuenta);
                final BigDecimal bidDigitoCuenta = contextoCuenta.getBigDecimal(strCtaBidDigitoCuenta);
                if (Constantes.CTE_TIPO_CUENTA_ABONO.equals(contextoCuenta.getString(strCtaStringTipoCuenta))) {
                    // ctxImpresion.put(CTE_PROP_CUENTA_ASOCIADA,
                    // DatosCuentasC.getCuentaFormateadaCCC(bidEntidad, bidOficina, bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
                    // G000895 - Modificación del formato de la cuenta CCC a formato IBAN
                    // ctxImpresion.put(CTE_PROP_CUENTA_ASOCIADA,
                    // DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina, bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
                    // 2016-03-07 - Leer la cuenta en formato IBAN de la AN32TB01
                    String datosCuenta = contextoCuenta.getString(strCtaStringCuenta);
                    ctxImpresion.put(CTE_PROP_CUENTA_ASOCIADA, datosCuenta);
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("FIN ContextoImpresionFormalizacion rellenarImpresionContextoCuentas");
        }
    }

    /**
     * Rellena el impreso con los titulares asociados a la solicitud
     * @param lstContextoClientes
     * @param ctxImpresion
     */
    private static void rellenarImpresionConCntxtoClientesTitulares(IContexto contextoClientes, IContexto ctxImpresion) {
        final String strPropRelacionTitular = "ANPMN074103";
        final String strPropRegCliente = "ANPMN074100";
        final String strPropNumTitulares = "ANPMN074110";
        if (contextoClientes != null) {
            List<IRegistro> lstRegistroClientes = new ArrayList<IRegistro>(0);
            if (LOGGER.isDebugEnabled()) {
                LOGGER.info("INICIO rellenarImpresionConCntxtoClientesTitulares");
            }
            int numClientes = contextoClientes.getBigDecimal(strPropNumTitulares).intValue();
            IRegistro[] regClientes = contextoClientes.getRegistro(strPropRegCliente);
            for (int i = 0; i < numClientes; i++) {
                if (!UtilidadesTramitacion.isBlankOrNull(regClientes[i].getString(strPropRelacionTitular)) && Constantes.CTE_RELACION_TITULAR.equalsIgnoreCase(regClientes[i].getString(strPropRelacionTitular).trim())) {
                    lstRegistroClientes.add(crearRegistroCliente(regClientes[i], ctxImpresion, lstRegistroClientes));
                }
            }
            if (!lstRegistroClientes.isEmpty()) {
                ctxImpresion.put(CTE_REG_TITULAR, lstRegistroClientes.toArray(new IRegistro[0]));
            }
            if (LOGGER.isDebugEnabled()) {
                LOGGER.info("FIN rellenarImpresionConCntxtoClientesTitulares");
            }
        }
    }

    /**
     * @param registroCliente
     * @param ctxImpresion
     * @param lstRegistroClientes
     * @return Devuelve un registro con los titulares asociados
     */
    private static IRegistro crearRegistroCliente(IRegistro registroCliente, IContexto ctxImpresion, List<IRegistro> lstRegistroClientes) {
        final String strCliStrNombreCompleto = "ANPMN074101";
        IRegistro cliente = ContextoFactory.getInstance().getRegistro(ctxImpresion, CTE_REG_TITULAR);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("INICIO ContextoImpresionFormalizacion crearRegistroCliente");
        }
        cliente.put(CTE_PROP_LINEA_TITULAR, registroCliente.getString(strCliStrNombreCompleto).trim());
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("FIN ContextoImpresionFormalizacion crearRegistroCliente");
        }
        return cliente;
    }

    /**
     * Se rellenan los datos del contexto de impresión con los de la solicitud
     * @param ctxtSolicitud
     * @param ctxImpresion
     */
    private static void rellenarImpresionConCntxtoSolicitud(final IContexto ctxtSolicitud, final IContexto ctxImpresion) {
        final String strSolPropImporteTotal = "ANPMN050630";
        final String strSolPropMonedaImporteTotal = "ANPMN050640";
        final String strSolPropFechaValor = "ANPMN050985";
        String strFechaRecibo = fechaReciboFormalizacion(ctxtSolicitud.getBigDecimal("ANPMN050040"), ctxtSolicitud);
        // Se comprueba si es un prestamo personal
        if (UtilidadesComun.esPersonal(ctxtSolicitud) && !UtilidadesTramitacion.isBlankOrNull(strFechaRecibo)) {
            ctxImpresion.put(CTE_PROP_FECHA_CONTABLE, strFechaRecibo);
            ctxImpresion.put(CTE_PROP_FECHA_VALOR, strFechaRecibo);
        } else {
            ctxImpresion.put(CTE_PROP_FECHA_CONTABLE, ctxtSolicitud.getString(strSolPropFechaValor));
            ctxImpresion.put(CTE_PROP_FECHA_VALOR, ctxtSolicitud.getString(strSolPropFechaValor));
        }
        ctxImpresion.put(CTE_PROP_MONEDA, ctxtSolicitud.getString(strSolPropMonedaImporteTotal));
        ctxImpresion.put(CTE_PROP_NUMERO_AVAL, getNumOperacion(ctxtSolicitud));
        ctxImpresion.put(CTE_PROP_IMPORTE_PRESTAMO, bidToImporteStr(ctxtSolicitud.getBigDecimal(strSolPropImporteTotal), null));
    }

    /**
     * Consulta del estado de una tarea del expediente
     * @param ctxSolicitud
     * @param nucExp
     */
    private static String fechaReciboFormalizacion(BigDecimal nucExp, final IContexto ctxSolicitud) {
        BigDecimal codTarea = new BigDecimal(185);
        final String strSolPropTipoExpediente = "ANPMN050270";
        BigDecimal tipoExpediente = ctxSolicitud.getBigDecimal(strSolPropTipoExpediente);
        String strFecha = "";
        // /Si es préstamo personal: 330 y si no el valor por defecto: 185///
        if (0 == tipoExpediente.compareTo(new BigDecimal(191))) {
            codTarea = new BigDecimal(330);
        }
        IDatosEntradaTx datosEntrada = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), new Integer(502), new Integer(274));
        datosEntrada.addCampo("NUC", nucExp);
        datosEntrada.addCampo("CODIGO_PROCESO", codTarea);
        IContexto[] datosSalida = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntrada);
        if (null != datosSalida && 0 < datosSalida.length) {
            // Si no hay error
            if (!datosSalida[0].getString("EEXPN003070").equals(Constantes.CTE_STR_1)) {
                /* Si tiene tarea y no está oculta */
                if (0 == datosSalida[0].getString("EEXPN003070").trim().compareTo("0") && 0 == datosSalida[0].getString("EEXPN003030").trim().compareTo("F") && 0 == datosSalida[0].getString("EEXPN003090").trim().compareTo("N")) {
                    strFecha = ctxSolicitud.getString("ANPMN050920").trim();
                } else {
                    strFecha = ctxSolicitud.getString("ANPMN050985").trim();
                }
            }
        }
        return strFecha;
    }

    /**
     * Devuelve el numero de operacion a partir de los datos de solicitud:<br>
     * OOOO-SSS.SSS-D <br>
     * Donde O: Nº Oficia, S: Nº de solicitud y D es el digito de la solicitud
     * @param contextoDatosSolicitud
     * @return String formateado del numero de operacion
     */
    private static String getNumOperacion(IContexto contextoDatosSolicitud) {
        final String strSolPropOficinaSolicitud = "ANPMN050010";
        final String strSolPropNumeroSolicitud = "ANPMN050020";
        final String strSolPropDigitoSolicitud = "ANPMN050070";
        StringBuilder sbOperacion = new StringBuilder(15);
        sbOperacion.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud).toString(), LengthConstants.LENGTH_0004, Constantes.CTE_STRING_BLANK.charAt(0)));
        final String numSol = Helper.fillLeft(String.valueOf(contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud).intValue()), LengthConstants.LENGTH_0006, Constantes.CTE_STRING_BLANK.charAt(0));
        sbOperacion.append(Constantes.CTE_STRING_GUION);
        sbOperacion.append(numSol.substring(0, LengthConstants.LENGTH_0003));
        sbOperacion.append(Constantes.CTE_STRING_PUNTO);
        sbOperacion.append(numSol.substring(LengthConstants.LENGTH_0003));
        sbOperacion.append(Constantes.CTE_STRING_GUION);
        sbOperacion.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropDigitoSolicitud).toString(), LengthConstants.LENGTH_0001, Constantes.CTE_STRING_BLANK.charAt(0)));
        return sbOperacion.toString();
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro.
     * @param contextoSubproducto
     * @param contextoImpresion Contexto que se mandará a impresión
     */
    private static void rellenarImpresionConCntxtoSubProducto(final IContexto contextoSubproducto, final IContexto contextoImpresion) {
        final String strPrdctoDescripcion = "ANPMN002040";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("INICIO ContextoImpresionFormalizacion rellenarDatosContextoSubProducto");
        }
        final String concepto = Helper.fillRight(contextoSubproducto.getString(strPrdctoDescripcion).trim(), LengthConstants.LENGTH_0040, Constantes.CTE_STRING_BLANK.charAt(0));
        contextoImpresion.put(CTE_PROP_CONCEPTO, concepto.substring(0, LengthConstants.LENGTH_0020));
        contextoImpresion.put(CTE_PROP_CONCEPTO_DOS, concepto.substring(LengthConstants.LENGTH_0020, LengthConstants.LENGTH_0040));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("FIN ContextoImpresionFormalizacion rellenarDatosContextoSubProducto");
        }
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro
     * @param contextoComisiones
     * @param contextoImpresion Contexto que se mandará a impresión
     */
    private static void rellenarImpresionConCntxtoComisiones(final List<IContexto> lstContextoComisiones, final IContexto ctxtSolicitud, final IContexto contextoImpresion) {
        final String strComPropIntTipoComision = "ANPMN053040";
        final String strComPropPorcComision = "ANPMN053070";
        final String strComPropImpMinimoComision = "ANPMN053090";
        final String strSolPropImporte = "ANPMN050580";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("INICIO rellenarImpresionConCntxtoComisiones");
        }
        List<IRegistro> lstImportes = new ArrayList<IRegistro>(lstContextoComisiones.size());
        final DecimalFormat df = (DecimalFormat) NumberFormat.getInstance();
        df.setParseBigDecimal(true);
        BigDecimal bidImpSol = BigDecimal.ZERO;
        try {
            bidImpSol = ctxtSolicitud.getBigDecimal(strSolPropImporte);
        } catch (ElementoContextoInvalidoException e) {
            LOGGER.error(e);
        }
        for (IContexto contxtComision : lstContextoComisiones) {
            if (Constantes.TIPO_COMISION_APERTURA.equals(contxtComision.getString(strComPropIntTipoComision)) || Constantes.TIPO_COMISION_ESTUDIO.equals(contxtComision.getString(strComPropIntTipoComision))) {
                IRegistro registroImporte = ContextoFactory.getInstance().getRegistro(contextoImpresion, CTE_REG_IMPORTES);
                registroImporte.put(CTE_PROP_IMP_PORC, bidToImporteStr(contxtComision.getBigDecimal(strComPropPorcComision), 3));
                BigDecimal bidImp = BigDecimal.ZERO;
                BigDecimal bidImpCom = UtilidadesTramitacion.getImporteComision(bidImpSol, contxtComision.getBigDecimal(strComPropPorcComision));
                if (bidImpCom.compareTo(contxtComision.getBigDecimal(strComPropImpMinimoComision)) > 0) {
                    bidImp = bidImp.add(bidImpCom);
                } else {
                    bidImp = bidImp.add(contxtComision.getBigDecimal(strComPropImpMinimoComision));
                }
                registroImporte.put(CTE_PROP_IMP_VALOR, bidToImporteStr(bidImp, null));
                if (Constantes.TIPO_COMISION_APERTURA.equals(contxtComision.getString(strComPropIntTipoComision))) {
                    registroImporte.put(CTE_PROP_IMP_CONCEPTO, new Mensaje(ServicioNegocio.getContexto(), CTE_CONCEPTO_APERTURA).toString());
                } else {
                    registroImporte.put(CTE_PROP_IMP_CONCEPTO, new Mensaje(ServicioNegocio.getContexto(), CTE_CONCEPTO_ESTUDIO).toString());
                }
                lstImportes.add(registroImporte);
                sumarImporteTotal(contextoImpresion, bidImp);
            }
        }
        contextoImpresion.put(CTE_REG_IMPORTES, lstImportes.toArray(new IRegistro[lstImportes.size()]));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.info("FIN rellenarImpresionConCntxtoComisiones");
        }
    }

    /**
     * @param ctxtCorretaje
     * @param ctxImpresion
     */
    private static void rellenarImpresionConCntxtoCorretaje(IContexto ctxtCorretaje, IContexto ctxImpresion) {
        if (null != ctxtCorretaje) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.info("INICIO rellenarImpresionConCntxtoCorretaje");
            }
            final String CMPO_CTXTO_PROG_IMP_CORRETAJE = "ANPMN073060";
            IRegistro[] aRegImp = ctxImpresion.getRegistro(CTE_REG_IMPORTES);
            List<IRegistro> lstRegImp = new ArrayList<IRegistro>(aRegImp.length + 1);
            lstRegImp.addAll(Arrays.asList(aRegImp));
            IRegistro registroImporte = ContextoFactory.getInstance().getRegistro(ctxImpresion, CTE_REG_IMPORTES);
            registroImporte.put(CTE_PROP_IMP_CONCEPTO, new Mensaje(ServicioNegocio.getContexto(), CTE_CONCEPTO_CORRETAJE).toString());
            final BigDecimal corretaje = ctxtCorretaje.getBigDecimal(CMPO_CTXTO_PROG_IMP_CORRETAJE);
            registroImporte.put(CTE_PROP_IMP_VALOR, bidToImporteStr(corretaje, null));
            lstRegImp.add(registroImporte);
            sumarImporteTotal(ctxImpresion, corretaje);
            ctxImpresion.put(CTE_REG_IMPORTES, lstRegImp.toArray(new IRegistro[lstRegImp.size()]));
            if (LOGGER.isDebugEnabled()) {
                LOGGER.info("FIN rellenarImpresionConCntxtoCorretaje");
            }
        }
    }

    /**
     * Suma al campo de importe total el valor que se pasa como parametro
     * @param ctxImpresion
     * @param bidImporte
     */
    private static void sumarImporteTotal(final IContexto ctxImpresion, final BigDecimal bidImporte) {
        BigDecimal bidImpTotal = BigDecimal.ZERO;
        if (!UtilidadesTramitacion.isBlankOrNull(ctxImpresion.getString(CTE_PROP_TOTAL_IMP)) && ctxImpresion.getString(CTE_PROP_TOTAL_IMP).length() != 0) {
            final NumberFormat nf = NumberFormat.getInstance(Locale.getDefault());
            try {
                bidImpTotal = new BigDecimal(nf.parse(ctxImpresion.getString(CTE_PROP_TOTAL_IMP)).toString());
            } catch (ElementoContextoInvalidoException e) {
                LOGGER.error(e);
            } catch (ParseException e) {
                LOGGER.error(e);
            }
        }
        bidImpTotal = bidImpTotal.add(bidImporte);
        ctxImpresion.put(CTE_PROP_TOTAL_IMP, bidToImporteStr(bidImpTotal, null));
    }

    /**
     * @param importe
     * @param miniumFractionDigits si se informa a null se mostrará con 2 decimales
     * @return El parametro bigDecimal formateado al locale español, simbolo de decimales ','
     * y separador de miles '.'
     */
    private static String bidToImporteStr(BigDecimal importe, final Integer miniumFractionDigits) {
        final NumberFormat nf = NumberFormat.getInstance(Locale.getDefault());
        if (miniumFractionDigits == null) {
            nf.setMinimumFractionDigits(2);
        } else {
            nf.setMinimumFractionDigits(miniumFractionDigits);
        }
        return nf.format(importe);
    }
}
