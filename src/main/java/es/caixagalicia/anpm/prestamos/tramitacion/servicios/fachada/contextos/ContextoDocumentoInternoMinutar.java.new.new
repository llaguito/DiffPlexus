package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.campanhas.CampanhaC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.clausulas.ParametrosC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.condCapital.ModalidadAmortizacionC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionCampanhas;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionClausulasRestringuidas;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.gastosadic.GastosAdicionalesC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.gastosadic.GastosAdicionalesEng;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.ofertaVinculante.OfertaVinculanteC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionConsultaDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionPreformalizacion;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionVersionBackOffice;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.AltaPreformalizacionPrestamosDivisasSrv;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.LengthConstants;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesImpresion;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mainframe.ctgfacade.CtgFacade;
import es.caixagalicia.ifrt.util.Helper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

/**
 * Contexto ANPMN101 que contiene los campos mapeados de la PMOS986
 * para la generación del Documento interno para minutar
 * @author G000895
 */
public class ContextoDocumentoInternoMinutar {

    private static final String ID_CTX = "ANPMN101";

    /**
     * CAMPOS CONTEXTO ANPMN101
     */
    /**
     * CHAR 5
     */
    // 10 (ANPMN100010) Campo equivalente del contexto ANPMN100
    private static final String ID_PROP_NUMERO_POLIZA = "ANPMN101010";

    /**
     * CHAR 23
     */
    // 50
    private static final String ID_PROP_NUMERO_PRESTAMO = "ANPMN101020";

    /**
     * CHAR 10
     */
    // 102010
    private static final String ID_PROP_FECHA_PREV_FORMALIZACION = "ANPMN101030";

    /**
     * PIC 13(2)
     */
    // 91
    private static final String ID_PROP_IMPORTE_PRESTAMO = "ANPMN101040";

    /**
     * CHAR 30
     */
    // 40
    private static final String ID_PROP_MONEDA = "ANPMN101050";

    /**
     * PIC 13(2)
     */
    // private static final String ID_PROP_IMPORTE_AMPLIADO 					= "ANPMN101060"; //PENDIENTE
    /**
     * CHAR 32
     */
    // 330
    private static final String ID_PROP_OFICINA_CUENTA_ASOCIADA = "ANPMN101070";

    /**
     * CHAR 36
     */
    // 320;
    private static final String ID_PROP_CUENTA_ASOCIADA = "ANPMN101080";

    /**
     * CUENTA ESPECIAL
     */
    /**
     * CHAR 1
     */
    // PENDIENTE
    private static final String ID_PROP_TIENE_DEPOSITO = "ANPMN101090";

    /**
     * CHAR 10
     */
    // private static final String ID_PROP_PERIODO_DISPOSICION				= "ANPMN101100"; //PENDIENTE
    /**
     * PIC 13(2)
     */
    // private static final String ID_PROP_DISPOSICION_INICIAL				= "ANPMN101110"; //PENDIENTE
    /**
     * PIC 7(4)
     */
    // private static final String ID_PROP_PORCENT_DISPOSICION_FINAL			= "ANPMN101120"; //PENDIENTE
    /**
     * CHAR 20
     */
    // private static final String ID_PROP_FORMA_APLICAR_DISPOSICION			= "ANPMN101130"; //PENDIENTE
    /**
     * AMORTIZACION
     */
    /**
     * PIC 5
     */
    // 100
    private static final String ID_PROP_PLAZO_MESES = "ANPMN101140";

    /**
     * CHAR 10
     */
    // 110
    private static final String ID_PROP_FECHA_INICIO_COMPUTO = "ANPMN101150";

    /**
     * PIC 5
     */
    // 580
    private static final String ID_PROP_CARENCIA_MESES = "ANPMN101160";

    /**
     * CHAR 10
     */
    // 110+580
    private static final String ID_PROP_FECHA_CIERRE_CARENCIA = "ANPMN101170";

    /**
     * PIC 5
     */
    // 100-580
    private static final String ID_PROP_PLAZO_AMORTIZ_MESES = "ANPMN101180";

    /**
     * CHAR 10
     */
    // 120
    private static final String ID_PROP_FECHA_PRIMER_PAGO_AMORTIZ = "ANPMN101190";

    /**
     * CHAR 10
     */
    // 140
    private static final String ID_PROP_FECHA_ULTIMO_PAGO_AMORTIZ = "ANPMN101200";

    /**
     * PIC 5
     */
    // 150
    private static final String ID_PROP_NUMERO_CUOTAS_AMORTIZ = "ANPMN101210";

    /**
     * CHAR 20
     */
    // 130
    private static final String ID_PROP_PERIODICIDAD_CUOTAS_AMORTIZ = "ANPMN101220";

    /**
     * CHAR 200
     */
    // 161
    private static final String ID_PROP_PRIMERA_CUOTA_AMORTIZ = "ANPMN101230";

    /**
     * CHAR 100
     */
    private static final String ID_PROP_COEFICIENTE_MULTIPLICADOR_AMORTIZ = "ANPMN101240";

    /**
     * PIC 7 --> CHAR
     */
    private static final String ID_PROP_PRCTJ_DESIT_AMORT_TOTAL = "ANPMN101250";

    /**
     * PIC 7 --> CHAR
     */
    private static final String ID_PROP_PRCTJ_DESIT_AMORT_PARCIAL = "ANPMN101260";

    /**
     * CHAR 50
     */
    private static final String ID_PROP_CUANTIA_ADELANTOS = "ANPMN101270";

    /**
     * PIC 13(2)
     */
    private static final String ID_PROP_MIN_ADELANTOS = "ANPMN101280";

    /**
     * CHAR 50
     */
    private static final String ID_PROP_IMPUTACION_ADELANTOS = "ANPMN101290";

    /**
     * PIC 13(2)
     */
    // private static final String ID_PROP_CAPITAL_APLAZADO_AMORT 			= "ANPMN101300"; //PENDIENTE
    /**
     * INTERES
     */
    /**
     * CHAR 25
     */
    private static final String ID_PROP_TIPO_INTERES = "ANPMN101310";

    /**
     * CHAR 20
     */
    // 310
    private static final String ID_PROP_PERIODICIDAD_REVISION = "ANPMN101320";

    /**
     * PIC 7(4) --> CHAR
     */
    // 181
    private static final String ID_PROP_PORC_INTERES_INICIAL = "ANPMN101330";

    /**
     * CHAR 10
     */
    // 200 Fecha inicial interes
    private static final String ID_PROP_FECH_PORC_INICIAL = "ANPMN101340";

    /**
     * CHAR 10
     */
    // 240
    private static final String ID_PROP_FEC_CIERRE_PRIMER_PERIODO = "ANPMN101350";

    /**
     * CHAR 50
     */
    // 210
    private static final String ID_PROP_PERIODOS_SUCESISVOS = "ANPMN101360";

    /**
     * CHAR 10
     */
    private static final String ID_PROP_FEC_ULTIMO_PERIODO_INTERES = "ANPMN101370";

    /**
     * INTERES VARIABLE
     */
    /**
     * CHAR 80
     */
    // 310
    private static final String ID_PROP_DURACION_SUCESIVOS = "ANPMN101380";

    /**
     * PIC 7(4)
     */
    // 300
    private static final String ID_PROP_PORC_INT_MINIMO = "ANPMN101390";

    /**
     * PIC 7(4)
     */
    // 290
    private static final String ID_PROP_PORC_INT_MAXIMO = "ANPMN101400";

    /**
     * PIC 9
     */
    private static final String ID_PROP_NUM_TRAMOS = "ANPMN101410";

    /**
     * PRIMER PERIODO
     */
    /**
     * PIC 7(4)
     */
    // 260
    private static final String ID_PROP_PORC_MARGEN = "ANPMN101420";

    /**
     * CHAR 20
     */
    // 250
    private static final String ID_PROP_REFERENCIA = "ANPMN101430";

    /**
     * CHAR 10
     */
    // private static final String ID_PROP_PERIODO_APLICACION 				= "ANPMN101440"; //PENDIENTE
    /**
     * PIC 7(4) --> CHAR
     */
    // 290
    private static final String ID_PROP_PORC_INT_MINIMO_PRIMER_PERIOD = "ANPMN101450";

    /**
     * PIC 7(4)
     */
    // 300
    private static final String ID_PROP_PORC_INT_MAXIMO_PRIMER_PERIOD = "ANPMN101460";

    /**
     * PIC 7(4)
     */
    // 260
    private static final String ID_PROP_PORC_MARGEN_SIN_BONIF = "ANPMN101470";

    /**
     * CHAR 20
     */
    private static final String CAMPO_CTXTO_DIFERENCIAL_BONIFICADO = "ANPMN101480";

    private static final String ID_PROP_TIPO_REFERENCIA = "ANPMN101490";

    /**
     * INTERES SUSTITUTIVO
     */
    /**
     * PIC 7(4)
     */
    private static final String ID_PROP_PORC_MARGEN_SIN_BONIF_INTER_SUST = "ANPMN101500";

    /**
     * PIC 7(4)
     */
    // private static final String ID_PROP_PORC_MARGEN_CON_BONIF_INTER_SUST 	= "ANPMN101510"; //PENDIENTE
    /**
     * CHAR 20
     */
    // 270
    private static final String ID_PROP_TIPO_REFERENCIA_INTER_SUST = "ANPMN101520";

    /**
     * COMISIONES
     */
    /**
     * CHAR 9
     */
    // 340
    private static final String ID_PROP_PRCTJ_COMISION_APERTURA = "ANPMN101530";

    /**
     * PIC 13(2) --> CHAR
     */
    // 350
    private static final String ID_PROP_IMPORTE_COMISION_APERTURA = "ANPMN101540";

    /**
     * PIC 7(4) --> CHAR
     */
    // 420 PENDIENTE
    private static final String ID_PROP_PRCTJ_MODIFICACION_CONTRACTUAL = "ANPMN101550";

    /**
     * PIC 13(2) --> CHAR
     */
    // 430
    private static final String ID_PROP_IMP_RECLAMACION = "ANPMN101560";

    /**
     * CHAR 9
     */
    // private static final String ID_PROP_PRCTJ_COMISION_AMPLIACION 		= "ANPMN101570"; //PENDIENTE
    /**
     * PIC 13(2)
     */
    // private static final String ID_PROP_IMPORTE_COMISION_AMPLIACION 		= "ANPMN101580"; //PENDIENTE
    /**
     * CHAR 9
     */
    // private static final String ID_PROP_PRCTJ_COMISION_NOVACION 			= "ANPMN101590"; //PENDIENTE
    /**
     * PIC 13(2)
     */
    // private static final String ID_PROP_IMPORTE_COMISION_NOVACION 		= "ANPMN101600"; //PENDIENTE
    /**
     * TAE
     */
    /**
     * PIC 7(4) --> CHAR
     */
    // 20
    private static final String ID_PROP_TAE = "ANPMN101610";

    /**
     * PIC 7(4)
     */
    // PENDIENTE
    private static final String ID_PROP_TAE_BONIFICACION = "ANPMN101620";

    /**
     * PIC 7(4)
     */
    // 220
    private static final String ID_PROP_RECARGO_DEMORA = "ANPMN101630";

    /**
     * PIC 5
     */
    // 455
    private static final String ID_PROP_NUM_PAGOS = "ANPMN101640";

    /**
     * PIC 5
     */
    private static final String ID_PROP_NUM_ANHOS = "ANPMN101650";

    /**
     * PIC 19(2)
     */
    // 92
    private static final String ID_PROP_TOTAL_CAPITAL = "ANPMN101660";

    /**
     * PIC 19(2)
     */
    private static final String ID_PROP_TOTAL_INTERES = "ANPMN101670";

    /**
     * PIC 19(2) --> CHAR
     */
    // 464
    private static final String ID_PROP_TOTAL_CUOTA = "ANPMN101680";

    /**
     * MATRIZ TITULARES
     */
    private static final String ID_REG_TITULAR = "ANPMN101690";

    /**
     * CHAR 100
     */
    // 81+82+83
    private static final String ID_PROP_NOMBRE_TITULAR = "ANPMN101691";

    /**
     * CHAR 30
     */
    // 84+85
    private static final String ID_PROP_NIF_TITULAR = "ANPMN101692";

    /**
     * MATRIZ FIADORES
     */
    private static final String ID_REG_FIADORES = "ANPMN101700";

    /**
     * CHAR 100
     */
    // 71+72+73
    private static final String ID_PROP_NOMBRE_FIADOR = "ANPMN101701";

    /**
     * CHAR 30
     */
    // 74+75
    private static final String ID_PROP_NIF_FIADOR = "ANPMN101702";

    /**
     * MATRIZ GARANTIAS
     */
    // PENDIENTE
    private static final String ID_REG_GARANTIAS = "ANPMN101710";

    /**
     * CHAR 20
     */
    // PENDIENTE
    private static final String ID_PROP_FINCA_REGISTRO = "ANPMN101711";

    /**
     * PIC 17(2)
     */
    // PENDIENTE
    private static final String ID_PROP_PPAL_HIPOTECA = "ANPMN101712";

    /**
     * PIC 17(2)
     */
    // PENDIENTE
    private static final String ID_PROP_IMPORTE_SUBASTA = "ANPMN101713";

    /**
     * PIC 17(2)
     */
    // PENDIENTE
    private static final String ID_PROP_TASACION = "ANPMN101714";

    /**
     * CHAR 20
     */
    // PENDIENTE
    private static final String ID_PROP_REFERENCIA_TASACION = "ANPMN101715";

    /**
     * PIC 17(4)
     */
    // PENDIENTE
    private static final String ID_PROP_LTV = "ANPMN101716";

    /**
     * MATRIZ PAGOS
     */
    private static final String ID_REG_PAGOS = "ANPMN101720";

    /**
     * PIC 19(2) --> CHAR
     */
    // 462
    private static final String ID_PROP_PAGOS_CAPITAL = "ANPMN101721";

    /**
     * PIC 19(2) --> CHAR
     */
    // 463
    private static final String ID_PROP_PAGOS_INTERES = "ANPMN101722";

    /**
     * PIC 19(2)
     */
    // 462+463
    private static final String ID_PROP_PAGOS_CUOTA = "ANPMN101723";

    /**
     * PIC 19(2)
     */
    private static final String ID_PROP_PAGOS_CAPITAL_PDTE = "ANPMN101724";

    /**
     * PIC 3
     */
    // private static final String ID_PROP_PAGOS_NUM_MES 					= "ANPMN101725"; //PENDIENTE
    /**
     * CHAR 15
     */
    // 461
    private static final String ID_PROP_PAGOS_TEXTO_PERIODO = "ANPMN101726";

    /**
     * MATRIZ SUBTOTALES ANHO
     */
    private static final String ID_REG_SUBTOTALES_ANHO = "ANPMN101730";

    /**
     * PIC 19(2)
     */
    // 685
    private static final String ID_PROP_SUBTOTALES_CAPITAL = "ANPMN101731";

    /**
     * PIC 19(2)
     */
    // 675
    private static final String ID_PROP_SUBTOTALES_INTERES = "ANPMN101732";

    /**
     * PIC 19(2)
     */
    // 475  //PENDIENTE
    private static final String ID_PROP_SUBTOTALES_CUOTA = "ANPMN101733";

    /**
     * PIC 3
     */
    // Contador del año en Subtotales
    private static final String ID_PROP_SUBTOTALES_NUM_ANHO = "ANPMN101734";

    /**
     * CHAR 15
     */
    private static final String ID_PROP_PAGOS_TEXTO_ANHO = "ANPMN101735";

    /**
     * PIC 19(2)
     */
    private static final String ID_PROP_SUBTOTALES_CAPITAL_PDTE = "ANPMN101736";

    // Marca que indica si lo que se ha modificado con respecto a la versión anterior es solamente la fecha de formalización
    /**
     * CHAR 1
     */
    private static final String ID_PROP_MODIF_SOLO_FECHA = "ANPMN101740";

    /**
     * PIC 19(2)
     */
    private static final String ID_PROP_CONTRAVALOR_EUROS = "ANPMN101750";

    /**
     * PIC 11(7)
     */
    private static final String ID_PROP_CAMBIO_SEG_FLUCTUACION = "ANPMN101760";

    /**
     * PIC 15(2)
     */
    private static final String ID_PROP_IMPORTE_TASACION_ESTIMADO = "ANPMN101770";

    /**
     * CHAR 3
     */
    private static final String ID_PROP_MONEDA_TASACION = "ANPMN101780";

    /*20140904: Campos nuevos del contexto ANPMN101*/
    private static final String ID_PROP_COD_PRODUCTO = "ANPMN101785";

    // private static final String ID_PROP_DESCR_PRODUCTO 					= "ANPMN101786";
    private static final String ID_PROP_COD_SUBPRODUCTO = "ANPMN101787";

    private static final String ID_PROP_DESCR_SUBPRODUCTO = "ANPMN101788";

    private static final String ID_PROP_IND_TIENE_APLAZ = "ANPMN101789";

    private static final String ID_PROP_INCR_DURANTE_APLAZ = "ANPMN101790";

    private static final String ID_PROP_MATRIZ_GASTOS_ADIC = "ANPMN101800";

    private static final String ID_PROP_MATRIZ_GASTOS_ADIC_ID_CONCEPTO = "ANPMN101801";

    private static final String ID_PROP_MATRIZ_GASTOS_ADIC_DESCR_CONCEPTO = "ANPMN101802";

    private static final String ID_PROP_MATRIZ_GASTOS_ADIC_IMPORTE_CONCEPTO = "ANPMN101803";

    /*20151027 Se añaden campos nuevos para el documento interno minuta.*/
    private static final String CUOTA_SEGUNDO_TRAMO = "ANPMN101850";

    private static final String ID_PROP_PRCTJ_COM_RIESGO_INTERES = "ANPMN101860";

    private static final String ID_PROP_ID_TARIFA = "ANPMN101870";

    private static final String ID_PROP_DESCR_TARIFA = "ANPMN101880";

    private static final String ID_PROP_NUC = "ANPMN101890";

    private static final String CAMPO_CTXTO_TIPO_MAXIMO_BONIFICACION = "ANPMN101900";

    private static final String ID_PROP_VALORACION_TRAMO_INTERES = "ANPMN101910";

    private static final String ID_PROP_PORC_COM_ESTUDIO = "ANPMN101920";

    private static final String ID_PROP_IMPORTE_COM_ESTUDIO = "ANPMN101930";

    /**
     * PIC 7 --> CHAR
     */
    private static final String ID_PROP_PRCTJ_DESIT_AMORT_TOTAL_TRAMO_DOS = "ANPMN101940";

    /**
     * PIC 7 --> CHAR
     */
    private static final String ID_PROP_PRCTJ_DESIT_AMORT_PARCIAL_TRAMO_DOS = "ANPMN101950";

    private static final String INDICADOR_PARRILLA = "ANPMN101960";

    private static final String DES_IND_PARRILLA = "ANPMN101970";

    private static final String IND_MEDIDA_SOLCHAGA = "ANPMN101980";

    // Campos nuevos hipoteca ABANCA
    private static final String CAMPO_CTXTO_DIFERENCIAL_DUR_APLAZAMIENTO = "ANPMN101810";

    // private static final String CAMPO_CTXTO_MATRIZ_DATOS_GARANTIAS 					= "ANPMN101830";
    // private static final String CAMPO_CTXTO_MATRIZ_DATOS_GARANTIAS_FINCA_REGISTRO 	= "ANPMN101831";
    // private static final String CAMPO_CTXTO_MATRIZ_DATOS_GARANTIAS_PRINCIPAL_HIPOTECA = "ANPMN101832";
    // private static final String CAMPO_CTXTO_MATRIZ_DATOS_GARANTIAS_IMPORTE_SUBASTA 	= "ANPMN101833";
    // private static final String CAMPO_CTXTO_MATRIZ_DATOS_GARANTIAS_TASACION 			= "ANPMN101834";
    // private static final String CAMPO_CTXTO_MATRIZ_DATOS_GARANTIAS_REF_TASACION 		= "ANPMN101835";
    // private static final String CAMPO_CTXTO_MATRIZ_DATOS_GARANTIAS_LTV 				= "ANPMN101836";
    private static final String CAMPO_CTXTO_CONSUMIDOR_SN = "ANPMN101840";

    private static final String ID_PERIODICIDAD_INTERESES = "ANPMN101990";

    private static final String ID_PRIMERA_CUOTA_DE_CAPITAL = "ANPMN101991";

    private static final String ID_IND_ROBO_HIPOTECA = "ANPMN101992";

    private static final String ID_IND_COMPARTE_GASTOS = "ANPMN101993";

    // Campos nuevos para la hipoteca mixta
    private static final String ID_DIFERENCIAL = "ANPMN101994";

    private static final String ID_TIPO_REFERENCIA_MIXTA = "ANPMN101995";

    // Plazo desde y hasta para el 2º tramo
    private static final String ID_PLAZO_DESDE_2DO_TRAMO = "ANPMN101996";

    private static final String ID_PLAZO_HASTA_2DO_TRAMO = "ANPMN101997";

    private static final String CUOTA_TERCER_TRAMO = "ANPMN101998";

    private static final String COLECTIVO = "ANPMN101999";

    private static final String CAMPO_CTXTO_MAXIMA_BONIFICACION = "ANPMN101989";

    private static final String CAMPO_CTXTO_FECHA_FIN_2TRAMO = "ANPMN101988";

    /**
     * COMISIONES
     */
    private static final String ID_PROP_PRCTJ_COM_AMORT_PARCIAL_TRAMO_UNO = "ANPMN101987";

    private static final String ID_PROP_PRCTJ_COM_AMORT_PARCIAL_TRAMO_DOS = "ANPMN101986";

    private static final String ID_PROP_PRCTJ_COM_AMORT_TOTAL_TRAMO_UNO = "ANPMN101985";

    private static final String ID_PROP_PRCTJ_COM_AMORT_TOTAL_TRAMO_DOS = "ANPMN101984";

    private static final String ID_PROP_PORC_COM_SUBROGACION = "ANPMN101983";

    private static final String ID_PROP_IMPORTE_COM_SUBROGACION = "ANPMN101982";

    private static final String CAMPO_CTXTO_PRIMERA_FECHA_PAGO_2TRAMO = "ANPMN101981";

    private static final String CAMPO_CTXTO_PRIMERA_FECHA_PAGO_3TRAMO = "ANPMN101979";

    private static final String CAMPO_CTXTO_IMPORTE_CONTENIDO = "ANPMN101978";

    // Cuenta contable PMOS
    private static final String CTE_CUENTAC = "500";

    private static final Integer ID_CODOP_CONSULTA_AMORTIZACION = Integer.valueOf(266);

    private static final String CAMPO_CTXTO_SOL_OFICINA = "ANPMN050010";

    private static final String CAMPO_CTXTO_SOL_NUMERO = "ANPMN050020";

    private static final String CAMPO_CTXTO_SOL_VERSION = "ANPMN050030";

    private static final String CAMPO_CTXTO_SOL_NUC = "ANPMN050040";

    private static final String CAMPO_CTXTO_SOL_DIGITO = "ANPMN050070";

    private static final String CAMPO_CTXTO_SOL_PLAZO = "ANPMN050710";

    private static final String CTE_CTX_SOLIC_COD_PROD = "ANPMN050080";

    private static final String CTE_CTX_SOLIC_COD_SUBPROD = "ANPMN050090";

    private static final String CTE_IF_TARIFA = "ANPMN050886";

    private static final String CTE_VERSION_GENERAL = "ANPMN050100";

    private static final String CTE_NUC = "ANPMN050040";

    /* CAMPOS CONTEXTO ANMPN052 */
    private static final String strIntPropOrdenTramo = "ANPMN052040";

    private static final String strIntPropTipoCondicion = "ANPMN052050";

    private static final String strIntPropTipoInteres = "ANPMN052080";

    private static final String strIntPropPorcTipoInteres = "ANPMN052130";

    private static final String strIntPropTipoReferencia = "ANPMN052160";

    private static final String strIntPropPorcDemora = "ANPMN052340";

    private static final String strIntNumPeriodoIntRev = "ANPMN052380";

    private static final String strIntPropStrUnidadPeriodoRev = "ANPMN052400";

    private static final String strIntPropIntNumPeriodo = "ANPMN052430";

    private static final String strIntPropStrUnidadPeriodo = "ANPMN052440";

    private static final String strPropIntPagoUnico = "ANPMN052460";

    private static final String strPropDirefencial = "ANPMN052270";

    private static final String strSuelo = "ANPMN052550";

    private static final String strSueloInteresInicial = "ANPMN052530";

    private static final String strAplicaSueloAInteresInicial = "ANPMN052520";

    private static final String strSobreQueAplicaSuelo = "ANPMN052590";

    private static final String strTecho = "ANPMN052570";

    private static final String strPlazo = "ANPMN052110";

    private static final String strValoracion = "ANPMN052100";

    private static final BigDecimal LIST_VALORES_PARRILLA = new BigDecimal(2101);

    /**
     *Literales para la cuantia de adelantos de amortizacion  $NON-NL-1$
     */
    private static final String ETIQUETA_CUANTIA_ADELANTOS_LIBRE = "IMPORTE_LIBRE_1583132856";

    // $NON-NL-1$
    private static final String ETIQUETA_CUANTIA_ADELANTOS_UNA = "IMPORTE_O_M_S_CUOTAS_AMORTIZACI_N_1720470897";

    /**
     *Literales para la imputacion de adelantos de amortizacion  $NON-NL-1$
     */
    private static final String ETIQUETA_IMPUTACION_ADELANTOS_0 = "REC_LCULO_43245520";

    // $NON-NL-1$
    private static final String ETIQUETA_IMPUTACION_ADELANTOS_1 = "_LTIMAS_CUOTAS_404724207";

    // $NON-NL-1$
    private static final String ETIQUETA_IMPUTACION_ADELANTOS_2 = "PR_XIMOS_VENCIMIENTOS_696553825";

    /**
     *Literales para el tipo de interés  $NON-NL-1$
     */
    private static final String ETIQUETA_INTERES_VARIABLE = "VARIABLE_1249586564";

    // $NON-NL-1$
    private static final String ETIQUETA_INTERES_FIJO = "FIJO_3142984";

    /**
     * Literales para el cuadro de subtotales por año
     */
    private static final String ETIQUETA_TEXTO_ANHO = "AÑO";

    // Valoración tramo interés $NON-NL-1$
    private static final String COMERCIAL = "_360_360_390198453";

    // $NON-NL-1$
    private static final String FINANCIERO = "_365_360_385580848";

    // $NON-NL-1$
    private static final String NATURAL = "_365_365_385580843";

    /*----------------------------*/
    // $NON-NL-1$
    private static final String RESTO_PERIODOS = "TIPO_REF_MARGEN_106699488";

    // $NON-NL-1$
    private static final String ETIQUETA_COEF_MULTIPL = "COEF_MULTIPLICADOR_S_CUOTA_PRECEDENTE_1520619589";

    // $NON-NL-1$
    private static final String ETIQUETA_ABREV_EURO = " EUR ";

    /*Campos de entrada para llamar al servicio de cuadro amortización ANPM_266*/
    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_OFICINA_SOLICITUD = "OFICINA_SOLICITUD";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_NUMERO_SOLICITUD = "NUMERO_SOLICITUD";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_VERSION_SOLICITUD = "VERSION_SOLICITUD";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_NUC_EXPEDIENTE = "NUC_EXPEDIENTE";

    // private static final String NOMBRE_CAMPO_GUARDAR_IMPRESION = "GUARDAR_IMPRESION"; // OPCIONAL
    // private static final String NOMBRE_CAMPO_GUARDAR_COMO = "GUARDAR_COMO"; // OPCIONAL
    private static final String NOMBRE_CAMPO_PANTALLA_ORIGEN = "PANTALLA_ORIGEN";

    // OBLIGATORIO
    private static final String NOMBRE_CAMPO_DIGITO_SOLICITUD = "DIGITO_SOLICITUD";

    /**
     * Log de la clase.
     */
    private static final LogHelper LOGGER = LogHelper.getLog(ContextoImpresionFormalizacion.class);

    private ContextoDocumentoInternoMinutar() {
        super();
    }

    /*20151027 Se añade plazo primer tramo para obtener la cuota del segundo tramo yendo a la matriz de pagos*/
    // private static BigDecimal plazoPrimerTramoInteres = null;
    // private static BigDecimal plazoSegundoTramoInteres = null;
    private static String medidaSolchaga = "0";

    private static final boolean esEntornoAbanca = UtilidadesTramitacion.esEntornoAbanca();

    /**
     * @param aContextoSalida Recibe un array de contextos con los datos de la solicitud, comisiones,
     * @param pCodError
     * @return
     */
    public static IContexto[] rellenarDatosContexto(IContextoEjecucion contexto, IContexto[] aContextos, Integer modelo) {
        // IDs de los contextos que se esperan recibir
        final String strCtxtoProducto = "ANPMN001";
        final String strCtxtoSubproducto = "ANPMN002";
        final String strCtxtoSolicitud = "ANPMN050";
        final String strCtxtoCondicionesCapitalPrestamo = "ANPMN051";
        final String strCtxtoInteres = "ANPMN052";
        final String strCtxtoComisiones = "ANPMN053";
        final String strCtxtoTratamientoAdelantos = "ANPMN054";
        final String strCtxtoCuentasPrestamo = "ANPMN072";
        final String strCtxtoClientes = "MEFCN000";
        final String strCtxtoProgramaAmortizacion = "ANPMN075";
        final String strCtxtoRegMatrizPago = "ANPMN075140";
        final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
        final String strSolPropNucSolicitud = "ANPMN050040";
        final String strSolEspecialidadDivisa = "ANPMN050120";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarDatosContexto");
        }
        IContexto[] aContextoSalida = new IContexto[1];
        IContexto contextoImpresion = ContextoFactory.getInstance().getContexto(ID_CTX);
        final IContexto ctxtoSolicitud = UtilidadesTramitacion.getContexto(aContextos, strCtxtoSolicitud);
        final IContexto ctxtoProducto = UtilidadesTramitacion.getContexto(aContextos, strCtxtoProducto);
        final IContexto ctxtoSubproducto = UtilidadesTramitacion.getContexto(aContextos, strCtxtoSubproducto);
        final IContexto[] aCtxtoIntereses = getArrayContexto(strCtxtoInteres, aContextos);
        final boolean bolPrestamoFijo = isPrestamoFijo(aCtxtoIntereses);
        String consumidor = new String();
        if (UtilidadesTramitacion.esDivisaPorEspecialidad(ctxtoSolicitud.getString(strSolEspecialidadDivisa))) {
            if (esEntornoAbanca && UtilidadesTramitacion.comprobarControlOperatoria(ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud), new BigDecimal(150003), false)) {
                // consumidor = UtilidadesImpresion.esConsumidor(ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud));
                consumidor = UtilidadesTramitacion.esConsumidorNoIlog(ctxtoSolicitud.getBigDecimal(strSolPropNucSolicitud));
            }
        }
        if (UtilidadesTramitacion.isBlankOrNull(modelo)) {
            ServicioNegocio.rollback(CodigosError.ERROR_IMPRESION_MODELO_DOC.intValue(), null, null, null);
        } else {
            contextoImpresion.put(ID_PROP_NUMERO_POLIZA, "" + modelo.intValue());
        }
        // 20160726 - Rellenar aplica medida Solchaga
        String CTE_UNO = "1";
        medidaSolchaga = UtilidadesImpresion.obtenerMedidaSolchaga(ctxtoSolicitud);
        contextoImpresion.put(IND_MEDIDA_SOLCHAGA, medidaSolchaga);
        if (CTE_UNO.equals(medidaSolchaga)) {
            int iNumEntregas = 0;
            IContexto ANPMN075 = UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion);
            final IRegistro[] aRegPagos = ANPMN075.getRegistro(strCtxtoRegMatrizPago);
            for (IRegistro registroActual : aRegPagos) {
                if (0 != BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres))) {
                    iNumEntregas++;
                }
            }
            contextoImpresion.put(ID_PROP_NUM_PAGOS, new BigDecimal(iNumEntregas));
        }
        rellenarImpresionConCntxtoSolicitud(ctxtoSolicitud, ctxtoProducto, ctxtoSubproducto, contextoImpresion, aCtxtoIntereses);
        // Recuperamos en una variable si tiene depósito para tenerlo en cuenta a la hora de rellenar el contexto
        // de impresión de las cuentas, ya que, en lugar de imprimir el iban de la cuenta se imprimirá el iban del préstamo
        String tieneDeposito = ctxtoSolicitud.getString("ANPMN050740");
        if (tieneDeposito.equals("1")) {
            BigDecimal oficinaSolicitud = ctxtoSolicitud.getBigDecimal("ANPMN050010");
            BigDecimal numeroSolicitud = ctxtoSolicitud.getBigDecimal("ANPMN050020");
            BigDecimal digitoSolicitud = ctxtoSolicitud.getBigDecimal("ANPMN050070");
            String entidadSolicitud = ctxtoSolicitud.getString("ANPMN050310");
            rellenarImpresionCuentasConDeposito(contexto, contextoImpresion, entidadSolicitud, oficinaSolicitud, numeroSolicitud, digitoSolicitud);
        } else
            rellenarImpresionConCntxtoCuentas(getArrayContexto(strCtxtoCuentasPrestamo, aContextos), contextoImpresion);
        rellenarImpresionConCntxtoCondicionesCapital(UtilidadesTramitacion.getContexto(aContextos, strCtxtoCondicionesCapitalPrestamo), contextoImpresion, !bolPrestamoFijo);
        if (esEntornoAbanca) {
            rellenarImpresionConGastosAdicionales(ctxtoSolicitud, contextoImpresion);
        }
        /* Sólo cuando tenga un interés bonificable */
        if (UtilidadesTramitacion.esBonificable(aCtxtoIntereses)) {
            rellenarImpresionConTaeBonificada(contextoImpresion, ctxtoSolicitud);
        }
        rellenarImpresionConCntxtoComisiones(getArrayContexto(strCtxtoComisiones, aContextos), contextoImpresion);
        rellenarImpresionConCntxtoClientesTitulares(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion, Boolean.FALSE);
        rellenarImpresionConCntxtoClientesAvalistas(getArrayContexto(strCtxtoClientes, aContextos), contextoImpresion);
        List<BigDecimal> plazosTramosInteres = rellenarImpresionConCntxtoInteres(aCtxtoIntereses, contextoImpresion, bolPrestamoFijo);
        rellenarImpresionConCntxtoPrograma(UtilidadesTramitacion.getContexto(aContextos, strCtxtoProgramaAmortizacion), ctxtoSolicitud, contextoImpresion, !bolPrestamoFijo, aCtxtoIntereses, plazosTramosInteres);
        if (null != UtilidadesTramitacion.getContexto(aContextos, strCtxtoTratamientoAdelantos)) {
            rellenarImpresionConCntxtoTratamientoAdelantos(UtilidadesTramitacion.getContexto(aContextos, strCtxtoTratamientoAdelantos), contextoImpresion);
        }
        // Rellena la impresion con los bienes y las bonificaciones
        rellenaImpresionConDatosBienesYbonificaciones(contextoImpresion, ctxtoSolicitud, aCtxtoIntereses);
        // Rellenamos la impresion con la llamada a ilog.
        rellenarImpresionConsumidorNoConsumidor(contextoImpresion, consumidor);
        // Rellenamos la impresion con los campos de indicador de parrilla y su descripción
        rellenarImpresionConIndicadorParrilla(aCtxtoIntereses, contextoImpresion, ctxtoSolicitud);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarDatosContexto");
        }
        aContextoSalida[0] = contextoImpresion;
        return aContextoSalida;
    }

    /**
     * @param idContexto nombre del contexto a buscar
     * @param aContextos
     * @return Retorna un array de contextos que coincidan con el nombre que se pasa como parametro
     */
    private static IContexto[] getArrayContexto(String idContexto, IContexto[] aContextos) {
        List<IContexto> lstContexto = new ArrayList<IContexto>(0);
        for (IContexto contexto : aContextos) {
            if (idContexto.equals(contexto.getNombre())) {
                lstContexto.add(contexto);
            }
        }
        return lstContexto.toArray(new IContexto[0]);
    }

    /**
     * Para saber si  un préstamo es de interés fijo o variable hay que mirar
     * el tipo de interés en la tabla AN27TB01,  es decir si existe alguna fila
     * con (AN270050=0 AND AN270080 IN (02,03,04,05) )
     * @param aCtxtoIntereses
     * @return True si el presatamo es fijo, False en otro caso
     */
    private static boolean isPrestamoFijo(final IContexto[] aCtxtoIntereses) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar isPrestamoFijo");
        }
        boolean prestamoFijo = Boolean.TRUE;
        final int aLenght = aCtxtoIntereses.length;
        for (int i = 0; i < aLenght && prestamoFijo; i++) {
            if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion))) {
                if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres))) {
                    prestamoFijo = false;
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar isPrestamoFijo");
        }
        return prestamoFijo;
    }

    /**
     * Nos indica si es un préstamo con los dos tramos fijos o si el segundo tramo es variable bonificable no referenciado.
     *
     * @param aCtxtoIntereses
     * @return boolean
     */
    private static boolean isPrestamoVariableNoReferenciado(final IContexto[] aCtxtoIntereses) {
        boolean prestamoFijo = Boolean.TRUE;
        final int aLenght = aCtxtoIntereses.length;
        for (int i = 0; i < aLenght && prestamoFijo; i++) {
            if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion))) {
                if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || (Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) && (!GestionConsultaDatosSolicitud.esTipoReferenciaNoReferenciado(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoReferencia).toString()))) || Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres))) {
                    prestamoFijo = false;
                }
            }
        }
        return prestamoFijo;
    }

    /**
     * Recuperamos el interés del segundo tramo de una hipoteca fija, que al ser un tramo variable bonificado NO referenciado es el techo.
     *
     * @param aCtxtoIntereses
     * @return
     */
    private static BigDecimal obtenerInteresSegundoTramoHipotecaFija(final IContexto[] aCtxtoIntereses) {
        BigDecimal techo = null;
        final int aLenght = aCtxtoIntereses.length;
        for (int i = 0; i < aLenght; i++) {
            if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion))) {
                if ((Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) && (GestionConsultaDatosSolicitud.esTipoReferenciaNoReferenciado(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoReferencia).toString())))) {
                    techo = aCtxtoIntereses[i].getBigDecimal(strTecho);
                    break;
                }
            }
        }
        return techo;
    }

    // 08-08-2012 se obtiene el primer tramo variable de interes para obtener de este tramo
    // los datos necesarios del tramo variable, Diferencial, periodicidad de revisión....
    private static IContexto getPrimerVariable(final IContexto[] aCtxtoIntereses) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar isPrestamoFijo");
        }
        boolean prestamoFijo = Boolean.TRUE;
        final int aLenght = aCtxtoIntereses.length;
        for (int i = 0; i < aLenght && prestamoFijo; i++) {
            if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(aCtxtoIntereses[i].getBigDecimal(strIntPropTipoCondicion))) {
                if (Constantes.TIPO_INT_VARIABLE.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_PENAL.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_DIF_BONIF.equals(aCtxtoIntereses[i].getString(strIntPropTipoInteres))) {
                    return aCtxtoIntereses[i];
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar getPrimerVariable");
        }
        return null;
    }

    private static IContexto getSegundoTramoInteres(final IContexto[] aContextoInteres) {
        final int aLenght = aContextoInteres.length;
        for (int i = 0; i < aLenght; i++) {
            if (Constantes.ORDEN_TRAMO_DOS.equals(aContextoInteres[i].getBigDecimal(strIntPropOrdenTramo)) && Constantes.TIPO_CONDICION_INTERES.equals(aContextoInteres[i].getBigDecimal(strIntPropTipoCondicion))) {
                return aContextoInteres[i];
            }
        }
        return null;
    }

    private static IContexto getTercerTramoInteres(final IContexto[] aContextoInteres) {
        final int aLenght = aContextoInteres.length;
        for (int i = 0; i < aLenght; i++) {
            if (Constantes.ORDEN_TRAMO_TRES.equals(aContextoInteres[i].getBigDecimal(strIntPropOrdenTramo)) && Constantes.TIPO_CONDICION_INTERES.equals(aContextoInteres[i].getBigDecimal(strIntPropTipoCondicion))) {
                return aContextoInteres[i];
            }
        }
        return null;
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro.
     * @param contextoDatosSolicitud
     * @param contextoImpresion
     * @param tipoDoc Paso que configura datos genericos para todos los impresos
     */
    private static void rellenarImpresionConCntxtoSolicitud(final IContexto contextoDatosSolicitud, final IContexto ctxtoProducto, final IContexto ctxtoSubproducto, final IContexto contextoImpresion, IContexto[] aCtxtoIntereses) {
        final String strSolPropOficinaSolicitud = "ANPMN050010";
        final String strSolPropNumeroSolicitud = "ANPMN050020";
        final String strSolPropVersionSolicitud = "ANPMN050030";
        final String strSolPropNuc = "ANPMN050040";
        final String strSolPropDigitoSolicitud = "ANPMN050070";
        final String strSolPropCodProducto = "ANPMN050080";
        final String strSolPropCodSubproducto = "ANPMN050090";
        final String strSolPropImporteTotal = "ANPMN050630";
        final String strSolPropMonedaImporteTotal = "ANPMN050640";
        final String strSolPropPlazoTotal = "ANPMN050710";
        final String strSolPropFechaFormalizacion = "ANPMN050920";
        final String strSolPropPlazoCarencia = "ANPMN050650";
        final String strSolPropCambioSegFluctuacion = "ANPMN050984";
        final String strSolPropImporteTasacionEstimado = "ANPMN050540";
        final String strSolPropMonedaTasacion = "ANPMN050550";
        final String strSolPropIdTarifa = "ANPMN050886";
        final String strSubrogacion = "ANPMN050380";
        // final String strProdPropDescrProd 			= "ANPMN001030";
        final String strProdPropDescrSubprod = "ANPMN002040";
        final String strSolPropTipoCarCapDurAmort = "ANPMN050820";
        final String strSolPropTipoCarIntDurAmort = "ANPMN050830";
        final String strSolPropContenido = "ANPMN050934";
        BigDecimal tipoCarIntDurAmort = null;
        BigDecimal tipoCarCapDurAmort = null;
        String descrTarifa = null;
        String modificacionFechaFormalizacion = "N";
        GestionDatosSolicitud gds = new GestionDatosSolicitud();
        // Se intenta obtener la solicitud
        DatosSolicitudC datosSolicitud = new DatosSolicitudC();
        datosSolicitud = gds.obtenerDatosSolicitud(contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud), contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud), contextoDatosSolicitud.getBigDecimal(strSolPropVersionSolicitud), contextoDatosSolicitud.getBigDecimal(strSolPropNuc));
        DatosSolicitudC solicVersionAnterior = gds.buscarVersionAnterior(datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud(), null, datosSolicitud.getDatosSolicitudKey().getVersionSolicitud(), datosSolicitud.getDatosSolicitudKey().getNucExpediente());
        // Si no hay version anterior estamos en un alta
        if (null != solicVersionAnterior) {
            // LLamar a compruebaVariacionesPreformalizacion(...) de AltaPreformalizacion para saber si cambió algo más que la fecha de preformalización
            AltaPreformalizacionPrestamosDivisasSrv appdSrv = new AltaPreformalizacionPrestamosDivisasSrv();
            String result = appdSrv.compruebaVariacionesPreformalizacion(datosSolicitud, solicVersionAnterior);
            if ("SI".equals(result)) {
                modificacionFechaFormalizacion = "S";
            }
        }
        contextoImpresion.put(ID_PROP_MODIF_SOLO_FECHA, modificacionFechaFormalizacion);
        BigDecimal contravalor = BigDecimal.ZERO;
        if (0 != BigDecimal.ZERO.compareTo(contextoDatosSolicitud.getBigDecimal(strSolPropCambioSegFluctuacion))) {
            contravalor = contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal).divide(contextoDatosSolicitud.getBigDecimal(strSolPropCambioSegFluctuacion), BigDecimal.ROUND_HALF_UP);
        }
        contextoImpresion.put(ID_PROP_CONTRAVALOR_EUROS, contravalor);
        contextoImpresion.put(ID_PROP_CAMBIO_SEG_FLUCTUACION, contextoDatosSolicitud.getBigDecimal(strSolPropCambioSegFluctuacion));
        // 2013-10-11 Inserción de los campos: importe tasación estimado y moneda
        contextoImpresion.put(ID_PROP_IMPORTE_TASACION_ESTIMADO, contextoDatosSolicitud.getBigDecimal(strSolPropImporteTasacionEstimado));
        contextoImpresion.put(ID_PROP_MONEDA_TASACION, contextoDatosSolicitud.getString(strSolPropMonedaTasacion));
        rellenarImpresionConCntxtoSubTotalesAnho(contextoDatosSolicitud, contextoImpresion);
        contextoImpresion.put(ID_PROP_NUMERO_PRESTAMO, Constantes.CTE_CUENTA_CONTABLE_PMOS + "-" + getNumOperacion(contextoDatosSolicitud, strSolPropOficinaSolicitud, strSolPropNumeroSolicitud, strSolPropDigitoSolicitud));
        // Distinto tipo de dato PENDIENTE
        // contextoImpresion.put(ID_PROP_TOTAL_CAPITAL, bidImporteToStr(
        // contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal),
        // contextoDatosSolicitud.getString(strSolPropMonedaImporteTotal),
        // Boolean.TRUE));
        BigDecimal plazoAmortMeses = BigDecimal.ZERO;
        // Mapeos comunes a los tres impresos
        contextoImpresion.put(ID_PROP_MONEDA, contextoDatosSolicitud.getString(strSolPropMonedaImporteTotal));
        contextoImpresion.put(ID_PROP_IMPORTE_PRESTAMO, contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal));
        contextoImpresion.put(ID_PROP_PLAZO_MESES, contextoDatosSolicitud.getBigDecimal(strSolPropPlazoTotal));
        contextoImpresion.put(ID_PROP_FECHA_PREV_FORMALIZACION, contextoDatosSolicitud.getString(strSolPropFechaFormalizacion));
        contextoImpresion.put(ID_PROP_CARENCIA_MESES, contextoDatosSolicitud.getBigDecimal(strSolPropPlazoCarencia));
        plazoAmortMeses = contextoDatosSolicitud.getBigDecimal(strSolPropPlazoTotal).subtract(contextoDatosSolicitud.getBigDecimal(strSolPropPlazoCarencia));
        contextoImpresion.put(ID_PROP_PLAZO_AMORTIZ_MESES, plazoAmortMeses);
        /*20140904 Se informan los nuevos campos*/
        contextoImpresion.put(ID_PROP_COD_PRODUCTO, contextoDatosSolicitud.getBigDecimal(strSolPropCodProducto));
        contextoImpresion.put(ID_PROP_COD_SUBPRODUCTO, contextoDatosSolicitud.getBigDecimal(strSolPropCodSubproducto));
        contextoImpresion.put(ID_PROP_DESCR_SUBPRODUCTO, UtilidadesTramitacion.comprobarDatoNull(ctxtoSubproducto.getString(strProdPropDescrSubprod)).trim());
        tipoCarCapDurAmort = contextoDatosSolicitud.getBigDecimal(strSolPropTipoCarCapDurAmort);
        tipoCarIntDurAmort = contextoDatosSolicitud.getBigDecimal(strSolPropTipoCarIntDurAmort);
        if ((0 == BigDecimal.ZERO.compareTo(tipoCarCapDurAmort)) && (0 == BigDecimal.ZERO.compareTo(tipoCarIntDurAmort))) {
            contextoImpresion.put(ID_PROP_IND_TIENE_APLAZ, Constantes.CTE_STR_N);
            contextoImpresion.put(ID_PROP_INCR_DURANTE_APLAZ, BigDecimal.ZERO);
        } else {
            contextoImpresion.put(ID_PROP_IND_TIENE_APLAZ, Constantes.CTE_STR_S);
            contextoImpresion.put(ID_PROP_INCR_DURANTE_APLAZ, BigDecimal.ONE);
        }
        /*Datos del deposito*/
        if (null != datosSolicitud.getDeposito()) {
            if (datosSolicitud.getDeposito().equals(Constantes.CTE_STR_0)) {
                contextoImpresion.put(ID_PROP_TIENE_DEPOSITO, Constantes.CTE_STR_N);
            } else {
                contextoImpresion.put(ID_PROP_TIENE_DEPOSITO, Constantes.CTE_STR_S);
            }
        }
        // contextoImpresion.put(ID_PROP_TIENE_DEPOSITO, datosSolicitud.getDeposito());
        /*20151027 Añadimos el id tarifa y la descripción*/
        BigDecimal idTarifa = contextoDatosSolicitud.getBigDecimal(strSolPropIdTarifa);
        contextoImpresion.put(ID_PROP_ID_TARIFA, idTarifa);
        if (0 != BigDecimal.ZERO.compareTo(idTarifa)) {
            // Llamada al método ANPM_458 (ConsultaDescripcionTarifaSrv)
            // descrTarifa = UtilidadesTramitacion.obtenerDescripcionTarifa(idTarifa);
            descrTarifa = UtilidadesTramitacion.obtenerDescripcionTarifa(contextoDatosSolicitud.getBigDecimal(strSolPropCodProducto), contextoDatosSolicitud.getBigDecimal(strSolPropCodSubproducto), idTarifa);
            descrTarifa = UtilidadesTramitacion.comprobarDatoNull(descrTarifa);
            contextoImpresion.put(ID_PROP_DESCR_TARIFA, descrTarifa);
        }
        contextoImpresion.put(ID_PROP_NUC, contextoDatosSolicitud.getBigDecimal(strSolPropNuc));
        contextoImpresion.put(ID_IND_ROBO_HIPOTECA, contextoDatosSolicitud.getBigDecimal(strSubrogacion));
        // Llamada al ANPM_481 para saber si es consumidor o no
        IDatosEntradaTx entrada = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), 507, 481);
        entrada.addCampo("NUC", contextoDatosSolicitud.getBigDecimal(strSolPropNuc));
        IContexto[] salida = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), entrada);
        BigDecimal consumidor = BigDecimal.ZERO;
        if (null != salida && 0 < salida.length) {
            consumidor = salida[0].getBigDecimal("ANPMN481010");
        }
        // Se informa el campo con la respuesta del ANPM_481
        contextoImpresion.put(ID_IND_COMPARTE_GASTOS, consumidor);
        // Campos nuevos para la hipoteca mixta
        IContexto condiciones = obtieneCondicionesInteres(aCtxtoIntereses);
        if (null != condiciones && null != condiciones.getBigDecimal(strPropDirefencial) && null != condiciones.getBigDecimal(strIntPropTipoReferencia)) {
            contextoImpresion.put(ID_DIFERENCIAL, condiciones.getBigDecimal(strPropDirefencial));
            contextoImpresion.put(ID_TIPO_REFERENCIA_MIXTA, condiciones.getBigDecimal(strIntPropTipoReferencia));
        }
        UtilidadesImpresion.rellenarPlazosSegundoTramo(contextoImpresion, aCtxtoIntereses, ID_PLAZO_DESDE_2DO_TRAMO, ID_PLAZO_HASTA_2DO_TRAMO);
        contextoImpresion.put(CAMPO_CTXTO_IMPORTE_CONTENIDO, contextoDatosSolicitud.getBigDecimal(strSolPropContenido));
    }

    /**
     * Rellena el contexto consumidor si o no
     * @param contextoImpresion
     * @param consumidorSN
     */
    private static void rellenarImpresionConsumidorNoConsumidor(IContexto contextoImpresion, String consumidorSN) {
        contextoImpresion.put(CAMPO_CTXTO_CONSUMIDOR_SN, consumidorSN);
    }

    /**
     * Rellena el contexto de impresión con los datos de los subtotales del año
     * @param lstContextoSubTotales
     * @param contextoImpresion
     */
    private static void rellenarImpresionConCntxtoSubTotalesAnho(final IContexto contextoDatosSolicitud, final IContexto contextoImpresion) {
        final String strSolPropImporteTotal = "ANPMN050630";
        List<IRegistro> lstRegistroSubTotales = new ArrayList<IRegistro>(0);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoSubTotalesAnho");
        }
        IRegistro subtotal = null;
        subtotal = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_SUBTOTALES_ANHO);
        subtotal.put(ID_PROP_SUBTOTALES_INTERES, contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal));
        // subtotal.put(ID_PROP_SUBTOTALES_INTERES,
        // bigDecimalToString(contextoDatosSolicitud.getBigDecimal(strSolPropImporteTotal),
        // 17, LengthConstants.LENGTH_0002, false));
        lstRegistroSubTotales.add(subtotal);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoSubTotalesAnho");
        }
    }

    /**
     * @param contextoDatosSolicitud
     * @param strSolPropOficinaSolicitud
     * @param strSolPropNumeroSolicitud
     * @param strSolPropDigitoSolicitud
     * @return Devuelve el numero de operacion a partir de los datos de solicitud:
     * OOOO-SSSSSS/D <br>
     * Donde O: Nº Oficia, S: Nº de solicitud y D es el digito de la solicitud
     */
    private static String getNumOperacion(IContexto contextoDatosSolicitud, String strSolPropOficinaSolicitud, String strSolPropNumeroSolicitud, String strSolPropDigitoSolicitud) {
        final StringBuilder sb = new StringBuilder(13);
        sb.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud).toString(), LengthConstants.LENGTH_0004, '0'));
        sb.append(Constantes.CTE_STRING_GUION);
        sb.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud).toString(), 6, '0'));
        sb.append(Constantes.CTE_STRING_BARRA);
        sb.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropDigitoSolicitud).toString(), 1, '0'));
        return sb.toString();
    }

    /**
     * @param strFechaSolicitud
     * @param strFechaPrimVencInt
     * @param iNumPagos
     * @return Número de meses al igual que se calcula en el programa PITAR200
     */
    private static BigDecimal getNumeroMeses(final String strFechaSolicitud, final String strFechaPrimVencInt, final int iNumPagos) {
        final Calendar fsCalendar = Calendar.getInstance();
        LOGGER.debug("FECHA PRIMER VENCIMIENTO--NUMERO DE MESES,strFechaPrimVencInt" + strFechaPrimVencInt);
        fsCalendar.setTime(DateUtils.parseDate(strFechaSolicitud, DateUtils.FORMATO_FECHA_CORTO));
        final Calendar fvCalendar = Calendar.getInstance();
        fvCalendar.setTime(DateUtils.parseDate(strFechaPrimVencInt, DateUtils.FORMATO_FECHA_CORTO));
        // Se le resta doce para tener solo en cuenta la diferencia en meses
        // P=((año(FI)-año(FS)*12 -12 + NV_duracion
        int iMeses = (fvCalendar.get(Calendar.YEAR) - fsCalendar.get(Calendar.YEAR)) * 12 - 12 + iNumPagos;
        // P=P+(12-MESES(FS)+ meses(FI)
        iMeses += 12 - (fsCalendar.get(Calendar.MONTH) + 1) + (fvCalendar.get(Calendar.MONTH) + 1);
        // P=p/NV_duracion
        if (iMeses != 0) {
            iMeses = iMeses / iNumPagos;
        }
        return new BigDecimal(iMeses);
    }

    // /**
    // *
    // * @param contextoDatosSolicitud
    // * @param strSolPropMonedaImporteTotal
    // * @param strSolPropOficinaSolicitud
    // * @param strSolPropNumeroSolicitud
    // * @param strSolPropDigitoSolicitud
    // * @return Devuelve el numero de prestamo a partir de los datos de solicitud:
    // * MMM-OOOO-SSSSSS-D
    // */
    // private static String getNumPrestamo(IContexto contextoDatosSolicitud,
    // String strSolPropOficinaSolicitud,
    // String strSolPropNumeroSolicitud, String strSolPropDigitoSolicitud)
    // {
    // final StringBuilder strbNumPrstamo = new StringBuilder(13);
    // strbNumPrstamo.append(Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropOficinaSolicitud).toString(), LengthConstants.LENGTH_0004, '0'));
    // strbNumPrstamo.append(Constantes.CTE_STRING_GUION + Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropNumeroSolicitud).toString(), 6, '0'));
    // strbNumPrstamo.append(Constantes.CTE_STRING_GUION + Helper.fillLeft(contextoDatosSolicitud.getBigDecimal(strSolPropDigitoSolicitud).toString(), 1, '0'));
    // return strbNumPrstamo.toString();
    // }
    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro
     * @param contextoCondicionesCapital
     * @param contextoImpresion Contexto que se mandará a impresión
     * @param isPrestamoVariable True si es variable, false en otro caso
     * @param tipoDoc
     */
    private static void rellenarImpresionConCntxtoCondicionesCapital(final IContexto contextoCondicionesCapital, final IContexto contextoImpresion, final Boolean isPrestamoVariable) {
        final String strCondPropMDA = "ANPMN051090";
        final String strRazonProgresion = "ANPMN051110";
        final String strCondPropIntNumPeriodos = "ANPMN051150";
        final String strCondPropStrUnidadPeriodo = "ANPMN051160";
        final String strCondPropPagoUnico = "ANPMN051180";
        if (null != contextoCondicionesCapital) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoCondicionesCapital");
            }
            final ModalidadAmortizacionC modalidad = new ModalidadAmortizacionC();
            modalidad.setMDA(contextoCondicionesCapital.getBigDecimal(strCondPropMDA).intValue());
            contextoImpresion.put(ID_PROP_PERIODICIDAD_CUOTAS_AMORTIZ, getDescPeriodoRevision(contextoCondicionesCapital.getString(strCondPropPagoUnico), contextoCondicionesCapital.getBigDecimal(strCondPropIntNumPeriodos), contextoCondicionesCapital.getString(strCondPropStrUnidadPeriodo), Boolean.FALSE));
            if (isPrestamoVariable) {
                contextoImpresion.put(ID_PROP_TIPO_REFERENCIA_INTER_SUST, new Mensaje(ServicioNegocio.getContexto(), RESTO_PERIODOS).toString());
            }
            if (modalidad.getMDA() == Constantes.CTE_CINCO && modalidad.getMDA() == Constantes.CTE_QUINCE) {
                contextoImpresion.put(ID_PROP_COEFICIENTE_MULTIPLICADOR_AMORTIZ, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_COEF_MULTIPL).toString().concat(UtilidadesTramitacion.bigDecimalToString(contextoCondicionesCapital.getBigDecimal(strRazonProgresion), LengthConstants.LENGTH_0003, LengthConstants.LENGTH_0004, true)));
            }
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoCondicionesCapital");
            }
        }
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro.
     *
     * @param contextoInteres
     * @param contextoImpresion Contexto que se mandará a impresión
     * @param bolPrestamoFijo True si el prestamo es fijo, false en otro caso
     * @param tipoDoc
     */
    private static List<BigDecimal> rellenarImpresionConCntxtoInteres(final IContexto[] aContextoInteres, final IContexto contextoImpresion, final Boolean bolPrestamoFijo) {
        BigDecimal maxTramo = BigDecimal.ZERO;
        final String CTE_UNO = "1";
        BigDecimal tipoReferencia = null;
        List<BigDecimal> plazosTramosInteres = new ArrayList<BigDecimal>();
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoImpresionFormalizacion rellenarImpresionConCntxtoInteres");
        }
        for (IContexto contextoInteres : aContextoInteres) {
            if (Constantes.INTERES_NIVEL_TIPO_INTERES.equals(contextoInteres.getBigDecimal(strIntPropTipoCondicion))) {
                if (Constantes.TIPO_INT_VARIABLE.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres))) {
                    /*20151005 El tipo de interés es variable si es variable referenciado, si es variable
					 * no referenciado entonces es fijo*/
                    tipoReferencia = contextoInteres.getBigDecimal(strIntPropTipoReferencia);
                    if (GestionConsultaDatosSolicitud.esTipoReferenciaNoReferenciado(tipoReferencia.toString())) {
                        contextoImpresion.put(ID_PROP_TIPO_INTERES, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_INTERES_FIJO).toString());
                    } else {
                        contextoImpresion.put(ID_PROP_TIPO_INTERES, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_INTERES_VARIABLE).toString());
                    }
                    maxTramo = maxTramo.add(BigDecimal.ONE);
                    contextoImpresion.put(ID_PROP_NUM_TRAMOS, maxTramo);
                }
                /*20151027 Obtenemos el plazo del primer tramo de interés*/
                if (BigDecimal.ONE.compareTo(contextoInteres.getBigDecimal(strIntPropOrdenTramo)) == 0) {
                    if (null != contextoInteres.getBigDecimal(strPlazo)) {
                        plazosTramosInteres.add(contextoInteres.getBigDecimal(strPlazo));
                    }
                } else // Obtenemos el plazo del segundo tramo de interes
                if (new BigDecimal(2).compareTo(contextoInteres.getBigDecimal(strIntPropOrdenTramo)) == 0) {
                    if (null != contextoInteres.getBigDecimal(strPlazo)) {
                        plazosTramosInteres.add(contextoInteres.getBigDecimal(strPlazo));
                    }
                }
                if (BigDecimal.ONE.equals(contextoInteres.getBigDecimal(strIntPropOrdenTramo)) && (Constantes.TIPO_INT_FIJO.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_FIJO_PENLZABLE.equals(contextoInteres.getString(strIntPropTipoInteres)))) {
                    if (bolPrestamoFijo && UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_PORC_INTERES_INICIAL))) {
                        contextoImpresion.put(ID_PROP_PORC_INTERES_INICIAL, UtilidadesTramitacion.bigDecimalToString(contextoInteres.getBigDecimal(strIntPropPorcTipoInteres), LengthConstants.LENGTH_0003, LengthConstants.LENGTH_0004, true));
                    }
                }
                String periodoIntereses = getDescPeriodoRevision(contextoInteres.getString(strPropIntPagoUnico), contextoInteres.getBigDecimal(strIntPropIntNumPeriodo), contextoInteres.getString(strIntPropStrUnidadPeriodo), Boolean.FALSE);
                if (BigDecimal.ONE.equals(contextoInteres.getBigDecimal(strIntPropOrdenTramo)) && UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_PERIODOS_SUCESISVOS)) && (Constantes.TIPO_INT_FIJO.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_FIJO_PENLZABLE.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VARIABLE.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteres.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteres.getString(strIntPropTipoInteres)))) {
                    contextoImpresion.put(ID_PROP_PERIODOS_SUCESISVOS, periodoIntereses);
                }
                if (CTE_UNO.equals(medidaSolchaga)) {
                    contextoImpresion.put(ID_PERIODICIDAD_INTERESES, periodoIntereses);
                }
                if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getBigDecimal(ID_PROP_RECARGO_DEMORA))) {
                    contextoImpresion.put(ID_PROP_RECARGO_DEMORA, contextoInteres.getBigDecimal(strIntPropPorcDemora));
                }
                if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getString(ID_PROP_REFERENCIA))) {
                    contextoImpresion.put(ID_PROP_REFERENCIA, getStrDescrTipoReferencia(contextoInteres.getBigDecimal(strIntPropTipoReferencia)));
                    contextoImpresion.put(ID_PROP_TIPO_REFERENCIA, getStrDescrTipoReferencia(contextoInteres.getBigDecimal(strIntPropTipoReferencia)));
                }
                // Suelo y techo
                if (!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strAplicaSueloAInteresInicial))) {
                    contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, contextoInteres.getBigDecimal(strSueloInteresInicial));
                    contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO_PRIMER_PERIOD, contextoInteres.getBigDecimal(strSueloInteresInicial));
                } else if (!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
                    contextoImpresion.put(ID_PROP_PORC_INT_MINIMO, contextoInteres.getBigDecimal(strSuelo));
                    contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO_PRIMER_PERIOD, contextoInteres.getBigDecimal(strSuelo));
                }
                if (!BigDecimal.ZERO.equals(contextoInteres.getBigDecimal(strSobreQueAplicaSuelo))) {
                    contextoImpresion.put(ID_PROP_PORC_INT_MAXIMO, contextoInteres.getBigDecimal(strTecho));
                    contextoImpresion.put(ID_PROP_PORC_INT_MINIMO_PRIMER_PERIOD, UtilidadesTramitacion.bigDecimalToString(contextoInteres.getBigDecimal(strTecho), LengthConstants.LENGTH_0007, LengthConstants.LENGTH_0004, true));
                }
            } else if (Constantes.INTERES_NIVEL_SUSTITUTIVO.equals(contextoInteres.getBigDecimal(strIntPropTipoCondicion))) {
                contextoImpresion.put(ID_PROP_PORC_MARGEN_SIN_BONIF_INTER_SUST, contextoInteres.getBigDecimal(strPropDirefencial));
            }
            /*20160413 Se añade al contexto de salida la valoración del tipo de interés*/
            if (Constantes.VALORACION_COMERCIAL.equals(contextoInteres.getString(strValoracion))) {
                contextoImpresion.put(ID_PROP_VALORACION_TRAMO_INTERES, new Mensaje(ServicioNegocio.getContexto(), COMERCIAL).toString());
            } else if (Constantes.VALORACION_FINANCIERO.equals(contextoInteres.getString(strValoracion))) {
                contextoImpresion.put(ID_PROP_VALORACION_TRAMO_INTERES, new Mensaje(ServicioNegocio.getContexto(), FINANCIERO).toString());
            } else if (Constantes.VALORACION_NATURAL.equals(contextoInteres.getString(strValoracion))) {
                contextoImpresion.put(ID_PROP_VALORACION_TRAMO_INTERES, new Mensaje(ServicioNegocio.getContexto(), NATURAL).toString());
            }
        }
        final IContexto contextoInteresPrimerVariableA = getPrimerVariable(aContextoInteres);
        final IContexto contextoSegundoTramo = getSegundoTramoInteres(aContextoInteres);
        final IContexto contextoTercerTramo = getTercerTramoInteres(aContextoInteres);
        if (!bolPrestamoFijo && null != contextoInteresPrimerVariableA && UtilidadesTramitacion.isBlankOrNull(contextoInteresPrimerVariableA.getString(ID_PROP_PERIODICIDAD_REVISION)) && (Constantes.TIPO_INT_VARIABLE.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_BONIF.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_PENAL.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)) || Constantes.TIPO_INT_VAR_DIF_BONIF.equals(contextoInteresPrimerVariableA.getString(strIntPropTipoInteres)))) {
            contextoImpresion.put(ID_PROP_PORC_MARGEN, contextoInteresPrimerVariableA.getBigDecimal(strPropDirefencial));
            if (null != contextoSegundoTramo) {
                if (null != contextoTercerTramo) {
                    contextoImpresion.put(ID_PROP_PORC_MARGEN_SIN_BONIF, contextoTercerTramo.getBigDecimal(strPropDirefencial));
                } else {
                    contextoImpresion.put(ID_PROP_PORC_MARGEN_SIN_BONIF, contextoSegundoTramo.getBigDecimal(strPropDirefencial));
                }
            } else {
                contextoImpresion.put(ID_PROP_PORC_MARGEN_SIN_BONIF, contextoInteresPrimerVariableA.getBigDecimal(strPropDirefencial));
            }
            contextoImpresion.put(ID_PROP_PERIODICIDAD_REVISION, getDescPeriodoRevision(null, contextoInteresPrimerVariableA.getBigDecimal(strIntNumPeriodoIntRev), contextoInteresPrimerVariableA.getString(strIntPropStrUnidadPeriodoRev), Boolean.FALSE));
            contextoImpresion.put(ID_PROP_DURACION_SUCESIVOS, getDescPeriodoRevision(null, contextoInteresPrimerVariableA.getBigDecimal(strIntNumPeriodoIntRev), contextoInteresPrimerVariableA.getString(strIntPropStrUnidadPeriodoRev), Boolean.FALSE));
        } else {
            // 20160721
            contextoImpresion.put(ID_PROP_PORC_MARGEN_SIN_BONIF, BigDecimal.ZERO);
        }
        final IContexto contextoInteresPrimerVariable = getPrimerVariable(aContextoInteres);
        if (null != contextoInteresPrimerVariable && Constantes.INTERES_NIVEL_TIPO_INTERES.equals(contextoInteresPrimerVariable.getBigDecimal(strIntPropTipoCondicion))) {
            for (IContexto contextoInteres : aContextoInteres) {
                if (UtilidadesTramitacion.isBlankOrNull(contextoInteres.getBigDecimal(ID_PROP_RECARGO_DEMORA))) {
                    contextoImpresion.put(ID_PROP_RECARGO_DEMORA, contextoInteres.getBigDecimal(strIntPropPorcDemora));
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoInteres");
        }
        // Devolver lista plazos tramos interes
        return plazosTramosInteres;
    }

    /**
     * @param bidPagoUnico
     * @param bidNumPeriodos
     * @param strUnidadPeriodos
     * @param tipoDoc Tipo de documento que estamos imprimiendo
     * @param reducido Si True se redice el texto para la casilla
     * @return Literal en base al numero de periodo y a la unidad de peridod
     */
    private static String getDescPeriodoRevision(final String bidPagoUnico, final BigDecimal bidNumPeriodos, final String strUnidadPeriodos, final boolean reducido) {
        StringBuilder sbPeriodicidad = new StringBuilder(45);
        if (null != bidPagoUnico && Constantes.CTE_UNO.equals(bidPagoUnico)) {
            sbPeriodicidad.append(Constantes.CTE_PERIODO_FINAL);
        } else {
            if (Constantes.CTE_UNIDAD_PERIODO_MES.equals(strUnidadPeriodos)) {
                if (BigDecimal.ONE.equals(bidNumPeriodos)) {
                    sbPeriodicidad.append(Constantes.CTE_PERIODO_MES);
                } else if (Constantes.CTE_BID_TRES.equals(bidNumPeriodos)) {
                    sbPeriodicidad.append(Constantes.CTE_PERIODO_TRIMESTRE);
                } else if (Constantes.CTE_BID_SEIS.equals(bidNumPeriodos)) {
                    sbPeriodicidad.append(Constantes.CTE_PERIODO_SEMESTRE);
                } else if (Constantes.CTE_BID_DOCE.equals(bidNumPeriodos)) {
                    sbPeriodicidad.append(Constantes.CTE_PERIODO_ANIO);
                }
            }
        }
        return sbPeriodicidad.toString();
    }

    /**
     * Accede a la tabla CG32TB01 para obtener la descripción donde CG320010 = 'IBI' ahora 'IBN' (29/10/2013)
     * y el CG320020=bidTipoReferencia
     * @param bidTipoReferencia
     * @return Descripción del tipo de referencia
     */
    private static String getStrDescrTipoReferencia(BigDecimal bidTipoReferencia) {
        final GestionClausulasRestringuidas gcr = new GestionClausulasRestringuidas();
        final ParametrosC descripcion = gcr.obtenerTipoRefBusquedaProducto(bidTipoReferencia.intValue());
        String strDescripcion = Constantes.CTE_STRING_EMPTY;
        if (descripcion != null) {
            strDescripcion = descripcion.getCG320030().trim();
        }
        return strDescripcion;
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro
     * @param contextoComisiones
     * @param contextoImpresion Contexto que se mandará a impresión
     */
    private static void rellenarImpresionConCntxtoComisiones(final IContexto[] aContextoComisiones, final IContexto contextoImpresion) {
        final String strComPropIntTipoComision = "ANPMN053040";
        final String strComPropIntOrdenComision = "ANPMN053050";
        final String strComPropPorcComision = "ANPMN053070";
        final String strComPropImpMinimoComision = "ANPMN053090";
        final String strComPropImpMin = "ANPMN053090";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoComisiones");
        }
        final BigDecimal bidImpTotal = contextoImpresion.getBigDecimal(ID_PROP_IMPORTE_PRESTAMO);
        BigDecimal bidSumaImpCom = BigDecimal.ZERO;
        for (IContexto contextoComisiones : aContextoComisiones) {
            String strTipoComision = contextoComisiones.getString(strComPropIntTipoComision);
            switch(strTipoComision) {
                // Comision amortizacion parcial tramo 1 - 001
                case Constantes.TIPO_COMISION_ADELANTO:
                    // Tramo 1
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COM_AMORT_PARCIAL_TRAMO_UNO)) && Constantes.CTE_BID_1.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_COM_AMORT_PARCIAL_TRAMO_UNO, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    } else // Tramo 2
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COM_AMORT_PARCIAL_TRAMO_DOS)) && Constantes.CTE_BID_2.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_COM_AMORT_PARCIAL_TRAMO_DOS, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    }
                    break;
                // Comision apertura  - 003
                case Constantes.TIPO_COMISION_APERTURA:
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COMISION_APERTURA))) {
                        // Se resetea el valor de la suma.
                        bidSumaImpCom = BigDecimal.ZERO;
                        // Porcentaje comision apertura
                        contextoImpresion.put(ID_PROP_PRCTJ_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 5, LengthConstants.LENGTH_0004, true));
                        BigDecimal bidImpCom = bidImpTotal.multiply(contextoComisiones.getBigDecimal(strComPropPorcComision));
                        if (bidImpCom.compareTo(BigDecimal.ZERO) != 0) {
                            bidImpCom = bidImpCom.divide(BigDecimal.valueOf(100L));
                        }
                        if (bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0) {
                            bidSumaImpCom = bidSumaImpCom.add(bidImpCom);
                            contextoImpresion.put(ID_PROP_IMPORTE_COMISION_APERTURA, UtilidadesTramitacion.bigDecimalToString(bidSumaImpCom, 11, LengthConstants.LENGTH_0002, false));
                        } else {
                            bidSumaImpCom = bidSumaImpCom.add(contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
                            contextoImpresion.put(ID_PROP_IMPORTE_COMISION_APERTURA, new Mensaje(ServicioNegocio.getContexto(), M_N_112206).toString() + UtilidadesTramitacion.bigDecimalToString(bidSumaImpCom, 11, LengthConstants.LENGTH_0002, false));
                        }
                    }
                    break;
                // Comision amortizacion total - 004
                case Constantes.TIPO_COMISION_CANCELACION:
                    // Tramo 1
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COM_AMORT_TOTAL_TRAMO_UNO)) && Constantes.CTE_BID_1.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_COM_AMORT_TOTAL_TRAMO_UNO, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    } else // Tramo 2
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COM_AMORT_TOTAL_TRAMO_DOS)) && Constantes.CTE_BID_2.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_COM_AMORT_TOTAL_TRAMO_DOS, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    }
                    break;
                // Comision estudio - 005
                case Constantes.TIPO_COMISION_ESTUDIO:
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PORC_COM_ESTUDIO))) {
                        // Se resetea el valor del importe de la suma
                        bidSumaImpCom = BigDecimal.ZERO;
                        BigDecimal bidImpCom = bidImpTotal.multiply(contextoComisiones.getBigDecimal(strComPropPorcComision));
                        if (bidImpCom.compareTo(BigDecimal.ZERO) != 0) {
                            bidImpCom = bidImpCom.divide(BigDecimal.valueOf(100L));
                        }
                        if (bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0) {
                            bidSumaImpCom = bidSumaImpCom.add(bidImpCom);
                            contextoImpresion.put(ID_PROP_IMPORTE_COM_ESTUDIO, UtilidadesTramitacion.bigDecimalToString(bidSumaImpCom, 11, LengthConstants.LENGTH_0002, false));
                        } else {
                            bidSumaImpCom = bidSumaImpCom.add(contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
                            contextoImpresion.put(ID_PROP_IMPORTE_COM_ESTUDIO, new Mensaje(ServicioNegocio.getContexto(), M_N_112206).toString() + UtilidadesTramitacion.bigDecimalToString(bidSumaImpCom, 11, LengthConstants.LENGTH_0002, false));
                        }
                        // Porcentaje comision estudio
                        contextoImpresion.put(ID_PROP_PORC_COM_ESTUDIO, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 5, LengthConstants.LENGTH_0004, true));
                    }
                    break;
                // Comision subrogacion a terceros - 006
                case Constantes.TIPO_COMISION_SUBROGACION_TERCERO:
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PORC_COM_SUBROGACION))) {
                        // Se resetea el valor del importe de la suma
                        bidSumaImpCom = BigDecimal.ZERO;
                        BigDecimal bidImpCom = bidImpTotal.multiply(contextoComisiones.getBigDecimal(strComPropPorcComision));
                        if (bidImpCom.compareTo(BigDecimal.ZERO) != 0) {
                            bidImpCom = bidImpCom.divide(BigDecimal.valueOf(100L));
                        }
                        if (bidImpCom.compareTo(contextoComisiones.getBigDecimal(strComPropImpMinimoComision)) > 0) {
                            bidSumaImpCom = bidSumaImpCom.add(bidImpCom);
                            contextoImpresion.put(ID_PROP_IMPORTE_COM_SUBROGACION, UtilidadesTramitacion.bigDecimalToString(bidSumaImpCom, 11, LengthConstants.LENGTH_0002, false));
                        } else {
                            bidSumaImpCom = bidSumaImpCom.add(contextoComisiones.getBigDecimal(strComPropImpMinimoComision));
                            contextoImpresion.put(ID_PROP_IMPORTE_COM_SUBROGACION, new Mensaje(ServicioNegocio.getContexto(), M_N_112206).toString() + UtilidadesTramitacion.bigDecimalToString(bidSumaImpCom, 11, LengthConstants.LENGTH_0002, false));
                        }
                        // Porcentaje comisión subrogacion
                        contextoImpresion.put(ID_PROP_PORC_COM_SUBROGACION, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 5, LengthConstants.LENGTH_0004, true));
                    }
                    break;
                // Comision modificacion cond. y garantia - 007
                case Constantes.TIPO_COMISION_MODIF_COND:
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_MODIFICACION_CONTRACTUAL))) {
                        contextoImpresion.put(ID_PROP_PRCTJ_MODIFICACION_CONTRACTUAL, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    }
                    break;
                // Comision reclamacion deuda - 008
                case Constantes.TIPO_COMISION_RECLAMACION_DEUDA:
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_IMP_RECLAMACION))) {
                        contextoImpresion.put(ID_PROP_IMP_RECLAMACION, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropImpMin), 11, LengthConstants.LENGTH_0002, false) + ServicioNegocio.getContexto().getCodigoContable());
                    }
                    break;
                // Comision desistimiento parcial - 009
                case Constantes.TIPO_COMISION_DESIST_PARCIAL:
                    // Tramo 1
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_DESIT_AMORT_PARCIAL)) && Constantes.CTE_BID_1.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_DESIT_AMORT_PARCIAL, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    } else // Tramo 2
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_DESIT_AMORT_PARCIAL_TRAMO_DOS)) && Constantes.CTE_BID_2.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_DESIT_AMORT_PARCIAL_TRAMO_DOS, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    }
                    break;
                // Comision desistimiento total - 010
                case Constantes.TIPO_COMISION_DESIST_TOTAL:
                    // Tramo 1
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_DESIT_AMORT_TOTAL)) && Constantes.CTE_BID_1.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_DESIT_AMORT_TOTAL, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    } else // Tramo 2
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_DESIT_AMORT_TOTAL_TRAMO_DOS)) && Constantes.CTE_BID_2.compareTo(contextoComisiones.getBigDecimal(strComPropIntOrdenComision)) == 0) {
                        contextoImpresion.put(ID_PROP_PRCTJ_DESIT_AMORT_TOTAL_TRAMO_DOS, UtilidadesTramitacion.bigDecimalToString(contextoComisiones.getBigDecimal(strComPropPorcComision), 3, LengthConstants.LENGTH_0004, false));
                    }
                    break;
                // Comision riesgo interes  - 013
                case Constantes.TIPO_COMISION_RIESGO_INTERES:
                    if (UtilidadesTramitacion.isBlankOrNull(contextoImpresion.getString(ID_PROP_PRCTJ_COM_RIESGO_INTERES))) {
                        contextoImpresion.put(ID_PROP_PRCTJ_COM_RIESGO_INTERES, contextoComisiones.getBigDecimal(strComPropPorcComision));
                    }
                    break;
                default:
                    break;
            }
        // switch
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoComisiones");
        }
    }

    /**
     * Rellena el contexto de impresión con los datos de los clientes titulares de la solicitud
     * @param lstContextoClientes
     * @param contextoImpresion
     * @param filtroTitular si True se crean solo registro para los titulares, en otro caso se almacenan todos
     */
    private static void rellenarImpresionConCntxtoClientesTitulares(final IContexto[] lstContextoClientes, final IContexto contextoImpresion, final Boolean filtroTitular) {
        final String strPropRelacionTitular = "MEFCN000040";
        List<IRegistro> lstRegistroClientes = new ArrayList<IRegistro>(0);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoClientesTitulares");
        }
        for (IContexto contextoCliente : lstContextoClientes) {
            if (Constantes.CTE_RELACION_TITULAR.equalsIgnoreCase(contextoCliente.getString(strPropRelacionTitular))) {
                lstRegistroClientes.add(crearRegistroCliente(contextoCliente, contextoImpresion, filtroTitular));
            }
        }
        if (!lstRegistroClientes.isEmpty()) {
            contextoImpresion.put(ID_REG_TITULAR, lstRegistroClientes.toArray(new IRegistro[lstRegistroClientes.size()]));
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoClientesTitulares");
        }
    }

    /**
     * Rellena el contexto de impresión con los datos de los clientes titulares de la solicitud
     * @param lstContextoClientes
     * @param contextoImpresion
     * @param filtroTitular si True se crean solo registro para los titulares, en otro caso se almacenan todos
     */
    private static void rellenarImpresionConCntxtoClientesAvalistas(final IContexto[] lstContextoClientes, final IContexto contextoImpresion) {
        final String strPropRelacionTitular = "MEFCN000040";
        List<IRegistro> lstRegistroClientes = new ArrayList<IRegistro>(0);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoClientesAvalistas");
        }
        for (IContexto contextoCliente : lstContextoClientes) {
            if (Constantes.CTE_RELACION_AVALISTA.equalsIgnoreCase(contextoCliente.getString(strPropRelacionTitular))) {
                lstRegistroClientes.add(crearRegistroCliente(contextoCliente, contextoImpresion, Boolean.FALSE));
            }
        }
        if (!lstRegistroClientes.isEmpty()) {
            contextoImpresion.put(ID_REG_FIADORES, lstRegistroClientes.toArray(new IRegistro[lstRegistroClientes.size()]));
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoClientesTitulares");
        }
    }

    /**
     * Se crea un registro con los clientes
     * @param contextoCliente
     * @param contextoImpresion
     * @param filtroTitular si True se guardan sólo los titulares
     * @return
     */
    private static IRegistro crearRegistroCliente(IContexto contextoCliente, IContexto contextoImpresion, Boolean filtroTitular) {
        final String strCliStrNombre = "MEFCN000240";
        final String strCliStrNIF = "MEFCN000160";
        final String strCliStrApellidoUno = "MEFCN000250";
        final String strCliStrApellidoDos = "MEFCN000260";
        final String strCliRelacion = "MEFCN000040";
        IRegistro cliente = null;
        if (!filtroTitular || Constantes.CTE_RELACION_TITULAR.equals(contextoCliente.getString(strCliRelacion).trim())) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("INICIO ContextoDocumentoInternoMinutar crearRegistroCliente");
            }
            // final String strTipoDoc = contextoCliente.getString(strCliTipoDoc).trim();
            if (Constantes.CTE_RELACION_TITULAR.equals(contextoCliente.getString(strCliRelacion).trim())) {
                cliente = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_TITULAR);
                cliente.put(ID_PROP_NOMBRE_TITULAR, contextoCliente.getString(strCliStrNombre).trim().concat(" ").concat(contextoCliente.getString(strCliStrApellidoUno).trim().concat(" ").concat(contextoCliente.getString(strCliStrApellidoDos).trim())));
                cliente.put(ID_PROP_NIF_TITULAR, contextoCliente.getString(strCliStrNIF));
            } else if (Constantes.CTE_RELACION_AVALISTA.equals(contextoCliente.getString(strCliRelacion).trim())) {
                cliente = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_REG_FIADORES);
                cliente.put(ID_PROP_NOMBRE_FIADOR, contextoCliente.getString(strCliStrNombre).trim().concat(" ").concat(contextoCliente.getString(strCliStrApellidoUno).trim().concat(" ").concat(contextoCliente.getString(strCliStrApellidoDos).trim())));
                cliente.put(ID_PROP_NIF_FIADOR, contextoCliente.getString(strCliStrNIF));
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar crearRegistroCliente");
        }
        return cliente;
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro
     * @param contextoCuenta
     * @param contextoImpresion
     */
    private static void rellenarImpresionConCntxtoCuentas(IContexto[] aContextoCuenta, IContexto contextoImpresion) {
        // final String strCtaBidEntidad 		= "ANPMN072110";
        final String strCtaBidOficina = "ANPMN072120";
        // final String strCtaBidNumeroCuenta 	= "ANPMN072140";
        // final String strCtaBidCuentaContable 	= "ANPMN072130";
        // final String strCtaBidDigitoCuenta 	= "ANPMN072150";
        final String strCtaStringTipoCuenta = "ANPMN072100";
        final String strCtaBidPrioridad = "ANPMN072210";
        final String ctrCtaFormatoIban = "ANPMN072180";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionContextoCuentas");
        }
        for (IContexto contextoCuenta : aContextoCuenta) {
            if (Constantes.CTE_PRIORIDAD_CUENTA_UNO.equals(contextoCuenta.getBigDecimal(strCtaBidPrioridad))) {
                // final BigDecimal bidEntidad = contextoCuenta.getBigDecimal(strCtaBidEntidad);
                final BigDecimal bidOficina = contextoCuenta.getBigDecimal(strCtaBidOficina);
                // final BigDecimal bidNumeroCuenta = contextoCuenta.getBigDecimal(strCtaBidNumeroCuenta);
                // final BigDecimal bidCuentaContable = contextoCuenta.getBigDecimal(strCtaBidCuentaContable);
                // final BigDecimal bidDigitoCuenta = contextoCuenta.getBigDecimal(strCtaBidDigitoCuenta);
                final String strCuentaFormatoIBAN = contextoCuenta.getString(ctrCtaFormatoIban);
                final String subStringUno = strCuentaFormatoIBAN.substring(0, 4);
                final String subStringDos = strCuentaFormatoIBAN.substring(4, 8);
                final String subStringTres = strCuentaFormatoIBAN.substring(8, 12);
                final String subStringCuatro = strCuentaFormatoIBAN.substring(12, 16);
                final String subStringCinco = strCuentaFormatoIBAN.substring(16, 20);
                final String subStringSeis = strCuentaFormatoIBAN.substring(20, 24);
                final String strCuentaFormateadaAcuatro = subStringUno + " " + subStringDos + " " + subStringTres + " " + subStringCuatro + " " + subStringCinco + " " + subStringSeis;
                if (Constantes.CTE_TIPO_CUENTA_ABONO.equals(contextoCuenta.getString(strCtaStringTipoCuenta))) {
                    // contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
                    // DatosCuentasC.getCuentaFormateadaCCC(bidEntidad, bidOficina,
                    // bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
                    // contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
                    // DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina,
                    // bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
                    contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA, strCuentaFormateadaAcuatro);
                    contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA, UtilidadesTramitacion.getNombreOficina(bidOficina));
                } else {
                    // contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
                    // DatosCuentasC.getCuentaFormateadaCCC(bidEntidad, bidOficina,
                    // bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
                    // contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA,
                    // DatosCuentasC.getCuentaFormateadaIBAN(bidEntidad, bidOficina,
                    // bidCuentaContable, bidNumeroCuenta, bidDigitoCuenta));
                    contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA, strCuentaFormateadaAcuatro);
                // contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA,
                // getNombreOficina(bidOficina));
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionContextoCuentas");
        }
    }

    /**
     * Rellena el contexto de impresion a partir del contexto teniendo en cuenta que tiene depósitos
     * @param contextoCuenta
     * @param contextoImpresion
     */
    private static void rellenarImpresionCuentasConDeposito(IContextoEjecucion contexto, IContexto contextoImpresion, String entidad, BigDecimal oficinaSolicitud, BigDecimal numeroSolicitud, BigDecimal digitoSolicitud) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionCuentasConDeposito");
        }
        // Llamamos al cgal_308 para obtener los digitos "Digito entidad oficina" y el "Digito codigo cliente"
        GestionDatosSolicitud gds = new GestionDatosSolicitud();
        BigDecimal digitoEntidadOficina = gds.digitoEntidadOficina(numeroSolicitud, contexto, oficinaSolicitud.toString());
        BigDecimal digitoCodigoCliente = gds.digitoCodigoCliente(numeroSolicitud, contexto, oficinaSolicitud.toString());
        // Llamamos a consultar el iban del prestamo montando la siguiente tira:
        // entidad + oficina + digitoEntidadOficina + digitoCodigoCliente + cuenta contable(500) + Número solicitud + digitoSolicitud
        // String tira = entidad + oficinaSolicitud +  digitoEntidadOficina + digitoCodigoCliente + CTE_CUENTAC + numeroSolicitud + digitoSolicitud;
        // Necesitamos asegurarnos de que la oficina y el numero de solicitud tienen la longitud correcta
        String tira = entidad + Helper.fillLeft(oficinaSolicitud.toString(), LengthConstants.LENGTH_0004, '0') + digitoEntidadOficina + digitoCodigoCliente + CTE_CUENTAC + Helper.fillLeft(numeroSolicitud.toString(), LengthConstants.LENGTH_0006, '0') + digitoSolicitud;
        String ibanPrestamo = UtilidadesTramitacion.consultaIban(tira, ServicioNegocio.getContexto().getCodigoContable());
        final String subStringUno = ibanPrestamo.substring(0, 4);
        final String subStringDos = ibanPrestamo.substring(4, 8);
        final String subStringTres = ibanPrestamo.substring(8, 12);
        final String subStringCuatro = ibanPrestamo.substring(12, 16);
        final String subStringCinco = ibanPrestamo.substring(16, 20);
        final String subStringSeis = ibanPrestamo.substring(20, 24);
        final String strIbanPrestamoFormateadaAcuatro = subStringUno + " " + subStringDos + " " + subStringTres + " " + subStringCuatro + " " + subStringCinco + " " + subStringSeis;
        // Seteamos el IBAN DEL PRESTAMO
        contextoImpresion.put(ID_PROP_CUENTA_ASOCIADA, strIbanPrestamoFormateadaAcuatro);
        contextoImpresion.put(ID_PROP_OFICINA_CUENTA_ASOCIADA, UtilidadesTramitacion.getNombreOficina(oficinaSolicitud));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionCuentasConDeposito");
        }
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro
     * @param ctxtPrograma
     * @param ctxtSolicitud
     * @param cntxtoImpresion
     * @param tipoDoc Identificador del documento que se va a imprimir
     * @param bolPrestamoVariable True si el prestamo es variable, false en otro caso
     */
    private static void rellenarImpresionConCntxtoPrograma(final IContexto ctxtPrograma, final IContexto ctxtSolicitud, final IContexto ctxtImpresion, final Boolean bolPrestamoVariable, final IContexto[] contextoInteres, List<BigDecimal> plazosTramosInteres) {
        final String strCtxtoCmpoFechaSol = "ANPMN050915";
        final String strCtxtoRegMatrizPago = "ANPMN075140";
        final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
        final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
        final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
        final String strCtxtoCmpoRegPagoImpCuota = "ANPMN075145";
        final String strCtxtoCmpoPorcTae = "ANPMN075150";
        final String strCtxtoCmpoInicioPlazo = "ANPMN075200";
        final String strCtxtoCmpoImpInteres = "ANPMN075390";
        final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
        final String strCtxtoCmpoFecLimiteDisp = "ANPMN075530";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoPrograma");
        }
        if (ctxtPrograma != null) {
            final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
            int iNumEntregas = 0;
            String strFechaPrimVencInt = null;
            BigDecimal totalImpInteres = BigDecimal.ZERO;
            // Mapeos comunes
            for (IRegistro registroActual : aRegPagos) {
                if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0) {
                    iNumEntregas++;
                }
                if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0) {
                    totalImpInteres = totalImpInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
                    if (strFechaPrimVencInt == null) {
                        LOGGER.debug("CAMPO DEL ANPMN075, FECHA PRIMER VENCIMIENTO---------->" + ctxtPrograma.getString(strCtxtoCmpoFecPrimRev));
                        // strFechaPrimVencInt es la fecha del primer cambio de interés
                        strFechaPrimVencInt = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
                    }
                }
            }
            List<IRegistro> lstRegistroSubtotalesAnho = new ArrayList<IRegistro>(0);
            IRegistro subTotal = null;
            subTotal = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_SUBTOTALES_ANHO);
            subTotal.put(ID_PROP_SUBTOTALES_CAPITAL, totalImpInteres);
            lstRegistroSubtotalesAnho.add(subTotal);
            ctxtImpresion.put(ID_PROP_NUMERO_CUOTAS_AMORTIZ, new BigDecimal(iNumEntregas));
            ctxtImpresion.put(ID_PROP_TAE, UtilidadesTramitacion.bigDecimalToString(ctxtPrograma.getBigDecimal(strCtxtoCmpoPorcTae), 3, LengthConstants.LENGTH_0004, false));
            if (bolPrestamoVariable) {
                ctxtImpresion.put(ID_PROP_PORC_INTERES_INICIAL, UtilidadesTramitacion.bigDecimalToString(ctxtPrograma.getBigDecimal(strCtxtoCmpoImpInteres), 3, LengthConstants.LENGTH_0004, false));
                String strFechaSolicitud = ctxtSolicitud.getString(strCtxtoCmpoFechaSol);
                // Se le pasa siempre un '1' a la función tras indicarse el problema por correo
                ctxtImpresion.put(ID_PROP_FECH_PORC_INICIAL, String.valueOf(getNumeroMeses(strFechaSolicitud, strFechaPrimVencInt, Integer.valueOf(1))));
            }
            if (0 != aRegPagos.length) {
                IRegistro primeraEntrega = null;
                IRegistro ultimaEntrega = null;
                IRegistro primerPago = null;
                IRegistro ultimoPago = null;
                for (IRegistro registroActual : aRegPagos) {
                    if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0) {
                        primeraEntrega = registroActual;
                        break;
                    }
                }
                for (IRegistro registroActual : aRegPagos) {
                    if (BigDecimal.ZERO.compareTo(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0) {
                        primerPago = registroActual;
                        break;
                    }
                }
                for (int i = aRegPagos.length - 1; i >= 0 && ultimaEntrega == null; i--) {
                    if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital)) != 0) {
                        ultimaEntrega = aRegPagos[i];
                    }
                }
                for (int i = aRegPagos.length - 1; i >= 0 && ultimoPago == null; i--) {
                    if (BigDecimal.ZERO.compareTo(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0) {
                        ultimoPago = aRegPagos[i];
                    }
                }
                if (null != primerPago) {
                    ctxtImpresion.put(ID_PROP_FEC_CIERRE_PRIMER_PERIODO, primerPago.getString(strCtxtoCmpoRegPagoFchPago));
                }
                if (null != primeraEntrega) {
                    ctxtImpresion.put(ID_PROP_FECHA_PRIMER_PAGO_AMORTIZ, primeraEntrega.getString(strCtxtoCmpoRegPagoFchPago));
                    ctxtImpresion.put(ID_PROP_PRIMERA_CUOTA_AMORTIZ, UtilidadesTramitacion.bigDecimalToString(primeraEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCuota), 11, 2, Boolean.FALSE));
                }
                if (null != ultimaEntrega) {
                    ctxtImpresion.put(ID_PROP_FECHA_ULTIMO_PAGO_AMORTIZ, ultimaEntrega.getString(strCtxtoCmpoRegPagoFchPago));
                    // Añadido de la primera cuota de capital al nuevo campo del servicio
                    ctxtImpresion.put(ID_PRIMERA_CUOTA_DE_CAPITAL, ultimaEntrega.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
                }
                /*20151027 Obtenemos la cuota del segundo tramo*/
                BigDecimal plazoPrimerTramoInteres = null;
                BigDecimal plazoSegundoTramoInteres = null;
                if ((null != plazosTramosInteres) && (0 < plazosTramosInteres.size())) {
                    plazoPrimerTramoInteres = plazosTramosInteres.get(0);
                    if (1 < plazosTramosInteres.size()) {
                        plazoSegundoTramoInteres = plazosTramosInteres.get(1);
                    }
                }
                if (null != plazoPrimerTramoInteres) {
                    BigDecimal posicionCuotaSegundoTramo = BigDecimal.ONE.add(plazoPrimerTramoInteres);
                    if (aRegPagos.length - 1 >= posicionCuotaSegundoTramo.intValue()) {
                        IRegistro primerRegistroSegundoTramo = aRegPagos[posicionCuotaSegundoTramo.intValue()];
                        if (!UtilidadesTramitacion.isBlankOrNull(primerRegistroSegundoTramo.getBigDecimal(strCtxtoCmpoRegPagoImpCuota))) {
                            BigDecimal cuotaEpcSegundoTramo = primerRegistroSegundoTramo.getBigDecimal(strCtxtoCmpoRegPagoImpCuota);
                            ctxtImpresion.put(CUOTA_SEGUNDO_TRAMO, cuotaEpcSegundoTramo);
                        }
                    }
                    if (null != plazoSegundoTramoInteres) {
                        // En el caso en que exista el tercer tramo también se informa de la 3ª cuota
                        BigDecimal posicionCuotaTercerTramo = posicionCuotaSegundoTramo.add(plazoSegundoTramoInteres);
                        if (aRegPagos.length - 1 >= posicionCuotaTercerTramo.intValue()) {
                            IRegistro primerRegistroTercerTramo = aRegPagos[posicionCuotaTercerTramo.intValue()];
                            if (!UtilidadesTramitacion.isBlankOrNull(primerRegistroTercerTramo.getBigDecimal(strCtxtoCmpoRegPagoImpCuota))) {
                                BigDecimal cuotaTercerTramo = primerRegistroTercerTramo.getBigDecimal(strCtxtoCmpoRegPagoImpCuota);
                                ctxtImpresion.put(CUOTA_TERCER_TRAMO, cuotaTercerTramo);
                            }
                        }
                    }
                }
                if (null != ctxtSolicitud.getBigDecimal("ANPMN050893")) {
                    ctxtImpresion.put(COLECTIVO, ctxtSolicitud.getBigDecimal("ANPMN050893"));
                }
                // FechaCierreCarencia = FechaInicioPlazo + CarenciaEnMeses
                ctxtImpresion.put(ID_PROP_PORC_INTERES_INICIAL, UtilidadesTramitacion.bigDecimalToString(ctxtPrograma.getBigDecimal(strCtxtoCmpoImpInteres), 3, LengthConstants.LENGTH_0004, false));
                ctxtImpresion.put(ID_PROP_FECHA_INICIO_COMPUTO, ctxtPrograma.getString(strCtxtoCmpoInicioPlazo));
                // Rellenamos el contexto con la fecha fin del segundo tramo: fecha cierre primer tramo + duracion segundo tramo
                BigDecimal inicioSegundoPlazo = ctxtImpresion.getBigDecimal(ID_PLAZO_DESDE_2DO_TRAMO).subtract(BigDecimal.ONE);
                BigDecimal finSegundoPlazo = ctxtImpresion.getBigDecimal(ID_PLAZO_HASTA_2DO_TRAMO);
                BigDecimal mesesSegundoPlazo = finSegundoPlazo.subtract(inicioSegundoPlazo);
                String strFechaPrimerPeriodo = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
                if (null != strFechaPrimerPeriodo) {
                    String fechaPrimerPeriodo = strFechaPrimerPeriodo.trim();
                    if (!(StringUtils.EMPTY.equals(fechaPrimerPeriodo))) {
                        final Calendar newCalendar = Calendar.getInstance();
                        newCalendar.setTime(DateUtils.parseDate(fechaPrimerPeriodo, DateUtils.FORMATO_FECHA_CORTO));
                        Date fechaFinSegundoTramo = DateHelper.getInstance().getCalendario().sumarMeses(newCalendar.getTime(), mesesSegundoPlazo.intValue());
                        ctxtImpresion.put(CAMPO_CTXTO_FECHA_FIN_2TRAMO, DateHelper.getInstance().formatearFecha(DateHelper.FORMATO_DD_MM_YYYY_GUION, fechaFinSegundoTramo));
                        String valoracionTramo3 = obtieneValoracionPorTramo(contextoInteres, 3);
                        if (!Utilidades.isBlankOrNull(valoracionTramo3)) {
                            if (valoracionTramo3.equals(Constantes.VALORACION_COMERCIAL)) {
                                Date primeraFechaPago3tramo = UtilidadesComun.sumarFechaDias(fechaFinSegundoTramo, 1);
                                // Si es el dia 31 y el mes es distinto de Enero, sumamos otro dia mas
                                newCalendar.setTime(primeraFechaPago3tramo);
                                int dia = newCalendar.get(Calendar.DAY_OF_MONTH);
                                int mes = newCalendar.get(Calendar.MONTH);
                                if ((dia == 31) && (mes != 0)) {
                                    primeraFechaPago3tramo = UtilidadesComun.sumarFechaDias(primeraFechaPago3tramo, 1);
                                }
                                ctxtImpresion.put(CAMPO_CTXTO_PRIMERA_FECHA_PAGO_3TRAMO, DateHelper.getInstance().formatearFecha(DateHelper.FORMATO_DD_MM_YYYY_GUION, primeraFechaPago3tramo));
                            }
                        }
                    }
                }
                String valoracionTramo2 = obtieneValoracionPorTramo(contextoInteres, 2);
                if (!Utilidades.isBlankOrNull(valoracionTramo2)) {
                    if (valoracionTramo2.equals(Constantes.VALORACION_COMERCIAL)) {
                        // Fecha revision + 1: dia siguiente a la fecha AN370570
                        OfertaVinculanteC ofertaVinculante = GestionPreformalizacion.obtenerVersionOV(ctxtSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_OFICINA), ctxtSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUMERO), ctxtSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION), ctxtSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC));
                        if (ofertaVinculante != null) {
                            Date fechaCambioIntereses = ofertaVinculante.getDateFecCambioInst();
                            if (!UtilidadesComun.isBlankOrNull(fechaCambioIntereses)) {
                                // Le sumamos un dia a la fecha de cambio de intereses
                                Date primeraFechaPago2tramo = UtilidadesComun.sumarFechaDias(fechaCambioIntereses, 1);
                                // Si es el dia 31 y el mes es distinto de Enero, sumamos otro dia mas
                                final Calendar newCalendar = Calendar.getInstance();
                                newCalendar.setTime(primeraFechaPago2tramo);
                                int dia = newCalendar.get(Calendar.DAY_OF_MONTH);
                                int mes = newCalendar.get(Calendar.MONTH);
                                if ((dia == 31) && (mes != 0)) {
                                    primeraFechaPago2tramo = UtilidadesComun.sumarFechaDias(primeraFechaPago2tramo, 1);
                                }
                                ctxtImpresion.put(CAMPO_CTXTO_PRIMERA_FECHA_PAGO_2TRAMO, DateHelper.getInstance().formatearFecha(DateHelper.FORMATO_DD_MM_YYYY_GUION, primeraFechaPago2tramo));
                            }
                        }
                    }
                }
                // Calculo fechaCierreCarencia = FechaInicioPlazo +  numero de meses indicado en Carencia_Meses
                Date fechaInicioPlazo = DateUtils.parseDate(ctxtPrograma.getString(strCtxtoCmpoInicioPlazo), DateUtils.FORMATO_FECHA_CORTO);
                Calendar cal = new GregorianCalendar();
                cal.setTimeInMillis(fechaInicioPlazo.getTime());
                cal.add(Calendar.MONTH, (ctxtImpresion.getBigDecimal(ID_PROP_CARENCIA_MESES).intValueExact()));
                ctxtImpresion.put(ID_PROP_FECHA_CIERRE_CARENCIA, ctxtPrograma.getString(strCtxtoCmpoFecLimiteDisp));
                // Numero de años desde ID_PROP_FECHA_INICIO_COMPUTO hasta ID_PROP_FECHA_ULTIMO_PAGO_AMORTIZ
                ctxtImpresion.put(ID_PROP_NUM_ANHOS, new BigDecimal(DateUtils.getDifference(DateUtils.parseDate(ultimaEntrega.getString(strCtxtoCmpoRegPagoFchPago), DateUtils.FORMATO_FECHA_CORTO), fechaInicioPlazo, DateUtils.YEAR, DateUtils.ROUND)));
                rellenaCuadroAmortizacionTotalizado(ctxtPrograma, ctxtImpresion, bolPrestamoVariable);
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoPrograma");
        }
    }

    /**
     * Rellena el contexto de impresion con datos de bienes y bonificaciones
     * @param ctxtImpresion
     * @param ctxtSolicitud
     */
    private static void rellenaImpresionConDatosBienesYbonificaciones(final IContexto ctxtImpresion, final IContexto ctxtSolicitud, final IContexto[] aCtxaCtxtoIntereses) {
        /*VARIABLE DE TAMAÑO DE MATRIZ*/
        final int LONGITUD = 10;
        final String strSolPropTipoCarCapDurAmort = "ANPMN050820";
        BigDecimal tipoCarCapDurAmort = null;
        final String strSolPropTipoCarIntDurAmort = "ANPMN050830";
        BigDecimal tipoCarIntDurAmort = null;
        tipoCarCapDurAmort = ctxtSolicitud.getBigDecimal(strSolPropTipoCarCapDurAmort);
        tipoCarIntDurAmort = ctxtSolicitud.getBigDecimal(strSolPropTipoCarIntDurAmort);
        final String ctxtoSolicitudNuc = "ANPMN050040";
        final String ctxtoSolicitudProducto = "ANPMN050080";
        final String ctxtoSolicitudSubproducto = "ANPMN050090";
        final String ctxtoSolicitudVersionGeneral = "ANPMN050100";
        final String ctxtoSolicitudIdTarifa = "ANPMN050886";
        final String idProgramaDatosBienesYbonificacion = "ANPMR210";
        final String strIdCtxtoBonificacionYbienes = "ANPMN431";
        // Campos del contexto bonificación maxima y bienes
        final String strCtxtoBonificacionYbienesNuc = "ANPMN431010";
        final String strCtxtoBonificacionYbienesCodigoProd = "ANPMN431020";
        final String strCtxtoBonificacionYbienesCodigoSubprod = "ANPMN431120";
        final String strCtxtoBonificacionYbienesIdTarifa = "ANPMN431130";
        final String strCtxtoBonificacionYbienesMatriz = "ANPMN431140";
        final String strCtxtoBonificacionYbienesMaxBonif = "ANPMN431030";
        final String strCtxtoBonificacionYbienesFincaRegMatriz = "ANPMN431142";
        final String strCtxtoBonificacionYbienesPrincipalHipotecaMatriz = "ANPMN431143";
        final String strCtxtoBonificacionYbienesImporteSubastMatriz = "ANPMN431144";
        final String strCtxtoBonificacionYbienesValorTasaMatriz = "ANPMN431145";
        final String strCtxtoBonificacionYbienesRefTasacionMatriz = "ANPMN431146";
        final String strCtxtoBonificacionYbienesVersionGeneral = "ANPMN431150";
        final String ctxtoDiferencialSinBonificacion = "ANPMN101470";
        final String ctxtoIncrementoDuranteAplazamiento = "ANPMN101790";
        BigDecimal codProductoSolic = null;
        BigDecimal codSubproductoSolic = null;
        BigDecimal interesSegundoTramo = null;
        BigDecimal tipoMaxBonif = null;
        IRegistro registroDatosGarantias = null;
        IContexto[] aContextoSalida = null;
        codProductoSolic = ctxtSolicitud.getBigDecimal(ctxtoSolicitudProducto);
        codSubproductoSolic = ctxtSolicitud.getBigDecimal(ctxtoSolicitudSubproducto);
        IContexto contextoEntrada = ContextoFactory.getInstance().getContexto(strIdCtxtoBonificacionYbienes);
        contextoEntrada.put(strCtxtoBonificacionYbienesNuc, ctxtSolicitud.getBigDecimal(ctxtoSolicitudNuc));
        contextoEntrada.put(strCtxtoBonificacionYbienesCodigoProd, codProductoSolic);
        contextoEntrada.put(strCtxtoBonificacionYbienesCodigoSubprod, codSubproductoSolic);
        /**
         * Añadimos el id de tarifa si existe
         */
        contextoEntrada.put(strCtxtoBonificacionYbienesIdTarifa, ctxtSolicitud.getBigDecimal(ctxtoSolicitudIdTarifa));
        // 2016-03-07 - Anhadir campo version general
        contextoEntrada.put(strCtxtoBonificacionYbienesVersionGeneral, ctxtSolicitud.getBigDecimal(ctxtoSolicitudVersionGeneral));
        /*INSTANCIAMOS LA MATRIZ DE ENTRADA SIN DATOS*/
        UtilidadesComun.reservarMemoriaRegistro(contextoEntrada, strCtxtoBonificacionYbienesMatriz, LONGITUD);
        CtgFacade ctg = new CtgFacade();
        IRegistro[] matrizDatosGarantias = null;
        List<IRegistro> listaDatosGarantias = new ArrayList<IRegistro>(1);
        aContextoSalida = ctg.invocarProgramaCics(contextoEntrada, idProgramaDatosBienesYbonificacion);
        for (IContexto contextoActual : aContextoSalida) {
            if (contextoActual.getNombre().equals(strIdCtxtoBonificacionYbienes)) {
                // Calculo del diferencial Bonificado
                BigDecimal diferencialSinBonificacion = ctxtImpresion.getBigDecimal(ctxtoDiferencialSinBonificacion);
                BigDecimal maximaBonificacion = contextoActual.getBigDecimal(strCtxtoBonificacionYbienesMaxBonif);
                BigDecimal diferencialBonificado = diferencialSinBonificacion.subtract(maximaBonificacion);
                // Calculo del diferencial durante el aplazamiento
                BigDecimal incrementoDuranteAplazamiento = ctxtImpresion.getBigDecimal(ctxtoIncrementoDuranteAplazamiento);
                BigDecimal diferencialDuranteAplazamiento = diferencialSinBonificacion.add(incrementoDuranteAplazamiento);
                /*20151111 Si es la minuta de la hipoteca fija no aplica, porque el segundo tramo es variable bonificable, sí, pero
				 * es variable bonificable NO referenciado, porque en realidad es fijo, tipo referencia = 11.*/
                if (esEntornoAbanca) {
                    if (!isPrestamoVariableNoReferenciado(aCtxaCtxtoIntereses)) {
                        if ((0 != BigDecimal.ZERO.compareTo(tipoCarCapDurAmort)) && (0 != BigDecimal.ZERO.compareTo(tipoCarIntDurAmort))) {
                            ctxtImpresion.put(CAMPO_CTXTO_DIFERENCIAL_DUR_APLAZAMIENTO, diferencialDuranteAplazamiento);
                        } else {
                            ctxtImpresion.put(CAMPO_CTXTO_DIFERENCIAL_DUR_APLAZAMIENTO, BigDecimal.ZERO);
                        }
                        ctxtImpresion.put(CAMPO_CTXTO_DIFERENCIAL_BONIFICADO, diferencialBonificado);
                    } else {
                        interesSegundoTramo = obtenerInteresSegundoTramoHipotecaFija(aCtxaCtxtoIntereses);
                        if (null != interesSegundoTramo) {
                            tipoMaxBonif = interesSegundoTramo.subtract(maximaBonificacion);
                            ctxtImpresion.put(CAMPO_CTXTO_TIPO_MAXIMO_BONIFICACION, tipoMaxBonif);
                        } else {
                            ctxtImpresion.put(CAMPO_CTXTO_TIPO_MAXIMO_BONIFICACION, BigDecimal.ZERO);
                        }
                    }
                    ctxtImpresion.put(CAMPO_CTXTO_MAXIMA_BONIFICACION, maximaBonificacion);
                }
            /*Asignamos los datos del gasto adicional al registro*/
            }
        }
        matrizDatosGarantias = aContextoSalida[0].getRegistro(strCtxtoBonificacionYbienesMatriz);
        for (IRegistro regi : matrizDatosGarantias) {
            /*Creamos el registro datos de bienes*/
            registroDatosGarantias = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_GARANTIAS);
            /*Limpiamos la matriz de datos vacios*/
            if (!((0 == regi.getString(strCtxtoBonificacionYbienesFincaRegMatriz).trim().length()) && /*Si es cadenas de vacios*/
            (0 == BigDecimal.ZERO.compareTo(regi.getBigDecimal(strCtxtoBonificacionYbienesPrincipalHipotecaMatriz))) && (0 == BigDecimal.ZERO.compareTo(regi.getBigDecimal(strCtxtoBonificacionYbienesImporteSubastMatriz))) && (0 == BigDecimal.ZERO.compareTo(regi.getBigDecimal(strCtxtoBonificacionYbienesValorTasaMatriz))) && (0 == regi.getString(strCtxtoBonificacionYbienesRefTasacionMatriz).trim().length()))) {
                registroDatosGarantias.put(ID_PROP_FINCA_REGISTRO, regi.getString(strCtxtoBonificacionYbienesFincaRegMatriz));
                registroDatosGarantias.put(ID_PROP_PPAL_HIPOTECA, regi.getBigDecimal(strCtxtoBonificacionYbienesPrincipalHipotecaMatriz));
                registroDatosGarantias.put(ID_PROP_IMPORTE_SUBASTA, regi.getBigDecimal(strCtxtoBonificacionYbienesImporteSubastMatriz));
                registroDatosGarantias.put(ID_PROP_TASACION, regi.getBigDecimal(strCtxtoBonificacionYbienesValorTasaMatriz));
                registroDatosGarantias.put(ID_PROP_REFERENCIA_TASACION, regi.getString(strCtxtoBonificacionYbienesRefTasacionMatriz));
                registroDatosGarantias.put(ID_PROP_LTV, devuelveLTVConsultaGarantias(ctxtSolicitud));
                listaDatosGarantias.add(registroDatosGarantias);
                registroDatosGarantias = null;
            }
        }
        matrizDatosGarantias = listaDatosGarantias.toArray(new IRegistro[listaDatosGarantias.size()]);
        ctxtImpresion.put(ID_REG_GARANTIAS, matrizDatosGarantias);
    }

    /**
     * Devuelve el campo LTV devuelto por el sevicio GTIA_315
     * @param ctxtSolicitud
     * @return devuelveElLTV de garantias
     */
    public static BigDecimal devuelveLTVConsultaGarantias(final IContexto ctxtSolicitud) {
        final Integer idCuentaGTIA = Integer.valueOf(563);
        final Integer idCodOperacionConsultaAtribuciones = Integer.valueOf(315);
        final String datoEntradaNucSol = "nucEexp";
        // NUC ContextoSolicitud
        final String ctxtoSolicitudNuc = "ANPMN050040";
        // ContextoConsultaAtribuciones
        final String ctxtoConsultaAtribuciones = "GTIAN315";
        final String ctxtoConsultaAtribucionesValorLTV = "GTIAN315210";
        BigDecimal valorLTV = BigDecimal.ZERO;
        IDatosEntradaTx datosEntradaConsultaAtribuciones = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), idCuentaGTIA, idCodOperacionConsultaAtribuciones);
        datosEntradaConsultaAtribuciones.addCampo(datoEntradaNucSol, ctxtSolicitud.getBigDecimal(ctxtoSolicitudNuc));
        IContexto[] aCntxtoConsultaAtribuciones = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaAtribuciones);
        if (aCntxtoConsultaAtribuciones != null && aCntxtoConsultaAtribuciones.length != 0) {
            if (aCntxtoConsultaAtribuciones[0].getNombre().equals(ctxtoConsultaAtribuciones)) {
                valorLTV = aCntxtoConsultaAtribuciones[0].getBigDecimal(ctxtoConsultaAtribucionesValorLTV);
            }
        }
        return valorLTV;
    }

    /**
     * Rellena el contexto de impresion a partir del contexto que se pasa como primer
     * parámetro
     * @param ctxtPrograma
     * @param ctxtSolicitud
     * @param cntxtoImpresion
     * @param tipoDoc Identificador del documento que se va a imprimir
     * @param bolPrestamoVariable True si el prestamo es variable, false en otro caso
     */
    private static void rellenarImpresionConCntxtoTratamientoAdelantos(final IContexto ctxtPrograma, final IContexto ctxtImpresion) {
        final String strCtxtoImporteMinimoAdelanto = "ANPMN054090";
        final String strCtxtoCtrolCuotasCompletas = "ANPMN054120";
        final String strCtxoImputacionAdelanto = "ANPMN054070";
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoTratamientoAdelantos");
        }
        if (ctxtPrograma != null) {
            if (null != ctxtPrograma.getBigDecimal(strCtxoImputacionAdelanto)) {
                if (BigDecimal.ZERO.compareTo(ctxtPrograma.getBigDecimal(strCtxoImputacionAdelanto)) == Constantes.CTE_CERO) {
                    ctxtImpresion.put(ID_PROP_IMPUTACION_ADELANTOS, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_IMPUTACION_ADELANTOS_0).toString());
                } else if (BigDecimal.ONE.compareTo(ctxtPrograma.getBigDecimal(strCtxoImputacionAdelanto)) == Constantes.CTE_CERO) {
                    ctxtImpresion.put(ID_PROP_IMPUTACION_ADELANTOS, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_IMPUTACION_ADELANTOS_1).toString());
                } else if (new BigDecimal(Constantes.CTE_DOS).compareTo(ctxtPrograma.getBigDecimal(strCtxoImputacionAdelanto)) == Constantes.CTE_CERO) {
                    ctxtImpresion.put(ID_PROP_IMPUTACION_ADELANTOS, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_IMPUTACION_ADELANTOS_2).toString());
                }
            }
            ctxtImpresion.put(ID_PROP_MIN_ADELANTOS, ctxtPrograma.getBigDecimal(strCtxtoImporteMinimoAdelanto));
            if (null != ctxtPrograma.getBigDecimal(strCtxtoCtrolCuotasCompletas)) {
                if (BigDecimal.ZERO.compareTo(ctxtPrograma.getBigDecimal(strCtxtoCtrolCuotasCompletas)) == 0) {
                    ctxtImpresion.put(ID_PROP_CUANTIA_ADELANTOS, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_CUANTIA_ADELANTOS_LIBRE).toString());
                } else {
                    ctxtImpresion.put(ID_PROP_CUANTIA_ADELANTOS, new Mensaje(ServicioNegocio.getContexto(), ETIQUETA_CUANTIA_ADELANTOS_UNA).toString());
                }
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ContextoDocumentoInternoMinutar rellenarImpresionConCntxtoTratamientoAdelantos");
        }
    }

    /**
     * Rellena el registro de matriz de pagos para la FIPER, totalizando a partir del segundo año
     * Se considera el primer año, desde la fecha del primer pago hasta el 31 de diciembre de ese año.
     * Se totalizan los pagos por año a partir del segundo (teniendo como referencia el 31 de diciembre del año en cuestión)
     * @param ctxtPrograma
     * @param ctxtImpresion
     * @param isPrestamoVariable
     */
    private static void rellenaCuadroAmortizacionTotalizado(final IContexto ctxtPrograma, final IContexto ctxtImpresion, final Boolean isPrestamoVariable) {
        final String strCtxtoRegNumPagos = "ANPMN075320";
        final String strCtxtoCmpoFecPrimRev = "ANPMN075400";
        final String strCtxtoRegNumCuotas = "ANPMN075080";
        final int pagosCount = ctxtPrograma.getBigDecimal(strCtxtoRegNumCuotas).intValue();
        final String fechaSiguienteRevision = ctxtPrograma.getString(strCtxtoCmpoFecPrimRev);
        final int numRegistros = ctxtPrograma.getBigDecimal(strCtxtoRegNumPagos).intValue();
        if (0 != pagosCount) {
            final String strCtxtoRegMatrizPago = "ANPMN075140";
            final String strCtxtoCmpoRegNumVencimiento = "ANPMN075141";
            final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
            final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
            final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
            final String strCtxtoCmpoRegPagoImpTotal = "ANPMN075145";
            final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
            BigDecimal bgPago = BigDecimal.ZERO;
            BigDecimal bgInteres = BigDecimal.ZERO;
            BigDecimal bgPagosTotal = BigDecimal.ZERO;
            BigDecimal bgPagosNoVen = BigDecimal.ZERO;
            final IRegistro[] aRegPagos = ctxtPrograma.getRegistro(strCtxtoRegMatrizPago);
            final List<IRegistro> lstRegPagos = new ArrayList<IRegistro>(pagosCount);
            final List<IRegistro> lstRegPagosAnuales = new ArrayList<IRegistro>(pagosCount);
            List<IRegistro> lRegPagosMensual = new ArrayList<IRegistro>();
            List<IRegistro> lRegPagosAnual = new ArrayList<IRegistro>();
            int i = 0;
            // Contador para la numeración de los años en los registros totalizados por año
            int countAnho = 0;
            // Llevar el contador de meses
            int iMes = 1;
            // Date fechaAnoProximo = calcularFechaFinAnho(strCtxtoCmpoRegPagoFchPago, aRegPagos, i);
            ctxtImpresion.put(ID_PROP_FECH_PORC_INICIAL, fechaSiguienteRevision);
            /*20150305 Si el primer vencimiento llega desdoblado los dos primeros registros que se envian al documento
			 * pertenecen al primer mes.
			 * 
			 * Si el segundo registro tiene el mismo número de vencimiento y fecha que el primero y además
			 * el capital del primero es 0 entonces el primer vencimiento viene desdoblado
			 * 
			 * */
            if ((0 == aRegPagos[0].getBigDecimal(strCtxtoCmpoRegNumVencimiento).compareTo(aRegPagos[1].getBigDecimal(strCtxtoCmpoRegNumVencimiento))) && (aRegPagos[0].getString(strCtxtoCmpoRegPagoFchPago).equals(aRegPagos[1].getString(strCtxtoCmpoRegPagoFchPago))) && (0 == BigDecimal.ZERO.compareTo(aRegPagos[0].getBigDecimal(strCtxtoCmpoRegPagoImpCapital)))) {
                // i==0, registro 0
                IRegistro regPago = crearRegistroPago(ctxtImpresion, aRegPagos[i]);
                lstRegPagos.add(regPago);
                bgPago = bgPago.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
                bgInteres = bgInteres.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
                bgPagosTotal = bgPagosTotal.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
                i++;
                // NO INCREMENTAMOS MES
                // i==1, registro 1
                regPago = crearRegistroPago(ctxtImpresion, aRegPagos[i]);
                lstRegPagos.add(regPago);
                bgPago = bgPago.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
                bgInteres = bgInteres.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
                bgPagosTotal = bgPagosTotal.add(aRegPagos[i].getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
                i++;
                iMes++;
            // a partir de aqui comienza el mes 2 en el registro 2 comenzando en 0
            }
            // Desde la fecha del primer pago hasta el 31 de diciembre de ese año los pagos se imprimen tal como llegan
            while (i < pagosCount && iMes <= Constantes.MESES_ANHO) {
                final IRegistro registroActual = aRegPagos[i];
                // final Date dateFechaPago = DateUtils.parseDate(
                // registroActual.getString(strCtxtoCmpoRegPagoFchPago),
                // DateUtils.FORMATO_FECHA_CORTO);
                // Si la fecha de pago es menor o igual que la de fin de año, insertamos el registro en la matriz de pagos mensuales
                // if (DateUtils.isDateLessEqual(dateFechaPago, fechaAnoProximo)) {
                lRegPagosMensual.add(aRegPagos[i]);
                if (isPrestamoVariable) {
                    IRegistro regPago = crearRegistroPago(ctxtImpresion, registroActual);
                    lstRegPagos.add(regPago);
                } else {
                    IRegistro regPago = crearRegistroPago(ctxtImpresion, registroActual);
                    lstRegPagos.add(regPago);
                }
                // Sumamos los totales
                bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
                bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
                bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
                // Capital pendiente por año = capital pendiente del ultimo mes de ese año
                bgPagosNoVen = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
                i++;
                iMes++;
            // }
            // else {
            // break;
            // }
            }
            // Añadimos los totales del Año 1
            countAnho++;
            anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago, strCtxtoCmpoRegPagoImpInteres, strCtxtoCmpoRegPagoImpCapital, strCtxtoCmpoRegPagoImpTotal, strCtxtoCmpoRegPagoImpCapitalPdte, bgPago, bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos, lRegPagosAnual, i, countAnho);
            bgPago = BigDecimal.ZERO;
            bgInteres = BigDecimal.ZERO;
            bgPagosTotal = BigDecimal.ZERO;
            iMes = 1;
            // while (i < pagosCount) {
            while (i < numRegistros) {
                final IRegistro registroActual = aRegPagos[i];
                // if (DateUtils.isDateLessEqual(dateFechaPago, fechaAnoProximo)) {
                if (iMes <= 12) {
                    bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
                    bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
                    bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
                    // Capital pendiente por año = capital pendiente del ultimo mes de ese año
                    bgPagosNoVen = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte);
                    i++;
                    iMes++;
                } else {
                    countAnho++;
                    anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago, strCtxtoCmpoRegPagoImpInteres, strCtxtoCmpoRegPagoImpCapital, strCtxtoCmpoRegPagoImpTotal, strCtxtoCmpoRegPagoImpCapitalPdte, bgPago, bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos, lRegPagosAnual, i, countAnho);
                    bgPago = BigDecimal.ZERO;
                    bgInteres = BigDecimal.ZERO;
                    bgPagosTotal = BigDecimal.ZERO;
                    // bgPago = bgPago.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
                    // bgInteres = bgInteres.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
                    // bgPagosTotal = bgPagosTotal.add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpTotal));
                    // fechaAnoProximo = calcularFechaFinAnho(strCtxtoCmpoRegPagoFchPago, aRegPagos, i);
                    // i++;
                    iMes = 1;
                }
            }
            // Los registros vienen ordenados por fecha de pago ASC
            for (int u = aRegPagos.length - 1; u >= 0; u--) {
                IRegistro registroUltimo = aRegPagos[u];
                if (BigDecimal.ZERO.compareTo(registroUltimo.getBigDecimal(strCtxtoCmpoRegPagoImpInteres)) != 0) {
                    ctxtImpresion.put(ID_PROP_FEC_ULTIMO_PERIODO_INTERES, registroUltimo.getString(strCtxtoCmpoRegPagoFchPago));
                    break;
                }
            }
            countAnho++;
            anhadirRegistroAnual(strCtxtoCmpoRegPagoFchPago, strCtxtoCmpoRegPagoImpInteres, strCtxtoCmpoRegPagoImpCapital, strCtxtoCmpoRegPagoImpTotal, strCtxtoCmpoRegPagoImpCapitalPdte, bgPago, bgInteres, bgPagosTotal, bgPagosNoVen, aRegPagos, lRegPagosAnual, i, countAnho);
            // Recorremos los pagos anuales (lRegPagosAnual) y mandamos a imprimir cada uno de sus registros
            if (isPrestamoVariable) {
                // la fecha que viene por programa
                for (int j = 0; j < lRegPagosAnual.size(); j++) {
                    final IRegistro registroActual = lRegPagosAnual.get(j);
                    IRegistro regPago = crearRegistroPagoAnual(ctxtImpresion, registroActual);
                    lstRegPagosAnuales.add(regPago);
                }
            } else {
                // Si es un prestamo fijo se copian todos los registros que llegan desde programa
                for (int j = 0; j < lRegPagosAnual.size(); j++) {
                    /* 20141015 Lucila: "En el caso del fijo, debería de hacerlo igual 
					 * 	que en la caso variable, es decir, recorrer el registro de pagos 
					 * 		totalizados por año en vez de por mes."*/
                    // IRegistro regPago = crearRegistroPagoAnual(ctxtImpresion, lRegPagosMensual.get(j));
                    IRegistro regPago = crearRegistroPagoAnual(ctxtImpresion, lRegPagosAnual.get(j));
                    lstRegPagosAnuales.add(regPago);
                }
            }
            if (!lstRegPagos.isEmpty()) {
                ctxtImpresion.put(ID_REG_PAGOS, lstRegPagos.toArray(new IRegistro[lstRegPagos.size()]));
            }
            if (!lstRegPagosAnuales.isEmpty()) {
                ctxtImpresion.put(ID_REG_SUBTOTALES_ANHO, lstRegPagosAnuales.toArray(new IRegistro[lstRegPagosAnuales.size()]));
                BigDecimal capitalTotal = BigDecimal.ZERO;
                BigDecimal interesTotal = BigDecimal.ZERO;
                BigDecimal importesCuotaTotal = BigDecimal.ZERO;
                for (IRegistro regPago : lstRegPagosAnuales) {
                    capitalTotal = capitalTotal.add(regPago.getBigDecimal(ID_PROP_SUBTOTALES_CAPITAL));
                    interesTotal = interesTotal.add(regPago.getBigDecimal(ID_PROP_SUBTOTALES_INTERES));
                    importesCuotaTotal = importesCuotaTotal.add(regPago.getBigDecimal(ID_PROP_SUBTOTALES_CUOTA));
                }
                ctxtImpresion.put(ID_PROP_TOTAL_CAPITAL, capitalTotal);
                ctxtImpresion.put(ID_PROP_TOTAL_INTERES, interesTotal);
                ctxtImpresion.put(ID_PROP_TOTAL_CUOTA, UtilidadesTramitacion.bigDecimalToString(importesCuotaTotal, 17, LengthConstants.LENGTH_0002, false));
            }
        }
    }

    /**
     * Crea un registro con los cómputos anuales de amortización y lo inserta en la lista de pagos
     * @param strCtxtoCmpoRegPagoFchPago
     * @param strCtxtoCmpoRegPagoImpInteres
     * @param strCtxtoCmpoRegPagoImpCapital
     * @param strCtxtoCmpoRegPagoImpTotal
     * @param strCtxtoCmpoRegPagoImpCapitalPdte
     * @param bgPago
     * @param bgInteres
     * @param bgPagosTotal
     * @param bgPagosNoVen
     * @param lRegPagos
     * @param lRegPagosAnual
     * @param indice
     */
    private static void anhadirRegistroAnual(final String strCtxtoCmpoRegPagoFchPago, final String strCtxtoCmpoRegPagoImpInteres, final String strCtxtoCmpoRegPagoImpCapital, final String strCtxtoCmpoRegPagoImpTotal, final String strCtxtoCmpoRegPagoImpCapitalPdte, BigDecimal bgPago, BigDecimal bgInteres, BigDecimal bgPagosTotal, BigDecimal bgPagosNoVen, final IRegistro[] lRegPagos, List<IRegistro> lRegPagosAnual, int indice, int numAnho) {
        final IRegistro registroAnterior = lRegPagos[indice - 1];
        IRegistro registroTotales = registroAnterior;
        registroTotales.put(strCtxtoCmpoRegPagoFchPago, String.valueOf(numAnho));
        registroTotales.put(strCtxtoCmpoRegPagoImpCapital, bgPago);
        registroTotales.put(strCtxtoCmpoRegPagoImpInteres, bgInteres);
        registroTotales.put(strCtxtoCmpoRegPagoImpTotal, bgPagosTotal);
        registroTotales.put(strCtxtoCmpoRegPagoImpCapitalPdte, bgPagosNoVen);
        lRegPagosAnual.add(registroTotales);
    }

    /**
     * @param ctxtImpresion
     * @param registroActual
     * @return Un resgistro para la matriz de pagos a partir del registro del programa ANPMR203
     *  que se pasa como parámetro
     */
    private static IRegistro crearRegistroPago(final IContexto ctxtImpresion, final IRegistro registroActual) {
        final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
        final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
        final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
        final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
        BigDecimal totalPagosCuota = BigDecimal.ZERO;
        final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_PAGOS);
        regPago.put(ID_PROP_PAGOS_TEXTO_PERIODO, registroActual.getString(strCtxtoCmpoRegPagoFchPago));
        regPago.put(ID_PROP_PAGOS_CAPITAL, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital), 17, LengthConstants.LENGTH_0002, false));
        regPago.put(ID_PROP_PAGOS_CAPITAL_PDTE, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte));
        totalPagosCuota = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital).add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
        regPago.put(ID_PROP_PAGOS_CUOTA, totalPagosCuota);
        regPago.put(ID_PROP_PAGOS_INTERES, UtilidadesTramitacion.bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres), 17, LengthConstants.LENGTH_0002, false));
        return regPago;
    }

    /**
     * @param ctxtImpresion
     * @param registroActual
     * @param ocultarImporte Si True introduce una máscara en el campo importe de interés y el importe toal
     * @return Un resgistro para la matriz de pagos a partir del registro del programa ANPMR203
     *  que se pasa como parámetro
     */
    private static IRegistro crearRegistroPagoAnual(final IContexto ctxtImpresion, final IRegistro registroActual) {
        final String strCtxtoCmpoRegPagoFchPago = "ANPMN075142";
        final String strCtxtoCmpoRegPagoImpCapital = "ANPMN075143";
        final String strCtxtoCmpoRegPagoImpInteres = "ANPMN075144";
        final String strCtxtoCmpoRegPagoImpCapitalPdte = "ANPMN075146";
        BigDecimal totalPagosCuota = BigDecimal.ZERO;
        final IRegistro regPago = ContextoFactory.getInstance().getRegistro(ctxtImpresion, ID_REG_SUBTOTALES_ANHO);
        regPago.put(ID_PROP_PAGOS_TEXTO_ANHO, ETIQUETA_TEXTO_ANHO);
        regPago.put(ID_PROP_SUBTOTALES_NUM_ANHO, UtilidadesTramitacion.stringToBigDecimal(registroActual.getString(strCtxtoCmpoRegPagoFchPago), Locale.getDefault()));
        regPago.put(ID_PROP_SUBTOTALES_CAPITAL, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital));
        // regPago.put(ID_PROP_SUBTOTALES_CAPITAL,
        // bigDecimalToString(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital),
        // 17, LengthConstants.LENGTH_0002, false));
        regPago.put(ID_PROP_SUBTOTALES_CAPITAL_PDTE, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapitalPdte));
        totalPagosCuota = registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpCapital).add(registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
        regPago.put(ID_PROP_SUBTOTALES_CUOTA, totalPagosCuota);
        regPago.put(ID_PROP_SUBTOTALES_INTERES, registroActual.getBigDecimal(strCtxtoCmpoRegPagoImpInteres));
        return regPago;
    }

    private static void rellenarImpresionConTaeBonificada(IContexto contextoImprimir, IContexto ctxtoSolicitud) {
        BigDecimal taeBonificada = null;
        IContexto[] resultadoConsultaAmortizacion = null;
        BigDecimal bidOficinaSolicitud = null;
        BigDecimal bidNumeroSolicitud = null;
        BigDecimal bidVersionSolicitud = null;
        BigDecimal bidDigitoSolicitud = null;
        BigDecimal bidNucExpediente = null;
        GestionDatosSolicitud gds = new GestionDatosSolicitud();
        bidOficinaSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_OFICINA);
        bidNumeroSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUMERO);
        bidVersionSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION);
        bidNucExpediente = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC);
        bidDigitoSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_DIGITO);
        final IDatosEntradaTx datosEntradaConsultaAmortizacion = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), Constantes.ID_CUENTA_ANPM, ID_CODOP_CONSULTA_AMORTIZACION);
        datosEntradaConsultaAmortizacion.addCampo(NOMBRE_CAMPO_OFICINA_SOLICITUD, bidOficinaSolicitud);
        datosEntradaConsultaAmortizacion.addCampo(NOMBRE_CAMPO_NUMERO_SOLICITUD, bidNumeroSolicitud);
        datosEntradaConsultaAmortizacion.addCampo(NOMBRE_CAMPO_VERSION_SOLICITUD, bidVersionSolicitud);
        datosEntradaConsultaAmortizacion.addCampo(NOMBRE_CAMPO_NUC_EXPEDIENTE, bidNucExpediente);
        datosEntradaConsultaAmortizacion.addCampo(NOMBRE_CAMPO_DIGITO_SOLICITUD, bidDigitoSolicitud);
        datosEntradaConsultaAmortizacion.addCampo(NOMBRE_CAMPO_PANTALLA_ORIGEN, // tipo operación = "5"
        Constantes.CTE_STR_5);
        resultadoConsultaAmortizacion = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaAmortizacion);
        if (UtilidadesTramitacion.isBlankOrNull(resultadoConsultaAmortizacion)) {
            ServicioNegocio.rollback(CodigosError.CTE_ERROR_NO_CTX_ANPMN075_TAE_BONIF, null, null, null);
        }
        taeBonificada = resultadoConsultaAmortizacion[0].getBigDecimal("ANPMN075150");
        contextoImprimir.put(ID_PROP_TAE_BONIFICACION, taeBonificada);
        /*Se actualiza la tae bonificada en datos solicitud, AN25TB01*/
        gds.actualizarTaeBonificada(bidOficinaSolicitud, bidNumeroSolicitud, bidVersionSolicitud, bidNucExpediente, taeBonificada);
    }

    private static void rellenarImpresionConGastosAdicionales(IContexto ctxtoSolicitud, IContexto contextoImpresion) {
        BigDecimal oficina = null;
        BigDecimal numeroSol = null;
        BigDecimal version = null;
        BigDecimal nuc = null;
        GastosAdicionalesEng gastosAdicionalesDao = new GastosAdicionalesEng();
        List<GastosAdicionalesC> listaGastosAdic = null;
        IRegistro[] matrizGastosAdic = null;
        List<IRegistro> listaMtzGastosAdic = new ArrayList<IRegistro>(1);
        IRegistro regGastosAdic = null;
        /*Campos de la matriz de gastos adicionales del contexto de impresión ANPMN103*/
        BigDecimal idConcepto = null;
        String descrConcepto = null;
        BigDecimal importeConcepto = null;
        /*Importe total contexto impresión FIPER ANPMN103110*/
        BigDecimal importeTotal = null;
        BigDecimal plazoSolicitud = null;
        BigDecimal plazoAnosSolicitud = null;
        MathContext mathContext = new MathContext(17, RoundingMode.HALF_UP);
        oficina = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_OFICINA);
        numeroSol = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUMERO);
        version = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_VERSION);
        nuc = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_NUC);
        plazoSolicitud = ctxtoSolicitud.getBigDecimal(CAMPO_CTXTO_SOL_PLAZO);
        /*Obtenemos los gastos adicionales de la AN44TB01, si los hay*/
        listaGastosAdic = gastosAdicionalesDao.obtenerGastosAdic(oficina, numeroSol, version, nuc);
        if (!UtilidadesTramitacion.isBlankOrNull(listaGastosAdic)) {
            /*Vamos a actualizar el importe total para ABANCA sumándole los gastos adicionales*/
            importeTotal = contextoImpresion.getBigDecimal(ID_PROP_IMPORTE_PRESTAMO);
            for (GastosAdicionalesC gastosAdicC : listaGastosAdic) {
                /*Recuperamos los datos del gasto adicional de la tabla*/
                idConcepto = gastosAdicC.getId().getIdConcepto();
                descrConcepto = gastosAdicC.getDescripcionConcepto().trim();
                importeConcepto = gastosAdicC.getImporte();
                /*Creamos el registro de gastos adicionales*/
                regGastosAdic = ContextoFactory.getInstance().getRegistro(contextoImpresion, ID_PROP_MATRIZ_GASTOS_ADIC);
                /*Asignamos los datos del gasto adicional al registro*/
                regGastosAdic.put(ID_PROP_MATRIZ_GASTOS_ADIC_ID_CONCEPTO, idConcepto);
                regGastosAdic.put(ID_PROP_MATRIZ_GASTOS_ADIC_DESCR_CONCEPTO, descrConcepto);
                regGastosAdic.put(ID_PROP_MATRIZ_GASTOS_ADIC_IMPORTE_CONCEPTO, importeConcepto);
                /*Actualizamos el importe total de la impresión sólo para ABANCA: si es el gasto
				 * "seguro del hogar", id concepto = 6, entonces multiplicamos el gasto por PLAZO/NUM_PERIODO, siendo
				 * PLAZO = AN25710 = ANPMN050710 y NUM_PERIODO = AN440090 = gastosAdicC.getNumPeriodicidad()
				 * EDIT: Finalmente, cuando id concepto = 6:
				 *  importe a sumar al importe total = gasto adicional seguro hogar * (plazo/12)
				 *  siendo (plazo/12) el número de años de vida del préstamo, al estar el plazo en meses.
				 * 
				 * */
                if (esEntornoAbanca) {
                    if (0 == Constantes.CTE_BID_6.compareTo(gastosAdicC.getId().getIdConcepto())) {
                        plazoAnosSolicitud = plazoSolicitud.divide(gastosAdicC.getNumPeriodicidad(), mathContext);
                        importeTotal = importeTotal.add(gastosAdicC.getImporte().multiply(plazoAnosSolicitud, mathContext));
                    } else {
                        importeTotal = importeTotal.add(gastosAdicC.getImporte());
                    }
                }
                /*Añadimos el registro a la lista de registros de datos adicionales*/
                listaMtzGastosAdic.add(regGastosAdic);
            }
            // contextoImpresion.put(ID_PROP_IMPORTE_AMPLIADO, importeTotal);
            matrizGastosAdic = listaMtzGastosAdic.toArray(new IRegistro[listaMtzGastosAdic.size()]);
            /*Asignamos la matriz de gastos adicionales al campo ANPMN103950 del contexto
			 *  de impresión*/
            contextoImpresion.put(ID_PROP_MATRIZ_GASTOS_ADIC, matrizGastosAdic);
        }
    }

    public static void rellenarImpresionConIndicadorParrilla(IContexto[] aCtxtoIntereses, IContexto contextoImprimir, IContexto ctxSolicitud) {
        String indParrilla = null;
        String descripcionInd = null;
        CampanhaC campanha = null;
        BigDecimal codProducto = ctxSolicitud.getBigDecimal(CTE_CTX_SOLIC_COD_PROD);
        BigDecimal codSubproducto = ctxSolicitud.getBigDecimal(CTE_CTX_SOLIC_COD_SUBPROD);
        BigDecimal idTarifa = ctxSolicitud.getBigDecimal(CTE_IF_TARIFA);
        BigDecimal versionGeneral = ctxSolicitud.getBigDecimal(CTE_VERSION_GENERAL);
        BigDecimal nuc = ctxSolicitud.getBigDecimal(CTE_NUC);
        BigDecimal plazo = null;
        BigDecimal orden = BigDecimal.ONE;
        // contexto 52 - > tabla 27
        for (IContexto buscado : aCtxtoIntereses) {
            if ((0 == (BigDecimal.ONE).compareTo(buscado.getBigDecimal(strIntPropOrdenTramo))) && (0 == (BigDecimal.ZERO).compareTo(buscado.getBigDecimal(strIntPropTipoCondicion)))) {
                plazo = buscado.getBigDecimal(strPlazo);
                orden = buscado.getBigDecimal(strIntPropOrdenTramo);
            }
        }
        GestionVersionBackOffice recuperarDatos = new GestionVersionBackOffice();
        boolean noModificado = recuperarDatos.busquedaModificacion("AN270110", nuc, orden);
        if (noModificado) {
            campanha = GestionCampanhas.obtenerCampanha(codProducto, codSubproducto, idTarifa, versionGeneral);
        } else {
            campanha = GestionCampanhas.obtenerCampanhaPorPlazo(codProducto, codSubproducto, idTarifa, plazo);
        }
        if (null != campanha) {
            indParrilla = campanha.getParrillaInd();
            descripcionInd = UtilidadesComun.getDescripcionElementoListaValores(LIST_VALORES_PARRILLA, indParrilla);
        }
        // Rellenar contexto impresion
        contextoImprimir.put(INDICADOR_PARRILLA, indParrilla);
        contextoImprimir.put(DES_IND_PARRILLA, descripcionInd);
    }

    /**
     * Método que extrae las condiciones de interés del tercer tramo.
     */
    private static IContexto obtieneCondicionesInteres(IContexto[] aCtxtoIntereses) {
        IContexto condiciones = null;
        if (null != aCtxtoIntereses && 0 < aCtxtoIntereses.length) {
            for (IContexto c : aCtxtoIntereses) {
                if (0 == c.getBigDecimal(strIntPropTipoCondicion).intValue() && 3 == c.getBigDecimal(strIntPropOrdenTramo).intValue()) {
                    condiciones = c;
                    break;
                }
            }
        }
        return condiciones;
    }

    /**
     * Método que obtiene la valoracion del tramo que se especifica
     */
    private static String obtieneValoracionPorTramo(IContexto[] aCtxtoIntereses, int tramo) {
        String valoracion = Constantes.CADENA_VACIA;
        if (null != aCtxtoIntereses && 0 < aCtxtoIntereses.length) {
            for (IContexto c : aCtxtoIntereses) {
                if (0 == c.getBigDecimal(strIntPropTipoCondicion).intValue() && tramo == c.getBigDecimal(strIntPropOrdenTramo).intValue()) {
                    valoracion = c.getString(strValoracion);
                    break;
                }
            }
        }
        return valoracion;
    }

    private static final String M_N_112206 = "M_N_112206";
}
