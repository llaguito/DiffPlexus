/**
 * Aplicacion de Activo
 * Novacaixagalicia © 2010-2011
 * 
 * 
 */

package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import es.caixagalicia.anpm.prestamos.raroc.servicios.valueobject.ParametroCg32VO;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionCapitalC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.producto.CondicionesInteresC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.tratamientoadelantos.TratamientoAdelantosC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionCondicionesCapital;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionTratamientoAdelantos;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos.ContextoTratamientoAdelantos;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada.contextos.ContextosCondicionesCapitalPrestamo;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.ResultadoCondicionesCapitalVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.ResultadoTratamientoAdelantosVO;
import es.caixagalicia.ifrt.contextosconversion.FromContextCreator;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;

/**
 * @author F001288
 *
 */
public class SistemaAmortizacionAltaSrv  extends ServicioNegocio
{
	private static final String CTE_OFICINA_SOLICITUD = "OFICINA_SOLICITUD";	
	private static final String CTE_NUMERO_SOLICITUD = "NUMERO_SOLICITUD";		
	private static final String CTE_VERSION_SOLICITUD = "VERSION_SOLICITUD";	
	private static final String CTE_ORDEN = "ORDEN";			
	private static final String CTE_NUC_EXPEDIENTE = "NUC_EXPEDIENTE";			
	private static final String CTE_PLAZO = "PLAZO";					
	private static final String CTE_NIVEL_PLAZO = "NIVEL_PLAZO";					
	private static final String CTE_PLAZO_MAX_CUOTA_BLINDADA = "PLAZO_MAX_CUOTA_BLINDADA";
	private static final String CTE_MDA = "MDA";
	private static final String CTE_NIVEL_MDA = "NIVEL_MDA";
	private static final String CTE_RAZON_PROGRESION = "RAZON_PROGRESION";		
	private static final String CTE_TIPO_PAGO_APLAZADO = "TIPO_PAGO_APLAZADO";
	private static final String CTE_IMPORTE_PAGO_APLAZADO = "IMPORTE_PAGO_APLAZADO";
	private static final String CTE_PORCENTAJE_PAGO_APLAZADO = "PORCENTAJE_PAGO_APLAZADO";
	private static final String CTE_PERIODICIDAD_NUM_PERIODO = "PERIODICIDAD_NUM_PERIODO";	
	private static final String CTE_PERIODICIDAD_UNIDAD_PERIODO = "PERIODICIDAD_UNIDAD_PERIODO";
	private static final String CTE_TPERIODICIDAD_TIPO_PERIODO = "PERIODICIDAD_TIPO_PERIODO";
	private static final String CTE_PAGO_UNICO_VTO_FINAL = "PAGO_UNICO_VTO_FINAL";
	private static final String CTE_IND_PERIODO_MIN_LIQUIDACION = "IND_PERIODO_MIN_LIQUIDACION";
	private static final String CTE_NUM_PERIODO_MIN_LIQUIDACION = "NUM_PERIODO_MIN_LIQUIDACION";
	private static final String CTE_UNIDAD_PERIODO_MIN_LIQUIDACION = "UNIDAD_PERIODO_MIN_LIQUIDACION";		
	private static final String CTE_CONDICIONES_PROMOTOR_ADQUIRIENTE = "CONDICIONES_PROMOTOR_ADQUIRIENTE";
	private static final String CTE_IMPORTE_LIBRE = "IMPORTE_LIBRE";
		
	private static final String CTE_TIPO_DIFERIMIENTO = "TIPO_DIFERIMIENTO";		
	private static final String CTE_DIFER_INTERESES_PAGADO = "DIFER_INTERESES_PAGADO";
	private static final String CTE_DIFERIMIENTO_CUOTA_PACTADA = "DIFERIMIENTO_CUOTA_PACTADA";
//	private static final String CTE_TIPO_CARENCIA_CAPITAL = "TIPO_CARENCIA_CAPITAL";
//	private static final String CTE_TIPO_CARENCIA_INTERESO = "TIPO_CARENCIA_INTERES";		
//	private static final String CTE_PERIODO_MAX_CARENCIA = "PERIODO_MAX_CARENCIA";
	private static final String CTE_FECHA_PAGO = "FECHA_PAGO";
	private static final String CTE_FECHA_LIQUIDACION = "FECHA_LIQUIDACION";		
	private static final String CTE_DEVENGO_INTERESES_DISPO = "DEVENGO_INTERESES_DISPO";
	private static final String CTE_DEVENGO_INTERESES_PAGOS = "DEVENGO_INTERESES_PAGOS";
	private static final String CTE_DIA_PAGO = "DIA_PAGO";
	private static final String CTE_MES_PAGO = "MES_PAGO";
		
	private static final String CTE_TRAT1_IMPUTACION = "TRAT1_IMPUTACION";					
	private static final String CTE_TRAT1_PRIORIDAD = "TRAT1_PRIORIDAD";					
	private static final String CTE_TRAT1_TIPO_ADELANTO = "TRAT1_TIPO_ADELANTO";				
	private static final String CTE_TRAT1_FECHAS_ADELANTO = "TRAT1_FECHAS_ADELANTO";
	private static final String CTE_TRAT1_IMPORTE_MIN_ADELANTO = "TRAT1_IMPORTE_MINIMO";
	private static final String CTE_TRAT1_MONEDA_IMPORTE_MIN_ADELANTO = "TRAT1_MONEDA_IMPORTE_MINIMO";
	private static final String CTE_TRAT1_MULTIPLO_IMPORTE_SUP = "TRAT1_MULTIPLO_IMPORTE_SUP";		
	private static final String CTE_TRAT1_CONTROL_CUOTAS_COMPLETAS = "TRAT1_CONTROL_CUOTAS_COMPLETAS";
	private static final String CTE_TRAT1_RECALCULAR_CUOTA = "TRAT1_RECALCULAR_CUOTA";
	private static final String CTE_TRAT1_PERIODO_MIN_SIN_ADELANTOS = "TRAT1_PERIODO_MIN_SIN_ADELANTOS";
	private static final String CTE_TRAT1_PERIODO_MIN_ENTRE_ADELANTOS = "TRAT1_PERIODO_MIN_ENTRE_ADELANTOS";	
	private static final String CTE_TRAT1_OBLIGATORIO_OPTATIVO = "TRAT1_OBLIGATORIO_OPTATIVO";
	
	private static final String CTE_TRAT2_IMPUTACION = "TRAT2_IMPUTACION";					
	private static final String CTE_TRAT2_PRIORIDAD = "TRAT2_PRIORIDAD";					
	private static final String CTE_TRAT2_TIPO_ADELANTO = "TRAT2_TIPO_ADELANTO";				
	private static final String CTE_TRAT2_FECHAS_ADELANTO = "TRAT2_FECHAS_ADELANTO";
	private static final String CTE_TRAT2_IMPORTE_MIN_ADELANTO = "TRAT2_IMPORTE_MINIMO";
	private static final String CTE_TRAT2_MONEDA_IMPORTE_MIN_ADELANTO = "TRAT2_MONEDA_IMPORTE_MINIMO";
	private static final String CTE_TRAT2_MULTIPLO_IMPORTE_SUP = "TRAT2_MULTIPLO_IMPORTE_SUP";		
	private static final String CTE_TRAT2_CONTROL_CUOTAS_COMPLETAS = "TRAT2_CONTROL_CUOTAS_COMPLETAS";
	private static final String CTE_TRAT2_RECALCULAR_CUOTA = "TRAT2_RECALCULAR_CUOTA";
	private static final String CTE_TRAT2_PERIODO_MIN_SIN_ADELANTOS = "TRAT2_PERIODO_MIN_SIN_ADELANTOS";
	private static final String CTE_TRAT2_PERIODO_MIN_ENTRE_ADELANTOS = "TRAT2_PERIODO_MIN_ENTRE_ADELANTOS";	
	private static final String CTE_TRAT2_OBLIGATORIO_OPTATIVO = "TRAT2_OBLIGATORIO_OPTATIVO";
	
	private static final String CTE_TRAT3_TIPO_ADELANTO = "TRAT3_TIPO_ADELANTO";				
	private static final String CTE_TRAT3_PRIORIDAD = "TRAT3_PRIORIDAD";					
	private static final String CTE_TRAT3_IMPUTACION = "TRAT3_IMPUTACION";					
	private static final String CTE_TRAT3_FECHAS_ADELANTO = "TRAT3_FECHAS_ADELANTO";
	private static final String CTE_TRAT3_IMPORTE_MIN_ADELANTO = "TRAT3_IMPORTE_MINIMO";
	private static final String CTE_TRAT3_MONEDA_IMPORTE_MIN_ADELANTO = "TRAT3_MONEDA_IMPORTE_MINIMO";
	private static final String CTE_TRAT3_MULTIPLO_IMPORTE_SUP = "TRAT3_MULTIPLO_IMPORTE_SUP";		
	private static final String CTE_TRAT3_CONTROL_CUOTAS_COMPLETAS = "TRAT3_CONTROL_CUOTAS_COMPLETAS";
	private static final String CTE_TRAT3_RECALCULAR_CUOTA = "TRAT3_RECALCULAR_CUOTA";
	private static final String CTE_TRAT3_PERIODO_MIN_SIN_ADELANTOS = "TRAT3_PERIODO_MIN_SIN_ADELANTOS";
	private static final String CTE_TRAT3_PERIODO_MIN_ENTRE_ADELANTOS = "TRAT3_PERIODO_MIN_ENTRE_ADELANTOS";	
	private static final String CTE_TRAT3_OBLIGATORIO_OPTATIVO = "TRAT3_OBLIGATORIO_OPTATIVO";

	private static final BigDecimal CTE_BIG_DECIMAL_UNO = BigDecimal.ONE;
	private static final String CTE_USUARIO = "USUARIO";
	private static final String CTE_MODIFICACION_BO = "MODIFICACION_BO";
	private static final String CTE_INTERESES_IRREGULARES = "INTERESES_IRREGULARES";
	
	private static final String CTE_IND_CALC_FIN_MES = "IND_CALC_FIN_MES";
	
	private static final Integer CC_MODIF_SOLICITUD_SRV = Integer.valueOf(507);
	private static final Integer CO_MODIF_SOLICITUD_SRV = Integer.valueOf(151);
	/**
	 * Log de la clase.
	 */
	private static final LogHelper LOGGER = LogHelper.getLog(SistemaAmortizacionAltaSrv.class);
	
	
	/**
	 * Constructor sin parametros
	 */
	public SistemaAmortizacionAltaSrv()
	{
		super();
	}
	
	/**
	 * Metodo ejecutar
	 * @param contexto
	 * @param datosEntrada
	 * @return <code>IContexto[]</code>
	 */
	@Override
	public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada)
	{
		// TODO: Falta definir el código de error del servicio.
		final int ERROR_INSERCION_SISTEMA_AMORTIZACION = 10;
		final long lInicio = System.currentTimeMillis();
		
		if(LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO SNANPM170: Alta sistema de amortizacion.");						
		}
		
		contexto.setDiarioElectronico(new DiarioElectronico(
				Constantes.CTE_OPERACION_AC,
				Integer.valueOf(0),
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Constantes.CTE_STRING_EMPTY,
                Constantes.CTE_STRING_EMPTY,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Integer.valueOf(0)));
		
		if(LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Obtenemos los parametros de entrada");
		}
		
		//Se leen los parametros de Condiciones Capital
		final BigDecimal oficinaSolicitud = datosEntrada.getDecimal(CTE_OFICINA_SOLICITUD);
		final BigDecimal numeroSolicitud = datosEntrada.getDecimal(CTE_NUMERO_SOLICITUD);
		final BigDecimal versionSolicitud = datosEntrada.getDecimal(CTE_VERSION_SOLICITUD);
		final BigDecimal orden = datosEntrada.getDecimal(CTE_ORDEN);
		final BigDecimal nucExpediente = datosEntrada.getDecimal(CTE_NUC_EXPEDIENTE);
		
		final BigDecimal intPlazo = datosEntrada.getDecimal(CTE_PLAZO);
		final BigDecimal intNivelPlazo = datosEntrada.getDecimal(CTE_NIVEL_PLAZO);
		final BigDecimal intPlazoMaximoCuotaBlindada = datosEntrada.getDecimal(CTE_PLAZO_MAX_CUOTA_BLINDADA);
		final BigDecimal intModalidadDeAmortizacion = datosEntrada.getDecimal(CTE_MDA);
		final BigDecimal intNivelModalidadDeAmortizacion = datosEntrada.getDecimal(CTE_NIVEL_MDA);
		
		final BigDecimal intRazonProgresion = datosEntrada.getDecimal(CTE_RAZON_PROGRESION);
		
		final BigDecimal intTipoPagoAplazado = datosEntrada.getDecimal(CTE_TIPO_PAGO_APLAZADO);
		final BigDecimal intImportePagoAplazado = datosEntrada.getDecimal(CTE_IMPORTE_PAGO_APLAZADO);		
		final BigDecimal intPorcentajePagoAplazado = datosEntrada.getDecimal(CTE_PORCENTAJE_PAGO_APLAZADO);
		final BigDecimal intPeriodicidadNumPeriodo = datosEntrada.getDecimal(CTE_PERIODICIDAD_NUM_PERIODO);
		final String strPeriodicidadUnidadPeriodo = datosEntrada.getString(CTE_PERIODICIDAD_UNIDAD_PERIODO);
		final BigDecimal intPeriodicidadTipoPeriodo = datosEntrada.getDecimal(CTE_TPERIODICIDAD_TIPO_PERIODO);
		final String strPagoUnicoVencimientoFinal = datosEntrada.getString(CTE_PAGO_UNICO_VTO_FINAL);
		final BigDecimal intIndPeriodoMinimoLiquidacion = datosEntrada.getDecimal(CTE_IND_PERIODO_MIN_LIQUIDACION);
		final BigDecimal intNumPeriodoMinimoLiquidacion = datosEntrada.getDecimal(CTE_NUM_PERIODO_MIN_LIQUIDACION);
		final String strUnidadPeriodoMinimoLiquidacion = datosEntrada.getString(CTE_UNIDAD_PERIODO_MIN_LIQUIDACION);
		final BigDecimal intCondicionesDeAdquirenteOPromotor = datosEntrada.getDecimal(CTE_CONDICIONES_PROMOTOR_ADQUIRIENTE);
		final BigDecimal intImporteLibre = datosEntrada.getDecimal(CTE_IMPORTE_LIBRE);
		
		final BigDecimal bidTipoDiferimiento = datosEntrada.getDecimal(CTE_TIPO_DIFERIMIENTO);	
		final BigDecimal bidDiferInteresPagado = datosEntrada.getDecimal(CTE_DIFER_INTERESES_PAGADO);	
		final BigDecimal bidDiferCuotaPactada = datosEntrada.getDecimal(CTE_DIFERIMIENTO_CUOTA_PACTADA);
//		BigDecimal bidTipoCarenciaCapitalDuranteAmortiz = datosEntrada.getDecimal(CTE_TIPO_CARENCIA_CAPITAL);
//		BigDecimal bidTipoCarenciaInteresDuranteAmortiz = datosEntrada.getDecimal(CTE_TIPO_CARENCIA_INTERESO);
//		BigDecimal bidTipoPeriodoMaximoCarencia = datosEntrada.getDecimal(CTE_PERIODO_MAX_CARENCIA);
		final BigDecimal bidFechaDePago = datosEntrada.getDecimal(CTE_FECHA_PAGO);
		final BigDecimal bidFechaLiquidacion = datosEntrada.getDecimal(CTE_FECHA_LIQUIDACION);
		final BigDecimal bidDevengoInteresesDisposicion = datosEntrada.getDecimal(CTE_DEVENGO_INTERESES_DISPO);
		final BigDecimal bidDevengoInteresesPagos = datosEntrada.getDecimal(CTE_DEVENGO_INTERESES_PAGOS);
		final BigDecimal bidDiaDeterminadoPago = datosEntrada.getDecimal(CTE_DIA_PAGO);
		final BigDecimal bidMesDeterminadoPago = datosEntrada.getDecimal(CTE_MES_PAGO);		
					
		//Ttratamiento Adelantos 1							Posicion36
		final BigDecimal bidImputacionAdelanto_1 = datosEntrada.getDecimal(CTE_TRAT1_IMPUTACION);
		BigDecimal bidPrioridad_1 = null;
		BigDecimal tipoAdelanto_1 = null;
		BigDecimal bidFechasAdelanto_1 = null;
		BigDecimal bidImporteMinAdelanto_1 = null;
		String strMonedaImpMinAdelanto_1 = null;
		BigDecimal bidMultiploImporteSupMin_1 = null;
		BigDecimal bidControlCuotasCompletas_1 = null;
		BigDecimal bidRecalcularCuota_1 = null;
		BigDecimal bidPeriodoIniSinAdelantos_1 = null;
		BigDecimal bidPeriodoMinEntreAdelant_1 = null;
		BigDecimal bidObligatoriooptativo_1 = null;
		if (null != bidImputacionAdelanto_1)
		{
			bidPrioridad_1 = datosEntrada.getDecimal(CTE_TRAT1_PRIORIDAD);
			tipoAdelanto_1 = datosEntrada.getDecimal(CTE_TRAT1_TIPO_ADELANTO);
			bidFechasAdelanto_1 = datosEntrada.getDecimal(CTE_TRAT1_FECHAS_ADELANTO);
			bidImporteMinAdelanto_1 = datosEntrada.getDecimal(CTE_TRAT1_IMPORTE_MIN_ADELANTO);
			strMonedaImpMinAdelanto_1 = datosEntrada.getString(CTE_TRAT1_MONEDA_IMPORTE_MIN_ADELANTO);
			bidMultiploImporteSupMin_1 = datosEntrada.getDecimal(CTE_TRAT1_MULTIPLO_IMPORTE_SUP);		
			bidControlCuotasCompletas_1 = datosEntrada.getDecimal(CTE_TRAT1_CONTROL_CUOTAS_COMPLETAS);
			bidRecalcularCuota_1 = datosEntrada.getDecimal(CTE_TRAT1_RECALCULAR_CUOTA);
			bidPeriodoIniSinAdelantos_1 = datosEntrada.getDecimal(CTE_TRAT1_PERIODO_MIN_SIN_ADELANTOS);
			bidPeriodoMinEntreAdelant_1 = datosEntrada.getDecimal(CTE_TRAT1_PERIODO_MIN_ENTRE_ADELANTOS);
			bidObligatoriooptativo_1 = datosEntrada.getDecimal(CTE_TRAT1_OBLIGATORIO_OPTATIVO);
		}
		
		//Ttratamiento Adelantos 2					Posicion 48
		final BigDecimal bidImputacionAdelanto_2 = datosEntrada.getDecimal(CTE_TRAT2_IMPUTACION);
		BigDecimal bidPrioridad_2 = null;
		BigDecimal tipoAdelanto_2 = null;
		BigDecimal bidFechasAdelanto_2 = null;
		BigDecimal bidImporteMinAdelanto_2 = null;
		String strMonedaImpMinAdelanto_2 = null;
		BigDecimal bidMultiploImporteSupMin_2 = null;
		BigDecimal bidControlCuotasCompletas_2 = null;
		BigDecimal bidRecalcularCuota_2 = null;
		BigDecimal bidPeriodoIniSinAdelantos_2 = null;
		BigDecimal bidPeriodoMinEntreAdelant_2 = null;
		BigDecimal bidObligatoriooptativo_2 = null;
		if (null != bidImputacionAdelanto_2)
		{
			bidPrioridad_2 = datosEntrada.getDecimal(CTE_TRAT2_PRIORIDAD);
			tipoAdelanto_2 = datosEntrada.getDecimal(CTE_TRAT2_TIPO_ADELANTO);
			bidFechasAdelanto_2 = datosEntrada.getDecimal(CTE_TRAT2_FECHAS_ADELANTO);
			bidImporteMinAdelanto_2 = datosEntrada.getDecimal(CTE_TRAT2_IMPORTE_MIN_ADELANTO);
			strMonedaImpMinAdelanto_2 = datosEntrada.getString(CTE_TRAT2_MONEDA_IMPORTE_MIN_ADELANTO);
			bidMultiploImporteSupMin_2 = datosEntrada.getDecimal(CTE_TRAT2_MULTIPLO_IMPORTE_SUP);	
			bidControlCuotasCompletas_2 = datosEntrada.getDecimal(CTE_TRAT2_CONTROL_CUOTAS_COMPLETAS);
			bidRecalcularCuota_2 = datosEntrada.getDecimal(CTE_TRAT2_RECALCULAR_CUOTA);
			bidPeriodoIniSinAdelantos_2 = datosEntrada.getDecimal(CTE_TRAT2_PERIODO_MIN_SIN_ADELANTOS);
			bidPeriodoMinEntreAdelant_2 = datosEntrada.getDecimal(CTE_TRAT2_PERIODO_MIN_ENTRE_ADELANTOS);
			bidObligatoriooptativo_2 = datosEntrada.getDecimal(CTE_TRAT2_OBLIGATORIO_OPTATIVO);
		}
		
		//Ttratamiento Adelantos 3			Posicion 60
		final BigDecimal bidImputacionAdelanto_3 = datosEntrada.getDecimal(CTE_TRAT3_IMPUTACION);
		BigDecimal bidPrioridad_3 = null;
		BigDecimal tipoAdelanto_3 = null;
		BigDecimal bidFechasAdelanto_3 = null;
		BigDecimal bidImporteMinAdelanto_3 = null;
		String strMonedaImpMinAdelanto_3 = null;
		BigDecimal bidMultiploImporteSupMin_3 = null;
		BigDecimal bidControlCuotasCompletas_3 = null;
		BigDecimal bidRecalcularCuota_3 = null;
		BigDecimal bidPeriodoIniSinAdelantos_3 = null;
		BigDecimal bidPeriodoMinEntreAdelant_3 = null;
		BigDecimal bidObligatoriooptativo_3 = null;
		if (null != bidImputacionAdelanto_3)
		{
			bidPrioridad_3 = datosEntrada.getDecimal(CTE_TRAT3_PRIORIDAD);
			tipoAdelanto_3 = datosEntrada.getDecimal(CTE_TRAT3_TIPO_ADELANTO);
			bidFechasAdelanto_3 = datosEntrada.getDecimal(CTE_TRAT3_FECHAS_ADELANTO);
			bidImporteMinAdelanto_3 = datosEntrada.getDecimal(CTE_TRAT3_IMPORTE_MIN_ADELANTO);
			strMonedaImpMinAdelanto_3 = datosEntrada.getString(CTE_TRAT3_MONEDA_IMPORTE_MIN_ADELANTO);
			bidMultiploImporteSupMin_3 = datosEntrada.getDecimal(CTE_TRAT3_MULTIPLO_IMPORTE_SUP);
			bidControlCuotasCompletas_3 = datosEntrada.getDecimal(CTE_TRAT3_CONTROL_CUOTAS_COMPLETAS);
			bidRecalcularCuota_3 = datosEntrada.getDecimal(CTE_TRAT3_RECALCULAR_CUOTA);
			bidPeriodoIniSinAdelantos_3 = datosEntrada.getDecimal(CTE_TRAT3_PERIODO_MIN_SIN_ADELANTOS);
			bidPeriodoMinEntreAdelant_3 = datosEntrada.getDecimal(CTE_TRAT3_PERIODO_MIN_ENTRE_ADELANTOS);
			bidObligatoriooptativo_3 = datosEntrada.getDecimal(CTE_TRAT3_OBLIGATORIO_OPTATIVO);
		}
		
		final String strUsuario = datosEntrada.getString(CTE_USUARIO).trim();
		final BigDecimal esBO = datosEntrada.getDecimal(CTE_MODIFICACION_BO);
		final BigDecimal interesesIrregulares = datosEntrada.getDecimal(CTE_INTERESES_IRREGULARES);
		
		final BigDecimal indCalcFinMes = datosEntrada.getDecimal(CTE_IND_CALC_FIN_MES);
		
		/*
		 * Ahora se van a crear los 3 tipos de objetos a guardar:
		 * DatosSolicitudC			Contexto: ANPM050		Tabla: AN25TB01
		 * CondicionCapitalC		Contexto: ANPM051		Tabla: AN26TB01
		 * TratamientoAdelantosC	Contexto: ANPM054		Tabla: AN29TB01
		 */
		//Se crea una lista para almacenar los 3 tratamientos de adelanto
		List<TratamientoAdelantosC> listaTratamientoAdelantos = new ArrayList<TratamientoAdelantosC>(3);
		
		/* Validacion Periodicidad y Periodo Minimo Liquidacion */
		/* Solo cuando periodicidad capital y el periodo minimo de liquidacion sea periodo minimo*/
		if (StringUtils.equals(strPagoUnicoVencimientoFinal, Constantes.CTE_STR_0) && intIndPeriodoMinimoLiquidacion.intValue() == 1)
		{
			// Si la periodicidad esta en años
			if (StringUtils.equals(strPeriodicidadUnidadPeriodo, Constantes.CTE_STR_A))
			{
				// Si per minimo liquidacion esta en años y el numero de años es mayor que los de la periodicidad -- error
				if (StringUtils.equals(strUnidadPeriodoMinimoLiquidacion, Constantes.CTE_STR_A)
						&& intNumPeriodoMinimoLiquidacion.intValue() >= intPeriodicidadNumPeriodo.intValue())
				{
					ServicioNegocio.rollback(CodigosError.CTE_ERROR_PER_MIN_LIQ, null, null, null);
				}
			}
			// Si la periodicidad esta en meses
			else if (StringUtils.equals(strPeriodicidadUnidadPeriodo, Constantes.CTE_STR_M))
			{
				// Si per minimo liquidacion en años -- error
				if (StringUtils.equals(strUnidadPeriodoMinimoLiquidacion, Constantes.CTE_STR_A))
				{
					ServicioNegocio.rollback(CodigosError.CTE_ERROR_PER_MIN_LIQ, null, null, null);
				}
				// Si per minimo liquidacion tambien en meses y el numero de meses es mayor que los de la periodicidad -- error
				else if (StringUtils.equals(strUnidadPeriodoMinimoLiquidacion, Constantes.CTE_STR_M)
						&& intNumPeriodoMinimoLiquidacion.intValue() >= intPeriodicidadNumPeriodo.intValue())
				{
					ServicioNegocio.rollback(CodigosError.CTE_ERROR_PER_MIN_LIQ, null, null, null);
				}
			}
			// Si la periodicidad esta en dias
			else if (StringUtils.equals(strPeriodicidadUnidadPeriodo, Constantes.CTE_STR_D))
			{
				// Si per minimo liquidacion en años o meses -- error
				if (StringUtils.equals(strUnidadPeriodoMinimoLiquidacion, Constantes.CTE_STR_A)
						|| StringUtils.equals(strUnidadPeriodoMinimoLiquidacion, Constantes.CTE_STR_M))
				{
					ServicioNegocio.rollback(CodigosError.CTE_ERROR_PER_MIN_LIQ, null, null, null);
				}
				// Si per minimo liquidacion tambien en dias y el numero de dias es mayor que los de la periodicidad -- error
				else if (StringUtils.equals(strUnidadPeriodoMinimoLiquidacion, Constantes.CTE_STR_D)
						&& intNumPeriodoMinimoLiquidacion.intValue() >= intPeriodicidadNumPeriodo.intValue())
				{
					ServicioNegocio.rollback(CodigosError.CTE_ERROR_PER_MIN_LIQ, null, null, null);
				}
			}				
		}		
		
		CondicionCapitalC condicionCapital = new CondicionCapitalC(orden.intValue(),
				intPlazo.intValue(), intNivelPlazo.intValue(),
				intPlazoMaximoCuotaBlindada.intValue(),
				intModalidadDeAmortizacion.intValue(),
				intNivelModalidadDeAmortizacion.intValue(),
				intRazonProgresion, intTipoPagoAplazado.intValue(),
				intImportePagoAplazado,
				intPorcentajePagoAplazado,
				intPeriodicidadNumPeriodo.intValue(),
				strPeriodicidadUnidadPeriodo,
				intPeriodicidadTipoPeriodo.intValue(),
				strPagoUnicoVencimientoFinal,
				intIndPeriodoMinimoLiquidacion.intValue(),
				intNumPeriodoMinimoLiquidacion.intValue(),
				strUnidadPeriodoMinimoLiquidacion,
				intCondicionesDeAdquirenteOPromotor.intValue(), 
				intImporteLibre,
				strUsuario);
		
		//Tratamiento adelantos 1
		if (null != bidImputacionAdelanto_1 && null != bidPrioridad_1 && null != tipoAdelanto_1 && 
				null != bidFechasAdelanto_1 && null != bidImporteMinAdelanto_1 && null != strMonedaImpMinAdelanto_1 && 
				null != bidMultiploImporteSupMin_1 && null != bidControlCuotasCompletas_1 && 
				null != bidRecalcularCuota_1 && null != bidPeriodoIniSinAdelantos_1 &&
				null != bidPeriodoMinEntreAdelant_1 && null != bidObligatoriooptativo_1)
		{
			final TratamientoAdelantosC tratamiento1 = new TratamientoAdelantosC(
					bidImputacionAdelanto_1, bidPrioridad_1, tipoAdelanto_1, bidFechasAdelanto_1,
					bidImporteMinAdelanto_1, strMonedaImpMinAdelanto_1, bidMultiploImporteSupMin_1,
					bidControlCuotasCompletas_1, bidRecalcularCuota_1, bidPeriodoIniSinAdelantos_1,
					bidPeriodoMinEntreAdelant_1, bidObligatoriooptativo_1, strUsuario);
			listaTratamientoAdelantos.add(tratamiento1);
		}
		
		//Tratamiento adelantos 2
		if (null != bidImputacionAdelanto_2 && null != bidPrioridad_2 && null != tipoAdelanto_2 && 
				null != bidFechasAdelanto_2 && null != bidImporteMinAdelanto_2 && null != strMonedaImpMinAdelanto_2 && 
				null != bidMultiploImporteSupMin_2 && null != bidControlCuotasCompletas_2 && 
				null != bidRecalcularCuota_2 && null != bidPeriodoIniSinAdelantos_2 &&
				null != bidPeriodoMinEntreAdelant_2 && null != bidObligatoriooptativo_2)
		{
			final TratamientoAdelantosC tratamiento2 = new TratamientoAdelantosC(
					bidImputacionAdelanto_2, bidPrioridad_2, tipoAdelanto_2, bidFechasAdelanto_2,
					bidImporteMinAdelanto_2, strMonedaImpMinAdelanto_2, bidMultiploImporteSupMin_2,
					bidControlCuotasCompletas_2, bidRecalcularCuota_2, bidPeriodoIniSinAdelantos_2,
					bidPeriodoMinEntreAdelant_2, bidObligatoriooptativo_2, strUsuario);
			listaTratamientoAdelantos.add(tratamiento2);
		}
		
		//Tratamiento adelantos 3
		if (null != bidImputacionAdelanto_3 && null != bidPrioridad_3 && null != tipoAdelanto_3 && 
				null != bidFechasAdelanto_3 && null != bidImporteMinAdelanto_3 && null != strMonedaImpMinAdelanto_3 && 
				null != bidMultiploImporteSupMin_3 && null != bidControlCuotasCompletas_3 && 
				null != bidRecalcularCuota_3 && null != bidPeriodoIniSinAdelantos_3 &&
				null != bidPeriodoMinEntreAdelant_3 && null != bidObligatoriooptativo_3 )
		{
			final TratamientoAdelantosC tratamiento3 = new TratamientoAdelantosC(
					bidImputacionAdelanto_3, bidPrioridad_3, tipoAdelanto_3, bidFechasAdelanto_3,
					bidImporteMinAdelanto_3, strMonedaImpMinAdelanto_3, bidMultiploImporteSupMin_3,
					bidControlCuotasCompletas_3, bidRecalcularCuota_3, bidPeriodoIniSinAdelantos_3,
					bidPeriodoMinEntreAdelant_3, bidObligatoriooptativo_3, strUsuario);
			listaTratamientoAdelantos.add(tratamiento3);
		}

		Integer codigoError = 0;
		
		//Se crean los contextos de salida
		IContexto[] contextoSalidaDatosSolicitud = new IContexto[0];
		IContexto[] contextoSalidaCondicionCapital = new IContexto[0];
		IContexto[] contextoSalidaTratamientoAdelantos = new IContexto[0];
		//Si todos los datos se han recibido bien. Intentamos recuperar la solicitud y luego guardamos en la BD
		if ( null != oficinaSolicitud && null != numeroSolicitud && null != versionSolicitud && 
			 null != nucExpediente )
		{
			GestionDatosSolicitud gds = new GestionDatosSolicitud();
	
			// Se intenta obtener la solicitud
			DatosSolicitudC solicitud = gds.obtenerDatosSolicitud(oficinaSolicitud, 
					numeroSolicitud, 
					versionSolicitud, 
					nucExpediente);
			
			// Si la solicitud no existe se crea
			if (null == solicitud)
			{
				solicitud = new DatosSolicitudC();
				solicitud.getDatosSolicitudKey().setNucExpediente(nucExpediente);
				solicitud.getDatosSolicitudKey().setNumSolicitud(numeroSolicitud);
				solicitud.getDatosSolicitudKey().setOficinaSolicitud(oficinaSolicitud);
				solicitud.getDatosSolicitudKey().setVersionSolicitud(versionSolicitud);
				
				gds.altaSolicitudTemporal(solicitud);
			}
			
			// Se añade la solicitud asociada a cada uno de los objetos creados
			condicionCapital.getCondicionesCapitalKey().setSolicitud(solicitud);
			
			//Se actualiza DatosSOlicitudC
			solicitud.setTipoDiferimiento(bidTipoDiferimiento);
			solicitud.setDiferInteresPagado(bidDiferInteresPagado);
			solicitud.setDiferCuotaPactada(bidDiferCuotaPactada);
			/**
			 * Cambio: No se actualiza la carencia de capital en el pasos sitemas amortización
			 * Fecha:Cambio realizado 05/09/2014
			 * Motivo: Estos datos se estan guardando en el paso 2 del proceso guiado y
			 * los machaca con los datos de catalogo
			 * Programador: g000857
			 */
			//solicitud.setTipoCarenciaCapitalDuranteAmortiz(bidTipoCarenciaCapitalDuranteAmortiz);
			//solicitud.setTipoCarenciaInteresDuranteAmortiz(bidTipoCarenciaInteresDuranteAmortiz);
			//solicitud.setTipoPeriodoMaximoCarencia(bidTipoPeriodoMaximoCarencia);
			solicitud.setFechaDePago(bidFechaDePago);
			solicitud.setFechaLiquidacion(bidFechaLiquidacion);
			solicitud.setDevengoInteresesDisposicion(bidDevengoInteresesDisposicion);
			solicitud.setDevengoInteresesPagos(bidDevengoInteresesPagos);
			solicitud.setDiaDeterminadoPago(bidDiaDeterminadoPago);
			solicitud.setMesDeterminadoPago(bidMesDeterminadoPago);
			
			//20160727 En función del campo de entrada "Intereses Irregulares" se setea el tipo de Calculo
			if(null != interesesIrregulares) 
			{
				if(0 == interesesIrregulares.compareTo(BigDecimal.ZERO)) 
				{
					solicitud.setTipoCalculo(" ");
				}
				else if(0 == interesesIrregulares.compareTo(BigDecimal.ONE))
				{
					solicitud.setTipoCalculo("90");
				}
			}
			
			if (null != indCalcFinMes)
				solicitud.setIndicadorCalculoFinMes(indCalcFinMes);
			
			// Para cada tratamientoAdelanto se añade sus solicitud asociada
			for (TratamientoAdelantosC tratamiento : listaTratamientoAdelantos)
			{			
				tratamiento.getId().setSolicitud(solicitud);
			}
			// Para cada condicionCapital se añade sus solicitud asociada
			condicionCapital.getCondicionesCapitalKey().setSolicitud(solicitud);
			
			
			ParametroCg32VO parametroCg32VO = new ParametroCg32VO();
			IDatosEntradaTx entrada = ServicioNegocio.getPrograma(
							ServicioNegocio.getContexto(), 
							Integer.valueOf(100), 
							Integer.valueOf(373));
			entrada.addCampo(0, "C");
			entrada.addCampo(1, "MDA");
			entrada.addCampo(2, new DecimalFormat("0000").format(new BigDecimal(condicionCapital.getIntModalidadDeAmortizacion())));
			
			IContexto [] salida = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), entrada);
			
			if (null != salida && salida.length > 0) {
				FromContextCreator fccre = new FromContextCreator(ParametroCg32VO.class);					
				fccre.loadObject(salida[0], parametroCg32VO);                 	
			}
			
			if (BigDecimal.ZERO.compareTo(parametroCg32VO.getCodigoError()) != 0) {
				ServicioNegocio.rollback(
						0, 
						new String [] {"Error servicio 100-373"}, 
						new String [] {parametroCg32VO.getMensajeError()}, 
						new String [] {"Avise al C.P.D."});
			}
			
			MathContext mc = new MathContext (7, RoundingMode.HALF_UP);
			
			if ("1".equals(parametroCg32VO.getIndicador3()))			
			{
				List<CondicionesInteresC> condicionesInteresC = solicitud.getCondicionesInteres();
				
				if (null != condicionesInteresC)
				{
					if (0 < condicionesInteresC.size())
					{
						BigDecimal interes = condicionesInteresC.get(0).getIntInteres();
						BigDecimal razonProgresion = 
								new BigDecimal("12").divide(new BigDecimal(condicionCapital.getIntPeriodicidadNumPeriodo()), mc);
						razonProgresion = razonProgresion.add(interes.divide(new BigDecimal("100")), mc);
						condicionCapital.setIntRazonProgresion(razonProgresion);
					}
				}
													
			}
			
			// Se guardan en la BD las condiciones de capital
			GestionCondicionesCapital gcc = new GestionCondicionesCapital();
			gcc.deleteCondicionesCapital(oficinaSolicitud, numeroSolicitud, versionSolicitud, nucExpediente);
			ResultadoCondicionesCapitalVO resCondCap = gcc.guardarCondicionesCapital(condicionCapital);
			contextoSalidaCondicionCapital = ContextosCondicionesCapitalPrestamo.rellenarDatosContexto(resCondCap);
			
			// Se llama al servicio de AltaSolicitud para modificar la solicitud con los nuevos valores
			IDatosEntradaTx datosSegundoServicio = 
				getPrograma(contexto, CC_MODIF_SOLICITUD_SRV, SistemaAmortizacionAltaSrv.CO_MODIF_SOLICITUD_SRV); 
			datosSegundoServicio.addCampo("PASO", "4");
			datosSegundoServicio.addCampo("CLAVE", solicitud.toStringClave());
			datosSegundoServicio.addCampo("PASO4", solicitud.toStringPaso4());
			//Nuevo parametro que se pasa al SRV 151 para identificar que es una modificación BO.
			if(null != esBO && CTE_BIG_DECIMAL_UNO.equals(esBO)) {
				datosSegundoServicio.addCampo("BO","S");
			}

			contextoSalidaDatosSolicitud = invocarServicio(contexto, datosSegundoServicio);

			// Se guardan en la BD los tratamientos de adelantos
			GestionTratamientoAdelantos gde = new GestionTratamientoAdelantos();
				
			if (listaTratamientoAdelantos.size() > 0)
			{
				TratamientoAdelantosC tratamientoAdelantos = listaTratamientoAdelantos.get(0);
					
				// Borrar todos los tratamientos de adelanto asociados.
				gde.deleteTratamientoAdelantos(tratamientoAdelantos.getId().getOficinaSolicitud(), 
						tratamientoAdelantos.getId().getNumeroSolicitud(),
						tratamientoAdelantos.getId().getVersionSolicitud(), 
						tratamientoAdelantos.getId().getNucExpediente());
					
				// Insertar el bloque de destinos.
				List<ResultadoTratamientoAdelantosVO> resTratAdelantos = 
					gde.guardarTratamientoAdelantos(listaTratamientoAdelantos);
				contextoSalidaTratamientoAdelantos = 
					ContextoTratamientoAdelantos.rellenarDatosContextoVO(resTratAdelantos, codigoError);
			}
		}
		else
		{
			codigoError = ERROR_INSERCION_SISTEMA_AMORTIZACION;
		}

		// Generar el contexto de salida.		
		final int numContextos = contextoSalidaDatosSolicitud.length + 
				contextoSalidaCondicionCapital.length + 
				contextoSalidaTratamientoAdelantos.length;
		final IContexto[] contextoSalida =  new IContexto[numContextos];  
		contextoSalida[0] = contextoSalidaDatosSolicitud[0];
		contextoSalida[1] = contextoSalidaCondicionCapital[0];
		int indice = 2;
		for (IContexto contex : contextoSalidaTratamientoAdelantos)
		{
			contextoSalida[indice] = contex;
			indice++;
		}
		
		if(LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Se ha añadido/modificado correctamente el sistema de amortizacion");
			LOGGER.debug("FIN SNANPM170: añadidir/modificar el sistema de amortizacion" +
					"Tiempo total: " + (System.currentTimeMillis() - lInicio) + "ms");
		}

		return contextoSalida;		
	}

}
