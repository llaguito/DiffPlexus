/* Codigo de operacion: ANPM_093
 * Transaccion:         ANL4
 * Contexto de salida:  ANPMN093 */

package es.caixagalicia.anpm.prestamos.tramitacion.servicios.fachada;

import java.math.BigDecimal;

import org.apache.commons.lang.StringUtils;
import es.caixagalicia.anpm.prestamos.comun.constantes.CodigosError;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudEng;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionLogTramitacion;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;

/**
 * Servicio que modifica el campo de una tabla
 * *
 **/


public class ActualizarCampoSrv extends ServicioNegocio {
	
	private static final String CTE_ACTUALIZAR = "ANPMN093";
	
	//Datos de entrada del servicio
	private static final String CTE_NUMERO_EXPEDIENTE = "NUC";
	private static final String CTE_VERSION_SOLICITUD = "VERSION_SOL";
	private static final String CTE_CAMPO = "CAMPO";
	private static final String CTE_VALOR = "VALOR";

	//Constante para el log
		private static final LogHelper LOGGER = LogHelper.getLog(ActualizarCampoSrv.class);
	
	@Override
	public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada) {
		
		if (LOGGER.isDebugEnabled()){
			LOGGER.debug("ActualizarCampoSrv.ejecutar() - Inicio"); 
		}
		
		contexto.setDiarioElectronico(new DiarioElectronico(DiarioElectronico.TIPO_ACTUALIZA));
		
		BigDecimal nuc = datosEntrada.getDecimal(CTE_NUMERO_EXPEDIENTE);
		BigDecimal version = datosEntrada.getDecimal(CTE_VERSION_SOLICITUD);
		String campo = datosEntrada.getString(CTE_CAMPO).trim();
		String valor = datosEntrada.getString(CTE_VALOR).trim();
		String error = StringUtils.EMPTY;
		
		DatosSolicitudC datosS = null;
		DatosSolicitudEng solicitudE = new DatosSolicitudEng();
		datosS = solicitudE.obtenerDatosSolicitudPorNucVersion(nuc, version ,true);
		final GestionLogTramitacion gl = new GestionLogTramitacion();
		String valorAnterior = null;
		
		if (null != datosS){ 
			if (campo.equals("AN250320")) {		
				valorAnterior=datosS.getCanal().toString();
				datosS.setCanal(new BigDecimal(valor));
			}
			else if (campo.equals("AN250170")){
				valorAnterior=datosS.getOficinaContable().toString();
				datosS.setOficinaContable(new BigDecimal(valor));
			}
			else if (campo.equals("AN251080")){
				valorAnterior=datosS.getIndicadorAutorizacion().toString();
				datosS.setIndicadorAutorizacion(new BigDecimal(valor));
			}
			else if (campo.equals("AN251010")){
				valorAnterior=datosS.getMedioFormalizacion().toString();
				datosS.setMedioFormalizacion(new BigDecimal(valor));
			}
			else{
				if (LOGGER.isDebugEnabled()){
					LOGGER.debug("Error - No es un campo a modificar válido");
				}
				ServicioNegocio.rollback(
						CodigosError.CTE_ERROR_CAMPO_NOVALIDO,null,null,null);
			}
			
			gl.guardar(
					datosS, 
					campo, 
					campo.substring(0,4).concat("TB01"), 
					valorAnterior,
					contexto.getUsuario());
			
			if (LOGGER.isDebugEnabled()){
				LOGGER.debug("ActualizarCampoSrv.ejecutar() - Fin");
			}
			 
			return guardaContextoSalida(nuc, version, campo.substring(0,4).concat("TB01"), new BigDecimal(valor), error);
		}
		else{
			if (LOGGER.isDebugEnabled()){
				LOGGER.debug("ActualizarCampoSrv - Error al ejecutar");
			}
			
			error = "Error al ejecutar";
			
			return guardaContextoSalida(BigDecimal.ZERO, BigDecimal.ZERO, StringUtils.EMPTY, BigDecimal.ZERO, error);
		}	
	}


	private IContexto[] guardaContextoSalida(BigDecimal nuc, BigDecimal version, String tabla, BigDecimal valor, String error){
		IContexto[] contextoSalida = new IContexto[1];
		contextoSalida[0] = ContextoFactory.getInstance().getContexto(CTE_ACTUALIZAR);
		contextoSalida[0].put("ANPMN093010", nuc);
		contextoSalida[0].put("ANPMN093020", version);
		contextoSalida[0].put("ANPMN093030", tabla);
		contextoSalida[0].put("ANPMN093040", valor);
		contextoSalida[0].put("ANPMN093050", error);
		return contextoSalida;
	}

}
