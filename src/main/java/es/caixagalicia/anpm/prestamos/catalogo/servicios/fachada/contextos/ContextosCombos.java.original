/**
 * Aplicacion de Activo
 * Caixa Galicia © 2009-2010
 * 
 * 
 */
package es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos;

import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;


/**
 * @author Pablo González
 *
 */
public final class ContextosCombos
{

	/*
	 * Contexto para los datos de todos combos
	 */
	private static final String CTE_CBO_ID_CTX = "ANPMN003";
	private static final String CTE_CBO_PROP_NOMBRE_COMBO = "ANPMN003010";
	private static final String CTE_CBO_PROP_ID = "ANPMN003020";
	private static final String CTE_COB_PROP_NOMBRE = "ANPMN003030";
	

	private static final String CTE_TEXTO_CBO_ENTIDAD = "cboEntidad";
	private static final String CTE_TEXTO_CBO_PAIS = "cboPais";
	private static final String CTE_TEXTO_CBO_ESPECIALIDAD = "cboEspecialidad";
	private static final String CTE_TEXTO_CBO_MONEDA = "cboMoneda";
	private static final String CTE_TEXTO_CBO_MODALIDAD_INTERES = "cboModInteres";
	private static final String CTE_TEXTO_CBO_ORDEN_PAGO = "cboOrdenPago";
	private static final String CTE_TEXTO_CBO_LINEA_PRESTAMO = "cboPrestamo";
	private static final String CTE_TEXTO_CBO_LINEA_REVOLVING = "cboRevolving";
	private static final String CTE_TEXTO_CBO_FECHA_PAGO = "cboFechaPago";
	private static final String CTE_TEXTO_CBO_PERIODO_PAGO = "cboPeriodoPago";
	private static final String CTE_TEXTO_CBO_INDICADORES = "cboIndicador";
	
	private static final String CTE_TEXTO_CBO_CUADRO = "cboCuadro";
	private static final String CTE_TEXTO_CBO_AMORTIZACION_IRREGULAR = "cboAmorIrregular";
	private static final String CTE_TEXTO_CBO_INTERES_DEMORA = "cboInteresDemora";
	private static final String CTE_TEXTO_CBO_INTERES_ADELANTO = "cboInteresAdelanto";
	private static final String CTE_TEXTO_CBO_DIAS = "cboDias";
	private static final String CTE_TEXTO_CBO_IND_DEPO = "cboIndDepo";
	private static final String CTE_TEXTO_CBO_FUNC_DEPO = "cboFuncDepo";
	private static final String CTE_TEXTO_CBO_BOOLEAN = "cboBoolean";
	private static final String CTE_TEXTO_CBO_COND_DESEM = "cboCondDepo";
	private static final String CTE_TEXTO_CBO_TIPO_DIFERIMIENTO = "cboTipoDifer";


	
	public ContextosCombos()
	{		
	}

	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los tipos de entidades
	 */
	public static IContexto[] rellenarDatosComboEntidad()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[1];	

	
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_ENTIDAD);
		datos.put(CTE_CBO_PROP_ID, 
				new String("091"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Caixa Galicia");
			
		salida[0] = datos;			

        return salida;
    }
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los paises
	 */
	public static IContexto[] rellenarDatosComboPais()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[1];
		
	
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_PAIS);
		datos.put(CTE_CBO_PROP_ID, 
				new String("017"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"España");
			
		salida[0] = datos;			

        return salida;
    }	

	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los tipos de especialidades
	 */
	public static IContexto[] rellenarDatosEspecialidad()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[4];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_ESPECIALIDAD);
			
		datos.put(CTE_CBO_PROP_ID, 
				"S");
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Sin especialidad");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
		"V");

		datos.put(CTE_COB_PROP_NOMBRE, 
		"Vivienda");
	
		salida[1] = datos;
		
		datos.put(CTE_CBO_PROP_ID, 
		"D");

		datos.put(CTE_COB_PROP_NOMBRE, 
		"Divisa");
	
		salida[2] = datos;
		
		datos.put(CTE_CBO_PROP_ID, 
		"M");

		datos.put(CTE_COB_PROP_NOMBRE, 
		"Mediación");
	
		salida[3] = datos;

        return salida;
    }		
	

	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene las monedas
	 */
	public static IContexto[] rellenarDatosMoneda()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[1];			
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_MONEDA);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"EUR");
			
		salida[0] = datos;			

        return salida;
    }
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene las modalidades de interés
	 */
	public static IContexto[] rellenarDatosModalidadInteres()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];	
				
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_MODALIDAD_INTERES);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Intereses sobre saldos dispuesto");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Intereses pagados al inicio");
			
		salida[1] = datos;			

        return salida;
    }
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene las ordenes de pago
	 */
	public static IContexto[] rellenarOrdenPagos()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[3];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_ORDEN_PAGO);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Concepto - Antiguedad");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Antiguedad, Concepto");
			
		salida[1] = datos;		
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Antiguedad, Concepto, Comisiones");
			
		salida[2] = datos;			

        return salida;
    }

	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los tipos de linea de préstamo
	 */
	public static IContexto[] rellenarDatosLineaPrestamo()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_LINEA_PRESTAMO);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("S"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Si");
			
		salida[0] = datos;
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("N"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"No");
			
		salida[1] = datos;	

		return salida;
    }
	
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los tipos de líne de revolving
	 */
	public static IContexto[] rellenarDatosLineaRevolving()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];			
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_LINEA_REVOLVING);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("S"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Sí");
			
		salida[0] = datos;
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("N"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"No");
			
		salida[1] = datos;	

		
        return salida;
    }	
	

	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los tipos de fecha de pago
	 */	
	public static IContexto[] rellenarFechaPago()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[4];	
				
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_FECHA_PAGO);
		
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Primer día del periodo siguiente");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Día equivalente");
			
		salida[1] = datos;		
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Día o mes concreto");
			
		salida[2] = datos;
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("3"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Último día del periodo");
			
		salida[3] = datos;	

        return salida;
    }
	

	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los días incluidos en pago
	 */	
	public static IContexto[] rellenarDiasIncluidos()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];	
				
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_PERIODO_PAGO);

			
		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Incluye el día de la formalización/disposición y excluye el día de pago");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Excluye el día de formalización/disposición e incluye el día de pago");
			
		salida[1] = datos;		
		

        return salida;
    }
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los indicadores posibles
	 */	
		
	
	public static IContexto[] rellenarIndicadores()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[5];	
		
	
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_INDICADORES);

		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				" ");
			
		salida[0] = datos;			
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"1");
			
		salida[1] = datos;	

		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"2");
			
		salida[2] = datos;		
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("3"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"3");
			
		salida[3] = datos;
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("4"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"4");
			
		salida[4] = datos;
		

        return salida;
    }
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los valores posibles del cuadro
	 * del cuadro de amortización
	 */
	public static IContexto[] rellenarCuadroAmortizacion()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_CUADRO);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Sobre el principal");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Sobre la cantidad dispuesta");
			
		salida[1] = datos;		
		
		
        return salida;
    }

	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los valores posibles para
	 * permitir o no la amortización irregular.
	 */
	public static IContexto[] rellenarAmortizacionIrregular()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_AMORTIZACION_IRREGULAR);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"No se permite");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Se permite");
			
		salida[1] = datos;		
		
		
        return salida;
    }
	
	
	
	
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los valores de un combo de tipo
	 * cierto/falso
	 */
	public static IContexto[] rellenarBoolean()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_BOOLEAN);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("S"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Si");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("N"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"No");
			
		salida[1] = datos;		
		
		
        return salida;
    }
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los valores posibles del interés 
	 * de demora.
	 */
	public static IContexto[] rellenarInteresDemora()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_INTERES_DEMORA);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"En la próxima liquidación");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Con el capital adeudado");
			
		salida[1] = datos;		
		
		
        return salida;
    }
	
	/**
	 * 
	 * @return <code>IContexto[]</code> que contiene los valores posibles del interés 
	 * de adelanto.
	 */
	public static IContexto[] rellenarInteresAdelanto()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[2];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_INTERES_ADELANTO);
			
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"En la próxima liquidación");
			
		salida[0] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Al mismo adelanto");
			
		salida[1] = datos;		
		
		
        return salida;
    }

	 /** 
	 * @return <code>IContexto[]</code> que contiene los valores posibles de los
	 * días para el pago
	 */
	public static IContexto[] rellenarDias()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[3];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_DIAS);

		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"No aplica");
			
		salida[0] = datos;			
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Día anterior");
			
		salida[1] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Día siguiente");
			
		salida[1] = datos;		
		
		
        return salida;
    }	

	
	 /** 
	 * @return <code>IContexto[]</code> que contiene los valores posibles para
	 * el indicador del depósito
	 */
	public static IContexto[] rellenarIndicadorDepo()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[4];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_IND_DEPO);

		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Sin depósito");
			
		salida[0] = datos;			
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Puede tener depósito");
			
		salida[1] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Puede modificar depósito con autorización");
			
		salida[2] = datos;		
		

		datos.put(CTE_CBO_PROP_ID, 
				new String("3"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Puede modificar depósito sin autorización");
			
		salida[2] = datos;		
		
        return salida;
        
	}
	
	
	 /** 
	 * @return <code>IContexto[]</code> que contiene los valores posibles para
	 * el funcionamiento del deposito.
	 */
	public static IContexto[] rellenarFuncionamientoDepo()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[4];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_FUNC_DEPO);

		
		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				" ");
			
		salida[0] = datos;		
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"% especificado");
			
		salida[1] = datos;			
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"principal - gastos");
			
		salida[2] = datos;	
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("3"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Dependiente estado obra");
			
		salida[3] = datos;		
		
		
        return salida;
    }		

	
	
	 /** 
	 * @return <code>IContexto[]</code> que contiene los valores posibles para
	 * las condiciones de desembolso.
	 */
	public static IContexto[] rellenarCondicionesDesembolso()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[5];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_COND_DESEM);

		
		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				" ");
			
		salida[0] = datos;			
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"libre");
			
		salida[1] = datos;			
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Promotor/autopromotor");
			
		salida[2] = datos;	
				

		datos.put(CTE_CBO_PROP_ID, 
				new String("3"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Moratorio ICO");
			
		salida[3] = datos;				

		datos.put(CTE_CBO_PROP_ID, 
				new String("4"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Presentación de facturas");
			
		salida[4] = datos;		
		
		
       return salida;
   }
	

	 /** 
	 * @return <code>IContexto[]</code> que contiene los valores posibles para
	 * los tipos de diferimiento.
	 */
	public static IContexto[] rellenarTipoDeDiferimiento()
	{
		IContexto[] salida = null;

		// no ha existido error
		salida = new IContexto[4];	
		
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_CBO_ID_CTX);
		
		datos.put(CTE_CBO_PROP_NOMBRE_COMBO, CTE_TEXTO_CBO_TIPO_DIFERIMIENTO);

		datos.put(CTE_CBO_PROP_ID, 
				new String("0"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"No tiene diferimiento");
			
		salida[0] = datos;			
		
		datos.put(CTE_CBO_PROP_ID, 
				new String("1"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Tiene diferimiento total");
			
		salida[1] = datos;	
				

		datos.put(CTE_CBO_PROP_ID, 
				new String("2"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Tiene diferimiento parcial");
			
		salida[2] = datos;				

		datos.put(CTE_CBO_PROP_ID, 
				new String("3"));
		
		datos.put(CTE_COB_PROP_NOMBRE, 
				"Tiene diferimiento sin capitalización");
			
		salida[3] = datos;		
		
		
       return salida;
   }		
	
	
}
