/**
 * Aplicacion de Activo
 * Caixa Galicia © 2009-2010
 */
package es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.parametro.ParametroC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.producto.ProductoC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionParametro;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionProducto;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.ifrt.camposdinamicos.GestorCamposDinamicos;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosProducto;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.ifrt.mensajes.Mensaje;

/**
 * Servicio para la gestion de productos genéricos
 * que forman parte del activo de la caja.
 *
 * @author Pablo González
 */
public class ProductoSrv extends ServicioNegocio {

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ID_PRODUCTO = 0;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_ID_VERSION = 1;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_DESCRIPCION = 2;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_FECHA_PAGO = 3;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_FECHA_PAGO = 4;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_DIA_PAGO = 5;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_IND_DIA_PAGO = 6;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_MES_PAGO = 7;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_IND_MES_PAGO = 8;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FECHA_LIQUIDACION = 9;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_FECHA_LIQUIDACION = 10;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ESPECIALIDAD = 11;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_MDI = 12;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_MDI = 13;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_IND_LINEA_PRESTAMO = 14;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_IND_LINEA_RESOLVING = 15;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ENTIDAD = 16;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_PAIS = 17;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ORDEN_IMPUTACION = 18;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_ORDEN_IMPUTACION = 19;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_MONEDA = 20;

    // private static final int CTE_POSICION_TIRA_USUARIO = 21; // OBLIGATORIO
    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_FECHA_VIGENCIA_DESDE = 22;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FECHA_VIGENCIA_HASTA = 23;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_DEVENGA_INTERES_DISPOSICION = 24;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_DEVENGA_INTERES_DISPOSICION = 25;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_DEVENGA_INTERES_PAGO = 26;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_DEVENGA_INTERES_PAGO = 27;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_IND_CALCULO_FIN_DE_MES = 28;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_DIA_SALTO = 29;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FRMA_PGO_CRRTJE = 30;

    /**
     * Log de la clase.
     */
    private static final LogHelper LOGGER = LogHelper.getLog(ProductoSrv.class);

    /**
     *  Constructor sin parametros.
     */
    public ProductoSrv() {
        super();
    }

    /**
     * Ejecuta la logica de negocio del servicio
     *
     * @see es.caixagalicia.ifrt.core.ServicioNegocio
     * 		#ejecutar(
     * 			es.caixagalicia.ifrt.core.IContextoEjecucion,
     * 			es.caixagalicia.ifrt.core.IDatosEntradaTx)
     * @param contexto contexto de ejecucion
     * @param datosEntrada datos de entrada
     * @return <code>IContexto[]</code>
     */
    @Override
    public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO SNANPM001: Gestion de productos (alta y modificación)");
        }
        contexto.setDiarioElectronico(new DiarioElectronico(Constantes.CTE_OPERACION_AC, Integer.valueOf(0), BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, Constantes.CTE_STRING_EMPTY, Constantes.CTE_STRING_EMPTY, BigDecimal.ZERO, BigDecimal.ZERO, Integer.valueOf(0)));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Obtenemos los parametros de entrada");
        }
        BigDecimal bidIdProducto = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_PRODUCTO);
        BigDecimal bidIdVersion = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_VERSION);
        String strDescripcion = datosEntrada.getString(CTE_POSICION_TIRA_DESCRIPCION);
        BigDecimal bidFechaPago = datosEntrada.getDecimal(CTE_POSICION_TIRA_FECHA_PAGO);
        String strIndFechaPago = datosEntrada.getString(CTE_POSICION_TIRA_IND_FECHA_PAGO);
        BigDecimal bidDiaPago = datosEntrada.getDecimal(CTE_POSICION_TIRA_DIA_PAGO);
        String strIndDiaPago = datosEntrada.getString(CTE_POSICION_TIRA_IND_DIA_PAGO);
        BigDecimal bidMesPago = datosEntrada.getDecimal(CTE_POSICION_TIRA_MES_PAGO);
        String strIndMesPago = datosEntrada.getString(CTE_POSICION_TIRA_IND_MES_PAGO);
        BigDecimal bidFechaLiquidacion = datosEntrada.getDecimal(CTE_POSICION_TIRA_FECHA_LIQUIDACION);
        String strIndFechaLiquidacion = datosEntrada.getString(CTE_POSICION_TIRA_IND_FECHA_LIQUIDACION);
        String strEspecialidad = datosEntrada.getString(CTE_POSICION_TIRA_ESPECIALIDAD);
        BigDecimal bidModalidad = datosEntrada.getDecimal(CTE_POSICION_TIRA_MDI);
        String strIndModalidad = datosEntrada.getString(CTE_POSICION_TIRA_IND_MDI);
        BigDecimal bidIndLineaPrestamo = datosEntrada.getDecimal(CTE_POSICION_TIRA_IND_LINEA_PRESTAMO);
        BigDecimal bidIndLineaResolving = datosEntrada.getDecimal(CTE_POSICION_TIRA_IND_LINEA_RESOLVING);
        String strEntidad = datosEntrada.getString(CTE_POSICION_TIRA_ENTIDAD);
        BigDecimal bidPais = datosEntrada.getDecimal(CTE_POSICION_TIRA_PAIS);
        BigDecimal bidOrdenImpu = datosEntrada.getDecimal(CTE_POSICION_TIRA_ORDEN_IMPUTACION);
        String strIndOrdenImpu = datosEntrada.getString(CTE_POSICION_TIRA_IND_ORDEN_IMPUTACION);
        String strMoneda = datosEntrada.getString(CTE_POSICION_TIRA_MONEDA);
        BigDecimal bidDevengaInteresDispo = datosEntrada.getDecimal(CTE_POSICION_TIRA_DEVENGA_INTERES_DISPOSICION);
        String strIndDevengaInteresDispo = datosEntrada.getString(CTE_POSICION_TIRA_IND_DEVENGA_INTERES_DISPOSICION);
        BigDecimal bidDevengaInteresPago = datosEntrada.getDecimal(CTE_POSICION_TIRA_DEVENGA_INTERES_PAGO);
        String strIndDevengaInteresPago = datosEntrada.getString(CTE_POSICION_TIRA_IND_DEVENGA_INTERES_PAGO);
        BigDecimal bidIndCalculoFinDeMes = datosEntrada.getDecimal(CTE_POSICION_TIRA_IND_CALCULO_FIN_DE_MES);
        BigDecimal bidDiaSalto = datosEntrada.getDecimal(CTE_POSICION_TIRA_DIA_SALTO);
        BigDecimal bidFrmaPgoCrrtje = datosEntrada.getDecimal(CTE_POSICION_TIRA_FRMA_PGO_CRRTJE);
        // el usuario será el que lo dio de alta en caso de ser un alta
        // o el que está realizando la modificación en caso de tratarse de una modificación
        // datosEntrada.getString(CTE_POSICION_TIRA_USUARIO);
        String strUsuario = contexto.getUsuario();
        String strFechaDesdeVigen = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_VIGENCIA_DESDE);
        String strFechaHastaVigen = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_VIGENCIA_HASTA);
        Integer codError = new Integer(0);
        ArrayList<Object> resultado;
        ProductoC producto = null;
        GestionProducto gp = new GestionProducto();
        Date dateFechaDesde = new Date(DateUtils.parseDate(strFechaDesdeVigen, DateUtils.FORMATO_FECHA_CORTO).getTime());
        Date dateFechaHasta;
        if (Utilidades.isBlankOrNull(strFechaHastaVigen)) {
            dateFechaHasta = null;
        } else {
            dateFechaHasta = new Date(DateUtils.parseDate(strFechaHastaVigen, DateUtils.FORMATO_FECHA_CORTO).getTime());
            if (DateUtils.getSoloFecha(dateFechaDesde).after(DateUtils.getSoloFecha(dateFechaHasta))) {
                ServicioNegocio.rollback(CodigosError.FECHA_HASTA_ANTERIOR_DESDE.intValue(), null, null, null);
            }
        }
        Integer intFechaLiquidacion = null;
        Integer intDevengaInteresDisposicion = null;
        Integer intDevengaInteresPago = null;
        if (bidFechaLiquidacion != null) {
            intFechaLiquidacion = new Integer(bidFechaLiquidacion.intValue());
        }
        if (bidDevengaInteresDispo != null) {
            intDevengaInteresDisposicion = new Integer(bidDevengaInteresDispo.intValue());
        }
        if (bidDevengaInteresPago != null) {
            intDevengaInteresPago = new Integer(bidDevengaInteresPago.intValue());
        }
        // si nos ha llegado un id de producto quiere decir que lo que se
        // está intentando hacer es una modificación.
        Integer intDiaPagoAux;
        Integer intMesPagoAux;
        if (null == bidDiaPago)
            intDiaPagoAux = null;
        else
            intDiaPagoAux = new Integer(bidDiaPago.intValue());
        if (null == bidMesPago)
            intMesPagoAux = null;
        else
            intMesPagoAux = new Integer(bidMesPago.intValue());
        Integer intIndCalculoFinDeMes;
        Integer intDiaSalto;
        if (null == bidIndCalculoFinDeMes)
            intIndCalculoFinDeMes = null;
        else
            intIndCalculoFinDeMes = new Integer(bidIndCalculoFinDeMes.intValue());
        if (null == bidDiaSalto)
            intDiaSalto = null;
        else
            intDiaSalto = new Integer(bidDiaSalto.intValue());
        Integer intFrmaPgoCrrtje = null;
        if (null != bidFrmaPgoCrrtje)
            intFrmaPgoCrrtje = new Integer(bidFrmaPgoCrrtje.intValue());
        if (Utilidades.isBlankOrNull(bidIdVersion)) {
            // miramos que la fecha desde se igual o posterior a hoy
            if (DateUtils.getSoloFecha(DateUtils.dateNow(null)).after(DateUtils.getSoloFecha(dateFechaDesde))) {
                ServicioNegocio.rollback(CodigosError.FECHA_DESDE_PASADA.intValue(), null, null, null);
            }
            resultado = gp.altaProducto(new Integer(bidIdProducto.intValue()), strDescripcion, new Integer(bidFechaPago.intValue()), strIndFechaPago, intDiaPagoAux, strIndDiaPago, intMesPagoAux, strIndMesPago, intFechaLiquidacion, strIndFechaLiquidacion, strEspecialidad, new Integer(bidModalidad.intValue()), strIndModalidad, strEntidad, new Integer(bidPais.intValue()), new Integer(bidOrdenImpu.intValue()), strIndOrdenImpu, strMoneda, strUsuario, dateFechaDesde, dateFechaHasta, bidIndLineaPrestamo, bidIndLineaResolving, intDevengaInteresDisposicion, strIndDevengaInteresDispo, intDevengaInteresPago, strIndDevengaInteresPago, intIndCalculoFinDeMes, intDiaSalto, intFrmaPgoCrrtje);
            producto = (ProductoC) resultado.get(Constantes.CTE_CERO.intValue());
            codError = ((Integer) resultado.get(Constantes.CTE_UNO.intValue()));
        } else {
            producto = GestionProducto.obtenerProductoVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdVersion.intValue()));
            if (null != producto) {
                intDiaPagoAux = null;
                String strIndDiaPagoAux = null;
                intMesPagoAux = null;
                String strIndMesPagoAux = null;
                Integer intIndLineaPrestamoAux = null;
                Integer intIndLineaResolvingAux = null;
                Integer intIndCalculoFinDeMesAux = null;
                Integer intDiaSaltoAux = null;
                if (null != bidDiaPago) {
                    intDiaPagoAux = new Integer(bidDiaPago.intValue());
                }
                if (null != strIndDiaPago) {
                    strIndDiaPagoAux = strIndDiaPago;
                }
                if (null != bidMesPago) {
                    intMesPagoAux = new Integer(bidMesPago.intValue());
                }
                if (null != strIndMesPago) {
                    strIndMesPagoAux = strIndMesPago;
                }
                if (null != bidIndLineaPrestamo) {
                    intIndLineaPrestamoAux = new Integer(bidIndLineaPrestamo.intValue());
                }
                if (null != bidIndLineaResolving) {
                    intIndLineaResolvingAux = new Integer(bidIndLineaResolving.intValue());
                }
                if (null != bidIndCalculoFinDeMes) {
                    intIndCalculoFinDeMesAux = new Integer(bidIndCalculoFinDeMes.intValue());
                }
                if (null != bidDiaSalto) {
                    intDiaSaltoAux = new Integer(bidDiaSalto.intValue());
                }
                // debemos modificar todos sus valores,
                resultado = gp.modificarProducto(producto, strDescripcion, new Integer(bidFechaPago.intValue()), strIndFechaPago, intDiaPagoAux, strIndDiaPagoAux, intMesPagoAux, strIndMesPagoAux, strEspecialidad, new Integer(bidModalidad.intValue()), strIndModalidad, strEntidad, new Integer(bidPais.intValue()), new Integer(bidOrdenImpu.intValue()), strIndOrdenImpu, strMoneda, strUsuario, dateFechaDesde, dateFechaHasta, intIndLineaPrestamoAux, intIndLineaResolvingAux, intFechaLiquidacion, strIndFechaLiquidacion, intDevengaInteresDisposicion, strIndDevengaInteresDispo, intDevengaInteresPago, strIndDevengaInteresPago, intIndCalculoFinDeMesAux, intDiaSaltoAux, intFrmaPgoCrrtje);
                producto = (ProductoC) resultado.get(Constantes.CTE_CERO.intValue());
                codError = ((Integer) resultado.get(Constantes.CTE_UNO.intValue()));
            }
        }
        // DEBEMOS GESTIONAR LOS CAMPOS DINÁMICOS
        if (null != producto) {
            // para obtener los campos dinámicos / flexibles
            String identidad = bidIdProducto + "";
            boolean encontrado = false;
            List<ParametroC> datosAdicionales = GestionParametro.obtenerCamposDinProducto();
            int size = datosAdicionales.size();
            for (int i = 0; i < size; i++) {
                String grupo = datosAdicionales.get(i).getStrValor().trim();
                if (identidad.equals(grupo)) {
                    encontrado = true;
                }
            }
            if (encontrado) {
                if (LOGGER.isDebugEnabled()) {
                    LOGGER.debug("-----------------GESTIONAMOS CAMPOS DINAMICOS----------------------");
                }
                GestorCamposDinamicos gestorCD = new GestorCamposDinamicos(contexto);
                // se elimina por si lo hubiera
                gestorCD.eliminar(identidad);
                gestorCD.almacenar(datosEntrada, identidad, identidad);
            }
        }
        // debemos generar el contexto de salida
        // tras producir el alta o la modificación (en ambos casos tendremos un productoC con sus datos).
        final IContexto[] contextoSalida = ContextosProducto.rellenarDatosContexto(producto, codError);
        // Envio correo
        String asunto = new Mensaje(ServicioNegocio.getContexto(), ALTA_MODIFICACI_N_PRODUCTO_901953888).toString();
        StringBuilder mensaje = new StringBuilder();
        mensaje.append(new Mensaje(ServicioNegocio.getContexto(), PRODUCTO_ID_1026835391).toString());
        mensaje.append(producto.getProductoKey().getIdProducto().toString());
        mensaje.append(new Mensaje(ServicioNegocio.getContexto(), _ENTIDAD_131740901).toString());
        mensaje.append(producto.getEntidad());
        mensaje.append(new Mensaje(ServicioNegocio.getContexto(), _DADO_ALTA_O_MODIFICADO_CORRECTAMENTE_925413738).toString());
        UtilidadesComun.enviarCorreoGeneral(mensaje.toString(), asunto);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Se ha dado de alta/modificado el producto corerctamente");
            LOGGER.debug("FIN SNANPM001: Alta/modificación producto. ");
        }
        return contextoSalida;
    }

    private static final String _DADO_ALTA_O_MODIFICADO_CORRECTAMENTE_925413738 = "_DADO_ALTA_O_MODIFICADO_CORRECTAMENTE_925413738";

    private static final String _ENTIDAD_131740901 = "_ENTIDAD_131740901";

    private static final String ALTA_MODIFICACI_N_PRODUCTO_901953888 = "ALTA_MODIFICACI_N_PRODUCTO_901953888";

    private static final String PRODUCTO_ID_1026835391 = "PRODUCTO_ID_1026835391";
}
