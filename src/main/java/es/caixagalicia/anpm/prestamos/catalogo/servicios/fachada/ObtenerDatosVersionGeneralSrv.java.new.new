/**
 * Aplicacion de Activo
 * Caixa Galicia © 2009-2010
 */
package es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada;

import java.math.BigDecimal;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.adelantos.AdelantoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.clausulas.ParametrosC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.comisiones.ComisionesC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.condCapital.CondicionesCapitalC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.condCapital.ModalidadAmortizacionC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.datEconomicos.DatEcoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.interes.InteresC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.interes.RedondeoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.interes.TechosSuelosDifeC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.interes.TipoRefC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.producto.ProductoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.producto.SubProductoC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.tarifa.TarifaC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionEng;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.version.VersionesC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionAdelanto;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionClausulasRestringuidas;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionComisiones;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionConCapital;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionDatEco;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionInteres;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionModalidadesAmortizacion;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionProducto;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionRedondeo;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionSubProducto;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionTarifa;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionTechosSuelosDife;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionTipoRef;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionVersiones;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextoTarifas;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosComisiones;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosCondicionesCapital;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosDatEco;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosInteres;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosModalidadAmortizacion;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosProducto;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosRedondeo;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosSubProducto;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosTechosSuelos;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosTipoRef;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosTratamientoAdelantos;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.TarifaVO;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.colectivos.persistencia.colectivo.ColectivoC;
import es.caixagalicia.anpm.prestamos.colectivos.persistencia.colectivo.ColectivosLineasColecC;
import es.caixagalicia.anpm.prestamos.colectivos.servicios.aplicacion.GestionColecLineasColectivos;
import es.caixagalicia.anpm.prestamos.colectivos.servicios.aplicacion.GestionColectivo;
import es.caixagalicia.anpm.prestamos.colectivos.servicios.fachada.contextos.ContextosColectivo;
import es.caixagalicia.anpm.prestamos.comun.constantes.ConstantesComun;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionInformacionRiesgoOrigen;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionNovSinModalidad;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionRiesgoOrigen;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.InformacionRiesgoOrigenVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.InteresROVO;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.UtilidadesTramitacion;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.util.Helper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

public class ObtenerDatosVersionGeneralSrv extends ServicioNegocio {

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_ID_PRODUCTO = 0;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_ID_SUBPRODUCTO = 1;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_COLECTIVO = 2;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ID_VERSION_GENERAL = 3;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_PASO = 4;

    // OPCIONAL
    private static final String CTE_ENTRADA_ID_TARIFA = "ID_TARIFA";

    // OPCIONAL
    private static final String CTE_ENTRADA_PLAZO = "PLAZO";

    // OPCIONAL
    private static final String CTE_ENTRADA_ORIGEN = "ORIGEN";

    private static final String CTE_ENTRADA_NUC = "NUC";

    // OPCIONAL
    private static final String CTE_ENTRADA_CODIGO_COLECTIVO = "COD_COLECTIVO";

    // OPCIONAL
    private static final String CTE_ENTRADA_IMPORTE = "IMPORTE";

    private static final String CTE_ENTRADA_NOVACION_SIN_MODALIDAD = "NOVACION_SIN_MODALIDAD";

    private static final String CTE_DESC_CENTRO = "N";

    private static final String CTE_STR_MARCA_TARIFA = "ANPMN002670";

    // Contexto comisiones ANPMN005
    private static final String CTX_ID_TIPO_COMISION = "ANPMN005060";

    private static final String CTX_PORCENTAJE_COMISION_ESTANDAR = "ANPMN005080";

    private static final String CTX_IND_PORCENTAJE_COMISION = "ANPMN005110";

    private static final String CTX_PORCENTAJE_ADELANTO = "ANPMN005120";

    private static final String CTX_IND_PORCENTAJE_ADELANTO = "ANPMN005150";

    private static final String CTX_IMPORTE_MIN_ESTANDAR = "ANPMN005160";

    private static final String CTX_IND_IMPORTE_MINIMO = "ANPMN005190";

    private static final String CTX_IND_FORMA_PAGO = "ANPMN005250";

    /**
     * Log de la clase.
     */
    private static final LogHelper LOGGER = LogHelper.getLog(ObtenerDatosVersionGeneralSrv.class);

    /**
     *  Constructor sin parametros.
     */
    public ObtenerDatosVersionGeneralSrv() {
        super();
    }

    // Datos de salida del servicio ANPM_480 para los métodos del servicio
    // private BigDecimal codigoError = null;
    // private String textoError = null;
    // ANPMN010060
    private BigDecimal razonOrigen = null;

    // ANPMN014370
    private BigDecimal demorasCapital = null;

    // ANPMN014410
    private BigDecimal demorasInteres = null;

    // ANPMN015360
    private BigDecimal minimoVariacion = null;

    // ANPMN005
    private BigDecimal comisionAdelantos = null;

    // ANPMN005080
    private BigDecimal comisionCancelacion = null;

    // ANPMN005160
    private BigDecimal topeAdelantoAnualSobreSaldo = null;

    // ANPMN005120
    private BigDecimal comisionAdelantosSuperioresAPorcentajeSaldo = null;

    // ANPMN013200
    private BigDecimal plazoRiesgoOrigen = null;

    // ANPMN013160
    private BigDecimal importeRiesgoOrigen = null;

    private BigDecimal comisionGastosEstudio = null;

    private BigDecimal minimoGastosEstudio = null;

    private BigDecimal comisionApertura = null;

    private BigDecimal minimoComisionApertura = null;

    private BigDecimal indPeriodoLiquidacionInteres = null;

    private BigDecimal indPeriodoLiquidacionCapital = null;

    private BigDecimal valorInversion = null;

    // private BigDecimal saldoActualDeposito = null;
    /**
     * Ejecuta la logica de negocio del servicio
     *
     * @see es.caixagalicia.ifrt.core.ServicioNegocio
     * 		#ejecutar(
     * 			es.caixagalicia.ifrt.core.IContextoEjecucion,
     * 			es.caixagalicia.ifrt.core.IDatosEntradaTx)
     * @param contexto contexto de ejecucion
     * @param datosEntrada datos de entrada
     * @return <code>IContexto[]</code>
     */
    @Override
    public IContexto[] ejecutar(IContextoEjecucion contextoEjecucion, IDatosEntradaTx datosEntrada) {
        final long lInicio = System.currentTimeMillis();
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO ANPM048: Obtener los datos de una versión general.");
        }
        contextoEjecucion.setDiarioElectronico(new DiarioElectronico(DiarioElectronico.TIPO_CONSULTA));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Obtenemos los parametros de entrada");
        }
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        IContexto[] arrayContextos = null;
        // OBLIGATORIO
        BigDecimal bidIdProducto = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_PRODUCTO);
        // OPCIONAL
        BigDecimal bidIdSubProducto = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_SUBPRODUCTO);
        // OBLIGATORIO
        BigDecimal bidColectivo = datosEntrada.getDecimal(CTE_POSICION_TIRA_COLECTIVO);
        // OBLIGATORIO
        BigDecimal bidIdVersionGeneral = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_VERSION_GENERAL);
        // OPTATIVO
        BigDecimal bidPaso = datosEntrada.getDecimal(CTE_POSICION_TIRA_PASO);
        // OPTATIVO
        BigDecimal idTarifaEntrada = datosEntrada.getDecimal(CTE_ENTRADA_ID_TARIFA);
        // OPTATIVO
        String plazo = Utilidades.comprobarDatoNull(datosEntrada.getString(CTE_ENTRADA_PLAZO));
        // OPTATIVO
        BigDecimal origen = datosEntrada.getDecimal(CTE_ENTRADA_ORIGEN);
        /*20150916 Obtenemos tambien el NUC para saber si estamos en un alta de interés*/
        BigDecimal nuc = datosEntrada.getDecimal(CTE_ENTRADA_NUC);
        // 2016-08-09 - Añadir codigo de colectivo a la entrada
        BigDecimal codigoColectivo = datosEntrada.getDecimal(CTE_ENTRADA_CODIGO_COLECTIVO);
        // 2016-12-21 - Añadir importe a la entrada
        // BigDecimal importe = null;
        BigDecimal importe = datosEntrada.getDecimal(CTE_ENTRADA_IMPORTE);
        String novacionSinModalidad = datosEntrada.getString(CTE_ENTRADA_NOVACION_SIN_MODALIDAD);
        if (Utilidades.isBlankOrNull(novacionSinModalidad)) {
            novacionSinModalidad = Constantes.NO;
        }
        // Si no es novacionSinModalidad, producto y subproductos son obligatorios
        if (novacionSinModalidad.equals(Constantes.NO)) {
            if (Utilidades.isBlankOrNull(bidIdProducto)) {
                ServicioNegocio.rollback(12708, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), CODIGO_PRODUCTO_1619207098).toString() }, null);
            }
            if (Utilidades.isBlankOrNull(bidIdSubProducto)) {
                ServicioNegocio.rollback(12708, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), CODIGO_SUBPRODUCTO_716083962).toString() }, null);
            }
            if (Utilidades.isBlankOrNull(bidColectivo)) {
                ServicioNegocio.rollback(12708, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), COLECTIVO_1681736460).toString() }, null);
            }
            if (Utilidades.isBlankOrNull(bidIdVersionGeneral)) {
                ServicioNegocio.rollback(12708, null, new String[] { new Mensaje(ServicioNegocio.getContexto(), VERSION_GENERAL_1839166593).toString() }, null);
            }
        } else {
            bidIdProducto = BigDecimal.ZERO;
            bidIdSubProducto = BigDecimal.ONE;
            bidColectivo = BigDecimal.ZERO;
            bidIdVersionGeneral = BigDecimal.ONE;
        }
        TarifaVO tarifaAplicar = null;
        BigDecimal idTarifaAplicar = null;
        IContexto contextoTarifa = null;
        final String strCtxtoProducto = "ANPMN001";
        final String strCtxtoSubproducto = "ANPMN002";
        final String CTE_ENTIDAD = "ANPMN001170";
        IContexto contextoSubproducto = null;
        IContexto contextoProducto = null;
        String indTarifaSubproducto = null;
        TarifaC tarifaAplicarC = null;
        InformacionRiesgoOrigenVO informacionRO = null;
        int intPaso = Constantes.CTE_CERO.intValue();
        if (null == bidPaso) {
            bidPaso = BigDecimal.ZERO;
        }
        intPaso = bidPaso.intValue();
        /*cuando el paso es 0 o null se devuelven todos los contextos.
		pero como ObtenerDatosVersionGeneralSrv (ANPM_048) se invoca desde
		BusquedaDetalleSubProductoSrv (ANPM_167), hice que en esta clase envíe 
		el paso a cero si viene nulo.*/
        // lo primero que debemos hacer es irnos a la tabla de relación-versiones a obtener la fila correspondiente
        // y poder con ello saber que versión de cada tabla tenemos que analizar.
        VersionesC version = null;
        if (novacionSinModalidad.equals(Constantes.NO)) {
            version = GestionVersiones.obtenerVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), new Integer(bidIdVersionGeneral.intValue()), new Integer(bidColectivo.intValue()));
        } else {
            // Version vigente
            Date fechaHoy = new Date(DateUtils.getSoloFecha(DateUtils.dateNow()).getTime());
            Time horaHoy = new Time(DateUtils.getSoloHorario(DateUtils.dateNow()).getTime());
            VersionEng versionEng = new VersionEng();
            version = versionEng.obtenerVersionVigenteEnFecha(bidIdProducto.intValue(), bidIdSubProducto.intValue(), bidColectivo.intValue(), fechaHoy, horaHoy);
            if (null != version) {
                bidIdVersionGeneral = new BigDecimal(version.getVersionKey().getIdVersionGeneral());
            }
        }
        // 2016-11-07 - Comprobar que se ha obtenido una version general
        if (null == version) {
            ServicioNegocio.rollback(CodigosError.CTE_ERROR_VERSION_GENERAL_NO_ENCONTRADA, null, new String[] { bidIdProducto.toString(), bidIdSubProducto.toString(), bidIdVersionGeneral.toString(), bidColectivo.toString() }, null);
        }
        DatosSolicitudC datosSolicitud = null;
        GestionDatosSolicitud gds = new GestionDatosSolicitud();
        String esAmpliacion = Constantes.NO;
        String esNovacion = Constantes.NO;
        String esSubrogacion = Constantes.NO;
        BigDecimal nucPrestamoOrigen = null;
        BigDecimal expedienteSolicitud = null;
        if (!Helper.isNullOrEmpty(nuc)) {
            datosSolicitud = gds.getUltimaVersion(nuc);
            String claveRiesgoOrigen = Constantes.CTE_STRING_EMPTY;
            if ((null != datosSolicitud) && (novacionSinModalidad.equals(Constantes.NO))) {
                expedienteSolicitud = datosSolicitud.getTipoExpediente();
            } else {
                // Si datosSolicitud es null, se llama a EEXP_272 para obtener tipoExpediente y claveRiesgoOrigen
                IContexto[] datosExpediente = UtilidadesTramitacion.obtenerDatosExpediente(nuc);
                if (null != datosExpediente && 0 < datosExpediente.length && null != datosExpediente[0]) {
                    // Tipo de expediente
                    expedienteSolicitud = datosExpediente[0].getBigDecimal("EE273C0020");
                    // Se recoge la clave del riesgo origen
                    claveRiesgoOrigen = datosExpediente[0].getString("EE273C0180");
                    // NUC prestamos origen
                    nucPrestamoOrigen = datosExpediente[0].getBigDecimal("EE273C0010");
                }
            }
            String[] indicadores = GestionRiesgoOrigen.obtieneIndicadoresTipoExpediente(version, bidIdProducto, bidIdSubProducto, expedienteSolicitud);
            esAmpliacion = indicadores[0];
            esNovacion = indicadores[1];
            esSubrogacion = indicadores[2];
            String strExpediente = indicadores[3];
            BigDecimal tipoExpediente = BigDecimal.ZERO;
            if (!Utilidades.isBlankOrNull(strExpediente)) {
                tipoExpediente = new BigDecimal(strExpediente);
            }
            // Si es subrogacion o ampliacion, se obtienen los datos del riesgoOrigen, llamando al ANPM_480
            if ((esAmpliacion.equals(Constantes.SI)) || (esNovacion.equals(Constantes.SI) || (esSubrogacion.equals(Constantes.SI)) || (novacionSinModalidad.equals(Constantes.SI)))) {
                informacionRO = GestionInformacionRiesgoOrigen.obtieneInformacionRO(nuc, tipoExpediente, bidIdProducto, claveRiesgoOrigen);
            }
            if (esSubrogacion.equals(Constantes.SI)) {
                // no se puede continuar
                if (0 == bidIdProducto.compareTo(BigDecimal.ZERO)) {
                    if (!UtilidadesTramitacion.comprobarControlOperatoria(nuc, Constantes.CTE_CONTROL_OPERATORIA_SUBROGACION, false)) {
                        ServicioNegocio.rollback(CodigosError.CTE_ERROR_OPERATORIA_SUBROGACION, null, null, null);
                    }
                }
            }
        }
        switch(intPaso) {
            case Constantes.PASO_SOLIC_PREST_TODOS:
                {
                    if (null != datosSolicitud) {
                        // Según sea, novacion o subrogacion, se sobreescriben unos datos u otros
                        if ((null != informacionRO) && (esNovacion.equals(Constantes.SI))) {
                            if (novacionSinModalidad.equals(Constantes.NO)) {
                                razonOrigen = informacionRO.getRazonOrigen();
                                demorasCapital = informacionRO.getDemorasCapital();
                                demorasInteres = informacionRO.getDemorasInteres();
                                minimoVariacion = informacionRO.getMinimoVariacion();
                                comisionAdelantos = informacionRO.getComisionAdelantos();
                                comisionCancelacion = informacionRO.getComisionCancelacion();
                                topeAdelantoAnualSobreSaldo = informacionRO.getTopeAdelantoAnualSobreSaldo();
                                comisionAdelantosSuperioresAPorcentajeSaldo = informacionRO.getComisionAdelantosSuperioresAPorcentajeSaldo();
                                plazoRiesgoOrigen = informacionRO.getPlazo();
                                importeRiesgoOrigen = informacionRO.getImporte();
                                comisionGastosEstudio = BigDecimal.ZERO;
                                minimoGastosEstudio = BigDecimal.ZERO;
                                minimoComisionApertura = BigDecimal.ZERO;
                                if (informacionRO.getComisionModifContractual().compareTo(BigDecimal.ZERO) == 0) {
                                    comisionApertura = BigDecimal.ZERO;
                                } else {
                                    comisionApertura = informacionRO.getComisionModifContractual();
                                }
                                indPeriodoLiquidacionInteres = new BigDecimal(2);
                                indPeriodoLiquidacionCapital = new BigDecimal(2);
                                valorInversion = informacionRO.getValorInversion();
                            }
                        } else if ((null != informacionRO) && (esAmpliacion.equals(Constantes.SI))) {
                            importeRiesgoOrigen = informacionRO.getImporte();
                            plazoRiesgoOrigen = informacionRO.getPlazo();
                            if (informacionRO.getComisionModifContractual().compareTo(BigDecimal.ZERO) == 0) {
                                comisionGastosEstudio = BigDecimal.ZERO;
                                minimoGastosEstudio = BigDecimal.ZERO;
                            } else {
                                comisionGastosEstudio = informacionRO.getComisionModifContractual();
                            }
                        } else if ((null != informacionRO) && (esSubrogacion.equals(Constantes.SI))) {
                            importeRiesgoOrigen = informacionRO.getImporte();
                            if (expedienteSolicitud.compareTo(ConstantesComun.EXPEDIENTE_SUBROGACION) == 0) {
                                indPeriodoLiquidacionInteres = new BigDecimal(2);
                                indPeriodoLiquidacionCapital = new BigDecimal(2);
                            }
                        }
                    }
                    // y en vez del producto ficticio, cogemos producto,subproducto,colectivo y version del prestamo origen
                    if (novacionSinModalidad.equals(Constantes.SI)) {
                        if (null != nucPrestamoOrigen) {
                            DatosSolicitudC datosSolicitudPO = gds.getUltimaVersionCompleta(nucPrestamoOrigen);
                            if (null != datosSolicitudPO) {
                                bidIdProducto = datosSolicitudPO.getProducto();
                                bidIdSubProducto = datosSolicitudPO.getSubproducto();
                                bidColectivo = datosSolicitudPO.getIdColectivo();
                                bidIdVersionGeneral = datosSolicitudPO.getVersionGeneral();
                            }
                        }
                    }
                    listaContextos = obtenerContextosTodos(version, bidIdProducto, bidIdSubProducto, bidColectivo, contextoEjecucion, origen, codigoColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
                    if (!Helper.isNullOrEmpty(nuc)) {
                        if (null != datosSolicitud) {
                            importe = datosSolicitud.getImporteSolicitado();
                            // Cuando viene por aqui es o una invocación inicial o una invocacion que llega del ultimo paso para sobreescritura.
                            if (null == idTarifaEntrada && null != datosSolicitud.getIdTarifa() && 0 != datosSolicitud.getIdTarifa().compareTo(BigDecimal.ZERO)) {
                                idTarifaEntrada = datosSolicitud.getIdTarifa();
                            }
                        }
                    }
                    break;
                }
            case Constantes.PASO_SOLIC_PREST_CLASIFICACION:
                {
                    listaContextos = obtenerContextosPasoClasificacion(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
                    break;
                }
            case Constantes.PASO_SOLIC_PREST_CONDICIONES_ECONOMICAS:
                {
                    listaContextos = obtenerContextosPasoCondicionesEconomicas(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
                    break;
                }
            case Constantes.PASO_SOLIC_PREST_INTERES:
                {
                    listaContextos = obtenerContextosPasoInteres(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
                    if (!Helper.isNullOrEmpty(datosSolicitud)) {
                        importe = datosSolicitud.getImporteSolicitado();
                    }
                    break;
                }
            case Constantes.PASO_SOLIC_PREST_SISTEMA_AMORTIZACION:
                {
                    listaContextos = obtenerContextosPasoSistAmort(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
                    break;
                }
            case Constantes.PASO_SOLIC_PREST_GASTOS_COMISIONES:
                {
                    listaContextos = obtenerContextosPasoGastComis(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
                    break;
                }
            case Constantes.PASO_SOBREESCRITURA_TARIFAS_COMISIONES:
                {
                    listaContextos = obtenerContextosSobreescrituraInteresComisiones(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
                    break;
                }
            case Constantes.PASO_PREFORMALIZCION:
                {
                    listaContextos = obtenerContextosPreformalizacion(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
                    break;
                }
            case Constantes.PASO_DATOS_COLECTIVOS:
                {
                    listaContextos = obtenerContextosColectivos(version, bidIdProducto, bidIdSubProducto, bidColectivo, codigoColectivo, novacionSinModalidad, informacionRO);
                    break;
                }
            default:
                {
                    break;
                }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Se ha devuelto los datos correctamente corerctamente");
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN ANPM_048: Obtener los datos de una versión general. " + "Tiempo total: " + (System.currentTimeMillis() - lInicio) + "ms");
        }
        arrayContextos = listaContextos.toArray(new IContexto[listaContextos.size()]);
        contextoSubproducto = Utilidades.getContexto(arrayContextos, strCtxtoSubproducto);
        contextoProducto = Utilidades.getContexto(arrayContextos, strCtxtoProducto);
        String entidad = contextoProducto.getString(CTE_ENTIDAD);
        if (null == contextoSubproducto) {
            contextoSubproducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        }
        // ANPMN002
        /*Obtenemos el indicador de tarifa para saber si aplica o no para este subproducto*/
        indTarifaSubproducto = contextoSubproducto.getString(CTE_STR_MARCA_TARIFA);
        // if (Constantes.CTE_STRING_UNO.equals(indTarifaSubproducto))
        if (Constantes.CTE_STRING_UNO.equals(indTarifaSubproducto) && (bidColectivo.compareTo(BigDecimal.ZERO) == 0)) {
            if ((!Helper.isNullOrEmpty(plazo)) && (!Helper.isNullOrEmpty(importe)) && (!Helper.isNullOrEmpty(origen))) {
                /* - Si es alta interés y no viene la tarifa: la recuperamos.
				 * - Si es alta interés y viene la tarifa: pillamos la que venga.
				 * - Si no es alta interés y viene la tarifa: pillamos la que venga.
				 * - Si no es alta interés y no viene la tarifa: De momento rollback. */
                if (Helper.isNullOrEmpty(idTarifaEntrada)) {
                    /*Si no viene el nuc informado es que nos llaman desde aplicaciones externas a ANPM, no 
					 * comprobamos si es alta de interés o no porque no aplica, en este caso tiene que venir la tarifa informada*/
                    if (!Helper.isNullOrEmpty(nuc)) {
                        // if (esAltaInteres(nuc))
                        /*20151004 Cuando no nos envían el id tarifa al ANPM_167 y es una tramitación quiere decir que:
						 - O es una alta
						 - O es una modificación pero cambió el plazo y por lo tanto la dll no sabe la tarifa a aplicar.
						 */
                        tarifaAplicar = GestionTarifa.obtenerTarifaMaximaPrioridad(nuc);
                        idTarifaAplicar = tarifaAplicar.getIdTarifa();
                    /*
						}
						else
						{
							ServicioNegocio.rollback(
								CodigosError.CTE_ERROR_CONSULTA_DATOS_SUBPROD_FALTA_TARIFA,
								null,
								null,
								null);
*/
                    } else {
                        /*
						//20150926 COMENTAMOS TEMPORALMENTE EL ROLLBACK, HAY QUE QUITAR EL COMENTARIO
						idTarifaAplicar = BigDecimal.ONE; //20150926 TARIFA NORMAL, QUITAR ESTO
*/
                        ServicioNegocio.rollback(CodigosError.CTE_ERROR_CONSULTA_DATOS_SUBPROD_FALTA_TARIFA, null, null, null);
                    }
                } else {
                    /* Si nos viene informado el id tarifa, recuperamos el objeto persistente, lo mapeamos en el VO y lo devolvemos en el contexto con sus datos.*/
                    idTarifaAplicar = idTarifaEntrada;
                    tarifaAplicarC = GestionTarifa.obtenerTarifaPorId(bidIdProducto, bidIdSubProducto, bidIdVersionGeneral, idTarifaAplicar);
                    if (null != tarifaAplicarC) {
                        tarifaAplicar = new TarifaVO();
                        tarifaAplicar.copiar(tarifaAplicarC);
                    } else {
                        ServicioNegocio.rollback(CodigosError.CTE_ERROR_TARIFA_NO_EXISTE, null, new String[] { idTarifaEntrada.toString() }, null);
                    }
                }
                IContexto[] datosTarifa = UtilidadesComun.obtencionDatosTarifa(bidIdProducto, bidIdSubProducto, bidIdVersionGeneral, plazo, idTarifaAplicar, origen, importe, nuc, null, entidad);
                if ((Utilidades.isBlankOrNull(datosTarifa)) || (Utilidades.isBlankOrNull(datosTarifa[0].getRegistro("ANPMN443010")))) {
                    ServicioNegocio.rollback(CodigosError.CTE_ERROR_NO_HAY_PRECIOS_TARIFA, null, new String[] { bidIdProducto.toString(), bidIdSubProducto.toString(), bidIdVersionGeneral.toString(), plazo.toString(), idTarifaAplicar.toString(), origen.toString() }, null);
                }
                GestionTarifa.sobreescribirValoresInteresYComision(arrayContextos, datosTarifa);
            } else {
            /*20150916 Comentamos temporalmente este rollback mientras no informemos los campos.
				ServicioNegocio.rollback(
					CodigosError.CTE_ERROR_CONSULTA_DATOS_SUBPROD_FALTA_TARIFA,
					null,
					null,
					null);
				*/
            }
        }
        // 20150918 Si tuvimos que recuperar la tarifa a aplicar se la enviamos a la dll.
        if (null != tarifaAplicar) {
            contextoTarifa = ContextoTarifas.rellenarDatosContexto(tarifaAplicar);
            listaContextos = new ArrayList<IContexto>(1);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
            listaContextos.add(contextoTarifa);
            arrayContextos = listaContextos.toArray(new IContexto[listaContextos.size()]);
        }
        // Nota: no se rellena el contexto ANPMN004
        return arrayContextos;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @return contextoSalida
     */
    private IContexto obtenerContextoProducto(VersionesC version, BigDecimal bidIdProducto, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO) {
        IContexto[] arrayContextos = new IContexto[Constantes.CTE_UNO.intValue()];
        IContexto contextoSalida = null;
        // obtenemos los datos del producto
        ProductoC producto = GestionProducto.obtenerProductoVersion(new Integer(bidIdProducto.intValue()), version.getAn01tb01());
        if (null != producto) {
            // contexto de producto - ANPMN001
            arrayContextos = ContextosProducto.rellenarDatosContexto(producto, Constantes.CTE_CERO);
            if (Constantes.CTE_UNO.intValue() == arrayContextos.length) {
                contextoSalida = arrayContextos[Constantes.CTE_CERO.intValue()];
            }
        }
        if (novacionSinModalidad.equals(Constantes.SI)) {
            for (IContexto contexto : arrayContextos) {
                contextoSalida = GestionNovSinModalidad.sobreescribeContextoDatosProducto(contexto, informacionRO);
            }
        }
        return contextoSalida;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @return contextoSalida
     */
    private IContexto obtenerContextoSubProducto(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto) {
        IContexto contextoSalida = null;
        IContexto[] arrayContextos = new IContexto[Constantes.CTE_UNO.intValue()];
        Integer bidIdVersionGeneral = version.getVersionKey().getIdVersionGeneral();
        // obtenemos los datos del subproducto
        SubProductoC subProducto = GestionSubProducto.obtenerSubProductoVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), version.getAn02tb01());
        if (null != subProducto) {
            // contexto de subproducto, ANPMN002
            arrayContextos = ContextosSubProducto.rellenarDatosContexto(subProducto, new Integer(bidIdVersionGeneral.intValue()), Constantes.CTE_CERO);
            if (Constantes.CTE_UNO.intValue() == arrayContextos.length) {
                contextoSalida = arrayContextos[Constantes.CTE_CERO.intValue()];
            }
        }
        return contextoSalida;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosDatosEconomicos(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO.intValue());
        List<DatEcoC> datosEconomicos = new ArrayList<DatEcoC>(Constantes.CTE_CERO.intValue());
        // Obtenemos los datos económicos de la versión del subproducto
        datosEconomicos.addAll(GestionDatEco.obtenerDatsEcoVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), version.getAn03tb01(), new Integer(bidColectivo.intValue())));
        // Sino ha devuelto resgistro quiere decir que son generales por tanto buscamos con cero
        if (datosEconomicos == null || Constantes.CTE_CERO.intValue() == datosEconomicos.size()) {
            datosEconomicos.addAll(GestionDatEco.obtenerDatsEcoVersion(new Integer(bidIdProducto.intValue()), Constantes.CTE_CERO, version.getAn03tb01(), new Integer(bidColectivo.intValue())));
        }
        // contexto datos economicos, ANPMN013
        IContexto[] arrayContextos = ContextosDatEco.rellenarDatosContextoBasicos(datosEconomicos);
        if (novacionSinModalidad.equals(Constantes.SI)) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(GestionNovSinModalidad.sobreescribeContextoDatosEconomicos(contexto, informacionRO));
            }
        } else if ((esAmpliacion.equals(Constantes.SI)) || (esNovacion.equals(Constantes.SI)) || (esSubrogacion.equals(Constantes.SI))) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(sobreescribeContextoDatosEconomicos(contexto, informacionRO, esAmpliacion, esNovacion, esSubrogacion));
            }
        } else {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        }
        return listaContextos;
    }

    /**
     * @return contextoSalida
     */
    private IContexto obtenerContextoError() {
        IContexto contextoSalida = null;
        // IContexto[] arrayContextos;
        return contextoSalida;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosCondicionesCapital(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        List<CondicionesCapitalC> condsCapital = new ArrayList<CondicionesCapitalC>(Constantes.CTE_CERO.intValue());
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        // obtenemos las condiciones de la versión del subproducto.
        condsCapital.addAll(GestionConCapital.obtenerRegistrosVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), version.getAn04tb01(), false));
        // sino ha devuelto resgistro quiere decir que son generales por tanto buscamos con cero
        if (condsCapital == null || Constantes.CTE_CERO.intValue() == condsCapital.size()) {
            condsCapital.addAll(GestionConCapital.obtenerRegistrosVersion(new Integer(bidIdProducto.intValue()), Constantes.CTE_CERO, version.getAn04tb01(), false));
        }
        // contexto de condiciones de capital - ANPMN009
        IContexto[] arrayContextos = ContextosCondicionesCapital.rellenarDatosContextoBasicos(condsCapital);
        if (novacionSinModalidad.equals(Constantes.SI)) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(GestionNovSinModalidad.sobreescribeContextoCondidCapital(contexto, informacionRO));
            }
        } else if ((esNovacion.equals(Constantes.SI)) || ((expedienteSolicitud != null) && (expedienteSolicitud.compareTo(ConstantesComun.EXPEDIENTE_SUBROGACION) == 0))) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(sobreescribeContextoCondiCapital(contexto));
            }
        } else {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        }
        return listaContextos;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosInteresTechoSueloTiposRefRedon(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO.intValue());
        List<Integer> ordenes = new ArrayList<Integer>(Constantes.CTE_CERO.intValue());
        List<InteresC> intereses = new ArrayList<InteresC>(Constantes.CTE_CERO.intValue());
        // obtenemos los intereses de la versión del subproducto
        intereses.addAll(GestionInteres.obtenerRegistrosVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), new Integer(bidColectivo.intValue()), version.getAn07tb01(), false));
        if (intereses == null || Constantes.CTE_CERO.intValue() == intereses.size()) {
            intereses.addAll(GestionInteres.obtenerRegistrosVersion(new Integer(bidIdProducto.intValue()), Constantes.CTE_CERO, new Integer(bidColectivo.intValue()), version.getAn07tb01(), false));
        }
        List<TechosSuelosDifeC> diferenciales = new ArrayList<TechosSuelosDifeC>(Constantes.CTE_CERO.intValue());
        diferenciales.addAll(GestionTechosSuelosDife.obtenerRegistrosVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), new Integer(bidColectivo.intValue()), version.getAn08tb01(), false));
        if (diferenciales == null || Constantes.CTE_CERO.intValue() == diferenciales.size()) {
            diferenciales.addAll(GestionTechosSuelosDife.obtenerRegistrosVersion(new Integer(bidIdProducto.intValue()), Constantes.CTE_CERO, new Integer(bidColectivo.intValue()), version.getAn08tb01(), false));
        }
        int iSize = intereses.size();
        int i = 0;
        while (i < iSize) {
            InteresC interes = intereses.get(i);
            if (!ordenes.contains(interes.getOrden())) {
                ordenes.add(interes.getOrden());
            }
            i = i + 1;
        }
        List<TipoRefC> tiposRef = new ArrayList<TipoRefC>(Constantes.CTE_CERO.intValue());
        iSize = ordenes.size();
        i = 0;
        while (i < iSize) {
            tiposRef.addAll(GestionTipoRef.obtenerTiposReferenciaEnFechasNoPasada(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), ordenes.get(i), version.getFechaInicio(), version.getHoraIncio(), version.getFechaFin(), version.getHoraFin()));
            i = i + 1;
        }
        // obtenemos los redondeos
        List<RedondeoC> redondeos = new ArrayList<RedondeoC>(Constantes.CTE_CERO.intValue());
        i = 0;
        while (i < iSize) {
            redondeos.addAll(GestionRedondeo.obtenerRedondeosTramo(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), ordenes.get(i)));
            i = i + 1;
        }
        if (novacionSinModalidad.equals(Constantes.SI)) {
            // contexto interes, ANPMN014
            IContexto[] arrayContextos = ContextosInteres.rellenarDatosContextoBasicos(intereses);
            for (int z = 0; z < arrayContextos.length; z++) {
                IContexto contexto = arrayContextos[z];
                InteresROVO interes = null;
                if ((z == 0) || (z == 1)) {
                    interes = informacionRO.getLstInteres().get(0);
                } else if (z == 2) {
                    interes = informacionRO.getLstInteres().get(1);
                }
                if ((contexto.getBigDecimal("ANPMN014060").compareTo(new BigDecimal(2)) == 0) && (null != interes.getTipoReferencia()) && (interes.getTipoReferencia().compareTo(BigDecimal.ZERO) == 0)) {
                // No se anhade al contexto ANPMN014
                } else {
                    listaContextos.add(GestionNovSinModalidad.sobreescribeContextoIntereses(contexto, informacionRO, z));
                }
            }
            // contexto diferenciales, ANPMN015
            arrayContextos = ContextosTechosSuelos.rellenarDatosContextoBasicos(diferenciales);
            for (int z = 0; z < arrayContextos.length; z++) {
                IContexto contexto = arrayContextos[z];
                InteresROVO interes = null;
                if ((z == 0) || (z == 1)) {
                    interes = informacionRO.getLstInteres().get(0);
                } else if (z == 2) {
                    interes = informacionRO.getLstInteres().get(1);
                }
                if ((contexto.getBigDecimal("ANPMN015070").compareTo(BigDecimal.ONE) == 0) && (null != interes.getTipoReferenciaSustitutivo()) && (interes.getTipoReferenciaSustitutivo().compareTo(BigDecimal.ZERO) == 0)) {
                // No se anhade al contexto ANPMN015
                } else if ((contexto.getBigDecimal("ANPMN015070").compareTo(BigDecimal.ZERO) == 0) && (null != interes.getTipoReferencia()) && (interes.getTipoReferencia().compareTo(BigDecimal.ZERO) == 0)) {
                // No se anhade al contexto ANPMN015
                } else {
                    listaContextos.add(GestionNovSinModalidad.sobreescribeContextoDiferenciales(contexto, informacionRO, z));
                }
            }
            // contexto tipo referencia, ANPMN018
            arrayContextos = ContextosTipoRef.rellenarDatosContexto(tiposRef);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
            // contexto redondeo, ANPMN017
            arrayContextos = ContextosRedondeo.rellenarDatosContexto(redondeos);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        } else if ((esAmpliacion.equals(Constantes.SI)) || (esNovacion.equals(Constantes.SI)) || (esSubrogacion.equals(Constantes.SI))) {
            // contexto interes, ANPMN014
            IContexto[] arrayContextos = ContextosInteres.rellenarDatosContextoBasicos(intereses);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(sobreescribeContextoIntereses(contexto, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud));
            }
            // contexto diferenciales, ANPMN015
            arrayContextos = ContextosTechosSuelos.rellenarDatosContextoBasicos(diferenciales);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(sobreescribeContextoDireferenciales(contexto));
            }
            // contexto tipo referencia, ANPMN018
            arrayContextos = ContextosTipoRef.rellenarDatosContexto(tiposRef);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
            // contexto redondeo, ANPMN017
            arrayContextos = ContextosRedondeo.rellenarDatosContexto(redondeos);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        } else {
            // contexto interes, ANPMN014
            IContexto[] arrayContextos = ContextosInteres.rellenarDatosContextoBasicos(intereses);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
            // contexto diferenciales, ANPMN015
            arrayContextos = ContextosTechosSuelos.rellenarDatosContextoBasicos(diferenciales);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
            // contexto tipo referencia, ANPMN018
            arrayContextos = ContextosTipoRef.rellenarDatosContexto(tiposRef);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
            // contexto redondeo, ANPMN017
            arrayContextos = ContextosRedondeo.rellenarDatosContexto(redondeos);
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        }
        return listaContextos;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosTratamientoAdelantos(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO.intValue());
        List<AdelantoC> adelantos = new ArrayList<AdelantoC>(Constantes.CTE_CERO.intValue());
        // Debemos obtener los tratamientos de adelanto
        adelantos.addAll(GestionAdelanto.obtenerAdelantosSubproducto(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), version.getAn13tb01(), false));
        if (adelantos == null || Constantes.CTE_CERO.intValue() == adelantos.size()) {
            adelantos.addAll(GestionAdelanto.obtenerAdelantosSubproducto(new Integer(bidIdProducto.intValue()), Constantes.CTE_CERO, version.getAn13tb01(), false));
        }
        // contexto de adelantos, ANPMN006
        IContexto[] arrayContextos = ContextosTratamientoAdelantos.rellenarDatosContextoBasicos(adelantos);
        if (novacionSinModalidad.equals(Constantes.SI)) {
            BigDecimal CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_3 = new BigDecimal(3);
            BigDecimal CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_4 = new BigDecimal(4);
            BigDecimal CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_5 = new BigDecimal(5);
            BigDecimal CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_6 = new BigDecimal(6);
            if (null != informacionRO) {
                BigDecimal indTipoCobroAnticipado = informacionRO.getIndTipoCobroAnticipado();
                if (null != indTipoCobroAnticipado) {
                    BigDecimal tipoImputacion = BigDecimal.ZERO;
                    BigDecimal fechas = BigDecimal.ZERO;
                    BigDecimal cuotasCompletas = BigDecimal.ZERO;
                    if (0 == indTipoCobroAnticipado.compareTo(CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_6)) {
                        tipoImputacion = BigDecimal.ONE;
                        fechas = BigDecimal.ONE;
                        cuotasCompletas = BigDecimal.ONE;
                    } else if (0 == indTipoCobroAnticipado.compareTo(CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_4)) {
                        tipoImputacion = BigDecimal.ONE;
                        fechas = BigDecimal.ZERO;
                        cuotasCompletas = BigDecimal.ZERO;
                    } else if (0 == indTipoCobroAnticipado.compareTo(CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_5)) {
                        tipoImputacion = BigDecimal.ZERO;
                        fechas = BigDecimal.ONE;
                        cuotasCompletas = BigDecimal.ONE;
                    } else if (0 == indTipoCobroAnticipado.compareTo(CTE_IND_TIPO_COBRO_ANTICIPADO_PMOS_3)) {
                        tipoImputacion = BigDecimal.ZERO;
                        fechas = BigDecimal.ZERO;
                        cuotasCompletas = BigDecimal.ZERO;
                    }
                    for (IContexto contexto : arrayContextos) {
                        if (contexto.getBigDecimal("ANPMN006080").compareTo(tipoImputacion) == 0 && contexto.getBigDecimal("ANPMN006100").compareTo(fechas) == 0 && contexto.getBigDecimal("ANPMN006180").compareTo(cuotasCompletas) == 0) {
                            listaContextos.add(GestionNovSinModalidad.sobreescribeContextoTratamientoAdelantos(contexto, informacionRO));
                        }
                    }
                }
            }
        } else {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        }
        return listaContextos;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosModalidadAmortizacion(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO.intValue());
        List<ModalidadAmortizacionC> modalidades = new ArrayList<ModalidadAmortizacionC>(Constantes.CTE_UNO.intValue());
        // Debemos obtener las modalidades de amortización vigentes en las fechas de la versión general
        modalidades = GestionModalidadesAmortizacion.obtenerModalidadesSubProductoEnFechasNoPasada(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), version.getFechaInicio(), version.getHoraIncio(), version.getFechaFin(), version.getHoraFin());
        // contexto modalidades, ANPMN010
        IContexto[] arrayContextos = ContextosModalidadAmortizacion.rellenarDatosContexto(modalidades);
        if (novacionSinModalidad.equals(Constantes.SI)) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(GestionNovSinModalidad.sobreescribeContextoModalidades(contexto, informacionRO));
            }
        } else if ((esAmpliacion.equals(Constantes.SI)) || (esNovacion.equals(Constantes.SI))) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(sobreescribeContextoModalidades(contexto));
            }
        } else {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        }
        return listaContextos;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosComisiones(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        List<ComisionesC> comisiones = new ArrayList<ComisionesC>(Constantes.CTE_CERO.intValue());
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        Integer[] tiposComision = GestionComisiones.getTiposComisionInteger();
        for (int c = 0; c < tiposComision.length; c++) {
            Integer tipoComis = tiposComision[c];
            List<ComisionesC> comisionesTmp;
            comisionesTmp = new ArrayList<ComisionesC>(Constantes.CTE_CERO.intValue());
            // obtenemos las comisiones del tipoComis de la versión del subproducto
            comisionesTmp.addAll(GestionComisiones.obtenerTipoComisionTodosNiveles(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), version.getAn06(tipoComis), tipoComis, new Integer(bidColectivo.intValue())));
            // sino ha devuelto resgistro quiere decir que son generales por tanto buscamos con cero
            if (comisionesTmp == null || Constantes.CTE_CERO.intValue() == comisionesTmp.size()) {
                comisionesTmp.addAll(GestionComisiones.obtenerTipoComisionTodosNiveles(new Integer(bidIdProducto.intValue()), Constantes.CTE_CERO, version.getAn06(tipoComis), tipoComis, new Integer(bidColectivo.intValue())));
            }
            comisiones.addAll(comisionesTmp);
        }
        // contexto de comisiones, ANPMN005
        IContexto[] arrayContextos = ContextosComisiones.rellenarDatosContexto(comisiones, Constantes.CTE_CERO.intValue());
        if (novacionSinModalidad.equals(Constantes.SI)) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(GestionNovSinModalidad.sobreescribeContextoComisiones(contexto, informacionRO));
            }
        } else if ((esAmpliacion.equals(Constantes.SI)) || (esNovacion.equals(Constantes.SI))) {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(sobreescribeContextoComisiones(contexto));
            }
        } else {
            for (IContexto contexto : arrayContextos) {
                listaContextos.add(contexto);
            }
        }
        return listaContextos;
    }

    /**
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @param contextoEjecucion
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosNivelesSubProducto(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, IContextoEjecucion contextoEjecucion) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        List<String> redes = new ArrayList<String>(Constantes.CTE_UNO.intValue());
        HashMap<String, List<ParametrosC>> redNiveles = new HashMap<String, List<ParametrosC>>(Constantes.CTE_CERO.intValue());
        boolean redIntro = false;
        // !!!HACERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!
        // PENDIENTE DE DEVOLVER LAS REDES Y LOS CENTROS CUANDO SE SEPA EL COMPORTAMIENTO.
        // por ahora añadimos como fijo la red CO, posteriormente la obtendremos de la llamada a un SN
        // hay que ver que centros tiene el subproducto
        IDatosEntradaTx entradaTx = ServicioNegocio.getPrograma(contextoEjecucion, new Integer(507), new Integer(50));
        if (entradaTx != null) {
            entradaTx.addCampo("Producto", bidIdProducto, 0);
            entradaTx.addCampo("Subproducto", bidIdSubProducto, 1);
            entradaTx.addCampo("descCentro", CTE_DESC_CENTRO, 2);
        }
        IContexto[] salida = ServicioNegocio.invocarServicio(contextoEjecucion, entradaTx);
        redes.clear();
        for (int i = 0; i < salida.length; i++) {
            entradaTx = ServicioNegocio.getPrograma(contextoEjecucion, new Integer(100), new Integer(307));
            entradaTx.addCampo("Centro", "" + salida[i].getBigDecimal("ANPMN025010").intValue(), 0);
            entradaTx.addCampo("Comarca", Constantes.NO, 1);
            entradaTx.addCampo("Centros_superiores", Constantes.NO, 2);
            entradaTx.addCampo("Informacion_riesgos", Constantes.NO, 3);
            IContexto[] salida2 = ServicioNegocio.invocarServicio(contextoEjecucion, entradaTx);
            if (!redes.contains(salida2[Constantes.CTE_CERO.intValue()].getString("CG057C061"))) {
                redes.add(salida2[Constantes.CTE_CERO.intValue()].getString("CG057C061"));
            }
        }
        redIntro = false;
        if (redes == null || redes.size() == Constantes.CTE_CERO.intValue() || redes.contains(Constantes.CTE_RED_COMERCIAL) || redes.contains(Constantes.CTE_RED_NGB) || redes.size() > Constantes.CTE_UNO.intValue()) {
            redNiveles.put(Constantes.CTE_RED_COMERCIAL, GestionSubProducto.obtenerNivelesRed(Constantes.CTE_RED_COMERCIAL));
            // size = size + GestionSubProducto.obtenerNivelesRed(Constantes.CTE_RED_COMERCIAL).size();
            redIntro = true;
        }
        if (redes != null && redes.contains(Constantes.CTE_RED_UGAS)) {
            redNiveles.put(Constantes.CTE_RED_UGAS, GestionSubProducto.obtenerNivelesRed(Constantes.CTE_RED_UGAS));
            // size = size + GestionSubProducto.obtenerNivelesRed(Constantes.CTE_RED_COMERCIAL).size();
            redIntro = true;
        }
        if (redIntro == false) {
            redNiveles.put(Constantes.CTE_RED_COMERCIAL, GestionSubProducto.obtenerNivelesRed(Constantes.CTE_RED_COMERCIAL));
        // size = size + GestionSubProducto.obtenerNivelesRed(Constantes.CTE_RED_COMERCIAL).size();
        }
        // contexto niveles subproducto, ANPMN022
        IContexto[] arrayContextos = ContextosSubProducto.rellenarDatosContextoNiveles(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), redNiveles);
        for (IContexto ctx : arrayContextos) {
            listaContextos.add(ctx);
        }
        return listaContextos;
    }

    /**
     * Devuelve los contextos del paso de preformalizacion
     * @param version
     * @param bidIdpProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return
     */
    private List<IContexto> obtenerContextosPreformalizacion(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        IContexto contextoSubproducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        if (null != contextoProducto) {
            // ANPMN001
            listaContextos.add(contextoProducto);
        }
        if (null != contextoSubproducto) {
            // ANPMN002
            listaContextos.add(contextoSubproducto);
        }
        IContexto contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    /**
     * Devuelve los contextos para la actualizacion de los datos de colectivo
     * @param version
     * @param bidIdpProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return La lista con los contextos necesarios.
     */
    private List<IContexto> obtenerContextosColectivos(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, BigDecimal codigoColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        IContexto contextoSubproducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        IContexto contextoColectivo = null;
        if (null != codigoColectivo) {
            contextoColectivo = obtenerContextoColectivo(codigoColectivo, bidColectivo);
        } else {
            contextoColectivo = obtenerContextoColectivo(bidColectivo);
        }
        IContexto contextoError;
        if (null != contextoProducto) {
            // ANPMN001
            listaContextos.add(contextoProducto);
        }
        if (null != contextoSubproducto) {
            // ANPMN002
            listaContextos.add(contextoSubproducto);
        }
        if (null != contextoSubproducto) {
            // ANPMN002
            listaContextos.add(contextoSubproducto);
        }
        if (null != contextoColectivo) {
            // ANPMN026 ? Colectivo
            listaContextos.add(contextoColectivo);
        }
        contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    // métodos para obtener todos los contextos de cada paso.
    /**
     * Devuelve los contextos del paso 1.
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosPasoClasificacion(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        IContexto contextoSubProducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        List<IContexto> listaContextosDatosEconomicos = obtenerContextosDatosEconomicos(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosClausulasRestringidas = GestionClausulasRestringuidas.obtenerContextosClausulasRestringidas(version, bidIdProducto, bidIdSubProducto);
        IContexto contextoError;
        if (null != contextoProducto) {
            // ANPMN001 ? Producto
            listaContextos.add(contextoProducto);
        }
        if (null != contextoSubProducto) {
            // ANPMN002 ? Subproducto
            listaContextos.add(contextoSubProducto);
        }
        if (!Utilidades.isBlankOrNull(listaContextosDatosEconomicos)) {
            // ANPMN013 ? Datos Económicos
            listaContextos.addAll(listaContextosDatosEconomicos);
        }
        if (!Utilidades.isBlankOrNull(listaContextosClausulasRestringidas)) {
            // ANPMN012 ? Clausulas Restringidas
            listaContextos.addAll(listaContextosClausulasRestringidas);
        }
        contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004 ? Error
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    /**
     * @param bidColectivo
     * @return contextoSalida
     */
    private IContexto obtenerContextoColectivo(BigDecimal bidColectivo) {
        IContexto[] arrayContextos = new IContexto[Constantes.CTE_UNO.intValue()];
        IContexto contextoSalida = null;
        ColectivoC colecctivo = null;
        // Obtenemos los datos de las lineas de colectivos
        ColectivosLineasColecC colecLineaColectivo = GestionColecLineasColectivos.obtenerColectivoPorLineaColec(bidColectivo);
        // Obtenemos los datos del colectivo
        if (null != colecLineaColectivo) {
            colecctivo = GestionColectivo.obtenerColectivo(colecLineaColectivo.getColectivosLineasColecKey().getCodigoColectivo().intValue());
        }
        if (null != colecctivo && null != colecLineaColectivo) {
            // contexto de colectivo, ANPMN026
            arrayContextos = ContextosColectivo.rellenarDatosContexto(colecctivo, colecLineaColectivo);
            if (Constantes.CTE_UNO.intValue() == arrayContextos.length) {
                contextoSalida = arrayContextos[Constantes.CTE_CERO.intValue()];
            }
        }
        return contextoSalida;
    }

    /**
     * Metodo que obtiene el contexto de colectivo, a partir del codigo de colectivo y la linea.
     *
     * @param bidColectivo
     * @param codigoColectivo
     * @return contextoSalida
     */
    private IContexto obtenerContextoColectivo(BigDecimal codigoColectivo, BigDecimal lineaColectivo) {
        IContexto[] arrayContextos = new IContexto[Constantes.CTE_UNO.intValue()];
        IContexto contextoSalida = null;
        // Leer de la ANCOTB01 la fila correspondiente a la linea y el colectivo
        ColectivosLineasColecC colecLineaColectivo = GestionColecLineasColectivos.obtenerColectivoPorColectivoYLinea(codigoColectivo, lineaColectivo);
        // Obtenemos los datos del colectivo
        if (null != colecLineaColectivo) {
            ColectivoC colectivo = GestionColectivo.obtenerColectivo(colecLineaColectivo.getColectivosLineasColecKey().getCodigoColectivo().intValue());
            if (null != colectivo) {
                // Contexto de colectivo, ANPMN026
                arrayContextos = ContextosColectivo.rellenarDatosContexto(colectivo, colecLineaColectivo);
                if (Constantes.CTE_UNO.intValue() == arrayContextos.length) {
                    contextoSalida = arrayContextos[Constantes.CTE_CERO.intValue()];
                }
            }
        }
        return contextoSalida;
    }

    /**
     * Devuelve los contextos del paso 2.
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosPasoCondicionesEconomicas(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        IContexto contextoSubProducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        List<IContexto> listaContextosClausulasRestringidas = GestionClausulasRestringuidas.obtenerContextosClausulasRestringidas(version, bidIdProducto, bidIdSubProducto);
        List<IContexto> listaContextosCondicionesCapital = obtenerContextosCondicionesCapital(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
        if (null != contextoProducto) {
            // ANPMN001 ? Producto
            listaContextos.add(contextoProducto);
        }
        if (null != contextoSubProducto) {
            // ANPMN002 ? Subproducto
            listaContextos.add(contextoSubProducto);
        }
        if (!Utilidades.isBlankOrNull(listaContextosCondicionesCapital)) {
            // ANPMN009 ? Condiciones Capital
            listaContextos.addAll(listaContextosCondicionesCapital);
        }
        if (!Utilidades.isBlankOrNull(listaContextosClausulasRestringidas)) {
            // ANPMN012 ? Clausulas Restringidas
            listaContextos.addAll(listaContextosClausulasRestringidas);
        }
        IContexto contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004 ? Error
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    /**
     * Obtiene los contextos para el paso de interés mas los contextos para el paso de comisiones
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return
     */
    private List<IContexto> obtenerContextosSobreescrituraInteresComisiones(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        List<IContexto> listaContextosComisiones = obtenerContextosComisiones(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosInteresTechoSueloTiposRefRedon = obtenerContextosInteresTechoSueloTiposRefRedon(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
        if (!Utilidades.isBlankOrNull(listaContextosInteresTechoSueloTiposRefRedon)) {
            /* ANPMN014 ? Interés
				* ANPMN015 ? Techos y suelos
				* ANPMN018 ? Tipos de referencia
				* ANPMN017 ? Redondeo
				*/
            listaContextos.addAll(listaContextosInteresTechoSueloTiposRefRedon);
        }
        if (!Utilidades.isBlankOrNull(listaContextosComisiones)) {
            // ANPMN005 ? Comisiones
            listaContextos.addAll(listaContextosComisiones);
        }
        IContexto contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004 ? Error
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    /**
     * Devuelve los contextos del paso 3.
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosPasoInteres(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        List<IContexto> listaContextosInteresTechoSueloTiposRefRedon = obtenerContextosInteresTechoSueloTiposRefRedon(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
        if (!Utilidades.isBlankOrNull(listaContextosInteresTechoSueloTiposRefRedon)) {
            listaContextos.addAll(listaContextosInteresTechoSueloTiposRefRedon);
        /*
				 * ANPMN014 ? Interés
				 * ANPMN015 ? Techos y suelos
				 * ANPMN018 ? Tipos de referencia
				 * ANPMN017 ? Redondeo
				 * 
				 * */
        }
        IContexto contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004 ? Error
            listaContextos.add(contextoError);
        }
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        if (null != contextoProducto) {
            // ANPMN001 ? Producto
            listaContextos.add(contextoProducto);
        }
        return listaContextos;
    }

    /**
     * Devuelve los contextos del paso 4.
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosPasoSistAmort(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        IContexto contextoSubProducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        List<IContexto> listaContextosDatosEconomicos = obtenerContextosDatosEconomicos(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosCondicionesCapital = obtenerContextosCondicionesCapital(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
        List<IContexto> listaContextosTratamientoAdelantos = obtenerContextosTratamientoAdelantos(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosModalidadAmort = obtenerContextosModalidadAmortizacion(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        if (null != contextoProducto) {
            // ANPMN001 ? Producto
            listaContextos.add(contextoProducto);
        }
        if (null != contextoSubProducto) {
            // ANPMN002 ? Subproducto
            listaContextos.add(contextoSubProducto);
        }
        if (!Utilidades.isBlankOrNull(listaContextosDatosEconomicos)) {
            // ANPMN013 ? Datos Económicos
            listaContextos.addAll(listaContextosDatosEconomicos);
        }
        if (!Utilidades.isBlankOrNull(listaContextosCondicionesCapital)) {
            // ANPMN009 ? Condiciones Capital
            listaContextos.addAll(listaContextosCondicionesCapital);
        }
        if (!Utilidades.isBlankOrNull(listaContextosTratamientoAdelantos)) {
            // ANPMN006 ? Tratamiento de adelantos
            listaContextos.addAll(listaContextosTratamientoAdelantos);
        }
        if (!Utilidades.isBlankOrNull(listaContextosModalidadAmort)) {
            // ANPMN010 ? Modalidad de amortización
            listaContextos.addAll(listaContextosModalidadAmort);
        }
        IContexto contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004 ? Error
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    /**
     * Devuelve los contextos del paso 5.
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosPasoGastComis(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        IContexto contextoSubProducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        List<IContexto> listaContextosDatosEconomicos = obtenerContextosDatosEconomicos(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosComisiones = obtenerContextosComisiones(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        if (null != contextoProducto) {
            // ANPMN001 ? Producto
            listaContextos.add(contextoProducto);
        }
        if (null != contextoSubProducto) {
            // ANPMN002 ? Subproducto
            listaContextos.add(contextoSubProducto);
        }
        if (!Utilidades.isBlankOrNull(listaContextosDatosEconomicos)) {
            // ANPMN013 ? Datos Económicos
            listaContextos.addAll(listaContextosDatosEconomicos);
        }
        if (!Utilidades.isBlankOrNull(listaContextosComisiones)) {
            // ANPMN005 ? Comisiones
            listaContextos.addAll(listaContextosComisiones);
        }
        IContexto contextoError = obtenerContextoError();
        if (null != contextoError) {
            // ANPMN004 ? Error
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    /**
     * Devuelve todos los contextos.
     * @param version
     * @param bidIdProducto
     * @param bidIdSubProducto
     * @param bidColectivo
     * @param contextoEjecucion
     * @return listaContextos
     */
    private List<IContexto> obtenerContextosTodos(VersionesC version, BigDecimal bidIdProducto, BigDecimal bidIdSubProducto, BigDecimal bidColectivo, IContextoEjecucion contextoEjecucion, BigDecimal origen, BigDecimal codigoColectivo, String novacionSinModalidad, InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        List<IContexto> listaContextos = new ArrayList<IContexto>(Constantes.CTE_UNO);
        List<IContexto> listaContextosNivelesSubProducto = null;
        IContexto contextoProducto = obtenerContextoProducto(version, bidIdProducto, novacionSinModalidad, informacionRO);
        IContexto contextoSubProducto = obtenerContextoSubProducto(version, bidIdProducto, bidIdSubProducto);
        List<IContexto> listaContextosDatosEconomicos = obtenerContextosDatosEconomicos(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosClausulasRestringidas = GestionClausulasRestringuidas.obtenerContextosClausulasRestringidas(version, bidIdProducto, bidIdSubProducto);
        List<IContexto> listaContextosCondicionesCapital = obtenerContextosCondicionesCapital(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
        List<IContexto> listaContextosInteresTechoSueloTiposRefRedon = obtenerContextosInteresTechoSueloTiposRefRedon(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion, expedienteSolicitud);
        List<IContexto> listaContextosTratamientoAdelantos = obtenerContextosTratamientoAdelantos(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosModalidadAmort = obtenerContextosModalidadAmortizacion(version, bidIdProducto, bidIdSubProducto, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        List<IContexto> listaContextosComisiones = obtenerContextosComisiones(version, bidIdProducto, bidIdSubProducto, bidColectivo, novacionSinModalidad, informacionRO, esAmpliacion, esNovacion, esSubrogacion);
        /*20150911 Cuando el origen NO es simulación obtenemos los centros*/
        if ((null == origen) || (0 != Constantes.CTE_ORIGEN_CONSULTA_TARIFA_SIMULACION.compareTo(origen))) {
            listaContextosNivelesSubProducto = obtenerContextosNivelesSubProducto(version, bidIdProducto, bidIdSubProducto, bidColectivo, contextoEjecucion);
        }
        IContexto contextoColectivo = null;
        if (null != codigoColectivo) {
            contextoColectivo = obtenerContextoColectivo(codigoColectivo, bidColectivo);
        } else {
            contextoColectivo = obtenerContextoColectivo(bidColectivo);
        }
        IContexto contextoError = obtenerContextoError();
        if (null != contextoProducto) {
            // ANPMN001 ? Producto
            listaContextos.add(contextoProducto);
        }
        if (null != contextoSubProducto) {
            // ANPMN002 ? Subproducto
            listaContextos.add(contextoSubProducto);
        }
        if (null != contextoColectivo) {
            // ANPMN026 ? Colectivo
            listaContextos.add(contextoColectivo);
        }
        if (!Utilidades.isBlankOrNull(listaContextosDatosEconomicos)) {
            // ANPMN013 ? Datos Económicos
            listaContextos.addAll(listaContextosDatosEconomicos);
        }
        if (!Utilidades.isBlankOrNull(listaContextosClausulasRestringidas)) {
            // ANPMN012 ? Clausulas Restringidas
            listaContextos.addAll(listaContextosClausulasRestringidas);
        }
        if (!Utilidades.isBlankOrNull(listaContextosCondicionesCapital)) {
            // ANPMN009 ? Condiciones Capital
            listaContextos.addAll(listaContextosCondicionesCapital);
        }
        if (!Utilidades.isBlankOrNull(listaContextosInteresTechoSueloTiposRefRedon)) {
            listaContextos.addAll(listaContextosInteresTechoSueloTiposRefRedon);
        /* ANPMN014 ? Interés
				 *  ANPMN015 ? Techos y suelos
				 *  ANPMN018 ? Tipos de referencia
				 *  ANPMN017 ? Redondeo */
        }
        if (!Utilidades.isBlankOrNull(listaContextosTratamientoAdelantos)) {
            // ANPMN006 ? Tratamiento de adelantos
            listaContextos.addAll(listaContextosTratamientoAdelantos);
        }
        if (!Utilidades.isBlankOrNull(listaContextosModalidadAmort)) {
            // ANPMN010 ? Modalidad de amortización
            listaContextos.addAll(listaContextosModalidadAmort);
        }
        if (!Utilidades.isBlankOrNull(listaContextosComisiones)) {
            // ANPMN005 ? Comisiones
            listaContextos.addAll(listaContextosComisiones);
        }
        if (!Utilidades.isBlankOrNull(listaContextosNivelesSubProducto)) {
            // ANPMN022 - Niveles subproducto
            listaContextos.addAll(listaContextosNivelesSubProducto);
        }
        if (null != contextoError) {
            // ANPMN004 ? Error
            listaContextos.add(contextoError);
        }
        return listaContextos;
    }

    /**
     * Método encargado de la sobreescritura de campos de un contexto de
     * comisiones cuando sea novaciones. Depende de obtieneDatosRiesgoOrigen
     *
     * @param contexto
     * @return IContexto
     */
    private IContexto sobreescribeContextoComisiones(IContexto contexto) {
        if (null != comisionAdelantos && (Constantes.CTE_COMISION_DESIST_PARCIAL_S.equals(contexto.getString(CTX_ID_TIPO_COMISION)))) {
            contexto.put(CTX_PORCENTAJE_COMISION_ESTANDAR, comisionAdelantos);
            contexto.put(CTX_IND_PORCENTAJE_COMISION, "1");
        }
        if (Constantes.CTE_COMISION_AMORT_ANT_S.equals(contexto.getString(CTX_ID_TIPO_COMISION))) {
            if (null != comisionAdelantos) {
                contexto.put(CTX_PORCENTAJE_COMISION_ESTANDAR, comisionAdelantos);
            }
            contexto.put(CTX_IND_PORCENTAJE_COMISION, "1");
        }
        if (Constantes.CTE_COMISION_CANC_ANT_S.equals(contexto.getString(CTX_ID_TIPO_COMISION))) {
            if (null != comisionCancelacion) {
                contexto.put(CTX_PORCENTAJE_COMISION_ESTANDAR, comisionCancelacion);
            }
            contexto.put(CTX_IND_PORCENTAJE_COMISION, "1");
        }
        if (Constantes.CTE_COMISION_AMORT_ANUAL_S.equals(contexto.getString(CTX_ID_TIPO_COMISION))) {
            if (null != topeAdelantoAnualSobreSaldo) {
                contexto.put(CTX_IMPORTE_MIN_ESTANDAR, topeAdelantoAnualSobreSaldo);
            }
            if (null != comisionAdelantosSuperioresAPorcentajeSaldo) {
                contexto.put(CTX_PORCENTAJE_ADELANTO, comisionAdelantosSuperioresAPorcentajeSaldo);
            }
            contexto.put(CTX_IND_IMPORTE_MINIMO, "1");
            contexto.put(CTX_IND_PORCENTAJE_ADELANTO, "1");
        }
        if (Constantes.CTE_COMISION_GASTOS_ESTUDIO_S.equals(contexto.getString(CTX_ID_TIPO_COMISION))) {
            if (null != comisionGastosEstudio) {
                if (comisionGastosEstudio.compareTo(BigDecimal.ZERO) == 0) {
                    contexto.put(CTX_PORCENTAJE_COMISION_ESTANDAR, comisionGastosEstudio);
                    contexto.put(CTX_IND_PORCENTAJE_COMISION, "1");
                    contexto.put(CTX_IND_FORMA_PAGO, "1");
                } else {
                    contexto.put(CTX_PORCENTAJE_COMISION_ESTANDAR, comisionGastosEstudio);
                    contexto.put(CTX_IND_PORCENTAJE_COMISION, "4");
                }
            }
            if (null != minimoGastosEstudio) {
                if (minimoGastosEstudio.compareTo(BigDecimal.ZERO) == 0) {
                    contexto.put(CTX_IMPORTE_MIN_ESTANDAR, minimoGastosEstudio);
                    contexto.put(CTX_IND_IMPORTE_MINIMO, "1");
                } else {
                    contexto.put(CTX_IMPORTE_MIN_ESTANDAR, minimoGastosEstudio);
                    contexto.put(CTX_IND_IMPORTE_MINIMO, "4");
                }
            }
        }
        if (Constantes.CTE_COMISION_APERTURA_S.equals(contexto.getString(CTX_ID_TIPO_COMISION))) {
            if (null != comisionApertura) {
                if (comisionApertura.compareTo(BigDecimal.ZERO) == 0) {
                    contexto.put(CTX_PORCENTAJE_COMISION_ESTANDAR, comisionApertura);
                    contexto.put(CTX_IND_PORCENTAJE_COMISION, "1");
                    contexto.put(CTX_IND_FORMA_PAGO, "1");
                } else {
                    contexto.put(CTX_PORCENTAJE_COMISION_ESTANDAR, comisionApertura);
                    contexto.put(CTX_IND_PORCENTAJE_COMISION, "4");
                }
            }
            if (null != minimoComisionApertura) {
                if (minimoComisionApertura.compareTo(BigDecimal.ZERO) == 0) {
                    contexto.put(CTX_IMPORTE_MIN_ESTANDAR, minimoComisionApertura);
                    contexto.put(CTX_IND_IMPORTE_MINIMO, "1");
                } else {
                    contexto.put(CTX_IMPORTE_MIN_ESTANDAR, minimoComisionApertura);
                    contexto.put(CTX_IND_IMPORTE_MINIMO, "4");
                }
            }
        }
        // Deuda
        if (Constantes.CTE_COMISION_RECLAMACION_S.equals(contexto.getString(CTX_ID_TIPO_COMISION))) {
            contexto.put(CTX_IND_PORCENTAJE_COMISION, "1");
        }
        // Modificacion contractual
        if (Constantes.CTE_COMISION_MODIF_GARANTIAS_S.equals(contexto.getString(CTX_ID_TIPO_COMISION))) {
            contexto.put(CTX_IND_PORCENTAJE_COMISION, "1");
            contexto.put(CTX_IND_IMPORTE_MINIMO, "1");
        }
        return contexto;
    }

    /**
     * Método encargado de la sobreescritura de campos de un contexto de
     * modalidades cuando sea novaciones. Depende de obtieneDatosRiesgoOrigen
     *
     * @param contexto
     * @return
     */
    private IContexto sobreescribeContextoModalidades(IContexto contexto) {
        if (null != razonOrigen) {
            contexto.put("ANPMN010060", razonOrigen);
            contexto.put("ANPMN010090", "1");
        }
        return contexto;
    }

    /**
     * Método encargado de la sobreescritura de campos de un contexto de
     * intereses cuando sea novaciones. Depende de obtieneDatosRiesgoOrigen
     *
     * @param contexto
     * @return
     */
    private IContexto sobreescribeContextoIntereses(IContexto contexto, String esAmpliacion, String esNovacion, String esSubrogacion, BigDecimal expedienteSolicitud) {
        if (null != demorasCapital) {
            contexto.put("ANPMN014370", demorasCapital);
            contexto.put("ANPMN014380", "1");
        }
        if (null != demorasInteres) {
            contexto.put("ANPMN014410", demorasInteres);
            contexto.put("ANPMN014420", "1");
        }
        if (esNovacion.equals(Constantes.SI) || ((expedienteSolicitud != null) && (expedienteSolicitud.compareTo(ConstantesComun.EXPEDIENTE_SUBROGACION) == 0))) {
            if (null != indPeriodoLiquidacionInteres) {
                contexto.put("ANPMN014610", indPeriodoLiquidacionInteres);
            }
        }
        return contexto;
    }

    /**
     * Método encargado de la sobreescritura de campos de un contexto de
     * cond.capital. Depende de obtieneDatosRiesgoOrigen
     *
     * @param contexto
     * @return
     */
    private IContexto sobreescribeContextoCondiCapital(IContexto contexto) {
        if (null != indPeriodoLiquidacionCapital) {
            contexto.put("ANPMN009230", indPeriodoLiquidacionCapital);
        }
        return contexto;
    }

    /**
     * Método encargado de la sobreescritura de campos de un contexto de
     * datos económicos cuando sea novaciones. Depende de obtieneDatosRiesgoOrigen
     *
     * @param contexto
     * @return
     */
    private IContexto sobreescribeContextoDatosEconomicos(IContexto contexto, final InformacionRiesgoOrigenVO informacionRO, String esAmpliacion, String esNovacion, String esSubrogacion) {
        if (null != plazoRiesgoOrigen) {
            contexto.put("ANPMN013200", plazoRiesgoOrigen);
            // Para novaciones y ampliaciones se permite modificar el plazo
            if ((esAmpliacion.equals(Constantes.SI)) || (esNovacion.equals(Constantes.SI))) {
                contexto.put("ANPMN013230", "4");
            } else {
                contexto.put("ANPMN013230", "1");
            }
        }
        if (null != importeRiesgoOrigen) {
            contexto.put("ANPMN013160", importeRiesgoOrigen);
            contexto.put("ANPMN013190", "1");
        }
        if (null != valorInversion) {
            contexto.put("ANPMN013850", valorInversion);
        }
        if (null != informacionRO) {
            contexto.put("ANPMN013860", informacionRO.getSaldoActualDeposito());
        }
        return contexto;
    }

    /**
     * Método encargado de la sobreescritura de campos de un contexto de
     * diferenciales cuando sea novaciones. Depende de obtieneDatosRiesgoOrigen
     *
     * @param contexto
     * @return
     */
    private IContexto sobreescribeContextoDireferenciales(IContexto contexto) {
        // Si es novación se sobreescriben campos con datos de riesgo origen
        if (null != minimoVariacion) {
            contexto.put("ANPMN015360", minimoVariacion);
            contexto.put("ANPMN015370", "1");
        }
        return contexto;
    }

    private static final String COLECTIVO_1681736460 = "COLECTIVO_1681736460";

    private static final String CODIGO_PRODUCTO_1619207098 = "CODIGO_PRODUCTO_1619207098";

    private static final String VERSION_GENERAL_1839166593 = "VERSION_GENERAL_1839166593";

    private static final String CODIGO_SUBPRODUCTO_716083962 = "CODIGO_SUBPRODUCTO_716083962";
}
