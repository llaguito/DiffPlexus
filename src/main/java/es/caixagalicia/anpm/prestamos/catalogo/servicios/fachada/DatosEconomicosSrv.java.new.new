/**
 * Aplicacion de Activo
 * Caixa Galicia © 2009-2010
 */
package es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada;

import java.math.BigDecimal;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.datEconomicos.DatEcoC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionDatEco;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextoRespuesta;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosDatEco;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.ResultadoOperacionVersionesVO;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

/**
 * SERVICIO DE ALTA / MODIFICACION DE DATOS ECONOMICOS
 *
 * @author U7336
 */
public class DatosEconomicosSrv extends ServicioNegocio {

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ID_PRODUCTO = 0;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_ID_SUBPRODUCTO = 1;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_ID_VERSION = 2;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_COLECTIVO = 3;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_NIVEL = 4;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_CNAE = 5;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_CNAE = 6;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_DESTINO = 7;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_DESTINO = 8;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_SUBDESTINO = 9;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_SUBDESTION = 10;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_GARANTIA = 11;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_GARANTIA = 12;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_PRINCIPAL = 13;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PRINCIPAL_DESDE = 14;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PRINCIPAL_HASTA = 15;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_PRINCIPAL = 16;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO = 17;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_DESDE = 18;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_HASTA = 19;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_PLAZO = 20;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FECHA_MAX = 21;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_FECHA_MAX = 22;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_CARENCIA = 23;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_CARENCIA_DESDE = 24;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_CARENCIA_HASTA = 25;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_PLAZO_CARENCIA = 26;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FECHA_MAX_PLAZO_CARENCIA = 27;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_FECHA_MAX_PLAZO_CARENCIA = 28;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_DIFER = 29;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_DIFER_DESDE = 30;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_DIFER_HASTA = 31;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_PLAZO_DIFER = 32;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FECHA_MAX_DIFER = 33;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_FECHA_MAX_DIFER = 34;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_DESEM = 35;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_DESEM_DESDE = 36;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PLAZO_DESEM_HASTA = 37;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_PLAZO_DESEM = 38;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FECHA_MAX_DESEM = 39;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_FECHA_MAX_DESEM = 40;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_MONEDA = 41;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_MONEDA = 42;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_SECTOR = 43;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_SECTOR = 44;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_CANAL = 45;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_CANAL = 46;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PAIS = 47;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_PAIS = 48;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_DIAS_GRACIA = 49;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_IND_DIAS_GRACIAS = 50;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_UNIDAD_PLAZO = 51;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_CARENCIA_CAPITAL = 52;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_CARENCIA_INTERES = 53;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PER_MAX_CARENCIA = 54;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_CONDCIONES_PARA = 55;

    // private static final int CTE_POSICION_TIRA_USUARIO = 56; // OBLIGATORIO
    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_FECHA_DESDE = 57;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_FECHA_HASTA = 58;

    // OBLIGATORIO
    private static final int CTE_POSICION_TIRA_VG = 59;

    // OPTATIVO
    private static final int CTE_POSICION_TIRA_SUBPRODUCTO_AUX = 60;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_PREGUNTA = 61;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_CARTERA = 62;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_IND_CARTERA = 63;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_TITULARIDAD = 64;

    // OPCIONAL
    private static final int CTE_POSICION_TIRA_IND_TITULARIDAD = 65;

    private static final int CTE_POSICION_TIRA_TIPO_GARANTIA = 66;

    private static final int CTE_POSICION_TIRA_INCREMENTO = 67;

    /**
     * Log de la clase.
     */
    private static final LogHelper LOGGER = LogHelper.getLog(DatosEconomicosSrv.class);

    /**
     *  Constructor sin parametros.
     */
    public DatosEconomicosSrv() {
        super();
    }

    /**
     * Ejecuta la logica de negocio del servicio
     *
     * @see es.caixagalicia.ifrt.core.ServicioNegocio
     * 		#ejecutar(
     * 			es.caixagalicia.ifrt.core.IContextoEjecucion,
     * 			es.caixagalicia.ifrt.core.IDatosEntradaTx)
     * @param contexto contexto de ejecucion
     * @param datosEntrada datos de entrada
     * @return <code>IContexto[]</code>
     */
    @Override
    public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO SNANPM027: Alta/modificación de una clausula restringuida.");
        }
        contexto.setDiarioElectronico(new DiarioElectronico(Constantes.CTE_OPERACION_AC, Integer.valueOf(0), BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, Constantes.CTE_STRING_EMPTY, Constantes.CTE_STRING_EMPTY, BigDecimal.ZERO, BigDecimal.ZERO, Integer.valueOf(0)));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Obtenemos los parametros de entrada");
        }
        Integer plazo = null;
        Integer plazoDesde = null;
        Integer plazoHasta = null;
        Integer plazoCarencia = null;
        Integer plazoCarenciaDesde = null;
        Integer plazoCarenciaHasta = null;
        Integer plazoDifer = null;
        Integer plazoDiferDesde = null;
        Integer plazoDiferHasta = null;
        Integer plazoDesem = null;
        Integer plazoDesemDesde = null;
        Integer plazoDesemHasta = null;
        Integer diasGracia = null;
        Integer perMaxCar = null;
        ResultadoOperacionVersionesVO resultado = null;
        DatEcoC dato;
        Integer idVersionGeneral = null;
        GestionDatEco gde = new GestionDatEco();
        // OBLIGATORIO
        BigDecimal bidIdProducto = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_PRODUCTO);
        // OBLIGATORIO
        BigDecimal bidIdSubProducto = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_SUBPRODUCTO);
        // OPCIONAL
        BigDecimal bidIdVersion = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_VERSION);
        // OBLIGATORIO
        BigDecimal bidIdColectivo = datosEntrada.getDecimal(CTE_POSICION_TIRA_COLECTIVO);
        // OBLIGATORIO
        BigDecimal bidNivel = datosEntrada.getDecimal(CTE_POSICION_TIRA_NIVEL);
        // OBLIGATORIO
        String strCNAE = datosEntrada.getString(CTE_POSICION_TIRA_CNAE);
        // OBLIGATORIO
        String strIndCNAE = datosEntrada.getString(CTE_POSICION_TIRA_IND_CNAE);
        // OBLIGATORIO
        String strDestino = datosEntrada.getString(CTE_POSICION_TIRA_DESTINO);
        // OBLIGATORIO
        String strIndDestino = datosEntrada.getString(CTE_POSICION_TIRA_IND_DESTINO);
        // OBLIGATORIO
        String strSubDestino = datosEntrada.getString(CTE_POSICION_TIRA_SUBDESTINO);
        // OBLIGATORIO
        String strIndSubDestino = datosEntrada.getString(CTE_POSICION_TIRA_IND_SUBDESTION);
        // OBLIGATORIO
        BigDecimal bidGarantia = datosEntrada.getDecimal(CTE_POSICION_TIRA_GARANTIA);
        // OBLIGATORIO
        String strIndGarantia = datosEntrada.getString(CTE_POSICION_TIRA_IND_GARANTIA);
        // OBLIGATORIO
        BigDecimal bidPrincipal = datosEntrada.getDecimal(CTE_POSICION_TIRA_PRINCIPAL);
        // OPCIONAL
        BigDecimal bidPrincipalDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PRINCIPAL_DESDE);
        // OPCIONAL
        BigDecimal bidPrincipalHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PRINCIPAL_HASTA);
        // OBLIGATORIO
        String strIndPrincipal = datosEntrada.getString(CTE_POSICION_TIRA_IND_PRINCIPAL);
        // OPCIONAL
        BigDecimal bidPlazo = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO);
        // OPCIONAL
        BigDecimal bidPlazoDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DESDE);
        // OPCIONAL
        BigDecimal bidPlazoHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_HASTA);
        // OBLIGATORIO
        String strIndPlazo = datosEntrada.getString(CTE_POSICION_TIRA_IND_PLAZO);
        // OPCIONAL
        String strFechaMax = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_MAX);
        // OBLIGATORIO
        String strIndFechaMax = datosEntrada.getString(CTE_POSICION_TIRA_IND_FECHA_MAX);
        // OPCIONAL
        BigDecimal bidPlazoCarencia = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_CARENCIA);
        // OPCIONAL
        BigDecimal bidPlazoCarenciaDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_CARENCIA_DESDE);
        // OPCIONAL
        BigDecimal bidPlazoCarenciaHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_CARENCIA_HASTA);
        // OBLIGATORIO
        String strIndPlazoCarencia = datosEntrada.getString(CTE_POSICION_TIRA_IND_PLAZO_CARENCIA);
        // OPCIONAL
        String strFechaMaxCarencia = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_MAX_PLAZO_CARENCIA);
        // OBLIGATORIO
        String strIndFechaMaxCarencia = datosEntrada.getString(CTE_POSICION_TIRA_IND_FECHA_MAX_PLAZO_CARENCIA);
        // OPCIONAL
        BigDecimal bidPlazoDifer = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DIFER);
        // OPCIONAL
        BigDecimal bidPlazoDiferDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DIFER_DESDE);
        // OPCIONAL
        BigDecimal bidPlazoDiferHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DIFER_HASTA);
        // OBLIGATORIO
        String strIndPlazoDifer = datosEntrada.getString(CTE_POSICION_TIRA_IND_PLAZO_DIFER);
        // OPCIONAL
        String strFechaMaxDifer = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_MAX_DIFER);
        // OBLIGATORIO
        String strIndFechaMaxDifer = datosEntrada.getString(CTE_POSICION_TIRA_IND_FECHA_MAX_DIFER);
        // OPCIONAL
        BigDecimal bidPlazoDesem = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DESEM);
        // OPCIONAL
        BigDecimal bidPlazoDesemDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DESEM_DESDE);
        // OPCIONAL
        BigDecimal bidPlazoDesemHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DESEM_HASTA);
        // OBLIGATORIO
        String strIndPlazoDesem = datosEntrada.getString(CTE_POSICION_TIRA_IND_PLAZO_DESEM);
        // OPCIONAL
        String strFechaMaxDesem = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_MAX_DESEM);
        // OBLIGATORIO
        String strIndFechaMaxDesem = datosEntrada.getString(CTE_POSICION_TIRA_IND_FECHA_MAX_DESEM);
        // OBLIGATORIO
        String strMoneda = datosEntrada.getString(CTE_POSICION_TIRA_MONEDA);
        // OBLIGATORIO
        String strIndMoneda = datosEntrada.getString(CTE_POSICION_TIRA_IND_MONEDA);
        // OBLIGATORIO
        BigDecimal bidSector = datosEntrada.getDecimal(CTE_POSICION_TIRA_SECTOR);
        // OBLIGATORIO
        String strIndSector = datosEntrada.getString(CTE_POSICION_TIRA_IND_SECTOR);
        // OBLIGATORIO
        BigDecimal bidCanal = datosEntrada.getDecimal(CTE_POSICION_TIRA_CANAL);
        // OBLIGATORIO
        String strIndCanal = datosEntrada.getString(CTE_POSICION_TIRA_IND_CANAL);
        // OPCIONAL
        BigDecimal bidPais = datosEntrada.getDecimal(CTE_POSICION_TIRA_PAIS);
        // OBLIGATORIO
        String strIndPais = datosEntrada.getString(CTE_POSICION_TIRA_IND_PAIS);
        // OPCIONAL
        BigDecimal bidDiasGracia = datosEntrada.getDecimal(CTE_POSICION_TIRA_DIAS_GRACIA);
        // OBLIGATORIO
        String strIndDiasGracia = datosEntrada.getString(CTE_POSICION_TIRA_IND_DIAS_GRACIAS);
        // OBLIGATORIO
        String strUnidadPlazo = datosEntrada.getString(CTE_POSICION_TIRA_UNIDAD_PLAZO);
        // OBLIGATORIO
        BigDecimal bidCarenciaCapital = datosEntrada.getDecimal(CTE_POSICION_TIRA_CARENCIA_CAPITAL);
        // OBLIGATORIO
        BigDecimal bidCarenciaInteres = datosEntrada.getDecimal(CTE_POSICION_TIRA_CARENCIA_INTERES);
        // OPCIONAL
        BigDecimal bidPerMaxCarencia = datosEntrada.getDecimal(CTE_POSICION_TIRA_PER_MAX_CARENCIA);
        // OBLIGATORIO
        BigDecimal bidCondicionesPara = datosEntrada.getDecimal(CTE_POSICION_TIRA_CONDCIONES_PARA);
        // datosEntrada.getString(CTE_POSICION_TIRA_USUARIO); // OBLIGATORIO
        String strUsuario = contexto.getUsuario();
        // OBLIGATORIO
        String strFechaDesde = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_DESDE);
        // OPCIONAL
        String strFechaHasta = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_HASTA);
        // OBLIGATORIO
        BigDecimal bidVG = datosEntrada.getDecimal(CTE_POSICION_TIRA_VG);
        BigDecimal bidpregunta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PREGUNTA);
        // OPTATIVO
        String strCartera = datosEntrada.getString(CTE_POSICION_TIRA_CARTERA);
        // OPTATIVO
        String strIndCartera = datosEntrada.getString(CTE_POSICION_TIRA_IND_CARTERA);
        // inicializamos valores
        String strTitularidad = Constantes.CTE_CERO.toString();
        String strIndTitularidad = Constantes.CTE_CERO.toString();
        String strTipoGarantia = Constantes.CTE_CERO.toString();
        BigDecimal bidIncremento = new BigDecimal(Constantes.CTE_CERO.intValue());
        if (new BigDecimal(ServicioNegocio.getContexto().getVersionActual()).compareTo(new BigDecimal(2)) >= 0) {
            // OPTATIVO
            strTitularidad = datosEntrada.getString(CTE_POSICION_TIRA_TITULARIDAD);
            // OPTATIVO
            strIndTitularidad = datosEntrada.getString(CTE_POSICION_TIRA_IND_TITULARIDAD);
            // OPTATIVO
            strTipoGarantia = datosEntrada.getString(CTE_POSICION_TIRA_TIPO_GARANTIA);
            // OPTATIVO
            bidIncremento = datosEntrada.getDecimal(CTE_POSICION_TIRA_INCREMENTO);
        }
        // este campo vendrá con valor siempre que se realice el alta de un cero, para saber en que rango de
        // fechas debe moverse.
        BigDecimal bidSubAux = datosEntrada.getDecimal(CTE_POSICION_TIRA_SUBPRODUCTO_AUX);
        Integer intPais = null;
        Integer intPregunta = null;
        Integer intSubAux = null;
        if (bidSubAux != null) {
            intSubAux = new Integer(bidSubAux.intValue());
        }
        if (null != bidPlazo) {
            plazo = new Integer(bidPlazo.intValue());
        }
        if (null != bidPlazoDesde) {
            plazoDesde = new Integer(bidPlazoDesde.intValue());
        }
        if (null != bidPlazoHasta) {
            plazoHasta = new Integer(bidPlazoHasta.intValue());
        }
        if (null != bidPlazoCarencia) {
            plazoCarencia = new Integer(bidPlazoCarencia.intValue());
        }
        if (null != bidPlazoCarenciaDesde) {
            plazoCarenciaDesde = new Integer(bidPlazoCarenciaDesde.intValue());
        }
        if (null != bidPlazoCarenciaHasta) {
            plazoCarenciaHasta = new Integer(bidPlazoCarenciaHasta.intValue());
        }
        if (null != bidPlazoDifer) {
            plazoDifer = new Integer(bidPlazoDifer.intValue());
        }
        if (null != bidPlazoDiferDesde) {
            plazoDiferDesde = new Integer(bidPlazoDiferDesde.intValue());
        }
        if (null != bidPlazoDiferHasta) {
            plazoDiferHasta = new Integer(bidPlazoDiferHasta.intValue());
        }
        if (null != bidPlazoDesem) {
            plazoDesem = new Integer(bidPlazoDesem.intValue());
        }
        if (null != bidPlazoDesemDesde) {
            plazoDesemDesde = new Integer(bidPlazoDesemDesde.intValue());
        }
        if (null != bidPlazoDesemHasta) {
            plazoDesemHasta = new Integer(bidPlazoDesemHasta.intValue());
        }
        if (null != bidDiasGracia) {
            diasGracia = new Integer(bidDiasGracia.intValue());
        }
        if (null != bidPerMaxCarencia) {
            perMaxCar = new Integer(bidPerMaxCarencia.intValue());
        }
        if (null != bidPais) {
            intPais = new Integer(bidPais.intValue());
        } else {
            intPais = new Integer(0);
        }
        if (bidpregunta != null) {
            intPregunta = new Integer(bidpregunta.intValue());
        }
        Integer gar = null;
        if (bidGarantia != null) {
            gar = new Integer(bidGarantia.intValue());
        } else {
            gar = new Integer(0);
        }
        Integer sector = null;
        if (bidSector != null) {
            sector = new Integer(bidSector.intValue());
        } else {
            sector = new Integer(0);
        }
        Integer canal = null;
        if (bidCanal != null) {
            canal = new Integer(bidCanal.intValue());
        } else {
            canal = new Integer(0);
        }
        if (Utilidades.isBlankOrNull(bidIdVersion)) {
            if (bidIdColectivo.intValue() == 0) {
                // es un nuevo dato económico.
                resultado = gde.altaDatoEco(new Integer(bidVG.intValue()), new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), intSubAux, new Integer(bidIdColectivo.intValue()), new Integer(bidNivel.intValue()), strCNAE, strIndCNAE, strDestino, strIndDestino, strSubDestino, strIndSubDestino, gar, strIndGarantia, bidPrincipal, bidPrincipalDesde, bidPrincipalHasta, strIndPrincipal, plazo, plazoDesde, plazoHasta, strIndPlazo, strFechaMax, strIndFechaMax, plazoCarencia, plazoCarenciaDesde, plazoCarenciaHasta, strIndPlazoCarencia, strFechaMaxCarencia, strIndFechaMaxCarencia, plazoDifer, plazoDiferDesde, plazoDiferHasta, strIndPlazoDifer, strFechaMaxDifer, strIndFechaMaxDifer, plazoDesem, plazoDesemDesde, plazoDesemHasta, strIndPlazoDesem, strFechaMaxDesem, strIndFechaMaxDesem, strMoneda, strIndMoneda, sector, strIndSector, canal, strIndCanal, intPais, strIndPais, diasGracia, strIndDiasGracia, strUnidadPlazo, new Integer(bidCarenciaCapital.intValue()), new Integer(bidCarenciaInteres.intValue()), perMaxCar, new Integer(bidCondicionesPara.intValue()), strUsuario, strFechaDesde, strFechaHasta, intPregunta, strUsuario, strCartera, strIndCartera, strTitularidad, strIndTitularidad, strTipoGarantia, bidIncremento);
            } else {
                // alta modif de dato eco colectivo
                resultado = gde.altaDatoEcoColectivo(new Integer(bidVG.intValue()), new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), new Integer(bidIdColectivo.intValue()), bidPrincipal, bidPrincipalDesde, bidPrincipalHasta, strIndPrincipal, plazo, plazoDesde, plazoHasta, strIndPlazo, plazoCarencia, plazoCarenciaDesde, plazoCarenciaHasta, strIndPlazoCarencia, plazoDifer, plazoDiferDesde, plazoDiferHasta, strIndPlazoDifer, plazoDesem, plazoDesemDesde, plazoDesemHasta, strIndPlazoDesem, strUnidadPlazo, strFechaDesde, strFechaHasta, strUsuario);
            }
            if (resultado.getCodError().intValue() > Constantes.CTE_CERO.intValue()) {
                idVersionGeneral = resultado.getCodError();
            } else {
                idVersionGeneral = new Integer(bidVG.intValue());
            }
        } else {
            if (bidIdColectivo.intValue() == 0) {
                // debemos obtener el dato a modificar
                dato = (DatEcoC) gde.obtenerVersion(new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), new Integer(bidIdVersion.intValue()), null, true, true, new Integer(bidNivel.intValue()), new Integer(bidIdColectivo.intValue()), null, null);
                if (dato != null) {
                    // es la modificación de un dato económico.
                    resultado = gde.modificarDatoEco(new Integer(bidVG.intValue()), dato, new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), new Integer(bidIdColectivo.intValue()), new Integer(bidNivel.intValue()), strCNAE, strIndCNAE, strDestino, strIndDestino, strSubDestino, strIndSubDestino, gar, strIndGarantia, bidPrincipal, bidPrincipalDesde, bidPrincipalHasta, strIndPrincipal, plazo, plazoDesde, plazoHasta, strIndPlazo, strFechaMax, strIndFechaMax, plazoCarencia, plazoCarenciaDesde, plazoCarenciaHasta, strIndPlazoCarencia, strFechaMaxCarencia, strIndFechaMaxCarencia, plazoDifer, plazoDiferDesde, plazoDiferHasta, strIndPlazoDifer, strFechaMaxDifer, strIndFechaMaxDifer, plazoDesem, plazoDesemDesde, plazoDesemHasta, strIndPlazoDesem, strFechaMaxDesem, strIndFechaMaxDesem, strMoneda, strIndMoneda, sector, strIndSector, canal, strIndCanal, intPais, strIndPais, diasGracia, strIndDiasGracia, strUnidadPlazo, new Integer(bidCarenciaCapital.intValue()), new Integer(bidCarenciaInteres.intValue()), perMaxCar, new Integer(bidCondicionesPara.intValue()), strUsuario, strFechaDesde, strFechaHasta, intSubAux, strCartera, strIndCartera, strTitularidad, strIndTitularidad, strTipoGarantia, bidIncremento);
                    if (resultado.getCodError().intValue() > Constantes.CTE_CERO.intValue()) {
                        idVersionGeneral = resultado.getCodError();
                    } else {
                        idVersionGeneral = new Integer(bidVG.intValue());
                    }
                }
            } else {
                // alta modif de dato eco colectivo
                resultado = gde.altaDatoEcoColectivo(new Integer(bidVG.intValue()), new Integer(bidIdProducto.intValue()), new Integer(bidIdSubProducto.intValue()), new Integer(bidIdColectivo.intValue()), bidPrincipal, bidPrincipalDesde, bidPrincipalHasta, strIndPrincipal, plazo, plazoDesde, plazoHasta, strIndPlazo, plazoCarencia, plazoCarenciaDesde, plazoCarenciaHasta, strIndPlazoCarencia, plazoDifer, plazoDiferDesde, plazoDiferHasta, strIndPlazoDifer, plazoDesem, plazoDesemDesde, plazoDesemHasta, strIndPlazoDesem, strUnidadPlazo, strFechaDesde, strFechaHasta, strUsuario);
                if (resultado.getCodError().intValue() > Constantes.CTE_CERO.intValue()) {
                    idVersionGeneral = resultado.getCodError();
                } else {
                    idVersionGeneral = new Integer(bidVG.intValue());
                }
            }
        }
        // debemos generar el contexto de salida
        // tras producir el alta o la modificación (en ambos casos tendremos un VO que tiene el
        // error si se produjo o el objeto creado/modificado con sus datos).
        final IContexto[] contextoSalida;
        if (resultado.getCodError().equals(new Integer(-1))) {
            contextoSalida = ContextoRespuesta.rellenarDatosContexto(idVersionGeneral, new Mensaje(ServicioNegocio.getContexto(), PREGUNTA_1287271702).toString());
        } else {
            contextoSalida = ContextosDatEco.rellenarDatosContexto((DatEcoC) resultado.getDatos(), idVersionGeneral, resultado.getCodError().intValue());
        }
        return contextoSalida;
    }

    private static final String PREGUNTA_1287271702 = "PREGUNTA_1287271702";
}
