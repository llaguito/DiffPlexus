/**
 * 
 * Aplicacion de Activa
 * Caixa Galicia © 2009-2010
 * 
 */
package es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada;

import java.math.BigDecimal;
import java.sql.Date;

import es.caixagalicia.anpm.prestamos.catalogo.persistencia.comisiones.ComisionesC;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion.GestionComisiones;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextoRespuesta;
import es.caixagalicia.anpm.prestamos.catalogo.servicios.fachada.contextos.ContextosComisiones;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.CodigosError;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.DateUtils;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.ResultadoOperacionVersionesVO;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Utilidades;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;

/**
 * @author U7336
 *
 */
public class ComisionesSrv extends ServicioNegocio
{

	private static final int CTE_POSICION_TIRA_ID_PRODUCTO = 					0;
	private static final int CTE_POSICION_TIRA_ID_SUBPRODUCTO = 				1;
	private static final int CTE_POSICION_TIRA_ID_VERSION = 					2;
	private static final int CTE_POSICION_TIRA_ID_COLECTIVO = 					3;
	private static final int CTE_POSICION_TIRA_ID_NIVEL = 						4;
	private static final int CTE_POSICION_TIRA_ID_TIPO_COMISION = 				5;
	
	private static final int CTE_POSICION_TIRA_ID_ORDEN = 						6;	
	
	private static final int CTE_TIRA_PORCENTAJE_COMISION_ESTANDAR = 			7;
	private static final int CTE_POSICION_TIRA_PORCENTAJE_COMISION_DESDE = 		8;
	private static final int CTE_POSICION_TIRA_PORCENTAJE_COMISION_HASTA = 		9;	
	private static final int CTE_TIRA_PORCENTAJE_COMISION_INDICADOR = 			10;
	
	private static final int CTE_TIRA_PORCENTAJE_ADELANTO_ESTANDAR = 			11;
	private static final int CTE_POSICION_TIRA_PORCENTAJE_ADELANTO_DESDE = 		12;
	private static final int CTE_POSICION_TIRA_PORCENTAJE_ADELANTO_HASTA = 		13;
	private static final int CTE_TIRA_PORCENTAJE_ADELANTO_INDICADOR = 			14;
	
	private static final int CTE_POSICION_TIRA_IMPORTE_MINIMO_ESTANDAR = 		15;
	private static final int CTE_POSICION_TIRA_IMPORTE_MINIMO_DESDE = 			16;
	private static final int CTE_POSICION_TIRA_IMPORTE_MINIMO_HASTA = 			17;
	private static final int CTE_POSICION_TIRA_IMPORTE_MINIMO_INDICADOR = 		18;
	
	private static final int CTE_POSICION_TIRA_PLAZO_ESTANDAR = 				19;
	private static final int CTE_POSICION_TIRA_PLAZO_DESDE = 					20;
	private static final int CTE_POSICION_TIRA_PLAZO_HASTA = 					21;
	private static final int CTE_POSICION_TIRA_PLAZO_INDICADOR = 				22;
	
	private static final int CTE_POSICION_TIRA_FORMA_PAGO = 					23;
	private static final int CTE_POSICION_TIRA_FORMA_PAGO_INDICADOR = 			24;
	
	private static final int CTE_POSICION_TIRA_TIPO_PAGO = 						25;
	private static final int CTE_POSICION_TIRA_TIPO_PAGO_INDICADOR = 			26;
	
	private static final int CTE_POSICION_TIRA_PLAZO_PAGO = 					27;	
	private static final int CTE_POSICION_TIRA_PLAZO_PAGO_UNIDAD = 				28;
	private static final int CTE_POSICION_TIRA_PLAZO_PAGO_INDICADOR = 			29;
	
	private static final int CTE_TIRA_NUMERO_PERIODOS_PERIODICIDAD = 			30;
	private static final int CTE_TIRA_NUMERO_PERIODOS_PERIODICIDAD_IND = 		31;
	
	private static final int CTE_TIRA_UNIDAD_PERIODOS_PERIODICIDAD = 			32;
	private static final int CTE_TIRA_UNIDAD_PERIODOS_PERIODICIDAD_IND = 		33;
	
	private static final int CTE_POSICION_TIRA_TIPO_PERIODOS_PER = 				34;
	private static final int CTE_TIRA_TIPO_PERIODOS_PERIODICIDAD_IND =			35;
	
	private static final int CTE_POSICION_TIRA_PROMOTOR_ADQUIRENTE = 			36;
	
	//private static final int CTE_POSICION_TIRA_USUARIO = 						37;
	
	//private static final int CTE_POSICION_TIRA_FECHA_CREACION = 				38;		
	private static final int CTE_POSICION_TIRA_FECHA_DESDE = 					39;
	//private static final int CTE_POSICION_TIRA_HORA_DESDE = 					40;
	private static final int CTE_POSICION_TIRA_FECHA_HASTA = 					41;
	//private static final int CTE_POSICION_TIRA_HORA_HASTA = 					42;
	//private static final int CTE_BORRADO = 									43;
	private static final int CTE_POSICION_TIRA_VG = 							44;
	private static final int CTE_POSICION_TIRA_SUB_AUX = 						45;
	private static final int CTE_POSICION_TIRA_PREGUNTA = 						46; // OPCIONAL
	
	//Integer VG,  Integer pIdSubAux
		
	/**
	 * Log de la clase.
	 */
	private static final LogHelper LOGGER = LogHelper.getLog(ComisionesSrv.class);
	
	
	/**
	 * Constructor sin parametros
	 */
	public ComisionesSrv()
	{
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * Ejecuta la logica de negocio del servicio
	 * 
	 * @see es.caixagalicia.ifrt.core.ServicioNegocio
	 * 		#ejecutar(
	 * 			es.caixagalicia.ifrt.core.IContextoEjecucion, 
	 * 			es.caixagalicia.ifrt.core.IDatosEntradaTx)
	 * @param contexto contexto de ejecucion
	 * @param datosEntrada datos de entrada
	 * @return <code>IContexto[]</code>
	 */
	@Override
	public IContexto[] ejecutar(IContextoEjecucion contexto, IDatosEntradaTx datosEntrada)
	{	
		final long lInicio = System.currentTimeMillis();
		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("INICIO SNANPM010: Gestion de comisiones (alta y modificación)");
		}

		contexto.setDiarioElectronico(new DiarioElectronico(
				Constantes.CTE_OPERACION_AC,
				Integer.valueOf(0),
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Constantes.CTE_STRING_EMPTY,
                Constantes.CTE_STRING_EMPTY,
                BigDecimal.ZERO,
                BigDecimal.ZERO,
                Integer.valueOf(0)));

		if (LOGGER.isDebugEnabled())
		{
			LOGGER.debug("Obtenemos los parametros de entrada");
		}
		
		BigDecimal bidIdProducto = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_PRODUCTO);
		BigDecimal bidIdSubProducto = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_SUBPRODUCTO);
		BigDecimal bidIdVersion = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_VERSION);
		BigDecimal bidIdColectivo = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_COLECTIVO);
		BigDecimal bidIdNivel = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_NIVEL);
		String bidIdTipoComision = datosEntrada.getString(CTE_POSICION_TIRA_ID_TIPO_COMISION);
		
		BigDecimal bidIdOrden = datosEntrada.getDecimal(CTE_POSICION_TIRA_ID_ORDEN);
		//bidIdOrden = new BigDecimal(-1);
		
		BigDecimal bidPorcentajeComisionEstandar = datosEntrada.getDecimal(CTE_TIRA_PORCENTAJE_COMISION_ESTANDAR);
		BigDecimal bidPorcentajeComisionDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PORCENTAJE_COMISION_DESDE);
		BigDecimal bidPorcentajeComisionHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PORCENTAJE_COMISION_HASTA);
		String bidIndPorcentajeComision = datosEntrada.getString(CTE_TIRA_PORCENTAJE_COMISION_INDICADOR);
		
		BigDecimal bidPorcentajeAdelantoEstandar = datosEntrada.getDecimal(CTE_TIRA_PORCENTAJE_ADELANTO_ESTANDAR);
		BigDecimal bidPorcentajeAdelantoDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PORCENTAJE_ADELANTO_DESDE);
		BigDecimal bidPorcentajeAdelantoHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PORCENTAJE_ADELANTO_HASTA);
		String bidIndPorcentajeAdelanto = datosEntrada.getString(CTE_TIRA_PORCENTAJE_ADELANTO_INDICADOR);
		
		BigDecimal bidImporteMinimoEstandar = datosEntrada.getDecimal(CTE_POSICION_TIRA_IMPORTE_MINIMO_ESTANDAR);
		BigDecimal bidImporteMinimoDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_IMPORTE_MINIMO_DESDE);
		BigDecimal bidImporteMinimoHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_IMPORTE_MINIMO_HASTA);
		String bidIndImporteMinimo = datosEntrada.getString(CTE_POSICION_TIRA_IMPORTE_MINIMO_INDICADOR);
		
		BigDecimal bidPlazoEstandar = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_ESTANDAR);
		BigDecimal bidPlazoDesde = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_DESDE);
		BigDecimal bidPlazoHasta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_HASTA);
		String bidIndPlazo = datosEntrada.getString(CTE_POSICION_TIRA_PLAZO_INDICADOR);
		
		BigDecimal bidFormaPago = datosEntrada.getDecimal(CTE_POSICION_TIRA_FORMA_PAGO);
		String bidIndFormaPago = datosEntrada.getString(CTE_POSICION_TIRA_FORMA_PAGO_INDICADOR);
		
		BigDecimal bidTipoPago = datosEntrada.getDecimal(CTE_POSICION_TIRA_TIPO_PAGO);
		String bidIndTipoPago = datosEntrada.getString(CTE_POSICION_TIRA_TIPO_PAGO_INDICADOR);
		
		BigDecimal bidPlazoPago = datosEntrada.getDecimal(CTE_POSICION_TIRA_PLAZO_PAGO);
		String bidUnidadPlazoPago = datosEntrada.getString(CTE_POSICION_TIRA_PLAZO_PAGO_UNIDAD);
		String bidIndPlazoPago = datosEntrada.getString(CTE_POSICION_TIRA_PLAZO_PAGO_INDICADOR);
		
		BigDecimal bidNumeroPeriodosPeriodicidad = datosEntrada.getDecimal(CTE_TIRA_NUMERO_PERIODOS_PERIODICIDAD);
		String bidIndNumeroPeriodosPeriodicidad = datosEntrada.getString(CTE_TIRA_NUMERO_PERIODOS_PERIODICIDAD_IND);
		
		String bidUnidadPeriodosPeriodicidad = datosEntrada.getString(CTE_TIRA_UNIDAD_PERIODOS_PERIODICIDAD);
		String bidIndUnidadPeriodosPeriodicidad = datosEntrada.getString(CTE_TIRA_UNIDAD_PERIODOS_PERIODICIDAD_IND);
		
		BigDecimal bidTipoPeriodosPeriodicidad = datosEntrada.getDecimal(CTE_POSICION_TIRA_TIPO_PERIODOS_PER);
		String bidIndTipoPeriodosPeriodicidad = datosEntrada.getString(CTE_TIRA_TIPO_PERIODOS_PERIODICIDAD_IND);
		
		BigDecimal bidPromotorAdquirente = datosEntrada.getDecimal(CTE_POSICION_TIRA_PROMOTOR_ADQUIRENTE);
		
		String strUsuario = contexto.getUsuario();//datosEntrada.getString(CTE_POSICION_TIRA_USUARIO);
		String strFechaDesdeVigen = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_DESDE);
		String strFechaHastaVigen = datosEntrada.getString(CTE_POSICION_TIRA_FECHA_HASTA);
		
		BigDecimal bidIdVG = datosEntrada.getDecimal(CTE_POSICION_TIRA_VG);		
		BigDecimal bidIdSubAux = datosEntrada.getDecimal(CTE_POSICION_TIRA_SUB_AUX);
		BigDecimal bidpregunta = datosEntrada.getDecimal(CTE_POSICION_TIRA_PREGUNTA);
		
		//String accion = datosEntrada.getString(CTE_POSICION_TIRA_ACCION);
		
		Integer intPregunta = null;
		
		// Poner formato correcto a las fechas hasta y desde
		Date dateFechaDesde;		
		if(Utilidades.isBlankOrNull(strFechaDesdeVigen)) {
			dateFechaDesde = null;
		}else {
			dateFechaDesde = new Date(DateUtils.parseDate(strFechaDesdeVigen, DateUtils.FORMATO_FECHA_CORTO).getTime());
		}
		
		Date dateFechaHasta;		
		if(Utilidades.isBlankOrNull(strFechaHastaVigen)) {
			dateFechaHasta = null;
		}
		else {
			dateFechaHasta = new Date(DateUtils.parseDate(strFechaHastaVigen, DateUtils.FORMATO_FECHA_CORTO).getTime());
			
			if(dateFechaDesde != null && dateFechaDesde.after(dateFechaHasta)) {
				ServicioNegocio.rollback(CodigosError.TABLA_FECHAS_INICIO_INCORRECTA_FECHA_I_POSTERIOR_FECHA_F.intValue(),null,null,null);
			}
		}
		
		
		
		if(bidpregunta != null) 
		{
			intPregunta = new Integer(bidpregunta.intValue());
		}
		
		
		Integer idVersionGeneral = null;
		
		GestionComisiones gcom = new GestionComisiones();		
		ComisionesC comisiones = gcom.getNewComisionFromParametros(toInteger(bidIdProducto), toInteger(bidIdSubProducto), toInteger(bidIdVersion), 
				bidIdTipoComision, toInteger(bidIdNivel), toInteger(bidIdColectivo), toInteger(bidIdOrden), 
				bidPorcentajeComisionEstandar,bidPorcentajeComisionDesde, bidPorcentajeComisionHasta, 
				bidIndPorcentajeComision, bidPorcentajeAdelantoEstandar, bidPorcentajeAdelantoDesde, 
				bidPorcentajeAdelantoHasta, bidIndPorcentajeAdelanto,bidImporteMinimoEstandar, 
				bidImporteMinimoDesde, bidImporteMinimoHasta, bidIndImporteMinimo, toInteger(bidPlazoEstandar), 
				toInteger(bidPlazoDesde), toInteger(bidPlazoHasta), bidIndPlazo, toInteger(bidFormaPago), bidIndFormaPago, 
				toInteger(bidTipoPago), bidIndTipoPago, toInteger(bidPlazoPago), bidUnidadPlazoPago, bidIndPlazoPago, 
				toInteger(bidNumeroPeriodosPeriodicidad), bidIndNumeroPeriodosPeriodicidad, bidUnidadPeriodosPeriodicidad, 
				bidIndUnidadPeriodosPeriodicidad, toInteger(bidTipoPeriodosPeriodicidad), bidIndTipoPeriodosPeriodicidad, 
				toInteger(bidPromotorAdquirente), strUsuario, dateFechaDesde, dateFechaHasta);

		Integer codError = verificarComisiones(comisiones);
		ResultadoOperacionVersionesVO resultado = new ResultadoOperacionVersionesVO();
		
		resultado.setCodError(codError);
		resultado.setDatos(comisiones);

		
		if(Utilidades.isBlankOrNull(comisiones.getComisionesKey().getIntIdVersion())) //alta
		{
			if(Constantes.CTE_CERO.equals(comisiones.getComisionesKey().getIntIdColectivo())) {
				// ------------- ALTA ------------------
				resultado = alta(comisiones, gcom, toInteger(bidIdVG), toInteger(bidIdSubAux), intPregunta, strUsuario);
			}			
			
			if(Constantes.CTE_CERO.intValue() < resultado.getCodError().intValue())
			{
				idVersionGeneral = resultado.getCodError();
			}
			else 
			{
				idVersionGeneral = null;
			}				
			
		}
		else	//------------------- modificacion----------------------
		{
			
			
			if(Constantes.CTE_CERO.equals(comisiones.getComisionesKey().getIntIdColectivo())) 
			{
				resultado = modificar(comisiones, gcom, toInteger(bidIdSubAux), toInteger(bidIdVG), strUsuario);
			}else 
			{
				// ------------- ALTA/MOD COLECTIVO ------------------
				resultado = altaColectivo(comisiones, gcom, toInteger(bidIdVG), toInteger(bidIdSubAux), intPregunta, strUsuario);
			}		
			
			if(Constantes.CTE_CERO.intValue() < resultado.getCodError().intValue())
			{
				idVersionGeneral = resultado.getCodError();
			}
			else 
			{
				idVersionGeneral = null;
			}				
		}		

		
		// debemos generar el contexto de salida 
		final IContexto[] contextoSalida;
		
		if(Constantes.CTE_MENOS_UNO.equals(resultado.getCodError())) {
			contextoSalida = ContextoRespuesta.rellenarDatosContexto(idVersionGeneral, 
					"Pregunta");
		}else {
			contextoSalida = ContextosComisiones.rellenarDatosContexto((ComisionesC)resultado.getDatos(), 
					idVersionGeneral,resultado.getCodError().intValue());
		}
				
		if (LOGGER.isDebugEnabled())
		{			
				LOGGER.debug("Se ha dado de alta/modificado LA COMISION corerctamente");
				LOGGER.debug("FIN SNXXX001: Alta/modificación COMISIONES. " +
						"Tiempo total: " + (System.currentTimeMillis() - lInicio) + "ms");
		}

		// Enviar email cuando la forma de pago de la comision sea distinta de 0 (formalizacion)
		if (null != bidFormaPago && BigDecimal.ZERO.compareTo(bidFormaPago) != 0)
		{
			String asunto = "Forma de pago comisión";
			
			StringBuilder mensaje = new StringBuilder();
			mensaje.append("La comisión: ");
			mensaje.append(bidIdTipoComision.toString());
			mensaje.append(", del producto: ");
			mensaje.append(bidIdProducto.toString());
			mensaje.append(", no se pagará en el momento de la formalización.");
			
			UtilidadesComun.enviarCorreoGeneral(mensaje.toString(), asunto);
		}			

		return contextoSalida;
	}
	
	/**
	 * @param dec
	 * @return
	 */
	private Integer toInteger (BigDecimal dec)
	{
		Integer salida = null;
		
		if(dec!=null) {
			salida =  Integer.valueOf(dec.intValue());		
		}
		return salida;
	}
	
	/**
	 * @param comision
	 * @param gcom
	 * @param VG
	 * @param pIdSubAux
	 * @param pregunta
	 * @param strUsuario
	 * @return
	 */
	private ResultadoOperacionVersionesVO alta(ComisionesC comision, GestionComisiones gcom, Integer VG,  Integer pIdSubAux, Integer pregunta, String strUsuario) 
	{
		return gcom.altaComision(comision, VG, pIdSubAux, pregunta,strUsuario);
	}
	
	/**
	 * @param comision
	 * @param gcom
	 * @param VG
	 * @param pIdSubAux
	 * @param pregunta
	 * @param strUsuario
	 * @return
	 */
	private ResultadoOperacionVersionesVO altaColectivo(ComisionesC comision, GestionComisiones gcom, Integer VG,  Integer pIdSubAux, Integer pregunta, String strUsuario) 
	{ 
		return gcom.altaComisionColectivo(comision, VG, pIdSubAux, pregunta,strUsuario); 
	}
	
	/**
	 * @param comision
	 * @param gcom
	 * @param subAux
	 * @param VG
	 * @param strUsuario
	 * @return
	 */
	private ResultadoOperacionVersionesVO modificar(ComisionesC comision, GestionComisiones gcom, Integer subAux, Integer VG, String strUsuario) 
	{			
		return gcom.modificarComision(comision, comision, subAux, VG, strUsuario);
	}
	
	/**
	 * 
	 * Verifica los datos de una comisión
	 * 
	 * Devuelve el error en datos
	 * 0 = No Error
	 * @param comision
	 * @return
	 */
	private Integer verificarComisiones(ComisionesC comision)
	{		
		Integer salida;
		//if (!verificaExisteComision(comision)) 
		//{
		//	return CodigosError.COMISIONES_EXISTE;
		//}
		//else 
//		if (!verificarDatosNivel(comision)) 
//		{
//			return CodigosError.COMISIONES_DATOS_OBLIGATORIOS_VACIOS;
//		}else 
		if (!verificaPorcentajeAdelantado(comision)) 
		{
			salida = CodigosError.COMISIONES_PORCENTAJE_ADELANTO;
		}
		else if (!verificaPlazo(comision)) 
		{
			salida = CodigosError.COMISIONES_PLAZO;
		}
//		else if (!verificaPosponerPago(comision))
//		{
//			return CodigosError.COMISIONES_POSPONER_PAGO;
//		}
//		else if (!verificaOrden(comision))
//		{
//			return CodigosError.COMISIONES_ORDEN;
//		}
		else
		{
			salida = verificarIndicadores(comision);
		}
		
		return salida;
	}
	
	/**
	 * 
	 * Verifica el valor de los indicadores con el de los datos, 
	 *  
	 * @param comision
	 * @return
	 */
	private Integer verificarIndicadores(ComisionesC comision) {
		Integer salida;
		if(!verificarIndicador(comision.getStrIndPorcentajeComision(), comision.getIntPorcentajeEstandarComision(), 
				comision.getIntPorcentajeDesdeComision(), comision.getIntPorcentajeHastaComision()) ||
				!verificaHorquilla(comision.getStrIndPorcentajeComision(), comision.getIntPorcentajeEstandarComision(), 
						comision.getIntPorcentajeDesdeComision(), comision.getIntPorcentajeHastaComision(), comision.getComisionesKey().getIntIdNivel())) 
		{
			salida = CodigosError.COMISIONES_INDICADOR_PORCENTAJE_COMISION; //error en campos porcentaje de comision
		}
		else if(!verificarIndicador(comision.getStrIndImporteMinimoComision(), comision.getIntImporteMinimoEstandarComision(),
					comision.getIntImporteMinimoDesdeComision(), comision.getIntImporteMinimoHastaComision()) ||
				!verificaHorquilla(comision.getStrIndImporteMinimoComision(), comision.getIntImporteMinimoEstandarComision(),
						comision.getIntImporteMinimoDesdeComision(), comision.getIntImporteMinimoHastaComision(), comision.getComisionesKey().getIntIdNivel()))
		{
			salida = CodigosError.COMISIONES_INDICADOR_IMPORTE_MINIMO; //error en campos importe mínimo
		}
		else if(!verificarIndicador(comision.getStrIndPorcentajeAdelanto(), comision.getIntPorcentajeEstandarAdelanto(),
					comision.getIntPorcentajeDesdeAdelanto(), comision.getIntPorcentajeHastaAdelanto()) ||
				!verificaHorquilla(comision.getStrIndPorcentajeAdelanto(), comision.getIntPorcentajeEstandarAdelanto(),
						comision.getIntPorcentajeDesdeAdelanto(), comision.getIntPorcentajeHastaAdelanto(), comision.getComisionesKey().getIntIdNivel()))
		{
			salida = CodigosError.COMISIONES_INDICADOR_PORCENTAJE_ADELANTO;
		}
		else if(!verificarIndicador(comision.getStrIndPlazo(), comision.getIntPlazoEstandar(),
					comision.getIntPlazoDesde(), comision.getIntPlazoHasta()) ||
				!verificaHorquilla(comision.getStrIndPlazo(), comision.getIntPlazoEstandar(),
						comision.getIntPlazoDesde(), comision.getIntPlazoHasta(), comision.getComisionesKey().getIntIdNivel()))
		{
			salida = CodigosError.COMISIONES_INDICADOR_PLAZO; 
		}
		else
		{
			salida = CodigosError.NO_ERROR;
		}
		
		return salida;
	}
	
	/**
	 * 
	 * Verifica el valo del indicador con el de los datos
	 *  
	 * @param indicador
	 * @param estandar
	 * @param desde
	 * @param hasta
	 * @return
	 */
	private boolean verificarIndicador(String indicador, Object estandar, Object desde, Object hasta) {
		
		boolean salida;
		if(Constantes.CTE_STRING_CERO.equals(indicador) && null == estandar  && null == desde && null == hasta) 
		{
			salida = true;
		}
		else if (Constantes.CTE_STRING_UNO.equals(indicador) && null != estandar) 
		{
			salida = true;
		} 
		else if (Constantes.CTE_STRING_TRES.equals(indicador) && null != desde && null != hasta ) 
		{
			salida = true;
		} 
		else if (Constantes.CTE_STRING_CUATRO.equals(indicador)&& null != estandar && null != desde && null != hasta) 
		{
			salida = true;
		}
		else 
		{
			salida = false;
		}
		return salida;
	}
	
	/**
	 * 
	 * Verifica tipo de comision con el Porcentaje de Adelanto
	 *  
	 * @param comision
	 * @return
	 */
	private boolean verificaPorcentajeAdelantado(ComisionesC comision) 
	{
		String AMORTIZACION_ANUAL = "2";
		boolean salida = true;
		if (!AMORTIZACION_ANUAL.equals(comision.getComisionesKey().getIntIdTipoComision().trim())) 
		{
			if (Utilidades.isBlankOrNull(comision.getIntPorcentajeEstandarAdelanto()) && 
					Utilidades.isBlankOrNull(comision.getIntPorcentajeDesdeAdelanto()) &&
					Utilidades.isBlankOrNull(comision.getIntPorcentajeHastaAdelanto()))
			{
				salida = true;
			}
			else 
			{
				salida = false; //error
			}
		}
		else 
		{
			salida = true;
		}
		return salida;
	}
	
	/**
	 * 
	 * Verifica tipo de comision con el Plazo
	 *  
	 * @param comision
	 * @return
	 */
	private boolean verificaPlazo(ComisionesC comision) 
	{
		String A_ANTICIPADA = "1";
		String A_SUP_A = "2";
		String CANC_ANT = "4";
		boolean salida = true;
		if (A_ANTICIPADA.equals(comision.getComisionesKey().getIntIdTipoComision().trim())
				||A_SUP_A.equals(comision.getComisionesKey().getIntIdTipoComision().trim())
				||CANC_ANT.equals(comision.getComisionesKey().getIntIdTipoComision().trim())) 
		{
			salida = true;
		}
		else 
		{
			if (Utilidades.isBlankOrNull(comision.getIntPlazoEstandar()) && 
					Utilidades.isBlankOrNull(comision.getIntPlazoDesde()) &&
					Utilidades.isBlankOrNull(comision.getIntPlazoHasta()))
			{
				salida = true;
			}
			else 
			{
				salida = false; //error
			}
		}
		return salida;
	}
	
	/**
	 * 
	 * Verifica que las horquillas estén dentro del rango
	 *  
	 * @param indicador
	 * @param estandar
	 * @param desde
	 * @param hasta
	 * @param nivel
	 * @return
	 */
	private boolean verificaHorquilla(String indicador, BigDecimal estandar, BigDecimal desde, BigDecimal hasta, Integer nivel) {
		boolean salida;
		if(Constantes.CTE_STRING_CUATRO.equals(indicador) && ( Constantes.CTE_CERO.equals(nivel) || Constantes.CTE_DIEZ.equals(nivel) ) ) {
			
			if ( desde.doubleValue()<= estandar.doubleValue() && estandar.doubleValue() <= hasta.doubleValue())	{
				salida =  true;
			}else {
				salida = false;
			}
		}else if(Constantes.CTE_STRING_CUATRO.equals(indicador)) {
			if ( desde.doubleValue() <=  hasta.doubleValue())	{
				salida =  true;
			}
			else {
				salida = false;
			}
		}
		else if(Constantes.CTE_STRING_TRES.equals(indicador)) {
			if ( desde.doubleValue() <= hasta.doubleValue())	{
				salida =  true;
			}
			else {
				salida = false;
			}
		}else
		{
			
			salida = true;
		}
		return salida;
	}
	/**
	 * @param indicador
	 * @param estandar
	 * @param desde
	 * @param hasta
	 * @param nivel
	 * @return
	 */
	private boolean verificaHorquilla(String indicador, Integer estandar, Integer desde, Integer hasta, Integer nivel) {
		boolean salida;
		if(Constantes.CTE_STRING_CUATRO.equals(indicador) && ( Constantes.CTE_CERO.equals(nivel) || Constantes.CTE_DIEZ.equals(nivel) ) ) {
			
			if ( desde.intValue()<= estandar.intValue() && estandar.intValue() <= hasta.intValue())	{
				salida =  true;
			}
			else {
				salida = false;
			}
		}else if(Constantes.CTE_STRING_CUATRO.equals(indicador)) {
			if ( desde.intValue() <=  hasta.intValue())	{
				salida =  true;
			}
			else {
				salida = false;
			}
		}
		else if(Constantes.CTE_STRING_TRES.equals(indicador)) {
			if ( desde.intValue() <= hasta.intValue())	{
				salida =  true;
			}
			else {
				salida = false;
			}
		}else
		{
			
			salida = true;
		}
		return salida;
	}		
}
