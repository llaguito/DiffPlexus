package es.caixagalicia.anpm.prestamos.catalogo.servicios.aplicacion;

import java.util.Date;
import java.util.List;

import es.caixagalicia.anpm.prestamos.catalogo.persistencia.parametro.ParametroC;
import es.caixagalicia.anpm.prestamos.catalogo.persistencia.parametro.ParametroEng;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.Constantes;
import es.caixagalicia.anpm.prestamos.catalogo.utilidades.DateUtils;

/**
 * @author g000895
 *
 * Clase con los metodos necesarios para gestionar los Parametros de la aplicacion
 */
public final class GestionParametro
{
	private static final String CTE_ERROR_ALTA = "El parámetro ya existe";

	/**Inserta en BD un nuevo Parametro*/
	public static ParametroC altaParametro(String agrupacion, String descAgrupacion, 
			String nombreParametro, String valorParametro, String descParametro, String usuario)
	{
		ParametroEng engParametros = new ParametroEng();
		ParametroC parametro = engParametros.createNewObject();
		
		asignarDatosParametro(agrupacion, descAgrupacion, nombreParametro, valorParametro, descParametro, usuario, parametro);
		if (engParametros.existeParametro(parametro))
		{
			parametro.setCodigoError(1);
			parametro.setMensajeError(CTE_ERROR_ALTA);
		}
		else
		{
			int idParametro = engParametros.obtenerMaxIdParametro() + Constantes.CTE_UNO.intValue();
			parametro.setIntIdParametro(idParametro);
			parametro.setFechaAlta(DateUtils.toSQLDate(DateUtils.dateNow()));
			final Date now = new Date(DateUtils.dateNow().getTime());
			parametro.setTimeStamp(DateUtils.toSQLTimestamp(now));
			
			parametro.persist();
			parametro.setCodigoError(0);
		}
		return parametro;
	}
	
	/**Modifica los datos de un Parametro existente*/
	public static ParametroC modificarParametro(Integer idParametro, String descAgrupacion, 
			String valorParametro, String descParametro)
	{
		ParametroEng engParametros = new ParametroEng();
		ParametroC parametro = engParametros.findById(idParametro);
		ParametroC paramAux = new ParametroC();
		
		//Empleamos un objeto auxiliar porque al hacer el set sobre el objeto recuperado de datos hace el update de dichos datos
		paramAux.setIntIdParametro(idParametro);
		paramAux.setStrAgrupacion(parametro.getStrAgrupacion());
		paramAux.setStrParametro(parametro.getStrParametro());
		paramAux.setStrValor(valorParametro);
		
		if (engParametros.existeParametro(paramAux))
		{
			parametro.setCodigoError(1);
			parametro.setMensajeError(CTE_ERROR_ALTA);
		}
		else
		{
			parametro.setStrDescripcionAgrupacion(descAgrupacion);
			parametro.setStrValor(valorParametro);
			parametro.setStrDescripcionParametro(descParametro);
			parametro.persist();
		}
		return parametro;
	}

	/**Asigna los datos introducidos por el usuario a un objeto de tipo Parametro */
	private static void asignarDatosParametro(String agrupacion, String descAgrupacion, String nombreParametro,
			String valorParametro, String descParametro, String usuario, ParametroC parametro)
	{
		parametro.setStrAgrupacion(agrupacion);
		parametro.setStrDescripcionAgrupacion(descAgrupacion);
		parametro.setStrParametro(nombreParametro);
		parametro.setStrValor(valorParametro);
		parametro.setStrDescripcionParametro(descParametro);
		parametro.setStrUsuario(usuario);
	}
	
	/**Elimina de BD el Parametro indicado*/
	public static void borrarParametro(Integer idParametro)
	{
		ParametroEng engParametros = new ParametroEng();
		ParametroC parametro = engParametros.findById(idParametro);
		
		parametro.setFechaBaja(DateUtils.toSQLDate(DateUtils.dateNow()));
		parametro.persist();
	}
	
	/**
	 * Obtiene los datos de los parametros que cumplan con los criterios de busqueda
	 * @return <code>List<ParametroC></code>
	 */
	public static List<ParametroC> obtenerParametros(String nombreParametro, String agrupacionParametro)
	{
		ParametroEng engParametros = new ParametroEng();
		List<ParametroC> lstParametros = engParametros.obtenerParametros(nombreParametro, agrupacionParametro);
		
		return lstParametros;
	}
	
	/**
	 * Obtiene los datos de los parametros CAMPOS_DIN de los subproductos de la aplicación contenidos en BD
	 * @return <code>ParametroC</code>
	 */
	public static List<ParametroC> obtenerCamposDinSubProducto()
	{
		ParametroEng engParametros = new ParametroEng();
		List<ParametroC> lstParametros = engParametros.obtenerCamposDinSubProd();
		
		return lstParametros;
	}
	
	/**
	 * Obtiene los datos de los parametros CAMPOS_DIN de los productos de la aplicación contenidos en BD
	 * @return <code>ParametroC</code>
	 */
	public static List<ParametroC> obtenerCamposDinProducto()
	{
		ParametroEng engParametros = new ParametroEng();
		List<ParametroC> lstParametros = engParametros.obtenerCamposDinProd();
		
		return lstParametros;
	}
	/**
	  * Comprueba si un producto es hipoteca evo por nombre del parametro y valor
	  * @param nombreParametro
	  * @param valorParametro
	  * @return true si es producto evo y false si no lo es
	  */
	public static boolean esProductoHipotecaEvo(String nombreParametro, String nombreValor)
	{
		ParametroEng parametroDao = new ParametroEng();
		return parametroDao.esProductoHipotecaEvo(nombreParametro, nombreValor);
	}
}
