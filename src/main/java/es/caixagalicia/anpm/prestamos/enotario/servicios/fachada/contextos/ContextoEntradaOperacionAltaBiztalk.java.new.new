/**
 */
package es.caixagalicia.anpm.prestamos.enotario.servicios.fachada.contextos;

import java.util.ArrayList;
import java.util.List;
import es.caixagalicia.anpm.prestamos.comun.utilidades.UtilidadesComun;
import es.caixagalicia.anpm.prestamos.enotario.persistencia.datosgenerales.DatosgeneralesC;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.AvalistasVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.ComisionesVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.DocumentoVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.EnvioEnotarioAltaModificacionVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.TitularesVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.UtilidadesEnotario;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.mensajes.Mensaje;
import es.caixagalicia.ifrt.core.ServicioNegocio;

/**
 * @author V361732
 */
public class ContextoEntradaOperacionAltaBiztalk {

    private static final String CTE_CTX_ID = "ANPMN600";

    private static final String CTE_CTX_CODIGO_APLICACION = "ANPMN600010";

    private static final String CTE_CTX_CODIGO_OPERACION = "ANPMN600020";

    private static final String CTE_CTX_NODO_REEMISOR = "ANPMN600030";

    private static final String CTE_CTX_NODO_ORIGINAL = "ANPMN600040";

    private static final String CTE_CTX_TIPO_OPERACION = "ANPMN600050";

    private static final String CTE_CTX_PAIS = "ANPMN600060";

    private static final String CTE_CTX_ENTIDAD = "ANPMN600070";

    private static final String CTE_CTX_TIPO_PRESTAMO = "ANPMN600080";

    private static final String CTE_CTX_CONTRATO_PRESTAMO = "ANPMN600090";

    private static final String CTE_CTX_CODIGO_BIC = "ANPMN600100";

    private static final String CTE_CTX_CONTRATO_IBAN = "ANPMN600110";

    private static final String CTE_CTX_TITULAR = "ANPMN600120";

    private static final String CTE_CTX_AVALISTA = "ANPMN600130";

    private static final String CTE_CTX_CODIGO_COLEGIADO = "ANPMN600140";

    private static final String CTE_CTX_FECHA_VALIDEZ = "ANPMN600150";

    private static final String CTE_CTX_CODIGO_IMP_PROD = "ANPMN600160";

    private static final String CTE_CTX_DESC_IMP_PROD = "ANPMN600170";

    private static final String CTE_CTX_VALOR_IMP_PROD = "ANPMN600180";

    private static final String CTE_CTX_ELEMENTO_DET = "ANPMN600190";

    private static final String CTE_CTX_COMISIONES = "ANPMN600200";

    private static final String CTE_CTX_DOCUMENTO = "ANPMN600210";

    private static final String CTE_CTX_TELEFONO_ENT_FIN = "ANPMN600220";

    private static final String CTE_CTX_TELEFONO_CALL_CENT = "ANPMN600230";

    // Matriz de Titulares:
    private static final String CTE_CTX_IDENTIFICADOR_TITULAR120 = "ANPMN600121";

    private static final String CTE_CTX_NOMBRE_TITULAR120 = "ANPMN600122";

    private static final String CTE_CTX_PRIMER_APELLIDO_TITULAR120 = "ANPMN600123";

    private static final String CTE_CTX_SEGUNDO_APELLIDO_TITULAR120 = "ANPMN600124";

    private static final String CTE_CTX_TELEFONO_TITULAR120 = "ANPMN600125";

    private static final String CTE_CTX_EMAIL_TITULAR120 = "ANPMN600126";

    private static final String CTE_CTX_CODIGO_INE_TITULAR120 = "ANPMN600127";

    // Matriz de Avalistas:
    private static final String CTE_CTX_IDENTIFICADOR_AVALISTA130 = "ANPMN600131";

    // Matriz de elementos DET:
    private static final String CTE_CTX_CODIGO_DEL_ELEMENTO190 = "ANPMN600191";

    private static final String CTE_CTX_DESCRIPCION_DEL_ELEMENTO190 = "ANPMN600192";

    private static final String CTE_CTX_VALOR_DEL_ELEMENTO190 = "ANPMN600193";

    // Matriz de comisiones:
    private static final String CTE_CTX_CODIGO_COMISION200 = "ANPMN600201";

    private static final String CTE_CTX_DESCRIPCION_COMISION200 = "ANPMN600202";

    private static final String CTE_CTX_TIPO200 = "ANPMN600203";

    private static final String CTE_CTX_IMPORTE200 = "ANPMN600204";

    // Matriz de Documentos:
    private static final String CTE_CTX_CODIGO_DOCUMENTO210 = "ANPMN600211";

    private static final String CTE_CTX_DESCRIPCION_DOCUMENTO210 = "ANPMN600212";

    public static final String CTE_STR_CODIGO_TRANSACCION = "AN40";

    public static final String CTE_BID_CODIGO_OPERACION = "600";

    public static final String CTE_STR_M = "M";

    public static final int CTE_MAX_TAM_DESCR_ELEMENTO_DET = 20;

    public static final int CTE_INT_CERO = 0;

    public ContextoEntradaOperacionAltaBiztalk() {
    }

    /**
     * Metodo para rellenar el contexto ANPMN600
     *
     * @param vo
     * @param datosGenerales
     * @param literalDivisa
     * @return
     */
    public static IContexto rellenarContextoEntrada(EnvioEnotarioAltaModificacionVO vo, DatosgeneralesC datosGenerales, String literalDivisa) {
        IContexto ctx = ContextoFactory.getInstance().getContexto(CTE_CTX_ID);
        /*Datos de la operación*/
        ctx.put(CTE_CTX_CODIGO_APLICACION, vo.getCodigoAplicacion());
        ctx.put(CTE_CTX_CODIGO_OPERACION, vo.getCodigoOperacion());
        ctx.put(CTE_CTX_NODO_REEMISOR, vo.getNodoReemisor());
        ctx.put(CTE_CTX_NODO_ORIGINAL, vo.getNodoOriginal());
        ctx.put(CTE_CTX_TIPO_OPERACION, vo.getTipoOperacion());
        ctx.put(CTE_CTX_PAIS, vo.getPais());
        ctx.put(CTE_CTX_ENTIDAD, vo.getEntidad());
        ctx.put(CTE_CTX_TIPO_PRESTAMO, vo.getTipoPrestamo());
        ctx.put(CTE_CTX_CONTRATO_PRESTAMO, vo.getContratoPrestamo());
        ctx.put(CTE_CTX_CODIGO_BIC, vo.getCodBIC());
        ctx.put(CTE_CTX_CONTRATO_IBAN, vo.getContratoIBAN());
        // Rellena los registros de Titulares:
        List<TitularesVO> titulares;
        titulares = vo.getTitularesPrestamo();
        rellenarMatrizTitulares(titulares, ctx);
        // Rellenar los registros de Avalistas:
        List<AvalistasVO> avalistas;
        avalistas = vo.getAvalistasPrestamo();
        rellenarMatrizAvalistas(avalistas, ctx);
        ctx.put(CTE_CTX_CODIGO_COLEGIADO, vo.getCodigoColegiado());
        ctx.put(CTE_CTX_FECHA_VALIDEZ, vo.getFechaValidez());
        ctx.put(CTE_CTX_CODIGO_IMP_PROD, vo.getCodigoImporteProductos());
        ctx.put(CTE_CTX_DESC_IMP_PROD, vo.getDescripcionImporteProductos());
        ctx.put(CTE_CTX_VALOR_IMP_PROD, vo.getValorImporteProductos());
        // Rellena los registros de los Elementos DET:
        if (datosGenerales != null) {
            rellenarMatrizElementos(datosGenerales, ctx, literalDivisa, vo);
        }
        // Rellena los registros de las Comisiones:
        List<ComisionesVO> comisiones;
        comisiones = vo.getComisiones();
        rellenarMatrizComisiones(comisiones, ctx);
        // Rellena los registros  de los Documentos:
        List<DocumentoVO> documentos;
        documentos = vo.getDocumentos();
        rellenarMatrizDocumentos(documentos, ctx);
        ctx.put(CTE_CTX_TELEFONO_ENT_FIN, vo.getTelefonoEntidadFinal());
        ctx.put(CTE_CTX_TELEFONO_CALL_CENT, vo.getTelefonoCallCenter());
        return ctx;
    }

    /**
     * Método que rellena una matriz de titulares.
     *
     * @param titulares
     * @param ctx
     */
    private static void rellenarMatrizTitulares(List<TitularesVO> titulares, IContexto ctx) {
        List<IRegistro> lstRegTitulares = new ArrayList<IRegistro>(0);
        for (TitularesVO t : titulares) {
            lstRegTitulares.add(crearRegistroTitular(t, ctx));
        }
        if (!lstRegTitulares.isEmpty()) {
            ctx.put(CTE_CTX_TITULAR, lstRegTitulares.toArray(new IRegistro[lstRegTitulares.size()]));
        }
    }

    /**
     * Método que rellena un registro con los datos de un titular.
     *
     * @param titular
     * @param ctx
     * @return registro con los datos del titular.
     */
    private static IRegistro crearRegistroTitular(TitularesVO titular, IContexto ctx) {
        IRegistro regTitular = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_TITULAR);
        regTitular.put(CTE_CTX_IDENTIFICADOR_TITULAR120, UtilidadesEnotario.comprobarDatoNull(titular.getNif()));
        regTitular.put(CTE_CTX_NOMBRE_TITULAR120, UtilidadesEnotario.comprobarDatoNull(titular.getNombreTitular()));
        regTitular.put(CTE_CTX_PRIMER_APELLIDO_TITULAR120, UtilidadesEnotario.comprobarDatoNull(titular.getApellidoUnoTitular()));
        regTitular.put(CTE_CTX_SEGUNDO_APELLIDO_TITULAR120, UtilidadesEnotario.comprobarDatoNull(titular.getApellidoDosTitular()));
        regTitular.put(CTE_CTX_TELEFONO_TITULAR120, UtilidadesEnotario.comprobarDatoNull(titular.getNumeroTelefonoTitular()));
        regTitular.put(CTE_CTX_EMAIL_TITULAR120, UtilidadesEnotario.comprobarDatoNull(titular.getCorreoElectronicoTitular()));
        regTitular.put(CTE_CTX_CODIGO_INE_TITULAR120, UtilidadesEnotario.comprobarDatoNull(titular.getCodigoIneTitular()));
        return regTitular;
    }

    /**
     * Método que rellena una matriz de avalistas.
     *
     * @param avalistas
     * @param ctx
     */
    private static void rellenarMatrizAvalistas(List<AvalistasVO> avalistas, IContexto ctx) {
        List<IRegistro> lstRegAvalistas = new ArrayList<IRegistro>(0);
        for (AvalistasVO a : avalistas) {
            lstRegAvalistas.add(crearRegistroAvalista(a, ctx));
        }
        if (!lstRegAvalistas.isEmpty()) {
            ctx.put(CTE_CTX_AVALISTA, lstRegAvalistas.toArray(new IRegistro[lstRegAvalistas.size()]));
        }
    }

    /**
     * Método que rellena un registro con los datos de un avalista.
     *
     * @param avalista
     * @param ctx
     * @return registro con los datos del avalista.
     */
    private static IRegistro crearRegistroAvalista(AvalistasVO avalista, IContexto ctx) {
        IRegistro regAvalista = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_AVALISTA);
        regAvalista.put(CTE_CTX_IDENTIFICADOR_AVALISTA130, UtilidadesEnotario.comprobarDatoNull(avalista.getNifAvalista()));
        return regAvalista;
    }

    /**
     * Método que rellena una matriz de elementos.
     *
     * @param dg
     * @param ctx
     * @param divisaFormateada
     */
    private static void rellenarMatrizElementos(DatosgeneralesC dg, IContexto ctx, String divisaFormateada, EnvioEnotarioAltaModificacionVO vo) {
        List<IRegistro> lstRegElementos = new ArrayList<IRegistro>(0);
        // ctx.put(CTE_CTX_DIVISA1, dg.getCodigoDivisa());
        if (!UtilidadesComun.isBlankOrNull(dg.getCodigoDivisa())) {
            lstRegElementos.add(crearRegistroElemento("CDDIVISS", "DIVISA", UtilidadesEnotario.comprobarDatoNull(dg.getCodigoDivisa()), ctx));
        }
        if (!UtilidadesComun.isBlankOrNull(divisaFormateada)) {
            // ctx.put(CTE_CTX_LITERAL_DIVISA1, divisaFormateada); $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("NBDIVIC", new Mensaje(ServicioNegocio.getContexto(), LITERAL_DIVISA_1863611095).toString(), UtilidadesEnotario.comprobarDatoNull(divisaFormateada), ctx));
        }
        if (!UtilidadesComun.isBlankOrNull(dg.getPeriodicidadAmortizacion())) {
            // ctx.put(CTE_CTX_PERIODICIDAD_AMORTIZACION1, dg.getPeriodicidadAmortizacion()); $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("TPPERCAP", new Mensaje(ServicioNegocio.getContexto(), PERIODICIDAD_AMORTIZACION_276840361).toString(), UtilidadesEnotario.comprobarDatoNull(dg.getPeriodicidadAmortizacion()), ctx));
        }
        if (!UtilidadesComun.isBlankOrNull(dg.getPeriodicidadLiquidacion())) {
            // ctx.put(CTE_CTX_PERIODICIDAD_LIQUIDACION1, dg.getPeriodicidadLiquidacion()); $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("TPPERINT", new Mensaje(ServicioNegocio.getContexto(), PERIODICIDAD_LIQUIDACION_703440157).toString(), UtilidadesEnotario.comprobarDatoNull(dg.getPeriodicidadLiquidacion()), ctx));
        }
        if (!UtilidadesComun.isBlankOrNull(dg.getPlazo())) {
            // ctx.put(CTE_CTX_PLAZO1, formateaPlazo(dg.getPlazo().toString()));
            lstRegElementos.add(crearRegistroElemento("PZOPERACP", "PLAZO", formateaPlazo(UtilidadesEnotario.comprobarDatoNull(dg.getPlazo()).toString()), ctx));
        }
        /*
 		BEGIN EDIT 20140519
		lstRegElementos.add(crearRegistroElemento("TPINTER", "TIPO INTERES", 
		formateaBid(UtilidadesEnotario.comprobarDatoNull(dg.getTipoInteres())).toString(), ctx));
 		*/
        if (!UtilidadesComun.isBlankOrNull(dg.getTipoInteres())) {
            // $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("TPINTER", new Mensaje(ServicioNegocio.getContexto(), TIPO_INTERES_687154590).toString(), UtilidadesEnotario.comprobarDatoNull(UtilidadesEnotario.bigDecimalToString(dg.getTipoInteres(), 10, 2, false)), ctx));
        }
        // ctx.put(CTE_CTX_INDICE_REFERENCIA1, dg.getIndiceReferencia().toString());
        if (!UtilidadesComun.isBlankOrNull(dg.getIndiceReferencia())) {
            // $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("CDTPREF", new Mensaje(ServicioNegocio.getContexto(), INDICE_REFERENCIA_185901754).toString(), UtilidadesEnotario.comprobarDatoNull(UtilidadesEnotario.rellenarCerosDelante(dg.getIndiceReferencia().toString(), 4)), ctx));
        }
        // $OP-LBL-NL-2$
        lstRegElementos.add(crearRegistroElemento("TEXTREF", new Mensaje(ServicioNegocio.getContexto(), LITERAL_IND_REFERENCIA_1099110930).toString(), vo.getLiteralTipoReferencia(), ctx));
        /*BEGIN EDIT 20140519
		lstRegElementos.add(crearRegistroElemento("TPDIFER", "DIFERENCIAL", 
		formateaDiferencial(
		UtilidadesEnotario.comprobarDatoNull(dg.getDiferencial())).toString(),
		ctx));
 		*/
        if (!UtilidadesComun.isBlankOrNull(dg.getDiferencial())) {
            lstRegElementos.add(crearRegistroElemento("TPDIFER", "DIFERENCIAL", UtilidadesEnotario.comprobarDatoNull(dg.getDiferencial().toString()), ctx));
        // END EDIT 20140519:
        }
        if (!UtilidadesComun.isBlankOrNull(dg.getCodigoDeRedondeo())) {
            // ctx.put(CTE_CTX_CODIGO_REDONDEO1, dg.getCodigoDeRedondeo()); $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("PMCDREDO", new Mensaje(ServicioNegocio.getContexto(), CODIGO_REDONDEO_814311813).toString(), UtilidadesEnotario.comprobarDatoNull(dg.getCodigoDeRedondeo()), ctx));
        }
        // ctx.put(CTE_CTX_LITERAL_CODIGO_REDONDEO1, "FALTA");// FALTA $OP-LBL-NL-2$
        lstRegElementos.add(crearRegistroElemento("TEXTREDO", new Mensaje(ServicioNegocio.getContexto(), LITERAL_COD_REDONDEO_46544027).toString(), vo.getLiteralRedondeo(), ctx));
        /* BEGIN EDIT 20140519
		lstRegElementos.add(crearRegistroElemento("POTPINMR", "INTERES DEMORA", 
			formateaBid(UtilidadesEnotario.comprobarDatoNull(dg.getInteresDemora())).toString(), ctx));
		 */
        if (!UtilidadesComun.isBlankOrNull(dg.getInteresDemora())) {
            // $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("POTPINMR", new Mensaje(ServicioNegocio.getContexto(), INTERES_DEMORA_1710764632).toString(), UtilidadesEnotario.comprobarDatoNull(dg.getInteresDemora()).toString(), ctx));
        // END EDIT 20140519:
        }
        /* BEGIN EDIT 20140519
		lstRegElementos.add(crearRegistroElemento("TAE", "TAE", 
				formateaBid(dg.getTae()).toString(), ctx));
		 */
        if (!UtilidadesComun.isBlankOrNull(dg.getTae())) {
            lstRegElementos.add(crearRegistroElemento("TAE", "TAE", UtilidadesEnotario.comprobarDatoNull(UtilidadesEnotario.bigDecimalToString(dg.getTae(), 10, 2, false)), ctx));
        // END EDIT 20140519:
        }
        if (!UtilidadesComun.isBlankOrNull(dg.getCodigoAmortizacion())) {
            // ctx.put(CTE_CTX_CODIGO_TIPO_AMORTIZACION1, dg.getCodigoAmortizacion().toString()); $OP-LBL-NL-2$
            lstRegElementos.add(crearRegistroElemento("CDTPAMOR", new Mensaje(ServicioNegocio.getContexto(), COD_TIPO_AMORTIZACION_2073960626).toString(), UtilidadesEnotario.comprobarDatoNull(dg.getCodigoAmortizacion()).toString(), ctx));
        }
        // ctx.put(CTE_CTX_LITERAL_TIPO_AMORTIZACION1, "FALTA"); // FALTA $OP-LBL-NL-2$
        lstRegElementos.add(crearRegistroElemento("TPAMOR", new Mensaje(ServicioNegocio.getContexto(), LIT_TIPO_AMORTIZACION_1691964723).toString(), vo.getLiteralTipoAmortizacion(), ctx));
        ctx.put(CTE_CTX_ELEMENTO_DET, lstRegElementos.toArray(new IRegistro[lstRegElementos.size()]));
    }

    /**
     * Método que crea un registro con un elemento con los datos pasados como
     * parametros.
     *
     * @param codigo
     * @param descripcion
     * @param valor
     * @param ctx
     * @return
     */
    private static IRegistro crearRegistroElemento(String codigo, String descripcion, String valor, IContexto ctx) {
        // Controla el tamaño maximo de la descripcion del elemento DET hasta 20.
        if (descripcion.length() > CTE_MAX_TAM_DESCR_ELEMENTO_DET)
            descripcion = descripcion.substring(CTE_INT_CERO, CTE_MAX_TAM_DESCR_ELEMENTO_DET - 1);
        IRegistro regElemento = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_ELEMENTO_DET);
        regElemento.put(CTE_CTX_CODIGO_DEL_ELEMENTO190, codigo);
        regElemento.put(CTE_CTX_DESCRIPCION_DEL_ELEMENTO190, descripcion);
        regElemento.put(CTE_CTX_VALOR_DEL_ELEMENTO190, valor);
        return regElemento;
    }

    /**
     * Método que concatena un 'M' al principio al valor de plazo.
     *
     * @param plazo
     * @return plazo del prestamo con una 'M' delante.
     */
    public static String formateaPlazo(String plazo) {
        return CTE_STR_M + plazo;
    }

    /**
     * Método que rellena una matriz de comisiones.
     *
     * @param comisiones
     * @param ctx
     */
    private static void rellenarMatrizComisiones(List<ComisionesVO> comisiones, IContexto ctx) {
        List<IRegistro> lstRegComisiones = new ArrayList<IRegistro>(0);
        for (ComisionesVO c : comisiones) {
            lstRegComisiones.add(crearRegistroComision(c, ctx));
        }
        if (!lstRegComisiones.isEmpty()) {
            ctx.put(CTE_CTX_COMISIONES, lstRegComisiones.toArray(new IRegistro[lstRegComisiones.size()]));
        }
    }

    /**
     * Método que rellena un registro con los datos de una comision.
     *
     * @param comision
     * @param ctx
     * @return registro con lso datos de una comisión.
     */
    private static IRegistro crearRegistroComision(ComisionesVO comision, IContexto ctx) {
        IRegistro regComision = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_COMISIONES);
        regComision.put(CTE_CTX_CODIGO_COMISION200, UtilidadesEnotario.comprobarDatoNull(comision.getCodigoComision()));
        regComision.put(CTE_CTX_DESCRIPCION_COMISION200, UtilidadesEnotario.comprobarDatoNull(comision.getDescripcionComision()));
        // regComision.put(CTE_CTX_TIPO10, formateaBid(comision.getTipo()));
        if (null != comision.getTipoComision()) {
            regComision.put(CTE_CTX_TIPO200, UtilidadesEnotario.comprobarDatoNull(comision.getTipoComision()));
        }
        regComision.put(CTE_CTX_IMPORTE200, UtilidadesEnotario.comprobarDatoNull(comision.getValorComision()));
        return regComision;
    }

    /**
     * Metodo que rellena una matriz de documentos
     *
     * @param documentos
     * @param ctx
     */
    private static void rellenarMatrizDocumentos(List<DocumentoVO> documentos, IContexto ctx) {
        List<IRegistro> lstRegDocumentos = new ArrayList<IRegistro>(0);
        if (UtilidadesEnotario.isBlankOrNull(documentos)) {
            return;
        }
        for (DocumentoVO c : documentos) {
            lstRegDocumentos.add(crearRegistroDocumento(c, ctx));
        }
        if (!lstRegDocumentos.isEmpty()) {
            ctx.put(CTE_CTX_DOCUMENTO, lstRegDocumentos.toArray(new IRegistro[lstRegDocumentos.size()]));
        }
    }

    /**
     * Metodo que rellena un regsitros con los datos de los documentos
     *
     * @param documento
     * @param ctx
     * @return
     */
    private static IRegistro crearRegistroDocumento(DocumentoVO documento, IContexto ctx) {
        IRegistro regDocumento = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_DOCUMENTO);
        regDocumento.put(CTE_CTX_CODIGO_DOCUMENTO210, UtilidadesEnotario.comprobarDatoNull(documento.getCodigoDocumento()));
        regDocumento.put(CTE_CTX_DESCRIPCION_DOCUMENTO210, UtilidadesEnotario.comprobarDatoNull(documento.getDescripcionDocumento()));
        return regDocumento;
    }

    private static final String LIT_TIPO_AMORTIZACION_1691964723 = "LIT_TIPO_AMORTIZACION_1691964723";

    private static final String INTERES_DEMORA_1710764632 = "INTERES_DEMORA_1710764632";

    private static final String LITERAL_DIVISA_1863611095 = "LITERAL_DIVISA_1863611095";

    private static final String COD_TIPO_AMORTIZACION_2073960626 = "COD_TIPO_AMORTIZACION_2073960626";

    private static final String LITERAL_COD_REDONDEO_46544027 = "LITERAL_COD_REDONDEO_46544027";

    private static final String LITERAL_IND_REFERENCIA_1099110930 = "LITERAL_IND_REFERENCIA_1099110930";

    private static final String CODIGO_REDONDEO_814311813 = "CODIGO_REDONDEO_814311813";

    private static final String INDICE_REFERENCIA_185901754 = "INDICE_REFERENCIA_185901754";

    private static final String PERIODICIDAD_LIQUIDACION_703440157 = "PERIODICIDAD_LIQUIDACION_703440157";

    private static final String TIPO_INTERES_687154590 = "TIPO_INTERES_687154590";

    private static final String PERIODICIDAD_AMORTIZACION_276840361 = "PERIODICIDAD_AMORTIZACION_276840361";
}
