package es.caixagalicia.anpm.prestamos.enotario.servicios.fachada.contextos;

import java.math.BigDecimal;

import es.caixagalicia.anpm.prestamos.enotario.persistencia.datosgenerales.DatosgeneralesC;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.Constantes;
import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.fechas.DateHelper;

public class ContextoDatosGeneralesEnotario
{

	private static final String CTE_ID_CONTEXTO = "ANPMN088";
	
	private static final String CTE_OFICINA = "ANPMN088010";
	private static final String CTE_NUMERO = "ANPMN088020";
	private static final String CTE_VERSION = "ANPMN088030";
	private static final String CTE_NUC = "ANPMN088040";
	private static final String CTE_DIVISION = "ANPMN088050";
	private static final String CTE_SUBDIVISION = "ANPMN088060";
	private static final String CTE_DIGITO = "ANPMN088070";
	private static final String CTE_CONTADOR = "ANPMN088080";
	private static final String CTE_TIPO_PRESTAMO = "ANPMN088090";
	private static final String CTE_TIMESTAMP = "ANPMN088100";
	private static final String CTE_CLAVE_NOTARIO = "ANPMN088110";
	private static final String CTE_CODIGO_NOTARIA = "ANPMN088120";
	private static final String CTE_FECHA_PREVISTA_FIRMA = "ANPMN088130";
	private static final String CTE_HORA_PREVISTA = "ANPMN088140";
	private static final String CTE_FECHA_CADUCIDAD = "ANPMN088150";
	private static final String CTE_NOMINAL = "ANPMN088160";
	private static final String CTE_CODIGO_DIVISA = "ANPMN088170";
	
	private static final String CTE_PERIODICIDAD_AMORTIZACION = "ANPMN088180";
	private static final String CTE_PERIODICIDAD_LIQUIDACION = "ANPMN088190";
	private static final String CTE_PLAZO = "ANPMN088200";
	private static final String CTE_TIPO_INTERES = "ANPMN088210";
	private static final String CTE_INDICE_REFERENCIA = "ANPMN088220";
	private static final String CTE_DIFERENCIAL = "ANPMN088230";
	private static final String CTE_INTERES_DEMORA = "ANPMN088240";
	private static final String CTE_TAE = "ANPMN088250";
	private static final String CTE_CODIGO_AMORTIZACION = "ANPMN088260";
	private static final String CTE_ESTADO = "ANPMN088270";
	private static final String CTE_FECHA_ULTIMO_PDF = "ANPMN088280";
	private static final String CTE_ULTIMA_TAE_CALCULADA = "ANPMN088290";
	private static final String CTE_CUENTA_CONTABLE_ABONO = "ANPMN088300";
	private static final String CTE_OFICINA_ABONO = "ANPMN088310";
	private static final String CTE_NUMERO_CUENTA_ABONO = "ANPMN088320";
	private static final String CTE_DIGITO_ABONO = "ANPMN088330";
	private static final String CTE_DIVISION_ABONO = "ANPMN088340";
	
	private static final String CTE_SUBDIVISION_ABONO = "ANPMN088350";
	private static final String CTE_IMPORTE_HONORARIOS = "ANPMN088360";
	private static final String CTE_CODIGO_DE_REDONDEO = "ANPMN088370";
	private static final String CTE_ULTIMO_CODIGO_DE_RETORNO = "ANPMN088380";
	private static final String CTE_ULTIMO_CODIGO_DE_ERROR = "ANPMN088390";
	private static final String CTE_ULTIMO_TEXTO_ERROR = "ANPMN088400";


	
	private static final String CTE_ERROR_ID_CTX = "ANPMN004";
	private static final String CTE_ERROR_PROP_COD_ERROR = "ANPMN004010";
	private static final String CTE_ERROR_PROP_DESCRIPCION_ERROR = "ANPMN004020";
	
	private static final String CTE_ERROR_DESCRIPCION_ESTADO = "La solicitud está en un estado no permitido";
	private static final String CTE_ERROR_DESCRIPCION_GARANTIA = "No es un prestamo personal";
	private static final String CTE_ERROR_DESCRIPCION_ESPECIALIDAD = "La solicitud es especializada";
	private static final String CTE_ERROR_DESCRIPCION_ESPERA_ENOTARIO = "Se enviaron los datos a e-notario pero esta todavía no ha respondido";
	private static final String CTE_ERROR_DESCRIPCION_SIN_PERMISO = "No se permite modificar";
	private static final String CTE_ERROR_DESCRIPCION_VIXENCIA = "El producto no está vigente";
	private static final String CTE_ERROR_DESCRIPCION_DATA_PREVISTA = "A fecha prevista de formalización no es valida";
	
	private static final String CTE_ERROR_DESCRIPCION_NOVA_DATA = "Indicar nueva fecha y hora";

	private ContextoDatosGeneralesEnotario() {
		
	}
	
	/**
	 * Asigna el valor al campo correspondiente del contexto
	 * @return IContexto
	 */
		
	public static IContexto[] rellenarDatosContextoDatosEnotario(DatosgeneralesC datosGenerales, Integer pCodError) {
		
		IContexto[] salida = new IContexto[1];
		
		IContexto datos = ContextoFactory.getInstance().getContexto(CTE_ID_CONTEXTO);
		
		if (datosGenerales != null && (pCodError.intValue() == Constantes.CTE_CERO_INT || pCodError.intValue() == Constantes.CTE_CIEN_INT) )
		{
		
			datos.put(CTE_OFICINA, datosGenerales.getId().getOficinaSolicitud());
			datos.put(CTE_NUMERO, datosGenerales.getId().getNumeroSolicitud());
			datos.put(CTE_VERSION, datosGenerales.getId().getVersionSolicitud());
			datos.put(CTE_NUC, datosGenerales.getId().getNucExpediente());
			datos.put(CTE_DIVISION, datosGenerales.getDivision());
			datos.put(CTE_SUBDIVISION, datosGenerales.getSubdivision());
			datos.put(CTE_DIGITO, datosGenerales.getDigito());
			datos.put(CTE_CONTADOR, datosGenerales.getContador());
			datos.put(CTE_TIPO_PRESTAMO, datosGenerales.getTipoPrestamo());
			datos.put(CTE_TIMESTAMP, datosGenerales.getTimestamp().toString());
			datos.put(CTE_CLAVE_NOTARIO, datosGenerales.getClaveNotario());
			datos.put(CTE_CODIGO_NOTARIA, datosGenerales.getCodigoNotaria());
			datos.put(CTE_FECHA_PREVISTA_FIRMA, DateHelper.sqlDateToString(datosGenerales.getFechaPrevistaFirma(), DateHelper.FORMATO_DD_MM_YYYY_GUION));
			datos.put(CTE_HORA_PREVISTA, DateHelper.stringASqlTime(datosGenerales.getHoraPrevista().toString(), "HH:mm").toString());
			datos.put(CTE_FECHA_CADUCIDAD, datosGenerales.getFechaCaducidad().toString());
			datos.put(CTE_NOMINAL, datosGenerales.getNominal());
			datos.put(CTE_CODIGO_DIVISA, datosGenerales.getCodigoDivisa());
			
			datos.put(CTE_PERIODICIDAD_AMORTIZACION, datosGenerales.getPeriodicidadAmortizacion());
			datos.put(CTE_PERIODICIDAD_LIQUIDACION, datosGenerales.getPeriodicidadLiquidacion());
			datos.put(CTE_PLAZO, datosGenerales.getPlazo());
			datos.put(CTE_TIPO_INTERES, datosGenerales.getTipoInteres());
			datos.put(CTE_INDICE_REFERENCIA, datosGenerales.getIndiceReferencia());
			datos.put(CTE_DIFERENCIAL, datosGenerales.getDiferencial());
			datos.put(CTE_INTERES_DEMORA, datosGenerales.getInteresDemora());
			datos.put(CTE_TAE, datosGenerales.getTae());
			datos.put(CTE_CODIGO_AMORTIZACION, datosGenerales.getCodigoAmortizacion());
			datos.put(CTE_ESTADO, datosGenerales.getEstado());
			datos.put(CTE_FECHA_ULTIMO_PDF, datosGenerales.getFechaUltimoPdf().toString());
			datos.put(CTE_ULTIMA_TAE_CALCULADA, datosGenerales.getUltimaTaeCalculada());
			datos.put(CTE_CUENTA_CONTABLE_ABONO, datosGenerales.getCuentaContableAbono());
			datos.put(CTE_OFICINA_ABONO, datosGenerales.getOficinaAbono());
			datos.put(CTE_NUMERO_CUENTA_ABONO, datosGenerales.getNumeroCuentaAbono());
			datos.put(CTE_DIGITO_ABONO, datosGenerales.getDigitoAbono());
			datos.put(CTE_DIVISION_ABONO, datosGenerales.getDigitoAbono());
	
			datos.put(CTE_SUBDIVISION_ABONO, datosGenerales.getSubdivisionAbono());
			datos.put(CTE_IMPORTE_HONORARIOS, datosGenerales.getImporteHonorarios());
			datos.put(CTE_CODIGO_DE_REDONDEO, datosGenerales.getCodigoDeRedondeo());
			datos.put(CTE_ULTIMO_CODIGO_DE_RETORNO, datosGenerales.getUltimoCodigoDeRetorno());
//			datos.put(CTE_ULTIMO_CODIGO_DE_ERROR, datosGenerales.getUltimoCodigoDeError());
//			datos.put(CTE_ULTIMO_TEXTO_ERROR, datosGenerales.getUltimoTextoDeError());
			
			if (pCodError.intValue() == Constantes.CTE_CIEN_INT) {
				datos.put(CTE_ULTIMO_CODIGO_DE_ERROR, new BigDecimal(pCodError.intValue()));
				datos.put(CTE_ULTIMO_TEXTO_ERROR, CTE_ERROR_DESCRIPCION_NOVA_DATA);
			}
			
			salida[0] = datos;
			
		}else{ 
			salida = new IContexto[1];			
			datos = ContextoFactory.getInstance().getContexto(CTE_ERROR_ID_CTX);
			
			switch(pCodError) {
				
				case Constantes.CTE_UNO_INT:					
					
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, CTE_ERROR_DESCRIPCION_ESPECIALIDAD);	
					break;
					
				case Constantes.CTE_DOS_INT:					
					
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, CTE_ERROR_DESCRIPCION_GARANTIA);	
					break;	
					
				case Constantes.CTE_TRES_INT:					
					
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, CTE_ERROR_DESCRIPCION_ESTADO);
					break;
					
				case Constantes.CTE_CUATRO_INT:					
					
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, CTE_ERROR_DESCRIPCION_ESPERA_ENOTARIO);	
					break;
					
				case Constantes.CTE_CINCO_INT:					
					
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, CTE_ERROR_DESCRIPCION_SIN_PERMISO);	
					break;	
					
				case Constantes.CTE_SEIS_INT:					
					
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, CTE_ERROR_DESCRIPCION_VIXENCIA);	
					break;
					
				case Constantes.CTE_SIETE_INT:					
					
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					datos.put(CTE_ERROR_PROP_DESCRIPCION_ERROR, CTE_ERROR_DESCRIPCION_DATA_PREVISTA);	
					break;	
													
				default:
					datos.put(CTE_ERROR_PROP_COD_ERROR, new BigDecimal(pCodError.intValue()));
					break;
			}
			
		}	
		
					
			salida[0] = datos;
				 
		 return salida;
		
	}

	
	
}
