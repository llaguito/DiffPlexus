/**
 * 
 */
package es.caixagalicia.anpm.prestamos.enotario.servicios.fachada.contextos;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.apache.commons.lang.StringUtils;


import es.caixagalicia.anpm.prestamos.enotario.persistencia.datosgenerales.DatosgeneralesC;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.AvalistasVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.ComisionesVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.EnvioEnotarioAltaModificacionVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.IConstantesEnotario;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.TitularesVO;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.UtilidadesEnotario;

import es.caixagalicia.ifrt.contextos.ContextoFactory;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IRegistro;
import es.caixagalicia.ifrt.fechas.DateHelper;

/**
 * @author V360141
 */
public class ContextoEnvMsjEnotarioAltaModif2
{
	
	/* CONTEXTO ALTA Y MODIFICACIÓN */
	private static final String CTE_CTX_NOMBRE = "ANPMN087";

	/* CABECERA */
	private static final String CTE_CTX_CODIGO_TRANSACCION = "ANPMN087010";

	private static final String CTE_CTX_PIC_CODIGO_OPERACION = "ANPMN087020";

	private static final String CTE_CTX_CUENTA_CONTABLE = "ANPMN087030";

	private static final String CTE_CTX_IND_AUTORIZACION = "ANPMN087040";

	private static final String CTE_CTX_VERSION_APB = "ANPMN087050";

	private static final String CTE_CTX_IDENTIFICADOR_MENSAJE = "ANPMN087060";

	private static final String CTE_CTX_CODIGO_APLICACION = "ANPMN087070";

	private static final String CTE_CTX_CHAR_CODIGO_OPERACION = "ANPMN087080";

	private static final String CTE_CTX_NODO_RE_EMISOR = "ANPMN087090";

	private static final String CTE_CTX_NODO_ORIGINAL = "ANPMN087100";

	private static final String CTE_CTX_TIPO_DE_OPERACION = "ANPMN087110";

	/* GENERAL */
	private static final String CTE_CTX_PAIS = "ANPMN087120";

	private static final String CTE_CTX_ENTIDAD = "ANPMN087130";

	private static final String CTE_CTX_TIPO_PRESTAMO = "ANPMN087140";

	private static final String CTE_CTX_CONTRATO_PRESTAMO = "ANPMN087150";
	
	private static final String CTE_CTX_RESTO_BLOQUES = "ANPMN087155";


	/* NOOP10 - REQUEST */

	// Matriz de Titulares:
	private static final String CTE_CTX_MATRIZ_DE_TITULARES10 = "ANPMN087470";

	private static final String CTE_CTX_IDENTIFICADOR_TITULAR10 = "ANPMN087471";

	private static final String CTE_CTX_NOMBRE_TITULAR10 = "ANPMN087472";

	private static final String CTE_CTX_PRIMER_APELLIDO_TITULAR10 = "ANPMN087473";

	private static final String CTE_CTX_SEGUNDO_APELLIDO_TITULAR10 = "ANPMN087474";

	private static final String CTE_CTX_TELEFONO_TITULAR10 = "ANPMN087475";

	private static final String CTE_CTX_EMAIL_TITULAR10 = "ANPMN087476";

	private static final String CTE_CTX_CODIGO_INE_TITULAR10 = "ANPMN087477";

	// Matriz de Avalistas:
	private static final String CTE_CTX_MATRIZ_DE_AVALISTAS10 = "ANPMN087480";

	private static final String CTE_CTX_IDENTIFICADOR_AVALISTA10 = "ANPMN087481";

	private static final String CTE_CTX_COLEGIADO_TITULAR10 = "ANPMN087490";

	private static final String CTE_CTX_FECHA_CADUCIDAD10 = "ANPMN087495";

	private static final String CTE_CTX_CODIGO_DEL_NOMINAL10 = "ANPMN087500";
	private static final String CTE_CTX_CODIGO_NOMINAL = "IMPREST2";

	private static final String CTE_CTX_DESCRIPCION_DEL_NOMINAL10 = "ANPMN087505";
	private static final String CTE_CTX_DESCR_NOMINAL = "IMPORTE PRESTAMO";

	private static final String CTE_CTX_VALOR_DEL_NOMINAL10 = "ANPMN087510";
	

	// Matriz de Elementos:
	private static final String CTE_CTX_MATRIZ_DE_ELEMENTOS10 = "ANPMN087520";

	private static final String CTE_CTX_CODIGO_DEL_ELEMENTO10 = "ANPMN087521";

	private static final String CTE_CTX_DESCRIPCION_DEL_ELEMENTO10 = "ANPMN087522";

	private static final String CTE_CTX_VALOR_DEL_ELEMENTO10 = "ANPMN087523";

	// Matriz de comisiones:
	private static final String CTE_CTX_MATRIZ_COMISIONES10 = "ANPMN087530";

	private static final String CTE_CTX_CODIGO_COMISION10 = "ANPMN087531";

	private static final String CTE_CTX_DESCRIPCION_COMISION10 = "ANPMN087532";

	private static final String CTE_CTX_TIPO10 = "ANPMN087533";

	private static final String CTE_CTX_IMPORTE10 = "ANPMN087534";

	private static final String CTE_CTX_TLF_ENTIDAD_FINANCIERA10 = "ANPMN087540";

	private static final String CTE_CTX_TLF_HELPDESK10 = "ANPMN087545";

	// Matriz de Documentos:
	private static final String CTE_CTX_MATRIZ_DE_DOCUMENTOS10 = "ANPMN087550";

	private static final String CTE_CTX_CODIGO_DOCUMENTO10 = "ANPMN087551";

	private static final String CTE_CTX_DESCRIPCION_DOCUMENTO10 = "ANPMN087552";

	/* NOOP10 - REPLY */
	private static final String CTE_CTX_CODIGO_DE_RETORNO10 = "ANPMN087560";

	private static final String CTE_CTX_CODIGO_DE_ERROR10 = "ANPMN087565";

	private static final String CTE_CTX_TEXTO_DE_ERROR10 = "ANPMN087570";

	/* ERROR Y DESCRIPCION DEL ERROR */
	private static final String CTE_CTX_ERROR = "ANPMN087940";

	private static final String CTE_CTX_DESCRIPCION_ERROR = "ANPMN087950";

	/* OTRAS CONSTANTES */
	public static final String CTE_RELACION_AVALISTA = "03";

	public static final String CTE_RELACION_TITULAR = "01";
	
	public static final String CTE_STR_CODIGO_TRANSACCION = "ANM3";

	public static final String CTE_STR_CODIGO_APLICACION = "NO";

	public static final String CTE_STR_UNO = "1";

	public static final String CTE_STR_01 = "01";

	public static final String CTE_STR_02 = "02";

	public static final String CTE_STR_04 = "04";

	public static final String CTE_STR_06 = "06";

	public static final String CTE_STR_10 = "10";

	public static final String CTE_STR_20 = "20";

	public static final String CTE_STR_22 = "22";

	public static final String CTE_STR_24 = "24";

	public static final String CTE_STR_PAIS = "011";

	public static final String CTE_STR_M = "M";

	public static final String CTE_STR_VACIO = "";

	public static final String CTE_STR_NOVENTAYNUEVE = "99";

	/* CONTEXTO CHEQUEO Y CANCELACION */
	
	/**
	 * Constructor privado
	 */
	private ContextoEnvMsjEnotarioAltaModif2()
	{

	}

	/**
	 * Método que rellena el contexto correspondiente a la NOOP1 de PL1.
	 * 
	 * @param operacion
	 *        tipo de operación: Alta, Modificación, Modificación con aviso o
	 *        Cancelación.
	 * @param entidad
	 *        variable de entorno.
	 * @param tipoPrestamo
	 * @param titulares
	 *        lista de clientes que son titulares.
	 * @param avalistas
	 *        lista de clientes que son avalistas.
	 * @param datosGenerales
	 *        datos generales e-notario.
	 * @param literalDivisa
	 *        obtenido previamente en función del código de divisa llamando al
	 *        servicio ITAL_600.
	 * @param comisiones
	 *        lista de comisiones.
	 * @param contratoPrestamo
	 *        clave del prestamo formada por: Entidad Oficina Digitos de control
	 *        Cuenta contable Numero cuenta Digito
	 * @param codigoError
	 *        guarda el código del error si se produce.
	 * @param descripcionError
	 *        guarda la descipción del error si se produce.
	 * @return Array de contextos con el contexto de salida correspondiente.
	 */
	public static IContexto rellenarContextoEnvioEnotarioAltaModif(
			EnvioEnotarioAltaModificacionVO vo,
			DatosgeneralesC datosGenerales, String literalDivisa, String tlfEntidad,
			String codigoRetorno, String codigoError, String textoError)
	{
		IContexto ctx = ContextoFactory.getInstance().getContexto(CTE_CTX_NOMBRE);

		String operacion = null;
		String tipoPrestamo = null;
		String entidad = null;
		String contratoPrestamo = null;
		
		List<TitularesVO> titulares;
		List<AvalistasVO> avalistas;
		List<ComisionesVO> comisiones;
		

		operacion = vo.getCodigoOperacion();


		tipoPrestamo 		= vo.getTipoPrestamo();
		entidad 			= vo.getEntidad();
		contratoPrestamo 	= vo.getContratoPrestamo();
		
		titulares	= vo.getTitularesPrestamo();
		avalistas	= vo.getAvalistasPrestamo();
		comisiones	= vo.getComisiones();
		

		/*Datos de la operación*/
		ctx.put(CTE_CTX_CODIGO_TRANSACCION, CTE_STR_CODIGO_TRANSACCION);
		ctx.put(CTE_CTX_PIC_CODIGO_OPERACION, new BigDecimal(187));
		ctx.put(CTE_CTX_CUENTA_CONTABLE, new BigDecimal(507));
		ctx.put(CTE_CTX_IND_AUTORIZACION, StringUtils.EMPTY);
		ctx.put(CTE_CTX_VERSION_APB, StringUtils.EMPTY);
		ctx.put(CTE_CTX_IDENTIFICADOR_MENSAJE, StringUtils.EMPTY);
		ctx.put(CTE_CTX_CODIGO_APLICACION, CTE_STR_CODIGO_APLICACION);
		ctx.put(CTE_CTX_CHAR_CODIGO_OPERACION, operacion);
		ctx.put(CTE_CTX_NODO_RE_EMISOR, CTE_STR_UNO);
		ctx.put(CTE_CTX_NODO_ORIGINAL, CTE_STR_UNO);
		ctx.put(CTE_CTX_TIPO_DE_OPERACION, CTE_STR_UNO);

		/*Datos de la cabecera*/
		ctx.put(CTE_CTX_PAIS, CTE_STR_PAIS);
		ctx.put(CTE_CTX_ENTIDAD, entidad);
		ctx.put(CTE_CTX_TIPO_PRESTAMO, tipoPrestamo);
		ctx.put(CTE_CTX_CONTRATO_PRESTAMO, contratoPrestamo);

		rellenarMatrizTitulares(titulares, ctx);

		rellenarMatrizAvalistas(avalistas, ctx);


		ctx.put(CTE_CTX_TLF_HELPDESK10, IConstantesEnotario.CTE_TELEFONO_CALL_CENTER);
		ctx.put(CTE_CTX_TLF_ENTIDAD_FINANCIERA10, tlfEntidad);
		
		ctx.put(CTE_CTX_CODIGO_DEL_NOMINAL10, CTE_CTX_CODIGO_NOMINAL);
		ctx.put(CTE_CTX_DESCRIPCION_DEL_NOMINAL10, CTE_CTX_DESCR_NOMINAL);
		ctx.put(CTE_CTX_VALOR_DEL_NOMINAL10, datosGenerales.getNominal());
		
		
		if (datosGenerales != null)
		{
			ctx.put(CTE_CTX_COLEGIADO_TITULAR10, 
				UtilidadesEnotario.comprobarDatoNull(datosGenerales.getClaveNotario()));
			ctx.put(CTE_CTX_FECHA_CADUCIDAD10, DateHelper.sqlDateToString(
					datosGenerales.getFechaCaducidad(), DateHelper.FORMATO_DDMMYYYY));
		
			rellenarMatrizElementos(datosGenerales, ctx, literalDivisa,vo);
		}

		rellenarMatrizComisiones(comisiones, ctx);

		ctx.put(CTE_CTX_CODIGO_DE_RETORNO10, codigoRetorno);
		ctx.put(CTE_CTX_CODIGO_DE_ERROR10, codigoError);
		ctx.put(CTE_CTX_TEXTO_DE_ERROR10, textoError);

		return ctx;
	}
	
	/**
	 * Rellena el contexto ANPMN087 pero sólo los campos de error.
	 * @param codigoRetorno
	 * @param codigoError
	 * @param descripcionError
	 * @return contexto
	 */
	public static IContexto rellenarContextoError(
		String codigoRetorno,
		String codigoError, String descripcionError,
		IContexto ctx)
	{
		//IContexto ctx = ContextoFactory.getInstance().getContexto(CTE_CTX_NOMBRE);

		ctx.put(CTE_CTX_CODIGO_DE_RETORNO10, codigoRetorno);
		ctx.put(CTE_CTX_CODIGO_DE_ERROR10, codigoError);
		ctx.put(CTE_CTX_TEXTO_DE_ERROR10, descripcionError);

		return ctx;
	}	
	
	public static IContexto obtenerCtxVacio()
	{
		IContexto ctx = ContextoFactory.getInstance().getContexto(CTE_CTX_NOMBRE);
		return ctx;
	}
	
	/**
	 * Método que rellena un registro con los datos de un titular.
	 * 
	 * @param titular
	 * @param ctx
	 * @return registro con los datos del titular.
	 */
	private static IRegistro crearRegistroTitular(TitularesVO titular, IContexto ctx)
	{
		IRegistro regTitular = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_MATRIZ_DE_TITULARES10);
		regTitular.put(CTE_CTX_IDENTIFICADOR_TITULAR10,
			UtilidadesEnotario.comprobarDatoNull(titular.getNif()));
		regTitular.put(CTE_CTX_NOMBRE_TITULAR10,
			UtilidadesEnotario.comprobarDatoNull(titular.getNombreTitular()));
		regTitular.put(CTE_CTX_PRIMER_APELLIDO_TITULAR10,
			UtilidadesEnotario.comprobarDatoNull(titular.getApellidoUnoTitular()));
		regTitular.put(CTE_CTX_SEGUNDO_APELLIDO_TITULAR10,
			UtilidadesEnotario.comprobarDatoNull(titular.getApellidoDosTitular()));
		regTitular.put(CTE_CTX_TELEFONO_TITULAR10, 
			UtilidadesEnotario.comprobarDatoNull(titular.getNumeroTelefonoTitular()));
		regTitular.put(CTE_CTX_EMAIL_TITULAR10, 
			UtilidadesEnotario.comprobarDatoNull(titular.getCorreoElectronicoTitular()));
		regTitular.put(CTE_CTX_CODIGO_INE_TITULAR10, 
			UtilidadesEnotario.comprobarDatoNull(titular.getCodigoIneTitular()));

		return regTitular;
	}

	/**
	 * Método que rellena un registro con los datos de un avalista.
	 * 
	 * @param avalista
	 * @param ctx
	 * @return registro con los datos del avalista.
	 */
	private static IRegistro crearRegistroAvalista(AvalistasVO avalista, IContexto ctx)
	{
		IRegistro regAvalista = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_MATRIZ_DE_AVALISTAS10);
		regAvalista.put(CTE_CTX_IDENTIFICADOR_AVALISTA10, UtilidadesEnotario.comprobarDatoNull(avalista.getNifAvalista()));

		return regAvalista;
	}

	/**
	 * Método que rellena un registro con los datos de una comision.
	 * 
	 * @param comision
	 * @param ctx
	 * @return registro con lso datos de una comisión.
	 */
	private static IRegistro crearRegistroComision(ComisionesVO comision, IContexto ctx)
	{
		IRegistro regComision = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_MATRIZ_COMISIONES10);
		regComision.put(CTE_CTX_CODIGO_COMISION10, 
			UtilidadesEnotario.comprobarDatoNull(comision.getCodigoComision()));
		regComision.put(CTE_CTX_DESCRIPCION_COMISION10, 
			UtilidadesEnotario.comprobarDatoNull(comision.getDescripcionComision()));
		//regComision.put(CTE_CTX_TIPO10, formateaBid(comision.getTipo()));
		if (null != comision.getTipoComision())
		{
			regComision.put(CTE_CTX_TIPO10, UtilidadesEnotario.comprobarDatoNull(comision.getTipoComision()));
		}

		if(!UtilidadesEnotario.isBlankOrNull(comision.getValorComision())) {
			regComision.put(CTE_CTX_IMPORTE10,  UtilidadesEnotario.stringToBigDecimal(comision.getValorComision(), Locale.getDefault()));

		}

		
		return regComision;
	}
	
	/**
	 * Método que crea un registro con un elemento con los datos pasados como 
	 * parametros.
	 * 
	 * @param codigo
	 * @param descripcion
	 * @param valor
	 * @param ctx
	 * @return
	 */
	private static IRegistro crearRegistroElemento(String codigo, String descripcion, 
			String valor, IContexto ctx)
	{
		IRegistro regElemento = ContextoFactory.getInstance().getRegistro(ctx, CTE_CTX_MATRIZ_DE_ELEMENTOS10);
		regElemento.put(CTE_CTX_CODIGO_DEL_ELEMENTO10, codigo);
		regElemento.put(CTE_CTX_DESCRIPCION_DEL_ELEMENTO10, descripcion);
		regElemento.put(CTE_CTX_VALOR_DEL_ELEMENTO10, valor);
		
		return regElemento;
	}
	
	/**
	 * Método que rellena una matriz de titulares.
	 * 
	 * @param titulares
	 * @param ctx
	 */
	private static void rellenarMatrizTitulares(List<TitularesVO> titulares, IContexto ctx)
	{
		List<IRegistro> lstRegTitulares = new ArrayList<IRegistro>(0);

		for (TitularesVO t : titulares)
		{
			lstRegTitulares.add(crearRegistroTitular(t, ctx));
		}

		if (!lstRegTitulares.isEmpty())
		{
			ctx.put(CTE_CTX_MATRIZ_DE_TITULARES10, lstRegTitulares
					.toArray(new IRegistro[lstRegTitulares.size()]));
		}
	}

	/**
	 * Método que rellena una matriz de avalistas.
	 * 
	 * @param avalistas
	 * @param ctx
	 */
	private static void rellenarMatrizAvalistas(List<AvalistasVO> avalistas, IContexto ctx)
	{
		List<IRegistro> lstRegAvalistas = new ArrayList<IRegistro>(0);

		for (AvalistasVO a : avalistas)
		{
			lstRegAvalistas.add(crearRegistroAvalista(a, ctx));
		}

		if (!lstRegAvalistas.isEmpty())
		{
			ctx.put(CTE_CTX_MATRIZ_DE_AVALISTAS10, lstRegAvalistas
					.toArray(new IRegistro[lstRegAvalistas.size()]));
		}
	}

	/**
	 * Método que rellena una matriz de comisiones.
	 * 
	 * @param comisiones
	 * @param ctx
	 */
	private static void rellenarMatrizComisiones(List<ComisionesVO> comisiones, IContexto ctx)
	{
		List<IRegistro> lstRegComisiones = new ArrayList<IRegistro>(0);

		for (ComisionesVO c : comisiones)
		{
			lstRegComisiones.add(crearRegistroComision(c, ctx));
		}

		if (!lstRegComisiones.isEmpty())
		{
			ctx.put(CTE_CTX_MATRIZ_COMISIONES10, lstRegComisiones
					.toArray(new IRegistro[lstRegComisiones.size()]));
		}
	}
	
	/**
	 * Método que rellena una matriz de elementos.
	 * *******************************************
	 * 
	 * @param dg
	 * @param ctx
	 * @param divisaFormateada
	 */
	private static void rellenarMatrizElementos(DatosgeneralesC dg,
			IContexto ctx, String divisaFormateada,EnvioEnotarioAltaModificacionVO vo)
	{
		List<IRegistro> lstRegElementos = new ArrayList<IRegistro>(0);


		lstRegElementos.add(crearRegistroElemento("CDDIVISS", "DIVISA", 
				UtilidadesEnotario.comprobarDatoNull(dg.getCodigoDivisa()), ctx));


		lstRegElementos.add(crearRegistroElemento("NBDIVIC", "LITERAL DIVISA",
				UtilidadesEnotario.comprobarDatoNull(divisaFormateada), ctx));


		lstRegElementos.add(crearRegistroElemento("TPPERCAP", "PERIODICIDAD AMORTIZACION", 
				UtilidadesEnotario.comprobarDatoNull(dg.getPeriodicidadAmortizacion()), ctx));


		lstRegElementos.add(crearRegistroElemento("TPPERINT", "PERIODICIDAD LIQUIDACION", 
				UtilidadesEnotario.comprobarDatoNull(dg.getPeriodicidadLiquidacion()), ctx));

		lstRegElementos.add(crearRegistroElemento("PZOPERACP", "PLAZO", 
				formateaPlazo(UtilidadesEnotario.comprobarDatoNull(dg.getPlazo()).toString()), ctx));

		lstRegElementos.add(crearRegistroElemento("TPINTER", "TIPO INTERES", 
				UtilidadesEnotario.comprobarDatoNull(UtilidadesEnotario.bigDecimalToString(dg.getTipoInteres(), 10, 2, false)), ctx));


		lstRegElementos.add(crearRegistroElemento("CDTPREF", "INDICE REFERENCIA", 
				UtilidadesEnotario.comprobarDatoNull(UtilidadesEnotario.rellenarCerosDelante(dg.getIndiceReferencia().toString(), 4)), ctx));


		lstRegElementos.add(crearRegistroElemento("TEXTREF", "LITERAL IND. REFERENCIA", vo.getLiteralTipoReferencia(), ctx));

		lstRegElementos.add(crearRegistroElemento("TPDIFER", "DIFERENCIAL", 
				UtilidadesEnotario.comprobarDatoNull(dg.getDiferencial()).toString(),
				ctx));


		lstRegElementos.add(crearRegistroElemento("PMCDREDO", "CODIGO REDONDEO", 
				UtilidadesEnotario.comprobarDatoNull(dg.getCodigoDeRedondeo()), ctx));


		lstRegElementos.add(crearRegistroElemento("TEXTREDO", "LITERAL COD.REDONDEO", vo.getLiteralRedondeo(), ctx));

		lstRegElementos.add(crearRegistroElemento("POTPINMR", "INTERES DEMORA", 
				UtilidadesEnotario.comprobarDatoNull(dg.getInteresDemora()).toString(), ctx));

		lstRegElementos.add(crearRegistroElemento("TAE", "TAE", 
				UtilidadesEnotario.comprobarDatoNull(UtilidadesEnotario.bigDecimalToString(dg.getTae(), 10, 2, false)), ctx));


		lstRegElementos.add(crearRegistroElemento("CDTPAMOR", "COD. TIPO AMORTIZACION", 
				UtilidadesEnotario.comprobarDatoNull(dg.getCodigoAmortizacion()).toString(), ctx));


		lstRegElementos.add(crearRegistroElemento("TPAMOR", "LIT. TIPO AMORTIZACION", vo.getLiteralTipoAmortizacion(), ctx));

		ctx.put(CTE_CTX_MATRIZ_DE_ELEMENTOS10, lstRegElementos
				.toArray(new IRegistro[lstRegElementos.size()]));
	}



	/**
	 * Método que concatena un 'M' al principio al valor de plazo.
	 * 
	 * @param plazo
	 * @return plazo del prestamo con una 'M' delante.
	 */
	public static String formateaPlazo(String plazo)
	{
		return CTE_STR_M + plazo;
	}

	/**
	 * Método que formatea un dato de tipo decimal de manera que: 
	 * 
	 * - Si la parte entera tiene solo una cifra, entonces modifica la parte 
	 * decimal para que no sobrepase la longitud 3. 
	 * - Si la parte entera tiene más de una cifra,
	 * entonces modifica la parte decimal para que no sobrepase la ongitud 2.
	 * 
	 * @param interes
	 * @return BigDecimal que no sobrepasa la longitud 4.
	 */
	public static BigDecimal formateaBid(BigDecimal bid)
	{// Falta meter redondeo!!!
		BigDecimal bidFormateado = BigDecimal.ZERO;
		if (bid.compareTo(BigDecimal.TEN) < 0)
		{
			bidFormateado = bid.setScale(3);
		}
		else
		{
			bidFormateado = bid.setScale(2);
		}
		return bidFormateado;
	}

	/**
	 * Modifica la parte decimal del valor del diferencial para que no sobrepase
	 * la longitud 3.
	 * 
	 * @param diferencial
	 * @return diferencial formateado.
	 */
	public static BigDecimal formateaDiferencial(BigDecimal diferencial)
	{// Falta meter redondeo!!!
		return diferencial.setScale(3);
	}


	/**
	 * Devuelve el código de operación en función del estado del prestamo,
	 * necesario para imprimir en el contexto de la NOOP5.
	 * 
	 * @param estadoPrestamo
	 * @return codigo de operacion correspondiente.
	 */
	public static String getCodigoOperacionNOOP5(String estadoPrestamo)
	{
		String codigoOperacion = CTE_STR_VACIO;

		if (CTE_STR_02.equals(estadoPrestamo))
		{
			codigoOperacion = CTE_STR_06;
		}
		else
		{
			codigoOperacion = CTE_STR_10;
		}

		return codigoOperacion;
	}

}
