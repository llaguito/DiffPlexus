package es.caixagalicia.anpm.prestamos.enotario.utilidades;

import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections.map.HashedMap;
import org.apache.commons.lang.StringUtils;
import es.caixagalicia.anpm.prestamos.comun.constantes.CodigosError;
import es.caixagalicia.anpm.prestamos.enotario.persistencia.datosgenerales.DatosgeneralesC;
import es.caixagalicia.anpm.prestamos.enotario.servicios.aplicacion.GestionDatosGeneralesEnotario;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionPreformalizacionFormalizacionComunes;
import es.caixagalicia.anpm.prestamos.tramitacion.utilidades.Constantes;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.fechas.DateHelper;
import es.caixagalicia.ifrt.mail.Mail;
import es.caixagalicia.ifrt.mail.sender.IMailSender;
import es.caixagalicia.ifrt.mail.sender.MailSenderImpl;
import es.caixagalicia.ifrt.util.Helper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

public class UtilidadesEnotario {

    private static final Integer ID_CO_COMPROBACION_CUENTAS = Integer.valueOf(292);

    private static final Integer ID_CUENTA_ANPM = Integer.valueOf(507);

    private static final String CTE_CAMPO_ENTRADA_NUC = "NUC";

    private static final String CTE_CAMPO_ENTRADA_IBAN_CARGO_EUROS = "IBAN_C_EUR";

    private static final String CTE_CAMPO_ENTRADA_IBAN_ABONO_EUROS = "IBAN_A_EUR";

    /**
     * Constructor por defecto.
     */
    private UtilidadesEnotario() {
    }

    /**
     * Metodo que comprueba que una cadena no sea una sucesion de espacios en blanco.
     * @param str cadena de entrada
     * @return <code>boolean</code>
     */
    public static boolean isEmptyOrNullString(final String str) {
        boolean ret = false;
        if (str == null) {
            ret = true;
        } else {
            boolean success = true;
            char[] chars = str.toCharArray();
            final int length = chars.length;
            for (int cont = 0; cont < length; cont++) {
                if (chars[cont] != ' ') {
                    success = false;
                    break;
                }
            }
            ret = success;
        }
        return ret;
    }

    /**
     * Comprueba las cuentas que van a intervenir en una operacion de preformalizacion
     * @param nuc
     * @param ibanCargoEuros
     * @param ibanAbonoEuros
     * @param ibanCargoAbonoDivisa
     */
    public static void comprobarCuentas(BigDecimal nuc, String ibanCargoEuros, String ibanAbonoEuros) {
        IDatosEntradaTx datosEntradaComprobacionCuentas = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), ID_CUENTA_ANPM, ID_CO_COMPROBACION_CUENTAS);
        datosEntradaComprobacionCuentas.addCampo(CTE_CAMPO_ENTRADA_NUC, nuc);
        datosEntradaComprobacionCuentas.addCampo(CTE_CAMPO_ENTRADA_IBAN_CARGO_EUROS, ibanCargoEuros);
        datosEntradaComprobacionCuentas.addCampo(CTE_CAMPO_ENTRADA_IBAN_ABONO_EUROS, ibanAbonoEuros);
        ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaComprobacionCuentas);
    }

    /**
     * Rellena con ceros la parte entera y la parte decimal
     * @param pOriginal
     * @param tamañoEntero
     * @param tamañoDecimal
     * @return
     */
    public static String rellenarCerosBigDecimal(String pOriginal, int tamanoEntero, int tamanoDecimal) {
        final int posicionPunto = pOriginal.indexOf(".");
        String parteEntera = "";
        String parteDecimal = "";
        String salida = "";
        if (posicionPunto == -1) {
            String sFinalEntero = rellenarCerosDelante(pOriginal, tamanoEntero);
            String sFinalDecimal = rellenarCerosDetras(parteDecimal, tamanoDecimal);
            salida = String.format("%s.%s", sFinalEntero, sFinalDecimal);
        } else {
            parteEntera = pOriginal.substring(0, posicionPunto);
            parteDecimal = pOriginal.substring(posicionPunto + 1);
            String sFinalEntero = rellenarCerosDelante(parteEntera, tamanoEntero);
            String sFinalDecimal = rellenarCerosDetras(parteDecimal, tamanoDecimal);
            salida = String.format("%s.%s", sFinalEntero, sFinalDecimal);
        }
        return salida;
    }

    /**
     * @param pOriginal
     * @param pTam
     * @return
     */
    public static String rellenarCerosDelante(String pOriginal, int pTam) {
        int i = 0;
        String sFinal = "";
        for (i = pOriginal.length(); i < pTam; i++) {
            sFinal = sFinal + "0";
        }
        sFinal = sFinal + pOriginal;
        return sFinal;
    }

    /**
     * @param pOriginal
     * @param pTam
     * @return
     */
    public static String rellenarCerosDetras(String pOriginal, int pTam) {
        int i = 0;
        String sFinal = "";
        for (i = pOriginal.length(); i < pTam; i++) {
            sFinal = sFinal + "0";
        }
        pOriginal += sFinal;
        return pOriginal;
    }

    /**
     * Busca un contexto determinado dentro de una lista de contextos
     * resultantes de la invocacion de una transacción.
     * @param lCtx, lista de contextos de salida.
     * @param nombreCtx, nombre del contexto buscado.
     * @return IContexto, contexto buscado si existe; null en caso contrario.
     */
    public static final IContexto getContexto(IContexto[] lCtx, String nombreCtx) {
        IContexto resultado = null;
        for (IContexto ctx : lCtx) {
            if (ctx.getNombre().equalsIgnoreCase(nombreCtx)) {
                resultado = ctx;
                break;
            }
        }
        return resultado;
    }

    /**
     * Comprueba si el objeto es nulo o vacío.
     * <br/>
     * En el caso de las cadenas de caracteres {@link String} mira si hay algun caracter no blanco.
     * <br/>
     * En el caso de las fechas {@link Date} se compara con la fecha mas baja en Java.
     * <br/>
     * En el caso de las colecciones, {@link Collection} {@link Set} {@link Map},
     * mira si esta no tiene elementos.
     * <br/>
     * En el caso de los datos arquitectura se resuelve su valor y se comprueba si esta vacio
     *
     * @param obj - Objeto a comprobar
     * @return Cierto si el objeto es nulo o vacío
     */
    public static boolean isBlankOrNull(final Object obj) {
        boolean ret = false;
        if (obj == null) {
            ret = true;
        } else if (obj instanceof String) {
            ret = (obj == null) || "".equals(((String) obj).trim());
        } else if (obj instanceof Boolean) {
            ret = false;
        } else if (obj instanceof Character) {
            ret = Character.isWhitespace(((Character) obj).charValue());
        } else if (obj instanceof Number) {
            ret = false;
        } else if (obj instanceof Date) {
            final Date dLow = DateUtils.dateLowest();
            ret = dLow.after((Date) obj) || dLow.equals(obj);
        } else {
            ret = 0 == length(obj);
        }
        return ret;
    }

    /**
     * Averigual el numero de elementos de una coleccion o el numero de caracteres
     * de una cadena de texto (si el objeto es un {@link String} o un {@link StringBuffer}
     *
     * @param obj - objeto a comprobar su longitud
     * @return Longitud del objecto
     * @throws IllegalArgumentException  - si el objeto no es compatible
     */
    @SuppressWarnings("rawtypes")
    public static int length(final Object obj) {
        int l;
        if (obj == null) {
            l = 0;
        } else if (obj instanceof String) {
            l = ((String) obj).length();
        } else if (obj instanceof StringBuffer) {
            l = ((StringBuffer) obj).length();
        } else if (obj instanceof Collection) {
            l = ((Collection) obj).size();
        } else if (obj instanceof Map) {
            l = ((Map) obj).size();
        } else if (obj instanceof Set) {
            l = ((Set) obj).size();
        } else {
            int count = 0;
            if (obj instanceof Iterator) {
                final Iterator it = (Iterator) obj;
                boolean bHayMas = it.hasNext();
                while (bHayMas) {
                    it.next();
                    bHayMas = it.hasNext();
                    count++;
                }
                l = count;
            } else if (obj instanceof Enumeration) {
                Enumeration en = (Enumeration) obj;
                boolean bHayMas = en.hasMoreElements();
                while (bHayMas) {
                    en.nextElement();
                    bHayMas = en.hasMoreElements();
                    count++;
                }
                l = count;
            } else {
                try {
                    l = Array.getLength(obj);
                } catch (IllegalArgumentException e) {
                    throw new IllegalArgumentException("Inconsistent Object Type: " + obj.getClass());
                }
            }
        }
        return l;
    }

    /**
     * @param flotante Valor a formatear
     * @param parteEntera Número de dígitos enteros que tendrá el valor formateado
     * @param parteDecimal Número de dígitos decimales que tendrá el valor formateado
     * @param bConPorcentajeFinal Si true se añade el símbolo porcentaje al final
     * @return Flotante formateado con parte entera
     */
    public static String bigDecimalToString(BigDecimal flotante, int iParteEntera, int iParteDecimal, boolean bConPorcentajeFinal) {
        final NumberFormat formatter = NumberFormat.getInstance(Locale.getDefault());
        formatter.setMinimumFractionDigits(iParteDecimal);
        formatter.setMaximumIntegerDigits(iParteEntera);
        String result = formatter.format(flotante);
        if (bConPorcentajeFinal) {
            result += Constantes.SIGNO_PORCENTAJE;
        }
        return result;
    }

    /**
     * Convierte un valor String en un BigDecimal
     * @param formattedString Cadena a formatear
     * @param locale Configuracion regional
     */
    public static BigDecimal stringToBigDecimal(final String formattedString, final Locale locale) {
        final DecimalFormatSymbols symbols;
        final char groupSeparatorChar;
        final String groupSeparator;
        final char decimalSeparatorChar;
        final String decimalSeparator;
        String fixedString;
        final BigDecimal number;
        symbols = new DecimalFormatSymbols(locale);
        groupSeparatorChar = symbols.getGroupingSeparator();
        decimalSeparatorChar = symbols.getDecimalSeparator();
        if (groupSeparatorChar == '.') {
            groupSeparator = "\\" + groupSeparatorChar;
        } else {
            groupSeparator = Character.toString(groupSeparatorChar);
        }
        if (decimalSeparatorChar == '.') {
            decimalSeparator = "\\" + decimalSeparatorChar;
        } else {
            decimalSeparator = Character.toString(decimalSeparatorChar);
        }
        // Eliminamos los caracteres no numericos
        fixedString = formattedString.replaceAll("[^\\d.,]", "");
        fixedString = fixedString.trim().replaceAll(groupSeparator, "");
        fixedString = fixedString.replaceAll(decimalSeparator, ".");
        number = new BigDecimal(fixedString);
        return (number);
    }

    /**
     * 	Metodo que envia un correo
     *
     * @param autor
     * @param destinatarios
     * @param asunto
     * @param texto
     */
    public static void enviarCorreo(String autor, List<String> destinatarios, String asunto, String texto) {
        // Crear una instancia
        IMailSender mailSender = MailSenderImpl.getInstance();
        Mail mail = new Mail();
        // Se añade el destinatario
        String[] to = new String[destinatarios.size()];
        // Añadir un destinatario o varios
        to = destinatarios.toArray(new String[destinatarios.size()]);
        // Añadir el destinatario al email
        mail.setTo(to);
        // Se añade el emisor
        String from = new String();
        // Se inicializa el emisor
        from = autor;
        // Añadir el emisor al email
        mail.setFrom(from);
        // Asunto de la alerta
        String subject = new String();
        // Informar el asunto
        subject = asunto;
        // Añadir al mail el asunto
        mail.setSubject(subject);
        // Poner los datos de la plantilla
        Map model = new HashedMap();
        // model.put("nuc",0);
        // Añadir al mail el modelo con los datos del mapa
        mail.getTemplate().setData(model);
        // Añadir la plantilla que se utilizará
        mail.getTemplate().setIdApp(IConstantesEnotario.CTE_CORREO_APLICACION);
        // Añadir el identificador de la plantilla
        mail.getTemplate().setCodPlantilla(IConstantesEnotario.CTE_CORREO_PLANTILLA);
        // Se envia el mail
        mailSender.deliverMail(mail);
    }

    /**
     * Según estén informados o no, el método trocea el string contratoPrestamo o
     * el string contratoIban para obtener diversos datos del préstamo,
     * Concretamente, el string contratoPrestamo, de tamaño 20, se compone de:
     *  - Código entidad (4).
     *  - Código oficina (4).
     *  - Dígitos de control (2).
     *  - Cuenta contable (3).
     *  - Número solicitud (6).
     *  - Dígito solicitud (1).
     *
     *  El string contratoIban es muy parecido, aunque tiene tamaño 24:
     *  - Código país ("ES").
     *  - Dígitos de control de IBAN (2).
     *  - Contrato préstamo (20).
     *
     * @param distrEnotarioEntradaVO
     * @return distrEnotarioEntradaVO En este Value Object se encuentran los datos obtenidos.
     */
    public static DistribuidorEnotarioEntradaVO obtenerDatosPrestamo(DistribuidorEnotarioEntradaVO distrEnotarioEntradaVO) {
        String contratoPrestamo = distrEnotarioEntradaVO.getContratoPrestamo();
        String contratoIban = distrEnotarioEntradaVO.getContratoIban();
        BigDecimal codigoEntidad = null;
        BigDecimal codigoOficina = null;
        BigDecimal digitosControl = null;
        BigDecimal cuentaContable = null;
        BigDecimal numeroSolicitud = null;
        BigDecimal digitoSolicitud = null;
        if ((!StringUtils.isBlank(contratoPrestamo)) && (IConstantesEnotario.CTE_INT_20 == contratoPrestamo.length())) {
            codigoEntidad = new BigDecimal(contratoPrestamo.substring(0, 4));
            codigoOficina = new BigDecimal(contratoPrestamo.substring(4, 8));
            digitosControl = new BigDecimal(contratoPrestamo.substring(8, 10));
            cuentaContable = new BigDecimal(contratoPrestamo.substring(10, 13));
            numeroSolicitud = new BigDecimal(contratoPrestamo.substring(13, 19));
            digitoSolicitud = new BigDecimal(contratoPrestamo.substring(19, 20));
        } else if ((!StringUtils.isBlank(contratoIban)) && (IConstantesEnotario.CTE_INT_24 == contratoIban.length())) {
            codigoEntidad = new BigDecimal(contratoIban.substring(4, 8));
            codigoOficina = new BigDecimal(contratoIban.substring(8, 12));
            digitosControl = new BigDecimal(contratoIban.substring(12, 14));
            cuentaContable = new BigDecimal(contratoIban.substring(14, 17));
            numeroSolicitud = new BigDecimal(contratoIban.substring(17, 23));
            digitoSolicitud = new BigDecimal(contratoIban.substring(23, 24));
        }
        distrEnotarioEntradaVO.setCodigoEntidad(codigoEntidad);
        distrEnotarioEntradaVO.setCodigoOficina(codigoOficina);
        distrEnotarioEntradaVO.setDigitosControl(digitosControl);
        distrEnotarioEntradaVO.setCuentaContable(cuentaContable);
        distrEnotarioEntradaVO.setNumeroSolicitud(numeroSolicitud);
        distrEnotarioEntradaVO.setDigitoSolicitud(digitoSolicitud);
        return distrEnotarioEntradaVO;
    }

    public static String obtenerDigitosControlCCC(DatosSolicitudC datosSolicitud) {
        String digitosControl = null;
        IContexto contextoCalculoDC = null;
        BigDecimal digitoControlPrimerBloque = null;
        BigDecimal digitoControlSegundoBloque = null;
        String entidadStr = null;
        BigDecimal entidadBid = null;
        IContextoEjecucion contextoEjecucion = ServicioNegocio.getContexto();
        if (null != datosSolicitud) {
            entidadStr = datosSolicitud.getEntidad();
            entidadBid = new BigDecimal(entidadStr);
            /*Obtenemos los dígitos de control del préstamo llamando a CGAL_308*/
            IDatosEntradaTx datosEntradaCalcularDC = ServicioNegocio.getPrograma(contextoEjecucion, IConstantesEnotario.CTE_CC_CALCULAR_DC_CCC, IConstantesEnotario.CTE_CO_CALCULAR_DC_CCC);
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_COD_APLICACION, IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_VAL_COD_APLICACION);
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_COD_ENTIDAD, entidadBid);
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_NUM_OFICINA, datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud());
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_CUENTA_CONTABLE, IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_VAL_CUENTA_CONTABLE);
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_NUM_SOLICITUD, datosSolicitud.getDatosSolicitudKey().getNumSolicitud());
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_DIGITO_SOLICITUD, datosSolicitud.getDigitoSolicitud());
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_DIVISION, datosSolicitud.getDivision());
            datosEntradaCalcularDC.addCampo(IConstantesEnotario.CAMPO_ENTRADA_CALCULAR_DC_POS_SUBDIVISION, datosSolicitud.getSubDivision());
            IContexto[] resultadoCalculoDC = ServicioNegocio.invocarServicio(contextoEjecucion, datosEntradaCalcularDC);
            if (IConstantesEnotario.CTE_CERO_INT < resultadoCalculoDC.length) {
                contextoCalculoDC = resultadoCalculoDC[0];
                digitoControlPrimerBloque = contextoCalculoDC.getBigDecimal("CGS400112");
                digitoControlSegundoBloque = contextoCalculoDC.getBigDecimal("CGS400113");
                if ((null != digitoControlPrimerBloque) && (null != digitoControlSegundoBloque)) {
                    digitosControl = digitoControlPrimerBloque.toString().concat(digitoControlSegundoBloque.toString());
                }
            }
        }
        return digitosControl;
    }

    /**
     * Método que genera el contrato del prestamo en formato CCC a partir de
     * la entidad, oficina, numero solicitud y dígito de solicitud.
     * Los dígitos de control se calculan invocando el servicio de negocio
     * CGAL_308 y la cuenta contable es constante: 500.
     *
     * @param datosSolicitud
     * @return clave del prestamo formada por: Entidad Oficina Digitos de
     *         control Cuenta contable Numero cuenta Digito.
     *         Si ha habido algun fallo devuelve la cadena vacía.
     */
    public static String getContratoPrestamo(DatosSolicitudC datosSolicitud) {
        BigDecimal oficinaBid = datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud();
        String oficinaStr = oficinaBid.toString();
        String digitosControl = StringUtils.EMPTY;
        String contratoPrestamo = StringUtils.EMPTY;
        StringBuilder stb = new StringBuilder();
        digitosControl = obtenerDigitosControlCCC(datosSolicitud);
        if (!Helper.isNullOrEmpty(digitosControl)) {
            stb.append(datosSolicitud.getEntidad());
            stb.append(UtilidadesEnotario.rellenarCerosDelante(oficinaStr, 4));
            stb.append(digitosControl);
            stb.append(IConstantesEnotario.CTE_CUENTA_CONTABLE_PRESTAMOS);
            // stb.append(datosGenerales.getCuentaContableAbono());
            stb.append(UtilidadesEnotario.rellenarCerosDelante(datosSolicitud.getDatosSolicitudKey().getNumSolicitud().toString(), 6));
            stb.append(datosSolicitud.getDigitoSolicitud());
            contratoPrestamo = stb.toString();
        }
        return contratoPrestamo;
    }

    /**
     * Método que genera el contrato del prestamo en formato IBAN a partir de
     * la entidad, oficina, numero solicitud y dígito de solicitud.
     * Para ello llama a getContratoPrestamo() para obtener la CCC a partir de
     * la entidad, oficina, numero solicitud y dígito de solicitud.
     *
     * Posteriormente, invoca al servicio de negocio CGAL_332 para obtener el
     * contrato de préstamo en formato IBAN a partir del contrato préstamo
     * en formato CCC.
     *
     * @param datosSolicitud
     * @return clave del prestamo formada por: Entidad Oficina Digitos de
     *         control Cuenta contable Numero cuenta Digito.
     *         Si ha habido algun fallo devuelve la cadena vacía.
     */
    public static String getContratoIban(DatosSolicitudC datosSolicitud) {
        String contratoPrestamoCCC = null;
        String contratoPrestamoIban = null;
        IContextoEjecucion contextoEjecucion = ServicioNegocio.getContexto();
        IContexto[] contextosSalidaCalculoDcIban = null;
        IContexto contextoSalidaCalculoDcIban = null;
        IDatosEntradaTx datosEntradaCalculoDcIban = null;
        String resultadoCCC = null;
        String resultadoPapel = null;
        String resultadoError = null;
        if (null != datosSolicitud) {
            contratoPrestamoCCC = getContratoPrestamo(datosSolicitud);
            datosEntradaCalculoDcIban = ServicioNegocio.getPrograma(contextoEjecucion, IConstantesEnotario.CTE_CC_CALCULAR_DC_IBAN, IConstantesEnotario.CTE_CO_CALCULAR_DC_IBAN);
            datosEntradaCalculoDcIban.addCampo(2, contratoPrestamoCCC);
            datosEntradaCalculoDcIban.addCampo(3, IConstantesEnotario.CTE_CODIGO_PAIS_ES);
            datosEntradaCalculoDcIban.addCampo(4, IConstantesEnotario.CTE_N);
            contextosSalidaCalculoDcIban = ServicioNegocio.invocarServicio(contextoEjecucion, datosEntradaCalculoDcIban);
            if ((null != contextosSalidaCalculoDcIban) && (0 < contextosSalidaCalculoDcIban.length)) {
                contextoSalidaCalculoDcIban = contextosSalidaCalculoDcIban[0];
                resultadoCCC = contextoSalidaCalculoDcIban.getString("CG073C0030");
                resultadoPapel = contextoSalidaCalculoDcIban.getString("CG073C0050");
                resultadoError = contextoSalidaCalculoDcIban.getString("CG073C0060");
                if ((isBlankOrNull(resultadoError)) && (resultadoCCC.equals(contratoPrestamoCCC)) && (IConstantesEnotario.CTE_N.equals(resultadoPapel))) {
                    contratoPrestamoIban = contextoSalidaCalculoDcIban.getString("CG073C0010");
                }
            }
        }
        return contratoPrestamoIban;
    }

    /**
     * Método que llama al servicio ITAL_600 de consulta de divisas.
     *
     * @param codDivisa
     *        codigo de la divisa.
     * @param ctx
     *        contexto de ejecución.
     * @return nombre de la divisa correspondiente al código de divisa pasado
     *         como parámetro.
     */
    public static String obtenerLiteralDivisa(String codDivisa) {
        String nombreDivisa = null;
        IContextoEjecucion contextoEjecucion = ServicioNegocio.getContexto();
        if (codDivisa != null) {
            IDatosEntradaTx datosEntradaSrvParam = ServicioNegocio.getPrograma(contextoEjecucion, IConstantesEnotario.CTE_CC_OBTENER_DIVISA, IConstantesEnotario.CTE_CO_OBTENER_DIVISA);
            datosEntradaSrvParam.addCampo(IConstantesEnotario.CTE_STR_ITAL_600_CODIGO_CONTROL, IConstantesEnotario.CTE_D);
            datosEntradaSrvParam.addCampo(IConstantesEnotario.CTE_STR_ITAL_600_DIVISA, codDivisa);
            IContexto[] salidaSrv = ServicioNegocio.invocarServicio(contextoEjecucion, datosEntradaSrvParam);
            if (0 < salidaSrv.length) {
                nombreDivisa = salidaSrv[0].getString(IConstantesEnotario.CTE_STR_ITAL_600_CTX_NOMBRE_DIVISA);
                if (null != nombreDivisa) {
                    nombreDivisa = nombreDivisa.trim();
                }
            }
        }
        return nombreDivisa;
    }

    /**
     * Devuelve la descripcion del estado de un préstamo a partir del código de estado.
     *
     * @param estadoDatosGener Código del estado del préstamo.
     * @return descrEstado La descripción del estado del préstamo.
     */
    public static String descripcionEstado(String estadoDatosGener) {
        String descrEstado = new String();
        if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_ENVIADO.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_ENVIADO;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_CONFIRMADO.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_CONFIRMADO;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_POLIZA_ENVIADA.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_POLIZA_ENVIADA;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_ANULADO.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_ANULADO;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_FORMALIZADO_PARCIAL.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_FORMALIZADO_PARCIAL;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_FORMALIZADO.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_FORMALIZADO;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_SUSPENDIDO.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_SUSPENDIDO;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_RECHAZADO.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_RECHAZADO;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_AVISO_MODIF.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_AVISO_MODIF;
        } else if (IConstantesEnotario.CTE_DATOS_GEN_ESTADO_SOLIC_CANCEL.equals(estadoDatosGener)) {
            descrEstado = IConstantesEnotario.CTE_LIT_ESTADO_SOLIC_CANCEL;
        } else {
            descrEstado = IConstantesEnotario.CTE_LIT_SIN_ESTADO.concat(estadoDatosGener);
        }
        return descrEstado;
    }

    /**
     * Método equivalente al procedimiento PL/I PREV_ERROR.
     * Si se invoca este método quiere decir que hubo un fallo, por lo tanto
     * se rellena el campo textoError (PMREP130) y se graba la operación
     * en la tabla de log (AN39TB01/ComunicacionesenotarioC)
     * En este método enviaremos el correo que enviaba CONTROL_ERROR.
     * Probablemente haya que quitar el parámetro sqlCode.
     * @param distrEnotarioEntradaVO
     * @param distrEnotarioSalidaVO
     * @param descError Revisar este parámetro.
     * @param sqlCode Parámetro provisional.
     * @param msjNot Revisar este parámetro.
     * @param datosGeneralesC
     *
     * @return distrEnotarioSalidaVO Value Object que contiene los campos de salida
     * del servicio de negocio.
     */
    public static DistribuidorEnotarioSalidaVO prevError(DistribuidorEnotarioEntradaVO distrEnotarioEntradaVO, DistribuidorEnotarioSalidaVO distrEnotarioSalidaVO, String descError, String msjNot, DatosgeneralesC datosGeneralesC) {
        String tipoOperacion = distrEnotarioEntradaVO.getTipoOperacion();
        BigDecimal codigoOficina = distrEnotarioEntradaVO.getCodigoOficina();
        BigDecimal numeroSolicitud = distrEnotarioEntradaVO.getNumeroSolicitud();
        distrEnotarioSalidaVO.setCodigoRetorno(IConstantesEnotario.CTE_CODIGO_RETORNO_FALLO_1);
        if (null != msjNot) {
            msjNot = msjNot.trim();
        } else {
            msjNot = StringUtils.EMPTY;
        }
        if (IConstantesEnotario.CTE_CERO_STR.equals(msjNot)) {
            msjNot = descError;
        } else if (IConstantesEnotario.CTE_UNO_STR.equals(msjNot)) {
            msjNot = new Mensaje(ServicioNegocio.getContexto(), SOLICITUD_PERMITE_OPERACION_LLAME_981_179634_950453058).toString();
        } else if (IConstantesEnotario.CTE_DOS_STR.equals(msjNot)) {
            msjNot = new Mensaje(ServicioNegocio.getContexto(), ERROR_EMITIR_CONTRATO_LLAME_981_179634_1941208320).toString();
        } else if (IConstantesEnotario.CTE_TRES_STR.equals(msjNot)) {
            msjNot = new Mensaje(ServicioNegocio.getContexto(), PRODUCIDO_ERROR_FORMALIZAR_LLAME_981_179634_316076626).toString();
        } else {
            msjNot = new Mensaje(ServicioNegocio.getContexto(), PRODUJO_ERROR_INTENTELO_DESPUES_O_LLAME_981_17963_92773541).toString();
        }
        distrEnotarioSalidaVO.setTextoError(msjNot);
        if (IConstantesEnotario.CTE_TIPO_OPERACION_REQUEST.equals(tipoOperacion)) {
            // PMNOT030
            distrEnotarioSalidaVO.setNodoReEmisor(IConstantesEnotario.CTE_NODO_HOST);
            // PMNOT050
            distrEnotarioSalidaVO.setTipoOperacion(IConstantesEnotario.CTE_TIPO_OPERACION_REPLY);
        // CALL ENVIO_COLA_MQ;
        }
        // PMREP130
        distrEnotarioSalidaVO.setTextoError(descError);
        if ((null != codigoOficina) && (null != numeroSolicitud) && (null != datosGeneralesC)) {
        // geme.grabarLog(distrEnotarioEntradaVO, datosGeneralesC);
        } else if (null == codigoOficina) {
            // PMREP130
            distrEnotarioSalidaVO.setTextoError(new Mensaje(ServicioNegocio.getContexto(), C_DIGO_OFICINA_EXISTE_INSERT_TABLA_LOG_AN39TB01_1203408472).toString());
        } else if (null == numeroSolicitud) {
            // PMREP130
            distrEnotarioSalidaVO.setTextoError(new Mensaje(ServicioNegocio.getContexto(), N_MERO_SOLICITUD_EXISTE_INSERT_TABLA_LOG_AN39TB_149035371).toString());
        } else if (null == datosGeneralesC) {
            // PMREP130
            distrEnotarioSalidaVO.setTextoError(new Mensaje(ServicioNegocio.getContexto(), OBJETO_DATOSGENERALESC_EXISTE_INSERT_TABLA_LOG_1812906911).toString());
        }
        return distrEnotarioSalidaVO;
    }

    /**
     * Método equivalente al procedimiento ENVIAR_CORREO.
     * @param asunto Asunto del correo (en el asunto definitivo se le concatenará
     *   al inicio "E-NOTARIO.PRESTAMO: ")
     * @param texto Texto del correo.
     */
    public static void enviarCorreoError(String asunto, String texto) {
        List<String> listaDestinatarios = new ArrayList<String>(IConstantesEnotario.CTE_TAM_INICIAL_ARRAYS);
        String asuntoCompleto = new String("");
        String autor = new String("");
        listaDestinatarios = UtilidadesEnotario.obtenerListaValoresParametro(IConstantesEnotario.CTE_AGRUP_MAIL_ENOT, IConstantesEnotario.CTE_NOMBRE_DESTINATARIOS);
        asuntoCompleto = UtilidadesEnotario.obtenerValorParametroUnico(IConstantesEnotario.CTE_AGRUP_MAIL_ENOT, IConstantesEnotario.CTE_NOMBRE_ASUNTO);
        autor = UtilidadesEnotario.obtenerValorParametroUnico(IConstantesEnotario.CTE_AGRUP_MAIL_ENOT, IConstantesEnotario.CTE_NOMBRE_AUTOR);
        if (UtilidadesEnotario.isBlankOrNull(listaDestinatarios)) {
            ServicioNegocio.rollback(CodigosError.CTE_ERROR_NO_SE_ENCUENTRA_PARAMETRO, null, new String[] { IConstantesEnotario.CTE_AGRUP_MAIL_ENOT, IConstantesEnotario.CTE_NOMBRE_DESTINATARIOS }, null);
        } else if (StringUtils.isBlank(asuntoCompleto)) {
            ServicioNegocio.rollback(CodigosError.CTE_ERROR_NO_SE_ENCUENTRA_PARAMETRO, null, new String[] { IConstantesEnotario.CTE_AGRUP_MAIL_ENOT, IConstantesEnotario.CTE_NOMBRE_ASUNTO }, null);
        } else if (StringUtils.isBlank(autor)) {
            ServicioNegocio.rollback(CodigosError.CTE_ERROR_NO_SE_ENCUENTRA_PARAMETRO, null, new String[] { IConstantesEnotario.CTE_AGRUP_MAIL_ENOT, IConstantesEnotario.CTE_NOMBRE_AUTOR }, null);
        }
        asuntoCompleto = asuntoCompleto + ". " + asunto;
        UtilidadesEnotario.enviarCorreo(autor, listaDestinatarios, asunto, texto);
    }

    /**
     * @param contextoEjecucion Contexto de ejecución para poder invocar otro,
     *  servicio de negocio, en este caso el servicio con cuenta contable 502 y código de operación 273.
     * @param distrEnotarioEntradaVO
     * @param distrEnotarioSalidaVO
     * @param nuevoEstadoPrestamo
     *
     * @return distrEnotarioSalidaVO Value Object que contiene los campos de salida
     * del servicio de negocio.
     */
    public static DistribuidorEnotarioSalidaVO actualizarExpediente(IContextoEjecucion contextoEjecucion, DistribuidorEnotarioEntradaVO distrEnotarioEntradaVO, DistribuidorEnotarioSalidaVO distrEnotarioSalidaVO, String nuevoEstadoPrestamo) {
        /*
			actualizar exp
			cc 502
			co 273
			cc 502 (eexp_273) codigo proceso: 185
		NOTA IMPORTANTE: en el programa, el timestamp que se le envia a la función CG@MEPEX(EES02TIR)
		es el mismo que se creó en ACTUALIZAR_PM01TB01 [ gds.actualizarDatosSolicitud() ]
		pero en el servicio de negocio equivalente a la función CG@MEPEX (actualizarExpediente()) parece
		que no es necesario enviarle un timestamp.
		 * */
        BigDecimal nuc = distrEnotarioEntradaVO.getNucSolicitud();
        IDatosEntradaTx datosEntradaActualizarExpediente = ServicioNegocio.getPrograma(contextoEjecucion, // 502
        IConstantesEnotario.CTE_CC_ACTUALIZAR_EXPEDIENTE, // 273
        IConstantesEnotario.CTE_CO_ACTUALIZAR_EXPEDIENTE);
        datosEntradaActualizarExpediente.addCampo("NUC", nuc);
        datosEntradaActualizarExpediente.addCampo("CODIGO_PROCESO", IConstantesEnotario.CTE_SN_ACTUALIZAR_EXPEDIENTE_CODIGO_PROCESO);
        datosEntradaActualizarExpediente.addCampo("NUEVO_ESTADO", nuevoEstadoPrestamo);
        ServicioNegocio.invocarServicio(contextoEjecucion, datosEntradaActualizarExpediente);
        /*qué faigo con este array de contextos? Nada.
		Iván: "Aquí sucede exactamente lo mismo, de producirse un error ya lo intercepta
		 metrópolis y lo saca por pantalla. Por eso no se deben capturar excepciones."*/
        return distrEnotarioSalidaVO;
    }

    /**
     * Método para rellenar en el value object de salida con algunos atributos de entrada que
     * no necesitan cambios, en principio.
     * @param distrEnotarioEntradaVO
     * @param distrEnotarioSalidaVO
     */
    public static DistribuidorEnotarioSalidaVO obtenerCamposSalidaIguales(DistribuidorEnotarioEntradaVO distrEnotarioEntradaVO, DistribuidorEnotarioSalidaVO distrEnotarioSalidaVO) {
        String codigoAplicacion = distrEnotarioEntradaVO.getCodigoAplicacion();
        String codigoOperacionEnotario = distrEnotarioEntradaVO.getCodigoOperacionEnotario();
        String nodoOriginal = distrEnotarioEntradaVO.getNodoOriginal();
        String tipoOperacion = distrEnotarioEntradaVO.getTipoOperacion();
        String codigoPais = distrEnotarioEntradaVO.getCodigoPais();
        BigDecimal codigoEntidad = distrEnotarioEntradaVO.getCodigoEntidad();
        String tipoPrestamo = distrEnotarioEntradaVO.getTipoPrestamo();
        String contratoPrestamo = null;
        String contratoIban = distrEnotarioEntradaVO.getContratoIban();
        String codigoBic = distrEnotarioEntradaVO.getCodigoBic();
        String descripcion = distrEnotarioEntradaVO.getDescripcion();
        if (UtilidadesEnotario.isBlankOrNull(distrEnotarioEntradaVO.getContratoPrestamo())) {
            if ((!UtilidadesEnotario.isBlankOrNull(contratoIban)) && (IConstantesEnotario.CTE_INT_24 == contratoIban.length())) {
                contratoPrestamo = contratoIban.substring(4, 24);
            }
        } else {
            contratoPrestamo = distrEnotarioEntradaVO.getContratoPrestamo();
        }
        distrEnotarioSalidaVO.setContratoPrestamo(contratoPrestamo);
        distrEnotarioSalidaVO.setCodigoAplicacion(codigoAplicacion);
        distrEnotarioSalidaVO.setCodigoOperacionEnotario(codigoOperacionEnotario);
        distrEnotarioSalidaVO.setNodoOriginal(nodoOriginal);
        distrEnotarioSalidaVO.setTipoOperacion(tipoOperacion);
        distrEnotarioSalidaVO.setCodigoPais(codigoPais);
        if (null != codigoEntidad) {
            distrEnotarioSalidaVO.setCodigoEntidad(codigoEntidad.toString());
        }
        distrEnotarioSalidaVO.setTipoPrestamo(tipoPrestamo);
        /*
		if ((! StringUtils.isBlank(contratoIban)) && 
			(! StringUtils.isBlank(codigoBic)))
		{
			distrEnotarioSalidaVO.setContratoPrestamo(contratoIban.concat(codigoBic));
		}
		*/
        distrEnotarioSalidaVO.setContratoIban(contratoIban);
        distrEnotarioSalidaVO.setCodigoBic(codigoBic);
        distrEnotarioSalidaVO.setDescripcion(descripcion);
        return distrEnotarioSalidaVO;
    }

    /**
     * Método equivalente al procedimiento PL/I VALIDAR_CAMPOS_COMUNES
     * En él se hacen unas validaciones previas a nivel de operación, si no cumple
     * alguna de ellas se llama a prevError().
     * @param distrEnotarioEntradaVO
     * @param distrEnotarioSalidaVO
     * @param datosGeneralesC
     * @return distrEnotarioSalidaVO Value object para que prevError() pueda meter
     * en él los campos de salida necesarios, si hubiese algún error.
     */
    public static DistribuidorEnotarioSalidaVO validarCamposComunes(DistribuidorEnotarioEntradaVO distrEnotarioEntradaVO, DistribuidorEnotarioSalidaVO distrEnotarioSalidaVO, DatosgeneralesC datosGeneralesC) {
        // PMNOT010
        String codigoAplicacion = distrEnotarioEntradaVO.getCodigoAplicacion();
        // PMNOT020
        String codigoOperacionEnotario = distrEnotarioEntradaVO.getCodigoOperacionEnotario();
        // PMNOT030
        String nodoReEmisor = distrEnotarioEntradaVO.getNodoReEmisor();
        // PMNOT040
        String nodoOriginal = distrEnotarioEntradaVO.getNodoOriginal();
        // PMNOT050
        String tipoOperacion = distrEnotarioEntradaVO.getTipoOperacion();
        // PMNOT060
        String codigoPais = distrEnotarioEntradaVO.getCodigoPais();
        // PMNOT080
        String tipoPrestamo = distrEnotarioEntradaVO.getTipoPrestamo();
        String mensErr = StringUtils.EMPTY;
        // posible valor.
        if (!IConstantesEnotario.CTE_CODIGO_APLICACION.equals(codigoAplicacion)) {
            mensErr = IConstantesEnotario.CTE_LIT_CODIGO_APLICACION_NO_VALIDO.concat(codigoAplicacion);
        } else if (!IConstantesEnotario.CTE_CODIGO_PAIS.equals(codigoPais)) {
            mensErr = IConstantesEnotario.CTE_LIT_CODIGO_PAIS_INCORRECTO.concat(codigoPais);
        } else /*
		ELSE IF PMNOT070 ¬='2091' & PMNOT070 ¬= CGALDCWA_ENTIDAD                  
			& CGALDCWA_CODENTORNO_X = 'E'                                     
		THEN MENS_ERR = 'CODIGO DE ENTIDAD INCORRECTO:'||PMNOT070;    //PREGUNTAR A IVAN:
		
		"Esta validación de entorno y entidad no la vamos a realizar en Java."
*/
        if ((!IConstantesEnotario.CTE_01.equals(tipoPrestamo)) && (!IConstantesEnotario.CTE_02.equals(tipoPrestamo))) {
            mensErr = IConstantesEnotario.CTE_LIT_TIPO_PRESTAMO_NO_APLICABLE.concat(tipoPrestamo);
        } else if ((IConstantesEnotario.CTE_TIPO_OPERACION_REQUEST.equals(tipoOperacion)) && ((IConstantesEnotario.CTE_OP_E_NOTARIO_SOLICITUD_DOC.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_FIRMA.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_SUSPENSION.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_RECHAZO.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_FIRMA_PARCIAL.equals(codigoOperacionEnotario))) && (!IConstantesEnotario.CTE_DOS_STR.equals(nodoReEmisor))) {
            mensErr = IConstantesEnotario.CTE_LIT_NODO_RE_EMISOR_NO_VALIDO.concat(nodoReEmisor);
        } else if ((IConstantesEnotario.CTE_TIPO_OPERACION_REQUEST.equals(tipoOperacion)) && ((IConstantesEnotario.CTE_OP_E_NOTARIO_SOLICITUD_DOC.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_FIRMA.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_SUSPENSION.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_RECHAZO.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_FIRMA_PARCIAL.equals(codigoOperacionEnotario))) && (!IConstantesEnotario.CTE_TRES_STR.equals(nodoOriginal))) {
            mensErr = IConstantesEnotario.CTE_LIT_NODO_ORIGINAL_NO_VALIDO.concat(nodoOriginal);
        } else /* NOTA EN PL/I: NUEVAS VALIDACIONES CON LOS NUEVOS CODIGOS DE OPERACION   */
        if ((IConstantesEnotario.CTE_TIPO_OPERACION_REPLY.equals(tipoOperacion)) && ((IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_CON_AVISO_04.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_CON_AVISO.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_ALTA_01.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_02.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_ALTA.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIFICACION.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_CANCEL.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_CANCEL_CON_AVISO.equals(codigoOperacionEnotario))) && (!IConstantesEnotario.CTE_DOS_STR.equals(nodoReEmisor))) {
            mensErr = IConstantesEnotario.CTE_LIT_NODO_RE_EMISOR_NO_VALIDO.concat(nodoReEmisor).concat(new Mensaje(ServicioNegocio.getContexto(), _SE_ESPERA_2_22830175).toString());
        } else if ((IConstantesEnotario.CTE_TIPO_OPERACION_REPLY.equals(tipoOperacion)) && ((IConstantesEnotario.CTE_OP_E_NOTARIO_ALTA_01.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_02.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_CON_AVISO_04.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_ALTA.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIFICACION.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_CON_AVISO.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_CANCEL.equals(codigoOperacionEnotario)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_CANCEL_CON_AVISO.equals(codigoOperacionEnotario))) && (!IConstantesEnotario.CTE_NODO_HOST.equals(nodoOriginal))) {
            mensErr = IConstantesEnotario.CTE_LIT_NODO_ORIGINAL_NO_VALIDO.concat(nodoReEmisor).concat(new Mensaje(ServicioNegocio.getContexto(), _SE_ESPERA_1_22830144).toString());
        }
        if (!StringUtils.EMPTY.equals(mensErr)) {
            distrEnotarioSalidaVO = prevError(distrEnotarioEntradaVO, distrEnotarioSalidaVO, // IConstantesEnotario.CTE_99_BID,
            mensErr, IConstantesEnotario.CTE_CERO_STR, datosGeneralesC);
        }
        return distrEnotarioSalidaVO;
    }

    /**
     * Valida por operacion por tipo de operacion.
     * @param distrEnotarioEntradaVO
     * @param distrEnotarioSalidaVO
     * @param datosGenerales
     * @param datosSolicitud
     * @param codigoOperacionDistribuidor
     * @return
     */
    public static DistribuidorEnotarioSalidaVO validacionesPrevias(DistribuidorEnotarioEntradaVO distrEnotarioEntradaVO, DistribuidorEnotarioSalidaVO distrEnotarioSalidaVO, DatosgeneralesC datosGenerales, DatosSolicitudC datosSolicitud, int codigoOperacionDistribuidor) {
        DateHelper dateHelper = DateHelper.getInstance();
        String codigoOperacionEnotario = distrEnotarioEntradaVO.getCodigoOperacionEnotario();
        String contratoPrestamo = distrEnotarioEntradaVO.getContratoPrestamo();
        String contratoIban = distrEnotarioEntradaVO.getContratoIban();
        String fechaFirma = distrEnotarioEntradaVO.getFechaFirma();
        String fechaFirmaFormat = null;
        if ((!isBlankOrNull(contratoPrestamo)) && (!contratoPrestamoEsValido(contratoPrestamo, datosSolicitud))) {
            // si el contratoPrestamo es nulo quiere decir que ese
            // campo de entrada no está informado, se continúa la ejecución.
            distrEnotarioSalidaVO = prevError(distrEnotarioEntradaVO, distrEnotarioSalidaVO, // IConstantesEnotario.CTE_SIETE_BID,
            IConstantesEnotario.CTE_LIT_CONTRATO_PRESTAMO_NO_VALIDO, IConstantesEnotario.CTE_CERO_STR, datosGenerales);
        }
        if ((Helper.isNullOrEmpty(distrEnotarioSalidaVO.getCodigoError())) && (Helper.isNullOrEmpty(distrEnotarioSalidaVO.getTextoError()))) {
            if ((!isBlankOrNull(contratoIban)) && (!contratoIbanEsValido(contratoIban, datosSolicitud))) {
                // si el contratoPrestamo es nulo quiere decir que ese
                // campo de entrada no está informado, se continúa la ejecución.
                distrEnotarioSalidaVO = prevError(distrEnotarioEntradaVO, distrEnotarioSalidaVO, // IConstantesEnotario.CTE_SIETE_BID,
                IConstantesEnotario.CTE_LIT_CONTRATO_PRESTAMO_NO_VALIDO, IConstantesEnotario.CTE_CERO_STR, datosGenerales);
            }
        }
        /*	
		Si están informados los campos codigoError o textoError en teoria ya no se deberia seguir
		ejecutando el servicio de negocio, así que, como no podemos hacer rollbacks,  
		se "encauza" el flujo de ejecución del servicio para que no entre a ejecutar la
		operación y devuelva el contexto sin hacer nada más.
		 */
        if ((Helper.isNullOrEmpty(distrEnotarioSalidaVO.getCodigoError())) && (Helper.isNullOrEmpty(distrEnotarioSalidaVO.getTextoError()))) {
            if (!IConstantesEnotario.CTE_OP_E_NOTARIO_CHEQUEO_SISTEMA.equals(codigoOperacionEnotario)) {
                /*
				 * validación de la operación
				 * */
                BigDecimal medioFormalizacion = datosSolicitud.getMedioFormalizacion();
                if ((!IConstantesEnotario.CTE_MEDIO_FORMALIZACION_E_NOTARIO.equals(medioFormalizacion)) && (IConstantesEnotario.CTE_OP_DISTR_SINCRONIZACION != codigoOperacionDistribuidor)) {
                    distrEnotarioSalidaVO = prevError(distrEnotarioEntradaVO, distrEnotarioSalidaVO, // IConstantesEnotario.CTE_SIETE_BID,
                    IConstantesEnotario.CTE_LIT_PRESTAMO_BAJA_E_NOTARIO, IConstantesEnotario.CTE_CERO_STR, datosGenerales);
                }
                /*	
				Si están informados los campos codigoError o textoError en teoria ya no se deberia seguir
				ejecutando el servicio de negocio, así que, como no podemos hacer rollbacks,  
				se "encauza" el flujo de ejecución del servicio para que no entre a ejecutar la
				operación y devuelva el contexto sin hacer nada más.
				 */
                if ((Helper.isNullOrEmpty(distrEnotarioSalidaVO.getCodigoError())) && (Helper.isNullOrEmpty(distrEnotarioSalidaVO.getTextoError()))) {
                    /*	
					Si están informados los campos codigoError o textoError en teoria ya no se deberia seguir
					ejecutando el servicio de negocio, así que, como no podemos hacer rollbacks,  
					se "encauza" el flujo de ejecución del servicio para que no entre a ejecutar la
					operación y devuelva el contexto sin hacer nada más.
					 */
                    if ((Helper.isNullOrEmpty(distrEnotarioSalidaVO.getCodigoError())) && (Helper.isNullOrEmpty(distrEnotarioSalidaVO.getTextoError()))) {
                        if ((IConstantesEnotario.CTE_OP_DISTR_SOLICITUD_DOC == codigoOperacionDistribuidor) || (IConstantesEnotario.CTE_OP_DISTR_NOTIF_FIRMA_FORMALIZ == codigoOperacionDistribuidor)) {
                            fechaFirmaFormat = dateHelper.formatearFecha(DateHelper.FORMATO_DDMMYYYY, DateHelper.FORMATO_DD_MM_YYYY_GUION, fechaFirma);
                            GestionPreformalizacionFormalizacionComunes gpfc = new GestionPreformalizacionFormalizacionComunes();
                            gpfc.comprobarVigenciaProducto(datosSolicitud, fechaFirmaFormat);
                        }
                    }
                }
            }
        }
        /*	
		Si están informados los campos codigoError o textoError en teoria ya no se deberia seguir
		ejecutando el servicio de negocio, así que, como no podemos hacer rollbacks,  
		se "encauza" el flujo de ejecución del servicio para que no entre a ejecutar la
		operación y devuelva el contexto sin hacer nada más.
		 */
        if ((Helper.isNullOrEmpty(distrEnotarioSalidaVO.getCodigoError())) && (Helper.isNullOrEmpty(distrEnotarioSalidaVO.getTextoError()))) {
            distrEnotarioSalidaVO = validarCamposComunes(distrEnotarioEntradaVO, distrEnotarioSalidaVO, datosGenerales);
        // CALL VALIDAR_CAMPOS_COMUNES;
        }
        return distrEnotarioSalidaVO;
    }

    /**
     * Comprueba si un contrato de préstamo con formato CCC es correcto a través de
     * sus dígitos de control.
     * Lo hace invocando el servicio de negocio con cuenta contable 100 (CGAL) y
     * código de operación 308.
     * @param contratoPrestamo
     * @param datosSolicitud de aquí obtiene el valor correcto de los dígitos de control.
     * @return esValido true si es correcto false en caso contrario.
     */
    public static boolean contratoPrestamoEsValido(String contratoPrestamoValidar, DatosSolicitudC datosSolicitud) {
        boolean esValido = false;
        String contratoPrestamoCorrecto = null;
        contratoPrestamoCorrecto = getContratoPrestamo(datosSolicitud);
        if ((!isBlankOrNull(contratoPrestamoValidar)) && (!isBlankOrNull(contratoPrestamoCorrecto))) {
            esValido = contratoPrestamoValidar.equals(contratoPrestamoCorrecto);
        }
        return esValido;
    }

    /**
     * Comprueba si un contrato de préstamo con formato IBAN es correcto a través de
     * sus dígitos de control.
     * Lo hace invocando el servicio de negocio con cuenta contable 100 (CGAL) y
     * código de operación 332.
     * @param contratoIban
     * @return esValido true si es correcto false en caso contrario.
     */
    public static boolean contratoIbanEsValido(String contratoIbanValidar, DatosSolicitudC datosSolicitud) {
        boolean esValido = false;
        String contratoIbanCorrecto = getContratoIban(datosSolicitud);
        if ((!isBlankOrNull(contratoIbanValidar)) && (!isBlankOrNull(contratoIbanCorrecto))) {
            esValido = contratoIbanValidar.equals(contratoIbanCorrecto);
        }
        return esValido;
    }

    /**
     * Si el dato es nulo devuelve la cadena vacía.
     * @param dato
     * @return
     */
    public static String comprobarDatoNull(String dato) {
        String resultado = StringUtils.EMPTY;
        if (null != dato) {
            resultado = dato.trim();
        }
        return resultado;
    }

    /**
     * Si el dato es nulo devuelve un 0.
     * @param dato
     * @return
     */
    public static BigDecimal comprobarDatoNull(BigDecimal dato) {
        BigDecimal resultado = BigDecimal.ZERO;
        if (null != dato) {
            resultado = dato;
        }
        return resultado;
    }

    /**
     * Método que trunca un String al tamaño indicado.
     * @param str
     * @param tamano
     * @return resultado string truncado.
     */
    public static String truncar(String str, int tamano) {
        String resultado = StringUtils.EMPTY;
        str = comprobarDatoNull(str);
        if (!StringUtils.isBlank(str)) {
            if (str.length() > tamano) {
                resultado = str.substring(0, tamano);
            } else {
                resultado = str;
            }
        }
        return resultado;
    }

    /**
     * Devuelve el código de operación de E-Notario en función de la operación introducida
     * como parámetro para la operación de alta/modificación de datos del servicio de
     * envío de mensajes a E-Notario.
     * La operación puede ser: alta, modificacion o modificacion + aviso.
     * El código de operación E-Notario, PMNOT020, se calcula a partir del
     * código de operación PM531E_070 de esta forma:
     *
     * codigoOperacion (PM531E_070) | codigoOperacionEnotario (PMNOT020)
     * -----------------------------------------------------------------
     *       '01'					|	'20'
     *       '02'					| 	'22'
     *       '04'					|	'24'
     *       otro caso				|	PM531E_070
     *
     * @param operacion
     * @return codigo de la operación corrrespondiente.
     */
    public static String obtenerCodigoOperacionEnotario(String operacion) {
        String codigoOperacion = StringUtils.EMPTY;
        if (IConstantesEnotario.CTE_OP_E_NOTARIO_ALTA_01.equals(operacion)) {
            // Alta
            codigoOperacion = IConstantesEnotario.CTE_OP_E_NOTARIO_ALTA;
        } else if (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_02.equals(operacion)) {
            // Modificación
            codigoOperacion = IConstantesEnotario.CTE_OP_E_NOTARIO_MODIFICACION;
        } else if (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_CON_AVISO_04.equals(operacion)) {
            // Modificación + aviso
            codigoOperacion = IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_CON_AVISO;
        } else {
            codigoOperacion = operacion;
        }
        return codigoOperacion;
    }

    public static String obtenerTlfEntidad(String codigoOficina) {
        String telefonoEntidad = null;
        IContexto[] resultadoObtenerTelefono = null;
        IContexto contextoObtenerTelefono = null;
        String prefijo = null;
        String numeroTlf = null;
        IContextoEjecucion contextoEjecucion = ServicioNegocio.getContexto();
        IDatosEntradaTx datosEntradaObtenerTelefono = ServicioNegocio.getPrograma(contextoEjecucion, IConstantesEnotario.CTE_CC_CONSULTA_TLF_ENTIDAD, IConstantesEnotario.CTE_CO_CONSULTA_TLF_ENTIDAD);
        datosEntradaObtenerTelefono.addCampo(IConstantesEnotario.CTE_CERO_INT, codigoOficina);
        resultadoObtenerTelefono = ServicioNegocio.invocarServicio(contextoEjecucion, datosEntradaObtenerTelefono);
        if ((null != resultadoObtenerTelefono) && (IConstantesEnotario.CTE_CERO_INT < resultadoObtenerTelefono.length)) {
            contextoObtenerTelefono = resultadoObtenerTelefono[IConstantesEnotario.CTE_CERO_INT];
            prefijo = contextoObtenerTelefono.getString("CG057C250");
            numeroTlf = contextoObtenerTelefono.getString("CG057C260");
            if ((null != prefijo) && (null != numeroTlf)) {
                prefijo = prefijo.trim();
                numeroTlf = numeroTlf.trim();
                telefonoEntidad = prefijo.concat(numeroTlf);
            }
        }
        return telefonoEntidad;
    }

    /**
     * 	Metodo que devuelve la lista de valores de un parametro.
     *
     * @param agrupacionParam
     * @param nombreParam
     * @return
     */
    public static List<String> obtenerListaValoresParametro(String agrupacionParam, String nombreParam) {
        List<String> listaValoresParam = new ArrayList<String>(IConstantesEnotario.CTE_TAM_INICIAL_ARRAYS);
        IDatosEntradaTx datosEntradaConsultaParametrosSrv = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), IConstantesEnotario.CTE_CC_CONSULTA_PARAMETROS, IConstantesEnotario.CTE_CO_CONSULTA_PARAMETROS);
        datosEntradaConsultaParametrosSrv.addCampo(IConstantesEnotario.CTE_NOMBRE_PARAMETRO_AGRUPACION, agrupacionParam);
        datosEntradaConsultaParametrosSrv.addCampo(IConstantesEnotario.CTE_NOMBRE_PARAMETRO_PARAM, nombreParam);
        // Invocar al srv ANPM_180
        IContexto[] salidaSrvParamNombre = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaParametrosSrv);
        // Carga la lista de valores del parametro.
        if (!UtilidadesEnotario.isBlankOrNull(salidaSrvParamNombre)) {
            for (int i = 0; i < salidaSrvParamNombre.length; i++) {
                if (null != salidaSrvParamNombre[0].getString(IConstantesEnotario.CTE_VALOR_PARAMETRO)) {
                    listaValoresParam.add(salidaSrvParamNombre[0].getString(IConstantesEnotario.CTE_VALOR_PARAMETRO));
                }
            }
        }
        return listaValoresParam;
    }

    /**
     * Metodo que devuelve el valor de un parametro de la tabla AN82TB01
     *
     * @param agrupacionParam
     * @param nombreParam
     * @return
     */
    public static String obtenerValorParametroUnico(String agrupacionParam, String nombreParam) {
        String valoreParam = new String("");
        IDatosEntradaTx datosEntradaConsultaParametrosSrv = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), IConstantesEnotario.CTE_CC_CONSULTA_PARAMETROS, IConstantesEnotario.CTE_CO_CONSULTA_PARAMETROS);
        datosEntradaConsultaParametrosSrv.addCampo(IConstantesEnotario.CTE_NOMBRE_PARAMETRO_AGRUPACION, agrupacionParam);
        datosEntradaConsultaParametrosSrv.addCampo(IConstantesEnotario.CTE_NOMBRE_PARAMETRO_PARAM, nombreParam);
        // Invocar al srv ANPM_180
        IContexto[] salidaSrvParamNombre = ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaConsultaParametrosSrv);
        // Carga la lista de valores del parametro.
        if (!UtilidadesEnotario.isBlankOrNull(salidaSrvParamNombre)) {
            valoreParam = salidaSrvParamNombre[0].getString(IConstantesEnotario.CTE_VALOR_PARAMETRO);
        }
        return valoreParam;
    }

    /**
     * 	Metodo que envía a Ancert una cancelación de una solicitud de enotario y solicita una autorizacion.
     *
     * @param datosSolicitud
     */
    public static void solicitaCancelacionyAutorizacion(DatosSolicitudC datosSolicitud) {
        // Comprobamos si existen datos generales de enotario para esa solicitud
        // Si existen enviamos a Ancert una cancelación de la solicitud por enotario.
        GestionDatosGeneralesEnotario gdge = new GestionDatosGeneralesEnotario();
        DatosgeneralesC datosGenerales = gdge.obtenerDatosGeneralesPorOficinaNumSolVersion(datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud(), datosSolicitud.getDatosSolicitudKey().getNumSolicitud(), datosSolicitud.getDatosSolicitudKey().getVersionSolicitud());
        if (null != datosGenerales) {
            // Invoca el servicio ANPM_468 de Chequeo/Cancelacion.
            final IDatosEntradaTx datosEntradaCancelacionEnotario = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), IConstantesEnotario.CTE_CC_ANPM, IConstantesEnotario.ID_COOP_CHEQUEO_CANCELACION);
            datosEntradaCancelacionEnotario.addCampo(IConstantesEnotario.CTE_CAMPO_ENTRADA_CANCELACION_OPERACION, IConstantesEnotario.CTE_OP_E_NOTARIO_CANCEL);
            datosEntradaCancelacionEnotario.addCampo(IConstantesEnotario.CTE_CAMPO_ENTRADA_CANCELACION_OFICINA_SOLICITUD, datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud());
            datosEntradaCancelacionEnotario.addCampo(IConstantesEnotario.CTE_CAMPO_ENTRADA_CANCELACION_NUMERO_SOLICITUD, datosSolicitud.getDatosSolicitudKey().getNumSolicitud());
            datosEntradaCancelacionEnotario.addCampo(IConstantesEnotario.CTE_CAMPO_ENTRADA_CANCELACION_VERSION_SOLICITUD, datosSolicitud.getDatosSolicitudKey().getVersionSolicitud());
            datosEntradaCancelacionEnotario.addCampo(IConstantesEnotario.CTE_CAMPO_ENTRADA_CANCELACION_NUC_EXPEDIENTE, datosSolicitud.getDatosSolicitudKey().getNucExpediente());
            ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaCancelacionEnotario);
        }
    // Solicitud de autorizacion para la solicitud.
    // final IDatosEntradaTx datosEntradaAltaAutorizacion = ServicioNegocio.getPrograma(
    // ServicioNegocio.getContexto(),
    // IConstantesEnotario.CTE_CC_ANPM,
    // IConstantesEnotario.ID_COOP_ALTA_AUTORIZACION);
    // 
    // datosEntradaAltaAutorizacion.addCampo(
    // IConstantesEnotario.CTE_OFICINA_SOLICITUD, datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud());
    // datosEntradaAltaAutorizacion.addCampo(
    // IConstantesEnotario.CTE_NUMERO_EXPEDIENTE, datosSolicitud.getDatosSolicitudKey().getNucExpediente());
    // 
    // ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosEntradaAltaAutorizacion);
    }

    /**
     * Metodo que llama al servicio ANPM_426 para volcar los datos en PMOS.
     *
     * @param datosSolicitud
     */
    public static void volcadoDatosPmos(DatosSolicitudC datosSolicitud) {
        // llamada al servicio ANPM_426 (VolcadoDatosPmosSrv)
        IDatosEntradaTx datosInvocacion = ServicioNegocio.getPrograma(ServicioNegocio.getContexto(), IConstantesEnotario.CTE_CC_ANPM, IConstantesEnotario.CTE_COP_VOLCADO_PMOS);
        datosInvocacion.addCampo("OFICINA_SOLICITUD", datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud());
        datosInvocacion.addCampo("NUMERO_SOLICITUD", datosSolicitud.getDatosSolicitudKey().getNumSolicitud());
        datosInvocacion.addCampo("VERSION_SOLICITUD", datosSolicitud.getDatosSolicitudKey().getVersionSolicitud());
        datosInvocacion.addCampo("NUC_EXPEDIENTE", datosSolicitud.getDatosSolicitudKey().getNucExpediente());
        datosInvocacion.addCampo("FECHA_FORMALIZACION", DateUtils.cambiaFormatoFecha(datosSolicitud.getFechaFormalizacion().toString(), DateUtils.FORMATO_FECHA_AMERICANO, DateUtils.FORMATO_FECHA_CORTO));
        datosInvocacion.addCampo("ENVIO_CORRESPONDENCIA", BigDecimal.ZERO);
        ServicioNegocio.invocarServicio(ServicioNegocio.getContexto(), datosInvocacion);
    }

    private static final String PRODUJO_ERROR_INTENTELO_DESPUES_O_LLAME_981_17963_92773541 = "PRODUJO_ERROR_INTENTELO_DESPUES_O_LLAME_981_17963_92773541";

    private static final String _SE_ESPERA_1_22830144 = "_SE_ESPERA_1_22830144";

    private static final String SOLICITUD_PERMITE_OPERACION_LLAME_981_179634_950453058 = "SOLICITUD_PERMITE_OPERACION_LLAME_981_179634_950453058";

    private static final String _SE_ESPERA_2_22830175 = "_SE_ESPERA_2_22830175";

    private static final String PRODUCIDO_ERROR_FORMALIZAR_LLAME_981_179634_316076626 = "PRODUCIDO_ERROR_FORMALIZAR_LLAME_981_179634_316076626";

    private static final String ERROR_EMITIR_CONTRATO_LLAME_981_179634_1941208320 = "ERROR_EMITIR_CONTRATO_LLAME_981_179634_1941208320";

    private static final String N_MERO_SOLICITUD_EXISTE_INSERT_TABLA_LOG_AN39TB_149035371 = "N_MERO_SOLICITUD_EXISTE_INSERT_TABLA_LOG_AN39TB_149035371";

    private static final String C_DIGO_OFICINA_EXISTE_INSERT_TABLA_LOG_AN39TB01_1203408472 = "C_DIGO_OFICINA_EXISTE_INSERT_TABLA_LOG_AN39TB01_1203408472";

    private static final String OBJETO_DATOSGENERALESC_EXISTE_INSERT_TABLA_LOG_1812906911 = "OBJETO_DATOSGENERALESC_EXISTE_INSERT_TABLA_LOG_1812906911";
}
