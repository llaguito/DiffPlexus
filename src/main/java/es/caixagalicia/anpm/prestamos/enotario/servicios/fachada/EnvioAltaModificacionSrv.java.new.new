/**
 */
package es.caixagalicia.anpm.prestamos.enotario.servicios.fachada;

import java.math.BigDecimal;
import java.util.List;
import org.apache.commons.lang.StringUtils;
import es.caixagalicia.anpm.prestamos.enotario.persistencia.comisionesgastos.ComisionesgastosC;
import es.caixagalicia.anpm.prestamos.enotario.persistencia.datosgenerales.DatosgeneralesC;
import es.caixagalicia.anpm.prestamos.enotario.persistencia.titularesavalistas.TitularesavalistasC;
import es.caixagalicia.anpm.prestamos.enotario.servicios.aplicacion.GestionBiztalkAncertAlta;
import es.caixagalicia.anpm.prestamos.enotario.servicios.aplicacion.GestionDatosGeneralesEnotario;
import es.caixagalicia.anpm.prestamos.enotario.servicios.aplicacion.GestionEnvioMensajesEnotario;
import es.caixagalicia.anpm.prestamos.enotario.servicios.fachada.contextos.ContextoEnvMsjEnotarioAltaModif;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.IConstantesEnotario;
import es.caixagalicia.anpm.prestamos.enotario.utilidades.UtilidadesEnotario;
import es.caixagalicia.anpm.prestamos.enotario.ws.altaModificacion.Response_type0;
import es.caixagalicia.anpm.prestamos.tramitacion.persistencia.solicitud.DatosSolicitudC;
import es.caixagalicia.anpm.prestamos.tramitacion.servicios.aplicacion.GestionDatosSolicitud;
import es.caixagalicia.ifrt.core.DiarioElectronico;
import es.caixagalicia.ifrt.core.IContexto;
import es.caixagalicia.ifrt.core.IContextoEjecucion;
import es.caixagalicia.ifrt.core.IDatosEntradaTx;
import es.caixagalicia.ifrt.core.ServicioNegocio;
import es.caixagalicia.ifrt.log.LogHelper;
import es.caixagalicia.ifrt.mensajes.Mensaje;

/**
 * 	Servicio que envia un alta o una modificacion a Ancert Biztalk
 *
 * @author V361732
 *
 * 	COP: ANPM_187
 * 	 TX: ANM3
 * 	CTX: ANPMN087
 */
public class EnvioAltaModificacionSrv extends ServicioNegocio {

    private static final LogHelper LOGGER = LogHelper.getLog(EnvioAltaModificacionSrv.class);

    /* ENTRADA */
    private static final String CTE_CAMPO_ENTRADA_CODIGO_OPERACION = "OPERACION";

    private static final String CTE_CAMPO_ENTRADA_OFICINA_SOLICITUD = "OFICINA_SOLICITUD";

    private static final String CTE_CAMPO_ENTRADA_NUMERO_SOLICITUD = "NUMERO_SOLICITUD";

    private static final String CTE_CAMPO_ENTRADA_VERSION_SOLICITUD = "VERSION_SOLICITUD";

    private static final String CTE_CAMPO_ENTRADA_NUC_EXPEDIENTE = "NUC_EXPEDIENTE";

    private static final String CTE_CAMPO_ENTRADA_CONTRATO_IBAN = "CONTRATO_IBAN";

    public static final String CTE_ESPACIO = " ";

    /*CONSTANTES PARA LA INVOCACION A DistribuidorAltaModifSrv */
    private static final String CTE_ENTRADA_DISTR_CODIGO_APLICACION = "CODIGO_APLICACION";

    private static final String CTE_ENTRADA_DISTR_CODIGO_OPERACION_E_NOTARIO = "CODIGO_OPERACION_E_NOTARIO";

    private static final String CTE_ENTRADA_DISTR_NODO_RE_EMISOR = "NODO_RE_EMISOR";

    private static final String CTE_ENTRADA_DISTR_NODO_ORIGINAL = "NODO_ORIGINAL";

    private static final String CTE_ENTRADA_DISTR_TIPO_OPERACION = "TIPO_OPERACION";

    private static final String CTE_ENTRADA_DISTR_CODIGO_PAIS = "CODIGO_PAIS";

    private static final String CTE_ENTRADA_DISTR_CODIGO_ENTIDAD = "CODIGO_ENTIDAD";

    private static final String CTE_ENTRADA_DISTR_TIPO_PRESTAMO = "TIPO_PRESTAMO";

    private static final String CTE_ENTRADA_DISTR_CONTRATO_PRESTAMO = "CONTRATO_PRESTAMO";

    private static final String CTE_ENTRADA_DISTR_DESCRIPCION = "DESCRIPCION";

    private static final String CTE_ENTRADA_DISTR_CODIGO_RETORNO = "CODIGO_RETORNO";

    private static final String CTE_ENTRADA_DISTR_CODIGO_ERROR = "CODIGO_ERROR";

    private static final String CTE_ENTRADA_DISTR_TEXTO_ERROR = "TEXTO_ERROR";

    private static final String CTE_CTX_CODIGO_DE_RETORNO10 = "ANPMN087560";

    private static final String CTE_CTX_CODIGO_DE_ERROR10 = "ANPMN087565";

    private static final String CTE_CTX_TEXTO_DE_ERROR10 = "ANPMN087570";

    /**
     * Servicio de negocio Metrópolis (ANPM_187) que recibe como parámetros de
     * entrada: código de operación, oficina, número, versión y NUC.
     *
     * - Se leen los datos de las tablas de e-Notario (CAG.AN39TB01 .. CAG.AN42TB01)
     * y se rellena el contexto ANPMN087, en función de la operación de entrada.
     *
     * - Se inserta un registro en la tabla CAG.AN39TB01.
     *
     * - Se actualiza el contador de envíos (AN400080) en la tabla CAG.AN40TB01.
     *
     * @param datosEntrada
     *        datos de entrada.
     * @param contexto
     *        contexto de ejecución.
     * @return array de contextos con el contexto correspondiente.
     */
    @Override
    public IContexto[] ejecutar(IContextoEjecucion contextoEjecucion, IDatosEntradaTx datosEntrada) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("INICIO SNANPM187: Envío de mensajes a E-notario(Alta/Modificación).");
        }
        contextoEjecucion.setDiarioElectronico(new DiarioElectronico(DiarioElectronico.TIPO_ACTUALIZA));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Obtenemos los parametros de entrada");
        }
        String codigoOperacion = datosEntrada.getString(CTE_CAMPO_ENTRADA_CODIGO_OPERACION);
        /*aquí vamos a recibir el código operación "previo" al que se le va a enviar
		 * a Ancert, es decir, el código de operación que estamos obteniendo es el PM531E_070,
		 * con el que calcularemos el PMNOT020, que enviaremos tambien al SN DistribuidorAltaModifDatosSrv.
		 * 
		 * En la operación de envío alta/modif., el código de operación E-Notario, PMNOT020, 
		 * se calcula a partir del código de operación PM531E_070 de esta forma:
		 * 
		 * codigoOperacion (PM531E_070) | codigoOperacionEnotario (PMNOT020) 
		 * -----------------------------------------------------------------
		 *       '01'					|	'20'
		 *       '02'					| 	'22'
		 *       '04'					|	'24'
		 *       otro caso				|	PM531E_070
		 *       
		 *  */
        BigDecimal oficinaSolicitud = datosEntrada.getDecimal(CTE_CAMPO_ENTRADA_OFICINA_SOLICITUD);
        BigDecimal numeroSolicitud = datosEntrada.getDecimal(CTE_CAMPO_ENTRADA_NUMERO_SOLICITUD);
        BigDecimal versionSolicitud = datosEntrada.getDecimal(CTE_CAMPO_ENTRADA_VERSION_SOLICITUD);
        BigDecimal nucExpediente = datosEntrada.getDecimal(CTE_CAMPO_ENTRADA_NUC_EXPEDIENTE);
        String contratoIban = datosEntrada.getString(CTE_CAMPO_ENTRADA_CONTRATO_IBAN);
        String codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0;
        String codigoError = null;
        String textoError = null;
        IContexto[] salida = new IContexto[IConstantesEnotario.CTE_TAM_INICIAL_ARRAYS];
        IContexto contextoSalida = ContextoEnvMsjEnotarioAltaModif.obtenerCtxVacio();
        GestionEnvioMensajesEnotario gme = new GestionEnvioMensajesEnotario();
        GestionDatosGeneralesEnotario gdge = new GestionDatosGeneralesEnotario();
        GestionDatosSolicitud gds = new GestionDatosSolicitud();
        DatosSolicitudC datosSolicitud = gds.obtenerDatosSolicitud(oficinaSolicitud, numeroSolicitud, versionSolicitud, nucExpediente);
        DatosgeneralesC datosGenerales = gdge.obtenerDatosGeneralesPorOficinaNumSolVersion(oficinaSolicitud, numeroSolicitud, versionSolicitud);
        /*Validaciones previas:*/
        if ((null != datosSolicitud) && (null != datosGenerales)) {
            if ((!UtilidadesEnotario.isBlankOrNull(contratoIban)) && (!UtilidadesEnotario.contratoIbanEsValido(contratoIban, datosSolicitud))) {
                /*El campo CONTRATO_IBAN es opcional, por lo tanto si no va informado 
			 * continúa la ejecución.*/
                codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_NK;
                codigoError = IConstantesEnotario.CTE_CODIGO_ERROR_CONTRATO_NO_VALIDO;
                textoError = IConstantesEnotario.CTE_TEXTO_ERROR_CONTRATO_NO_VALIDO;
            } else if ((IConstantesEnotario.CTE_OP_E_NOTARIO_ALTA_01.equals(codigoOperacion)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_02.equals(codigoOperacion)) || (IConstantesEnotario.CTE_OP_E_NOTARIO_MODIF_CON_AVISO_04.equals(codigoOperacion))) {
            /*
				estadoDatosGenerales = datosGenerales.getEstado();
				
				if (!IConstantesEnotario.CTE_DATOS_GEN_ESTADO_ENVIADO.equals(estadoDatosGenerales))
				{
					codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_NK;
					// ERROR: El estado del prestamo ha de ser 1.
					codigoError = IConstantesEnotario.CTE_CODIGO_ERROR_0;
					textoError = IConstantesEnotario.CTE_TEXTO_ESTADO_PRESTAMO_ENVIADO_01;
				}
				*/
            } else {
                // operación no válida.
                codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_NK;
                codigoError = IConstantesEnotario.CTE_CODIGO_ERROR_OP_NO_VALIDA;
                textoError = new Mensaje(ServicioNegocio.getContexto(), OPERACI_N_1662200596).toString().concat(codigoOperacion).concat(new Mensaje(ServicioNegocio.getContexto(), V_LIDA_399188887).toString());
            }
        } else {
            codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_NK;
            // ERROR: "No existe el prestamo con NUC: nuc"
            codigoError = IConstantesEnotario.CTE_CODIGO_ERROR_100;
            // $OP-LBL-NL-2$ $OP-LBL-NL-2$
            textoError = new Mensaje(ServicioNegocio.getContexto(), EXISTE_PR_STAMO_OFICINA_1618362050).toString().concat(oficinaSolicitud.toString()).concat(new Mensaje(ServicioNegocio.getContexto(), _NUM_SOL_1554608360).toString()).concat(numeroSolicitud.toString().concat(new Mensaje(ServicioNegocio.getContexto(), _VERSION_SOL_2071640800).toString()).concat(versionSolicitud.toString()));
        }
        if ((IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0.equals(codigoRetorno)) || (IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0000.equals(codigoRetorno))) {
            /*Se realiza la operación EnvioAltaModificacion, para ello se realizan 
			 * las siguientes tareas:
			 *  - Se envía la petición a Ancert.
			 *  - Se invoca el servicio de negocio DistrAltaModifDatosSrv.
			 *  - Se rellena el contexto de salida con:
			 *    * El objeto datosGenerales.
			 *    * El objeto datosSolicitud.
			 *    * La lista de comisiones.
			 *    * La lista de titulares.
			 *    * La lista de avalistas.
			 *    * ...*/
            contextoSalida = opEnvioAltaModificacion(codigoOperacion, datosGenerales, datosSolicitud, contextoSalida);
            /*hay que tener en cuenta que pudo fallar la operación, en ese caso se informa
			 * el campo de salida codigoError.*/
            if (!IConstantesEnotario.CTE_OP_E_NOTARIO_CHEQUEO_SISTEMA.equals(codigoOperacion)) {
                if (null != contextoSalida) {
                    codigoRetorno = contextoSalida.getString(CTE_CTX_CODIGO_DE_RETORNO10);
                    codigoError = contextoSalida.getString(CTE_CTX_CODIGO_DE_ERROR10);
                    textoError = contextoSalida.getString(CTE_CTX_TEXTO_DE_ERROR10);
                // estos campos se obtienen del response de Ancert.
                }
                /*compruebo el codigoRetorno sacado del contexto de salida por si
				 * hubo algun fallo a la hora de realizar la petición a Ancert*/
                if ((IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0.equals(codigoRetorno)) || (IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0000.equals(codigoRetorno))) {
                    /*
					 * Se inserta un registro en la tabla CAG.AN39TB01. Se actualiza el
					 * contador de envíos (AN400080) en la tabla CAG.AN40TB01.
					 */
                    int contadorFilas = gme.contarFilasComunicacionesEnotario(oficinaSolicitud, numeroSolicitud, datosGenerales.getDivision(), datosGenerales.getSubdivision());
                    contadorFilas++;
                    /*gme.insertarComunicacionesEnotario(datosSolicitud,
							oficinaSolicitud, numeroSolicitud, contadorFilas, contextoSalida);*/
                    gme.actualizarContadorFilasDatosGenerales(oficinaSolicitud, numeroSolicitud, datosGenerales.getDivision(), datosGenerales.getSubdivision(), contadorFilas);
                }
            // else //fallo en ancert, pero ya está informado codigoError.
            }
        }
        /*si despues de las validaciones previas y despues de realizar la operación hubo fallo: 
		 * (no vale hacer un else porque pudo cambiar el resultado de la condicion dentro de la rama if)*/
        if ((!IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0.equals(codigoRetorno)) && (!IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0000.equals(codigoRetorno))) {
            contextoSalida = ContextoEnvMsjEnotarioAltaModif.rellenarContextoError(codigoRetorno, codigoError, textoError, contextoSalida);
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("FIN DEL SN ANPM_187: Se ha ejecutado correctamente.");
        }
        salida[0] = contextoSalida;
        return salida;
    }

    private static IContexto invocarDistrAltaModif(Response_type0 responseAncert) {
        String codigoOperacion = null;
        IContexto contextoDistrAltaModif = null;
        IContexto[] resultadoDistrAltaModif = null;
        IContextoEjecucion contextoEjecucion = ServicioNegocio.getContexto();
        /*
	Reglas de transformación de xmls:
	 - Xml alta/modif ClienteWS->Biztalk: /ANPMB001/trunk/src/CaixaGalicia.ANPMB001.Schemas.Metropolis/NOOP10Request_Alta.xsd
	 - Xml alta/modif Biztalk->Ancert: /ANPMB001/trunk/src/CaixaGalicia.ANPMB001.Schemas.Ancert/NOOP10.xml
	 - Xml alta/modif Biztalk->Ancert (def. tipos): /ANPMB001/trunk/src/CaixaGalicia.ANPMB001.Schemas.Ancert/NOOP10ns.xsd

	 * */
        IDatosEntradaTx datosEntradaDistrAltaModif = getPrograma(contextoEjecucion, IConstantesEnotario.CTE_CC_DISTR_ALTA_MODIF, IConstantesEnotario.CTE_CO_DISTR_ALTA_MODIF);
        if (null != responseAncert.getOperacion()) {
            codigoOperacion = responseAncert.getOperacion().getCodigoOperacion();
            if (IConstantesEnotario.CTE_UNO_INT == codigoOperacion.length()) {
                codigoOperacion = UtilidadesEnotario.rellenarCerosDelante(codigoOperacion, 1);
            // para que "2" pase a ser "02", por ejemplo.
            }
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_CODIGO_APLICACION, responseAncert.getOperacion().getCodigoAplicacion());
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_CODIGO_OPERACION_E_NOTARIO, codigoOperacion);
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_NODO_RE_EMISOR, responseAncert.getOperacion().getNodoReemisor());
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_NODO_ORIGINAL, responseAncert.getOperacion().getNodoOriginal());
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_TIPO_OPERACION, responseAncert.getOperacion().getTipoOperacion());
        }
        if (null != responseAncert.getCabeceraAncert()) {
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_CODIGO_PAIS, responseAncert.getCabeceraAncert().getPais());
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_CODIGO_ENTIDAD, responseAncert.getCabeceraAncert().getEntidad());
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_TIPO_PRESTAMO, responseAncert.getCabeceraAncert().getTipoPrestamo());
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_CONTRATO_PRESTAMO, responseAncert.getCabeceraAncert().getContratoPrestamo());
        }
        if (!StringUtils.isBlank(responseAncert.getTextoError())) {
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_DESCRIPCION, responseAncert.getTextoError());
        }
        datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_CODIGO_RETORNO, responseAncert.getCodigoRetorno());
        if (!StringUtils.isBlank(responseAncert.getCodigoError())) {
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_CODIGO_ERROR, responseAncert.getCodigoError());
        }
        if (!StringUtils.isBlank(responseAncert.getTextoError())) {
            datosEntradaDistrAltaModif.addCampo(CTE_ENTRADA_DISTR_TEXTO_ERROR, responseAncert.getTextoError());
        }
        resultadoDistrAltaModif = ServicioNegocio.invocarServicio(contextoEjecucion, datosEntradaDistrAltaModif);
        if ((null != resultadoDistrAltaModif) && (IConstantesEnotario.CTE_CERO_INT < resultadoDistrAltaModif.length)) {
            contextoDistrAltaModif = resultadoDistrAltaModif[0];
        }
        return contextoDistrAltaModif;
    }

    /**
     *		En este método se realizan las siguientes tareas:
     *		   - Se envía la petición a Ancert.
     *		   - Se invoca el servicio de negocio DistrAltaModifDatosSrv.
     *		   - Se rellena el contexto de salida con datos de:
     *		     - El objeto datosGenerales.
     *		     - El objeto datosSolicitud.
     *		     - La lista de comisiones.
     *		     - La lista de titulares.
     *		     - La lista de avalistas.
     *		     - ...
     *		   - En el caso de que haya un error se rellena el mismo
     *		   contexto pero sólo éstos campos:
     *		     - codigoRetorno.
     *		     - codigoError.
     *		     - textoError.
     * @param codigoOperacion
     * @param datosGenerales
     * @param datosSolicitud
     * @param contextoEjecucion
     * @return Array de contextos con el contexto de salida.
     */
    private static IContexto opEnvioAltaModificacion(String codigoOperacion, DatosgeneralesC datosGenerales, DatosSolicitudC datosSolicitud, IContexto contextoSalida) {
        List<TitularesavalistasC> titulares = null;
        List<TitularesavalistasC> avalistas = null;
        List<ComisionesgastosC> comisiones = null;
        BigDecimal division = null;
        BigDecimal subdivision = null;
        GestionEnvioMensajesEnotario gme = new GestionEnvioMensajesEnotario();
        String codigoOperacionEnotario = null;
        BigDecimal oficinaSolicitud = datosSolicitud.getDatosSolicitudKey().getOficinaSolicitud();
        BigDecimal numeroSolicitud = datosSolicitud.getDatosSolicitudKey().getNumSolicitud();
        BigDecimal nucExpediente = datosSolicitud.getDatosSolicitudKey().getNucExpediente();
        String contratoPrestamo = null;
        Response_type0 responseAncert = new Response_type0();
        String literalDivisa = null;
        String telefonoEntidad = null;
        // OK
        String codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_OK_0;
        String codigoError = null;
        String textoError = null;
        String codigoOficina = null;
        division = datosSolicitud.getDivision();
        subdivision = datosSolicitud.getSubDivision();
        codigoOficina = datosGenerales.getId().getOficinaSolicitud().toString();
        titulares = gme.getClientesTitulares(oficinaSolicitud, numeroSolicitud, division, subdivision);
        avalistas = gme.getClientesAvalistas(oficinaSolicitud, numeroSolicitud, division, subdivision);
        comisiones = gme.getComisionesByNuc(nucExpediente);
        codigoOperacionEnotario = UtilidadesEnotario.obtenerCodigoOperacionEnotario(codigoOperacion);
        if (IConstantesEnotario.CTE_OP_E_NOTARIO_CHEQUEO_SISTEMA.equals(codigoOperacionEnotario)) {
            // CCC dummy.
            contratoPrestamo = new String();
            contratoPrestamo = contratoPrestamo.concat(datosSolicitud.getEntidad());
            contratoPrestamo = contratoPrestamo.concat("9999");
            contratoPrestamo = contratoPrestamo.concat("99");
            contratoPrestamo = contratoPrestamo.concat("999");
            contratoPrestamo = contratoPrestamo.concat("999999");
            contratoPrestamo = contratoPrestamo.concat("9");
        } else {
            contratoPrestamo = UtilidadesEnotario.getContratoPrestamo(datosSolicitud);
        }
        literalDivisa = UtilidadesEnotario.obtenerLiteralDivisa(datosGenerales.getCodigoDivisa());
        telefonoEntidad = UtilidadesEnotario.obtenerTlfEntidad(codigoOficina);
        try {
            responseAncert = GestionBiztalkAncertAlta.respuestaAncert(codigoOperacionEnotario, contratoPrestamo, datosGenerales, datosSolicitud, titulares, avalistas, comisiones, literalDivisa, telefonoEntidad);
        } catch (org.apache.axis2.AxisFault e) {
            e.printStackTrace();
            codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_NK;
            codigoError = IConstantesEnotario.CTE_CODIGO_ERROR_AXIS_FAULT;
            textoError = IConstantesEnotario.CTE_TEXTO_ERROR_AXIS_FAULT;
        // aunque pase por aquí la ejecución sigue.
        } catch (java.rmi.RemoteException e) {
            e.printStackTrace();
            codigoRetorno = IConstantesEnotario.CTE_CODIGO_RETORNO_NK;
            codigoError = IConstantesEnotario.CTE_CODIGO_ERROR_RMI_REMOTE_EXCEPTION;
            textoError = IConstantesEnotario.CTE_TEXTO_ERROR_RMI_REMOTE_EXCEPTION;
        // aunque pase por aquí la ejecución sigue.
        }
        if ((null != responseAncert) && (UtilidadesEnotario.isBlankOrNull(codigoError))) {
            /*
	ME FALTAN ESTOS DOS:
	private static final String CTE_ENTRADA_DISTR_CONTRATO_IBAN = "CONTRATO_IBAN";
	private static final String CTE_ENTRADA_DISTR_CODIGO_BIC = "CODIGO_BIC";
	DE DONDE LOS SACO? NO CONSTAN COMO CAMPOS DE ENTRADA DEL SERVICIO DE ENVIO.
 * */
            invocarDistrAltaModif(responseAncert);
            /*hago algo con los campos de salida de este contexto??? */
            contextoSalida = ContextoEnvMsjEnotarioAltaModif.rellenarContextoEnvioEnotarioAltaModif(responseAncert, titulares, avalistas, datosGenerales, literalDivisa, telefonoEntidad, comisiones);
        } else {
            contextoSalida = ContextoEnvMsjEnotarioAltaModif.rellenarContextoError(codigoRetorno, codigoError, textoError, contextoSalida);
        }
        return contextoSalida;
    }

    private static final String _VERSION_SOL_2071640800 = "_VERSION_SOL_2071640800";

    private static final String OPERACI_N_1662200596 = "OPERACI_N_1662200596";

    private static final String _NUM_SOL_1554608360 = "_NUM_SOL_1554608360";

    private static final String V_LIDA_399188887 = "V_LIDA_399188887";

    private static final String EXISTE_PR_STAMO_OFICINA_1618362050 = "EXISTE_PR_STAMO_OFICINA_1618362050";
}
